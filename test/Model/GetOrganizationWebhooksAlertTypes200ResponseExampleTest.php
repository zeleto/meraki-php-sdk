<?php
/**
 * GetOrganizationWebhooksAlertTypes200ResponseExampleTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Meraki\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * GetOrganizationWebhooksAlertTypes200ResponseExampleTest Class Doc Comment
 *
 * @category    Class
 * @description Example alert type
 * @package     Meraki
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class GetOrganizationWebhooksAlertTypes200ResponseExampleTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "GetOrganizationWebhooksAlertTypes200ResponseExample"
     */
    public function testGetOrganizationWebhooksAlertTypes200ResponseExample()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "version"
     */
    public function testPropertyVersion()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "shared_secret"
     */
    public function testPropertySharedSecret()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "sent_at"
     */
    public function testPropertySentAt()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "alert_id"
     */
    public function testPropertyAlertId()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "alert_level"
     */
    public function testPropertyAlertLevel()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "occurred_at"
     */
    public function testPropertyOccurredAt()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "alert_data"
     */
    public function testPropertyAlertData()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "organization_id"
     */
    public function testPropertyOrganizationId()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "organization_name"
     */
    public function testPropertyOrganizationName()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "organization_url"
     */
    public function testPropertyOrganizationUrl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "device_serial"
     */
    public function testPropertyDeviceSerial()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "device_mac"
     */
    public function testPropertyDeviceMac()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "device_name"
     */
    public function testPropertyDeviceName()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "device_url"
     */
    public function testPropertyDeviceUrl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "device_tags"
     */
    public function testPropertyDeviceTags()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "device_model"
     */
    public function testPropertyDeviceModel()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "network_id"
     */
    public function testPropertyNetworkId()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "network_name"
     */
    public function testPropertyNetworkName()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "network_url"
     */
    public function testPropertyNetworkUrl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enrollment_string"
     */
    public function testPropertyEnrollmentString()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "notes"
     */
    public function testPropertyNotes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "product_types"
     */
    public function testPropertyProductTypes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "encrypted_id"
     */
    public function testPropertyEncryptedId()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
