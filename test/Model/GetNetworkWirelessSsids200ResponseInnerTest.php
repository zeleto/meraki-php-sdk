<?php
/**
 * GetNetworkWirelessSsids200ResponseInnerTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Meraki\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * GetNetworkWirelessSsids200ResponseInnerTest Class Doc Comment
 *
 * @category    Class
 * @description GetNetworkWirelessSsids200ResponseInner
 * @package     Meraki
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class GetNetworkWirelessSsids200ResponseInnerTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "GetNetworkWirelessSsids200ResponseInner"
     */
    public function testGetNetworkWirelessSsids200ResponseInner()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "number"
     */
    public function testPropertyNumber()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "name"
     */
    public function testPropertyName()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enabled"
     */
    public function testPropertyEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "splash_page"
     */
    public function testPropertySplashPage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "ssid_admin_accessible"
     */
    public function testPropertySsidAdminAccessible()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "local_auth"
     */
    public function testPropertyLocalAuth()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "auth_mode"
     */
    public function testPropertyAuthMode()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "encryption_mode"
     */
    public function testPropertyEncryptionMode()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "wpa_encryption_mode"
     */
    public function testPropertyWpaEncryptionMode()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "radius_servers"
     */
    public function testPropertyRadiusServers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "radius_accounting_servers"
     */
    public function testPropertyRadiusAccountingServers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "radius_accounting_enabled"
     */
    public function testPropertyRadiusAccountingEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "radius_enabled"
     */
    public function testPropertyRadiusEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "radius_attribute_for_group_policies"
     */
    public function testPropertyRadiusAttributeForGroupPolicies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "radius_failover_policy"
     */
    public function testPropertyRadiusFailoverPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "radius_load_balancing_policy"
     */
    public function testPropertyRadiusLoadBalancingPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "ip_assignment_mode"
     */
    public function testPropertyIpAssignmentMode()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "admin_splash_url"
     */
    public function testPropertyAdminSplashUrl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "splash_timeout"
     */
    public function testPropertySplashTimeout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "walled_garden_enabled"
     */
    public function testPropertyWalledGardenEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "walled_garden_ranges"
     */
    public function testPropertyWalledGardenRanges()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "min_bitrate"
     */
    public function testPropertyMinBitrate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "band_selection"
     */
    public function testPropertyBandSelection()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "per_client_bandwidth_limit_up"
     */
    public function testPropertyPerClientBandwidthLimitUp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "per_client_bandwidth_limit_down"
     */
    public function testPropertyPerClientBandwidthLimitDown()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "visible"
     */
    public function testPropertyVisible()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "available_on_all_aps"
     */
    public function testPropertyAvailableOnAllAps()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "availability_tags"
     */
    public function testPropertyAvailabilityTags()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "per_ssid_bandwidth_limit_up"
     */
    public function testPropertyPerSsidBandwidthLimitUp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "per_ssid_bandwidth_limit_down"
     */
    public function testPropertyPerSsidBandwidthLimitDown()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "mandatory_dhcp_enabled"
     */
    public function testPropertyMandatoryDhcpEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
