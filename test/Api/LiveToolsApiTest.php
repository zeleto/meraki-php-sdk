<?php
/**
 * LiveToolsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Meraki\Test\Api;

use \Meraki\Configuration;
use \Meraki\ApiException;
use \Meraki\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * LiveToolsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LiveToolsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for blinkDeviceLeds
     *
     * Blink the LEDs on a device.
     *
     */
    public function testBlinkDeviceLeds()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceLiveToolsArpTable
     *
     * Enqueue a job to perform a ARP table request for the device.
     *
     */
    public function testCreateDeviceLiveToolsArpTable()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceLiveToolsCableTest
     *
     * Enqueue a job to perform a cable test for the device on the specified ports.
     *
     */
    public function testCreateDeviceLiveToolsCableTest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceLiveToolsLedsBlink
     *
     * Enqueue a job to blink LEDs on a device.
     *
     */
    public function testCreateDeviceLiveToolsLedsBlink()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceLiveToolsPing
     *
     * Enqueue a job to ping a target host from the device.
     *
     */
    public function testCreateDeviceLiveToolsPing()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceLiveToolsPingDevice
     *
     * Enqueue a job to check connectivity status to the device.
     *
     */
    public function testCreateDeviceLiveToolsPingDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceLiveToolsThroughputTest
     *
     * Enqueue a job to test a device throughput, the test will run for 10 secs to test throughput.
     *
     */
    public function testCreateDeviceLiveToolsThroughputTest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceLiveToolsWakeOnLan
     *
     * Enqueue a job to send a Wake-on-LAN packet from the device.
     *
     */
    public function testCreateDeviceLiveToolsWakeOnLan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cycleDeviceSwitchPorts
     *
     * Cycle a set of switch ports.
     *
     */
    public function testCycleDeviceSwitchPorts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceLiveToolsArpTable
     *
     * Return an ARP table live tool job..
     *
     */
    public function testGetDeviceLiveToolsArpTable()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceLiveToolsCableTest
     *
     * Return a cable test live tool job..
     *
     */
    public function testGetDeviceLiveToolsCableTest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceLiveToolsLedsBlink
     *
     * Return a blink LEDs job.
     *
     */
    public function testGetDeviceLiveToolsLedsBlink()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceLiveToolsPing
     *
     * Return a ping job.
     *
     */
    public function testGetDeviceLiveToolsPing()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceLiveToolsPingDevice
     *
     * Return a ping device job.
     *
     */
    public function testGetDeviceLiveToolsPingDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceLiveToolsThroughputTest
     *
     * Return a throughput test job.
     *
     */
    public function testGetDeviceLiveToolsThroughputTest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceLiveToolsWakeOnLan
     *
     * Return a Wake-on-LAN job.
     *
     */
    public function testGetDeviceLiveToolsWakeOnLan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for rebootDevice
     *
     * Reboot a device.
     *
     */
    public function testRebootDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
