<?php
/**
 * OrganizationsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

use \Meraki\Configuration;
use \Meraki\ApiException;
use \Meraki\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * OrganizationsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrganizationsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for assignOrganizationLicensesSeats
     *
     * Assign SM seats to a network.
     *
     */
    public function testAssignOrganizationLicensesSeats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for bulkUpdateOrganizationDevicesDetails
     *
     * Updating device details (currently only used for Catalyst devices).
     *
     */
    public function testBulkUpdateOrganizationDevicesDetails()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for claimIntoOrganization
     *
     * Claim a list of devices, licenses, and/or orders into an organization inventory.
     *
     */
    public function testClaimIntoOrganization()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for claimIntoOrganizationInventory
     *
     * Claim a list of devices, licenses, and/or orders into an organization inventory.
     *
     */
    public function testClaimIntoOrganizationInventory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cloneOrganization
     *
     * Create a new organization by cloning the addressed organization.
     *
     */
    public function testCloneOrganization()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for combineOrganizationNetworks
     *
     * Combine multiple networks into a single network.
     *
     */
    public function testCombineOrganizationNetworks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganization
     *
     * Create a new organization.
     *
     */
    public function testCreateOrganization()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationActionBatch
     *
     * Create an action batch.
     *
     */
    public function testCreateOrganizationActionBatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationAdaptivePolicyAcl
     *
     * Creates new adaptive policy ACL.
     *
     */
    public function testCreateOrganizationAdaptivePolicyAcl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationAdaptivePolicyGroup
     *
     * Creates a new adaptive policy group.
     *
     */
    public function testCreateOrganizationAdaptivePolicyGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationAdaptivePolicyPolicy
     *
     * Add an Adaptive Policy.
     *
     */
    public function testCreateOrganizationAdaptivePolicyPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationAdmin
     *
     * Create a new dashboard administrator.
     *
     */
    public function testCreateOrganizationAdmin()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationAlertsProfile
     *
     * Create an organization-wide alert configuration.
     *
     */
    public function testCreateOrganizationAlertsProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationBrandingPolicy
     *
     * Add a new branding policy to an organization.
     *
     */
    public function testCreateOrganizationBrandingPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationConfigTemplate
     *
     * Create a new configuration template.
     *
     */
    public function testCreateOrganizationConfigTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationDevicesControllerMigration
     *
     * Migrate devices to another controller or management mode.
     *
     */
    public function testCreateOrganizationDevicesControllerMigration()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationEarlyAccessFeaturesOptIn
     *
     * Create a new early access feature opt-in for an organization.
     *
     */
    public function testCreateOrganizationEarlyAccessFeaturesOptIn()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationInventoryDevicesSwapsBulk
     *
     * Swap the devices identified by devices.old with a devices.new, then perform the :afterAction on the devices.old..
     *
     */
    public function testCreateOrganizationInventoryDevicesSwapsBulk()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationInventoryOnboardingCloudMonitoringExportEvent
     *
     * Imports event logs related to the onboarding app into elastisearch.
     *
     */
    public function testCreateOrganizationInventoryOnboardingCloudMonitoringExportEvent()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationInventoryOnboardingCloudMonitoringImport
     *
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring..
     *
     */
    public function testCreateOrganizationInventoryOnboardingCloudMonitoringImport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationInventoryOnboardingCloudMonitoringPrepare
     *
     * Initiates or updates an import session.
     *
     */
    public function testCreateOrganizationInventoryOnboardingCloudMonitoringPrepare()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationNetwork
     *
     * Create a network.
     *
     */
    public function testCreateOrganizationNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationPolicyObject
     *
     * Creates a new Policy Object..
     *
     */
    public function testCreateOrganizationPolicyObject()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationPolicyObjectsGroup
     *
     * Creates a new Policy Object Group..
     *
     */
    public function testCreateOrganizationPolicyObjectsGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationSamlIdp
     *
     * Create a SAML IdP for your organization..
     *
     */
    public function testCreateOrganizationSamlIdp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationSamlRole
     *
     * Create a SAML role.
     *
     */
    public function testCreateOrganizationSamlRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationSplashTheme
     *
     * Create a Splash Theme.
     *
     */
    public function testCreateOrganizationSplashTheme()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationSplashThemeAsset
     *
     * Create a Splash Theme Asset.
     *
     */
    public function testCreateOrganizationSplashThemeAsset()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganization
     *
     * Delete an organization.
     *
     */
    public function testDeleteOrganization()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationActionBatch
     *
     * Delete an action batch.
     *
     */
    public function testDeleteOrganizationActionBatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationAdaptivePolicyAcl
     *
     * Deletes the specified adaptive policy ACL.
     *
     */
    public function testDeleteOrganizationAdaptivePolicyAcl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationAdaptivePolicyGroup
     *
     * Deletes the specified adaptive policy group and any associated policies and references.
     *
     */
    public function testDeleteOrganizationAdaptivePolicyGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationAdaptivePolicyPolicy
     *
     * Delete an Adaptive Policy.
     *
     */
    public function testDeleteOrganizationAdaptivePolicyPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationAdmin
     *
     * Revoke all access for a dashboard administrator within this organization.
     *
     */
    public function testDeleteOrganizationAdmin()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationAlertsProfile
     *
     * Removes an organization-wide alert config.
     *
     */
    public function testDeleteOrganizationAlertsProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationBrandingPolicy
     *
     * Delete a branding policy.
     *
     */
    public function testDeleteOrganizationBrandingPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationConfigTemplate
     *
     * Remove a configuration template.
     *
     */
    public function testDeleteOrganizationConfigTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationEarlyAccessFeaturesOptIn
     *
     * Delete an early access feature opt-in.
     *
     */
    public function testDeleteOrganizationEarlyAccessFeaturesOptIn()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationPolicyObject
     *
     * Deletes a Policy Object..
     *
     */
    public function testDeleteOrganizationPolicyObject()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationPolicyObjectsGroup
     *
     * Deletes a Policy Object Group..
     *
     */
    public function testDeleteOrganizationPolicyObjectsGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationSamlIdp
     *
     * Remove a SAML IdP in your organization..
     *
     */
    public function testDeleteOrganizationSamlIdp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationSamlRole
     *
     * Remove a SAML role.
     *
     */
    public function testDeleteOrganizationSamlRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationSplashAsset
     *
     * Delete a Splash Theme Asset.
     *
     */
    public function testDeleteOrganizationSplashAsset()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationSplashTheme
     *
     * Delete a Splash Theme.
     *
     */
    public function testDeleteOrganizationSplashTheme()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for disableOrganizationIntegrationsXdrNetworks
     *
     * Disable XDR on networks.
     *
     */
    public function testDisableOrganizationIntegrationsXdrNetworks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for dismissOrganizationAssuranceAlerts
     *
     * Dismiss health alerts.
     *
     */
    public function testDismissOrganizationAssuranceAlerts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for enableOrganizationIntegrationsXdrNetworks
     *
     * Enable XDR on networks.
     *
     */
    public function testEnableOrganizationIntegrationsXdrNetworks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganization
     *
     * Return an organization.
     *
     */
    public function testGetOrganization()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationActionBatch
     *
     * Return an action batch.
     *
     */
    public function testGetOrganizationActionBatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationActionBatches
     *
     * Return the list of action batches in the organization.
     *
     */
    public function testGetOrganizationActionBatches()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdaptivePolicyAcl
     *
     * Returns the adaptive policy ACL information.
     *
     */
    public function testGetOrganizationAdaptivePolicyAcl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdaptivePolicyAcls
     *
     * List adaptive policy ACLs in a organization.
     *
     */
    public function testGetOrganizationAdaptivePolicyAcls()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdaptivePolicyGroup
     *
     * Returns an adaptive policy group.
     *
     */
    public function testGetOrganizationAdaptivePolicyGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdaptivePolicyGroups
     *
     * List adaptive policy groups in a organization.
     *
     */
    public function testGetOrganizationAdaptivePolicyGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdaptivePolicyOverview
     *
     * Returns adaptive policy aggregate statistics for an organization.
     *
     */
    public function testGetOrganizationAdaptivePolicyOverview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdaptivePolicyPolicies
     *
     * List adaptive policies in an organization.
     *
     */
    public function testGetOrganizationAdaptivePolicyPolicies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdaptivePolicyPolicy
     *
     * Return an adaptive policy.
     *
     */
    public function testGetOrganizationAdaptivePolicyPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdaptivePolicySettings
     *
     * Returns global adaptive policy settings in an organization.
     *
     */
    public function testGetOrganizationAdaptivePolicySettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdmins
     *
     * List the dashboard administrators in this organization.
     *
     */
    public function testGetOrganizationAdmins()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAlertsProfiles
     *
     * List all organization-wide alert configurations.
     *
     */
    public function testGetOrganizationAlertsProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApiRequests
     *
     * List the API requests made by an organization.
     *
     */
    public function testGetOrganizationApiRequests()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApiRequestsOverview
     *
     * Return an aggregated overview of API requests data.
     *
     */
    public function testGetOrganizationApiRequestsOverview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApiRequestsOverviewResponseCodesByInterval
     *
     * Tracks organizations' API requests by response code across a given time period.
     *
     */
    public function testGetOrganizationApiRequestsOverviewResponseCodesByInterval()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAssuranceAlert
     *
     * Return a singular Health Alert by its id.
     *
     */
    public function testGetOrganizationAssuranceAlert()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAssuranceAlerts
     *
     * Return all health alerts for an organization.
     *
     */
    public function testGetOrganizationAssuranceAlerts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAssuranceAlertsOverview
     *
     * Return overview of active health alerts for an organization.
     *
     */
    public function testGetOrganizationAssuranceAlertsOverview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAssuranceAlertsOverviewByNetwork
     *
     * Return a Summary of Alerts grouped by network and severity.
     *
     */
    public function testGetOrganizationAssuranceAlertsOverviewByNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAssuranceAlertsOverviewByType
     *
     * Return a Summary of Alerts grouped by type and severity.
     *
     */
    public function testGetOrganizationAssuranceAlertsOverviewByType()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAssuranceAlertsOverviewHistorical
     *
     * Returns historical health alert overviews.
     *
     */
    public function testGetOrganizationAssuranceAlertsOverviewHistorical()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationBrandingPolicies
     *
     * List the branding policies of an organization.
     *
     */
    public function testGetOrganizationBrandingPolicies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationBrandingPoliciesPriorities
     *
     * Return the branding policy IDs of an organization in priority order.
     *
     */
    public function testGetOrganizationBrandingPoliciesPriorities()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationBrandingPolicy
     *
     * Return a branding policy.
     *
     */
    public function testGetOrganizationBrandingPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationClientsBandwidthUsageHistory
     *
     * Return data usage (in megabits per second) over time for all clients in the given organization within a given time range..
     *
     */
    public function testGetOrganizationClientsBandwidthUsageHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationClientsOverview
     *
     * Return summary information around client data usage (in kb) across the given organization..
     *
     */
    public function testGetOrganizationClientsOverview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationClientsSearch
     *
     * Return the client details in an organization.
     *
     */
    public function testGetOrganizationClientsSearch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationConfigTemplate
     *
     * Return a single configuration template.
     *
     */
    public function testGetOrganizationConfigTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationConfigTemplates
     *
     * List the configuration templates for this organization.
     *
     */
    public function testGetOrganizationConfigTemplates()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationConfigurationChanges
     *
     * View the Change Log for your organization.
     *
     */
    public function testGetOrganizationConfigurationChanges()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevices
     *
     * List the devices in an organization that have been assigned to a network..
     *
     */
    public function testGetOrganizationDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesAvailabilities
     *
     * List the availability information for devices in an organization.
     *
     */
    public function testGetOrganizationDevicesAvailabilities()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesAvailabilitiesChangeHistory
     *
     * List the availability history information for devices in an organization..
     *
     */
    public function testGetOrganizationDevicesAvailabilitiesChangeHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesControllerMigrations
     *
     * Retrieve device migration statuses in an organization.
     *
     */
    public function testGetOrganizationDevicesControllerMigrations()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesOverviewByModel
     *
     * Lists the count for each device model.
     *
     */
    public function testGetOrganizationDevicesOverviewByModel()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesPowerModulesStatusesByDevice
     *
     * List the most recent status information for power modules in rackmount MX and MS devices that support them.
     *
     */
    public function testGetOrganizationDevicesPowerModulesStatusesByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesProvisioningStatuses
     *
     * List the provisioning statuses information for devices in an organization..
     *
     */
    public function testGetOrganizationDevicesProvisioningStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesStatuses
     *
     * List the status of every Meraki device in the organization.
     *
     */
    public function testGetOrganizationDevicesStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesStatusesOverview
     *
     * Return an overview of current device statuses.
     *
     */
    public function testGetOrganizationDevicesStatusesOverview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesSystemMemoryUsageHistoryByInterval
     *
     * Return the memory utilization history in kB for devices in the organization..
     *
     */
    public function testGetOrganizationDevicesSystemMemoryUsageHistoryByInterval()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesUplinksAddressesByDevice
     *
     * List the current uplink addresses for devices in an organization..
     *
     */
    public function testGetOrganizationDevicesUplinksAddressesByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesUplinksLossAndLatency
     *
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago.
     *
     */
    public function testGetOrganizationDevicesUplinksLossAndLatency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationEarlyAccessFeatures
     *
     * List the available early access features for organization.
     *
     */
    public function testGetOrganizationEarlyAccessFeatures()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationEarlyAccessFeaturesOptIn
     *
     * Show an early access feature opt-in for an organization.
     *
     */
    public function testGetOrganizationEarlyAccessFeaturesOptIn()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationEarlyAccessFeaturesOptIns
     *
     * List the early access feature opt-ins for an organization.
     *
     */
    public function testGetOrganizationEarlyAccessFeaturesOptIns()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationFirmwareUpgrades
     *
     * Get firmware upgrade information for an organization.
     *
     */
    public function testGetOrganizationFirmwareUpgrades()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationFirmwareUpgradesByDevice
     *
     * Get firmware upgrade status for the filtered devices.
     *
     */
    public function testGetOrganizationFirmwareUpgradesByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationFloorPlansAutoLocateDevices
     *
     * List auto locate details for each device in your organization.
     *
     */
    public function testGetOrganizationFloorPlansAutoLocateDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationFloorPlansAutoLocateStatuses
     *
     * List the status of auto locate for each floorplan in your organization.
     *
     */
    public function testGetOrganizationFloorPlansAutoLocateStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationIntegrationsXdrNetworks
     *
     * Returns the networks in the organization that have XDR enabled.
     *
     */
    public function testGetOrganizationIntegrationsXdrNetworks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationInventoryDevice
     *
     * Return a single device from the inventory of an organization.
     *
     */
    public function testGetOrganizationInventoryDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationInventoryDevices
     *
     * Return the device inventory for an organization.
     *
     */
    public function testGetOrganizationInventoryDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationInventoryDevicesSwapsBulk
     *
     * List of device swaps for a given request ID ({id})..
     *
     */
    public function testGetOrganizationInventoryDevicesSwapsBulk()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationInventoryOnboardingCloudMonitoringImports
     *
     * Check the status of a committed Import operation.
     *
     */
    public function testGetOrganizationInventoryOnboardingCloudMonitoringImports()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationInventoryOnboardingCloudMonitoringNetworks
     *
     * Returns list of networks eligible for adding cloud monitored device.
     *
     */
    public function testGetOrganizationInventoryOnboardingCloudMonitoringNetworks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationLicense
     *
     * Display a license.
     *
     */
    public function testGetOrganizationLicense()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationLicenses
     *
     * List the licenses for an organization.
     *
     */
    public function testGetOrganizationLicenses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationLicensesOverview
     *
     * Return an overview of the license state for an organization.
     *
     */
    public function testGetOrganizationLicensesOverview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationLoginSecurity
     *
     * Returns the login security settings for an organization..
     *
     */
    public function testGetOrganizationLoginSecurity()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationNetworks
     *
     * List the networks that the user has privileges on in an organization.
     *
     */
    public function testGetOrganizationNetworks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationOpenapiSpec
     *
     * Return the OpenAPI Specification of the organization's API documentation in JSON.
     *
     */
    public function testGetOrganizationOpenapiSpec()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationPolicyObject
     *
     * Shows details of a Policy Object..
     *
     */
    public function testGetOrganizationPolicyObject()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationPolicyObjects
     *
     * Lists Policy Objects belonging to the organization..
     *
     */
    public function testGetOrganizationPolicyObjects()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationPolicyObjectsGroup
     *
     * Shows details of a Policy Object Group..
     *
     */
    public function testGetOrganizationPolicyObjectsGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationPolicyObjectsGroups
     *
     * Lists Policy Object Groups belonging to the organization..
     *
     */
    public function testGetOrganizationPolicyObjectsGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSaml
     *
     * Returns the SAML SSO enabled settings for an organization..
     *
     */
    public function testGetOrganizationSaml()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSamlIdp
     *
     * Get a SAML IdP from your organization..
     *
     */
    public function testGetOrganizationSamlIdp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSamlIdps
     *
     * List the SAML IdPs in your organization..
     *
     */
    public function testGetOrganizationSamlIdps()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSamlRole
     *
     * Return a SAML role.
     *
     */
    public function testGetOrganizationSamlRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSamlRoles
     *
     * List the SAML roles for this organization.
     *
     */
    public function testGetOrganizationSamlRoles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSnmp
     *
     * Return the SNMP settings for an organization.
     *
     */
    public function testGetOrganizationSnmp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSplashAsset
     *
     * Get a Splash Theme Asset.
     *
     */
    public function testGetOrganizationSplashAsset()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSplashThemes
     *
     * List Splash Themes.
     *
     */
    public function testGetOrganizationSplashThemes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSummaryTopAppliancesByUtilization
     *
     * Return the top 10 appliances sorted by utilization over given time range..
     *
     */
    public function testGetOrganizationSummaryTopAppliancesByUtilization()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSummaryTopApplicationsByUsage
     *
     * Return the top applications sorted by data usage over given time range.
     *
     */
    public function testGetOrganizationSummaryTopApplicationsByUsage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSummaryTopApplicationsCategoriesByUsage
     *
     * Return the top application categories sorted by data usage over given time range.
     *
     */
    public function testGetOrganizationSummaryTopApplicationsCategoriesByUsage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSummaryTopClientsByUsage
     *
     * Return metrics for organization's top 10 clients by data usage (in mb) over given time range..
     *
     */
    public function testGetOrganizationSummaryTopClientsByUsage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSummaryTopClientsManufacturersByUsage
     *
     * Return metrics for organization's top clients by data usage (in mb) over given time range, grouped by manufacturer..
     *
     */
    public function testGetOrganizationSummaryTopClientsManufacturersByUsage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSummaryTopDevicesByUsage
     *
     * Return metrics for organization's top 10 devices sorted by data usage over given time range.
     *
     */
    public function testGetOrganizationSummaryTopDevicesByUsage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSummaryTopDevicesModelsByUsage
     *
     * Return metrics for organization's top 10 device models sorted by data usage over given time range.
     *
     */
    public function testGetOrganizationSummaryTopDevicesModelsByUsage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSummaryTopNetworksByStatus
     *
     * List the client and status overview information for the networks in an organization.
     *
     */
    public function testGetOrganizationSummaryTopNetworksByStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSummaryTopSsidsByUsage
     *
     * Return metrics for organization's top 10 ssids by data usage over given time range.
     *
     */
    public function testGetOrganizationSummaryTopSsidsByUsage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSummaryTopSwitchesByEnergyUsage
     *
     * Return metrics for organization's top 10 switches by energy usage over given time range.
     *
     */
    public function testGetOrganizationSummaryTopSwitchesByEnergyUsage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationUplinksStatuses
     *
     * List the uplink status of every Meraki MX, MG and Z series devices in the organization.
     *
     */
    public function testGetOrganizationUplinksStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWebhooksAlertTypes
     *
     * Return a list of alert types to be used with managing webhook alerts.
     *
     */
    public function testGetOrganizationWebhooksAlertTypes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWebhooksCallbacksStatus
     *
     * Return the status of an API callback.
     *
     */
    public function testGetOrganizationWebhooksCallbacksStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWebhooksLogs
     *
     * Return the log of webhook POSTs sent.
     *
     */
    public function testGetOrganizationWebhooksLogs()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizations
     *
     * List the organizations that the user has privileges on.
     *
     */
    public function testGetOrganizations()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for moveOrganizationLicenses
     *
     * Move licenses to another organization.
     *
     */
    public function testMoveOrganizationLicenses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for moveOrganizationLicensesSeats
     *
     * Move SM seats to another organization.
     *
     */
    public function testMoveOrganizationLicensesSeats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for releaseFromOrganizationInventory
     *
     * Release a list of claimed devices from an organization..
     *
     */
    public function testReleaseFromOrganizationInventory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for renewOrganizationLicensesSeats
     *
     * Renew SM seats of a license.
     *
     */
    public function testRenewOrganizationLicensesSeats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for restoreOrganizationAssuranceAlerts
     *
     * Restore health alerts from dismissed.
     *
     */
    public function testRestoreOrganizationAssuranceAlerts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganization
     *
     * Update an organization.
     *
     */
    public function testUpdateOrganization()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationActionBatch
     *
     * Update an action batch.
     *
     */
    public function testUpdateOrganizationActionBatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationAdaptivePolicyAcl
     *
     * Updates an adaptive policy ACL.
     *
     */
    public function testUpdateOrganizationAdaptivePolicyAcl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationAdaptivePolicyGroup
     *
     * Updates an adaptive policy group.
     *
     */
    public function testUpdateOrganizationAdaptivePolicyGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationAdaptivePolicyPolicy
     *
     * Update an Adaptive Policy.
     *
     */
    public function testUpdateOrganizationAdaptivePolicyPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationAdaptivePolicySettings
     *
     * Update global adaptive policy settings.
     *
     */
    public function testUpdateOrganizationAdaptivePolicySettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationAdmin
     *
     * Update an administrator.
     *
     */
    public function testUpdateOrganizationAdmin()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationAlertsProfile
     *
     * Update an organization-wide alert config.
     *
     */
    public function testUpdateOrganizationAlertsProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationBrandingPoliciesPriorities
     *
     * Update the priority ordering of an organization's branding policies..
     *
     */
    public function testUpdateOrganizationBrandingPoliciesPriorities()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationBrandingPolicy
     *
     * Update a branding policy.
     *
     */
    public function testUpdateOrganizationBrandingPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationConfigTemplate
     *
     * Update a configuration template.
     *
     */
    public function testUpdateOrganizationConfigTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationEarlyAccessFeaturesOptIn
     *
     * Update an early access feature opt-in for an organization.
     *
     */
    public function testUpdateOrganizationEarlyAccessFeaturesOptIn()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationLicense
     *
     * Update a license.
     *
     */
    public function testUpdateOrganizationLicense()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationLoginSecurity
     *
     * Update the login security settings for an organization.
     *
     */
    public function testUpdateOrganizationLoginSecurity()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationPolicyObject
     *
     * Updates a Policy Object..
     *
     */
    public function testUpdateOrganizationPolicyObject()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationPolicyObjectsGroup
     *
     * Updates a Policy Object Group..
     *
     */
    public function testUpdateOrganizationPolicyObjectsGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationSaml
     *
     * Updates the SAML SSO enabled settings for an organization..
     *
     */
    public function testUpdateOrganizationSaml()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationSamlIdp
     *
     * Update a SAML IdP in your organization.
     *
     */
    public function testUpdateOrganizationSamlIdp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationSamlRole
     *
     * Update a SAML role.
     *
     */
    public function testUpdateOrganizationSamlRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationSnmp
     *
     * Update the SNMP settings for an organization.
     *
     */
    public function testUpdateOrganizationSnmp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
