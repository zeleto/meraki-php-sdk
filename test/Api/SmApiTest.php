<?php
/**
 * SmApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Meraki\Test\Api;

use \Meraki\Configuration;
use \Meraki\ApiException;
use \Meraki\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * SmApiTest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SmApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for checkinNetworkSmDevices
     *
     * Force check-in a set of devices.
     *
     */
    public function testCheckinNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSmBypassActivationLockAttempt
     *
     * Bypass activation lock attempt.
     *
     */
    public function testCreateNetworkSmBypassActivationLockAttempt()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSmTargetGroup
     *
     * Add a target group.
     *
     */
    public function testCreateNetworkSmTargetGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationSmAdminsRole
     *
     * Create a Limited Access Role.
     *
     */
    public function testCreateOrganizationSmAdminsRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSmTargetGroup
     *
     * Delete a target group from a network.
     *
     */
    public function testDeleteNetworkSmTargetGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSmUserAccessDevice
     *
     * Delete a User Access Device.
     *
     */
    public function testDeleteNetworkSmUserAccessDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationSmAdminsRole
     *
     * Delete a Limited Access Role.
     *
     */
    public function testDeleteOrganizationSmAdminsRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmBypassActivationLockAttempt
     *
     * Bypass activation lock attempt status.
     *
     */
    public function testGetNetworkSmBypassActivationLockAttempt()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceCellularUsageHistory
     *
     * Return the client's daily cellular data usage history.
     *
     */
    public function testGetNetworkSmDeviceCellularUsageHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceCerts
     *
     * List the certs on a device.
     *
     */
    public function testGetNetworkSmDeviceCerts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceConnectivity
     *
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard)..
     *
     */
    public function testGetNetworkSmDeviceConnectivity()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceDesktopLogs
     *
     * Return historical records of various Systems Manager network connection details for desktop devices..
     *
     */
    public function testGetNetworkSmDeviceDesktopLogs()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceDeviceCommandLogs
     *
     * Return historical records of commands sent to Systems Manager devices.
     *
     */
    public function testGetNetworkSmDeviceDeviceCommandLogs()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceDeviceProfiles
     *
     * Get the installed profiles associated with a device.
     *
     */
    public function testGetNetworkSmDeviceDeviceProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceNetworkAdapters
     *
     * List the network adapters of a device.
     *
     */
    public function testGetNetworkSmDeviceNetworkAdapters()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDevicePerformanceHistory
     *
     * Return historical records of various Systems Manager client metrics for desktop devices..
     *
     */
    public function testGetNetworkSmDevicePerformanceHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceRestrictions
     *
     * List the restrictions on a device.
     *
     */
    public function testGetNetworkSmDeviceRestrictions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceSecurityCenters
     *
     * List the security centers on a device.
     *
     */
    public function testGetNetworkSmDeviceSecurityCenters()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceSoftwares
     *
     * Get a list of softwares associated with a device.
     *
     */
    public function testGetNetworkSmDeviceSoftwares()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceWlanLists
     *
     * List the saved SSID names on a device.
     *
     */
    public function testGetNetworkSmDeviceWlanLists()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDevices
     *
     * List the devices enrolled in an SM network with various specified fields and filters.
     *
     */
    public function testGetNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmProfiles
     *
     * List all profiles in a network.
     *
     */
    public function testGetNetworkSmProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmTargetGroup
     *
     * Return a target group.
     *
     */
    public function testGetNetworkSmTargetGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmTargetGroups
     *
     * List the target groups in this network.
     *
     */
    public function testGetNetworkSmTargetGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmTrustedAccessConfigs
     *
     * List Trusted Access Configs.
     *
     */
    public function testGetNetworkSmTrustedAccessConfigs()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmUserAccessDevices
     *
     * List User Access Devices and its Trusted Access Connections.
     *
     */
    public function testGetNetworkSmUserAccessDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmUserDeviceProfiles
     *
     * Get the profiles associated with a user.
     *
     */
    public function testGetNetworkSmUserDeviceProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmUserSoftwares
     *
     * Get a list of softwares associated with a user.
     *
     */
    public function testGetNetworkSmUserSoftwares()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmUsers
     *
     * List the owners in an SM network with various specified fields and filters.
     *
     */
    public function testGetNetworkSmUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSmAdminsRole
     *
     * Return a Limited Access Role.
     *
     */
    public function testGetOrganizationSmAdminsRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSmAdminsRoles
     *
     * List the Limited Access Roles for an organization.
     *
     */
    public function testGetOrganizationSmAdminsRoles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSmApnsCert
     *
     * Get the organization's APNS certificate.
     *
     */
    public function testGetOrganizationSmApnsCert()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSmSentryPoliciesAssignmentsByNetwork
     *
     * List the Sentry Policies for an organization ordered in ascending order of priority.
     *
     */
    public function testGetOrganizationSmSentryPoliciesAssignmentsByNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSmVppAccount
     *
     * Get a hash containing the unparsed token of the VPP account with the given ID.
     *
     */
    public function testGetOrganizationSmVppAccount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSmVppAccounts
     *
     * List the VPP accounts in the organization.
     *
     */
    public function testGetOrganizationSmVppAccounts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for installNetworkSmDeviceApps
     *
     * Install applications on a device.
     *
     */
    public function testInstallNetworkSmDeviceApps()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for lockNetworkSmDevices
     *
     * Lock a set of devices.
     *
     */
    public function testLockNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modifyNetworkSmDevicesTags
     *
     * Add, delete, or update the tags of a set of devices.
     *
     */
    public function testModifyNetworkSmDevicesTags()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for moveNetworkSmDevices
     *
     * Move a set of devices to a new network.
     *
     */
    public function testMoveNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for rebootNetworkSmDevices
     *
     * Reboot a set of endpoints.
     *
     */
    public function testRebootNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for refreshNetworkSmDeviceDetails
     *
     * Refresh the details of a device.
     *
     */
    public function testRefreshNetworkSmDeviceDetails()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for shutdownNetworkSmDevices
     *
     * Shutdown a set of endpoints.
     *
     */
    public function testShutdownNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for unenrollNetworkSmDevice
     *
     * Unenroll a device.
     *
     */
    public function testUnenrollNetworkSmDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uninstallNetworkSmDeviceApps
     *
     * Uninstall applications on a device.
     *
     */
    public function testUninstallNetworkSmDeviceApps()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSmDevicesFields
     *
     * Modify the fields of a device.
     *
     */
    public function testUpdateNetworkSmDevicesFields()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSmTargetGroup
     *
     * Update a target group.
     *
     */
    public function testUpdateNetworkSmTargetGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationSmAdminsRole
     *
     * Update a Limited Access Role.
     *
     */
    public function testUpdateOrganizationSmAdminsRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationSmSentryPoliciesAssignments
     *
     * Update an Organizations Sentry Policies using the provided list.
     *
     */
    public function testUpdateOrganizationSmSentryPoliciesAssignments()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for wipeNetworkSmDevices
     *
     * Wipe a device.
     *
     */
    public function testWipeNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
