<?php
/**
 * SsidsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Meraki\Test\Api;

use \Meraki\Configuration;
use \Meraki\ApiException;
use \Meraki\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * SsidsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SsidsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for createNetworkWirelessSsidIdentityPsk
     *
     * Create an Identity PSK.
     *
     */
    public function testCreateNetworkWirelessSsidIdentityPsk()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry
     *
     * Create isolation allow list MAC entry for this organization.
     *
     */
    public function testCreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkWirelessSsidIdentityPsk
     *
     * Delete an Identity PSK.
     *
     */
    public function testDeleteNetworkWirelessSsidIdentityPsk()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry
     *
     * Destroy isolation allow list MAC entry for this organization.
     *
     */
    public function testDeleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceSsid
     *
     * Return a single MX SSID.
     *
     */
    public function testGetNetworkApplianceSsid()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceSsids
     *
     * List the MX SSIDs in a network.
     *
     */
    public function testGetNetworkApplianceSsids()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsid
     *
     * Return a single MR SSID.
     *
     */
    public function testGetNetworkWirelessSsid()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidBonjourForwarding
     *
     * List the Bonjour forwarding setting and rules for the SSID.
     *
     */
    public function testGetNetworkWirelessSsidBonjourForwarding()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidDeviceTypeGroupPolicies
     *
     * List the device type group policies for the SSID.
     *
     */
    public function testGetNetworkWirelessSsidDeviceTypeGroupPolicies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidEapOverride
     *
     * Return the EAP overridden parameters for an SSID.
     *
     */
    public function testGetNetworkWirelessSsidEapOverride()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidFirewallL3FirewallRules
     *
     * Return the L3 firewall rules for an SSID on an MR network.
     *
     */
    public function testGetNetworkWirelessSsidFirewallL3FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidFirewallL7FirewallRules
     *
     * Return the L7 firewall rules for an SSID on an MR network.
     *
     */
    public function testGetNetworkWirelessSsidFirewallL7FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidHotspot20
     *
     * Return the Hotspot 2.0 settings for an SSID.
     *
     */
    public function testGetNetworkWirelessSsidHotspot20()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidIdentityPsk
     *
     * Return an Identity PSK.
     *
     */
    public function testGetNetworkWirelessSsidIdentityPsk()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidIdentityPsks
     *
     * List all Identity PSKs in a wireless network.
     *
     */
    public function testGetNetworkWirelessSsidIdentityPsks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidSchedules
     *
     * List the outage schedule for the SSID.
     *
     */
    public function testGetNetworkWirelessSsidSchedules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidSplashSettings
     *
     * Display the splash page settings for the given SSID.
     *
     */
    public function testGetNetworkWirelessSsidSplashSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidTrafficShapingRules
     *
     * Display the traffic shaping settings for a SSID on an MR network.
     *
     */
    public function testGetNetworkWirelessSsidTrafficShapingRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidVpn
     *
     * List the VPN settings for the SSID..
     *
     */
    public function testGetNetworkWirelessSsidVpn()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsids
     *
     * List the MR SSIDs in a network.
     *
     */
    public function testGetNetworkWirelessSsids()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSummaryTopSsidsByUsage
     *
     * Return metrics for organization's top 10 ssids by data usage over given time range.
     *
     */
    public function testGetOrganizationSummaryTopSsidsByUsage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessSsidsFirewallIsolationAllowlistEntries
     *
     * List the L2 isolation allow list MAC entry in an organization.
     *
     */
    public function testGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessSsidsStatusesByDevice
     *
     * List status information of all BSSIDs in your organization.
     *
     */
    public function testGetOrganizationWirelessSsidsStatusesByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceSsid
     *
     * Update the attributes of an MX SSID.
     *
     */
    public function testUpdateNetworkApplianceSsid()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsid
     *
     * Update the attributes of an MR SSID.
     *
     */
    public function testUpdateNetworkWirelessSsid()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidBonjourForwarding
     *
     * Update the bonjour forwarding setting and rules for the SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidBonjourForwarding()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidDeviceTypeGroupPolicies
     *
     * Update the device type group policies for the SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidDeviceTypeGroupPolicies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidEapOverride
     *
     * Update the EAP overridden parameters for an SSID..
     *
     */
    public function testUpdateNetworkWirelessSsidEapOverride()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidFirewallL3FirewallRules
     *
     * Update the L3 firewall rules of an SSID on an MR network.
     *
     */
    public function testUpdateNetworkWirelessSsidFirewallL3FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidFirewallL7FirewallRules
     *
     * Update the L7 firewall rules of an SSID on an MR network.
     *
     */
    public function testUpdateNetworkWirelessSsidFirewallL7FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidHotspot20
     *
     * Update the Hotspot 2.0 settings of an SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidHotspot20()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidIdentityPsk
     *
     * Update an Identity PSK.
     *
     */
    public function testUpdateNetworkWirelessSsidIdentityPsk()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidSchedules
     *
     * Update the outage schedule for the SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidSchedules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidSplashSettings
     *
     * Modify the splash page settings for the given SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidSplashSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidTrafficShapingRules
     *
     * Update the traffic shaping rules for an SSID on an MR network..
     *
     */
    public function testUpdateNetworkWirelessSsidTrafficShapingRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidVpn
     *
     * Update the VPN settings for the SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidVpn()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry
     *
     * Update isolation allow list MAC entry info.
     *
     */
    public function testUpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
