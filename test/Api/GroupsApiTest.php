<?php
/**
 * GroupsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Meraki\Test\Api;

use \Meraki\Configuration;
use \Meraki\ApiException;
use \Meraki\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * GroupsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GroupsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for createNetworkFirmwareUpgradesStagedGroup
     *
     * Create a Staged Upgrade Group for a network.
     *
     */
    public function testCreateNetworkFirmwareUpgradesStagedGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationAdaptivePolicyGroup
     *
     * Creates a new adaptive policy group.
     *
     */
    public function testCreateOrganizationAdaptivePolicyGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationPolicyObjectsGroup
     *
     * Creates a new Policy Object Group..
     *
     */
    public function testCreateOrganizationPolicyObjectsGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkFirmwareUpgradesStagedGroup
     *
     * Delete a Staged Upgrade Group.
     *
     */
    public function testDeleteNetworkFirmwareUpgradesStagedGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationAdaptivePolicyGroup
     *
     * Deletes the specified adaptive policy group and any associated policies and references.
     *
     */
    public function testDeleteOrganizationAdaptivePolicyGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationPolicyObjectsGroup
     *
     * Deletes a Policy Object Group..
     *
     */
    public function testDeleteOrganizationPolicyObjectsGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkFirmwareUpgradesStagedGroup
     *
     * Get a Staged Upgrade Group from a network.
     *
     */
    public function testGetNetworkFirmwareUpgradesStagedGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkFirmwareUpgradesStagedGroups
     *
     * List of Staged Upgrade Groups in a network.
     *
     */
    public function testGetNetworkFirmwareUpgradesStagedGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdaptivePolicyGroup
     *
     * Returns an adaptive policy group.
     *
     */
    public function testGetOrganizationAdaptivePolicyGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdaptivePolicyGroups
     *
     * List adaptive policy groups in a organization.
     *
     */
    public function testGetOrganizationAdaptivePolicyGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationPolicyObjectsGroup
     *
     * Shows details of a Policy Object Group..
     *
     */
    public function testGetOrganizationPolicyObjectsGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationPolicyObjectsGroups
     *
     * Lists Policy Object Groups belonging to the organization..
     *
     */
    public function testGetOrganizationPolicyObjectsGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkFirmwareUpgradesStagedGroup
     *
     * Update a Staged Upgrade Group for a network.
     *
     */
    public function testUpdateNetworkFirmwareUpgradesStagedGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationAdaptivePolicyGroup
     *
     * Updates an adaptive policy group.
     *
     */
    public function testUpdateOrganizationAdaptivePolicyGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationPolicyObjectsGroup
     *
     * Updates a Policy Object Group..
     *
     */
    public function testUpdateOrganizationPolicyObjectsGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
