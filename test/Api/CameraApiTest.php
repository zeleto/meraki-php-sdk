<?php
/**
 * CameraApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Meraki\Test\Api;

use \Meraki\Configuration;
use \Meraki\ApiException;
use \Meraki\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * CameraApiTest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CameraApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for createNetworkCameraQualityRetentionProfile
     *
     * Creates new quality retention profile for this network..
     *
     */
    public function testCreateNetworkCameraQualityRetentionProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkCameraWirelessProfile
     *
     * Creates a new camera wireless profile for this network..
     *
     */
    public function testCreateNetworkCameraWirelessProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationCameraCustomAnalyticsArtifact
     *
     * Create custom analytics artifact.
     *
     */
    public function testCreateOrganizationCameraCustomAnalyticsArtifact()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationCameraRole
     *
     * Creates new role for this organization..
     *
     */
    public function testCreateOrganizationCameraRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkCameraQualityRetentionProfile
     *
     * Delete an existing quality retention profile for this network..
     *
     */
    public function testDeleteNetworkCameraQualityRetentionProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkCameraWirelessProfile
     *
     * Delete an existing camera wireless profile for this network..
     *
     */
    public function testDeleteNetworkCameraWirelessProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationCameraCustomAnalyticsArtifact
     *
     * Delete Custom Analytics Artifact.
     *
     */
    public function testDeleteOrganizationCameraCustomAnalyticsArtifact()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationCameraRole
     *
     * Delete an existing role for this organization..
     *
     */
    public function testDeleteOrganizationCameraRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateDeviceCameraSnapshot
     *
     * Generate a snapshot of what the camera sees at the specified time and return a link to that image..
     *
     */
    public function testGenerateDeviceCameraSnapshot()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCameraAnalyticsLive
     *
     * Returns live state from camera analytics zones.
     *
     */
    public function testGetDeviceCameraAnalyticsLive()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCameraAnalyticsOverview
     *
     * Returns an overview of aggregate analytics data for a timespan.
     *
     */
    public function testGetDeviceCameraAnalyticsOverview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCameraAnalyticsRecent
     *
     * Returns most recent record for analytics zones.
     *
     */
    public function testGetDeviceCameraAnalyticsRecent()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCameraAnalyticsZoneHistory
     *
     * Return historical records for analytic zones.
     *
     */
    public function testGetDeviceCameraAnalyticsZoneHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCameraAnalyticsZones
     *
     * Returns all configured analytic zones for this camera.
     *
     */
    public function testGetDeviceCameraAnalyticsZones()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCameraCustomAnalytics
     *
     * Return custom analytics settings for a camera.
     *
     */
    public function testGetDeviceCameraCustomAnalytics()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCameraQualityAndRetention
     *
     * Returns quality and retention settings for the given camera.
     *
     */
    public function testGetDeviceCameraQualityAndRetention()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCameraSense
     *
     * Returns sense settings for a given camera.
     *
     */
    public function testGetDeviceCameraSense()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCameraSenseObjectDetectionModels
     *
     * Returns the MV Sense object detection model list for the given camera.
     *
     */
    public function testGetDeviceCameraSenseObjectDetectionModels()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCameraVideoLink
     *
     * Returns video link to the specified camera.
     *
     */
    public function testGetDeviceCameraVideoLink()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCameraVideoSettings
     *
     * Returns video settings for the given camera.
     *
     */
    public function testGetDeviceCameraVideoSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCameraWirelessProfiles
     *
     * Returns wireless profile assigned to the given camera.
     *
     */
    public function testGetDeviceCameraWirelessProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkCameraQualityRetentionProfile
     *
     * Retrieve a single quality retention profile.
     *
     */
    public function testGetNetworkCameraQualityRetentionProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkCameraQualityRetentionProfiles
     *
     * List the quality retention profiles for this network.
     *
     */
    public function testGetNetworkCameraQualityRetentionProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkCameraSchedules
     *
     * Returns a list of all camera recording schedules..
     *
     */
    public function testGetNetworkCameraSchedules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkCameraWirelessProfile
     *
     * Retrieve a single camera wireless profile..
     *
     */
    public function testGetNetworkCameraWirelessProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkCameraWirelessProfiles
     *
     * List the camera wireless profiles for this network..
     *
     */
    public function testGetNetworkCameraWirelessProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraBoundariesAreasByDevice
     *
     * Returns all configured area boundaries of cameras.
     *
     */
    public function testGetOrganizationCameraBoundariesAreasByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraBoundariesLinesByDevice
     *
     * Returns all configured crossingline boundaries of cameras.
     *
     */
    public function testGetOrganizationCameraBoundariesLinesByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraCustomAnalyticsArtifact
     *
     * Get Custom Analytics Artifact.
     *
     */
    public function testGetOrganizationCameraCustomAnalyticsArtifact()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraCustomAnalyticsArtifacts
     *
     * List Custom Analytics Artifacts.
     *
     */
    public function testGetOrganizationCameraCustomAnalyticsArtifacts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraDetectionsHistoryByBoundaryByInterval
     *
     * Returns analytics data for timespans.
     *
     */
    public function testGetOrganizationCameraDetectionsHistoryByBoundaryByInterval()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraOnboardingStatuses
     *
     * Fetch onboarding status of cameras.
     *
     */
    public function testGetOrganizationCameraOnboardingStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraPermission
     *
     * Retrieve a single permission scope.
     *
     */
    public function testGetOrganizationCameraPermission()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraPermissions
     *
     * List the permissions scopes for this organization.
     *
     */
    public function testGetOrganizationCameraPermissions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraRole
     *
     * Retrieve a single role..
     *
     */
    public function testGetOrganizationCameraRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraRoles
     *
     * List all the roles in this organization.
     *
     */
    public function testGetOrganizationCameraRoles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceCameraCustomAnalytics
     *
     * Update custom analytics settings for a camera.
     *
     */
    public function testUpdateDeviceCameraCustomAnalytics()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceCameraQualityAndRetention
     *
     * Update quality and retention settings for the given camera.
     *
     */
    public function testUpdateDeviceCameraQualityAndRetention()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceCameraSense
     *
     * Update sense settings for the given camera.
     *
     */
    public function testUpdateDeviceCameraSense()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceCameraVideoSettings
     *
     * Update video settings for the given camera.
     *
     */
    public function testUpdateDeviceCameraVideoSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceCameraWirelessProfiles
     *
     * Assign wireless profiles to the given camera.
     *
     */
    public function testUpdateDeviceCameraWirelessProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkCameraQualityRetentionProfile
     *
     * Update an existing quality retention profile for this network..
     *
     */
    public function testUpdateNetworkCameraQualityRetentionProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkCameraWirelessProfile
     *
     * Update an existing camera wireless profile in this network..
     *
     */
    public function testUpdateNetworkCameraWirelessProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationCameraOnboardingStatuses
     *
     * Notify that credential handoff to camera has completed.
     *
     */
    public function testUpdateOrganizationCameraOnboardingStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationCameraRole
     *
     * Update an existing role in this organization..
     *
     */
    public function testUpdateOrganizationCameraRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
