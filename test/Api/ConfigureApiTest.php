<?php
/**
 * ConfigureApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Meraki\Test\Api;

use \Meraki\Configuration;
use \Meraki\ApiException;
use \Meraki\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ConfigureApiTest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConfigureApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for addNetworkSwitchStack
     *
     * Add a switch to a stack.
     *
     */
    public function testAddNetworkSwitchStack()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for assignNetworkWirelessEthernetPortsProfiles
     *
     * Assign AP port profile to list of APs.
     *
     */
    public function testAssignNetworkWirelessEthernetPortsProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for assignOrganizationLicensesSeats
     *
     * Assign SM seats to a network.
     *
     */
    public function testAssignOrganizationLicensesSeats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for batchNetworkFloorPlansAutoLocateJobs
     *
     * Schedule auto locate jobs for one or more floor plans in a network.
     *
     */
    public function testBatchNetworkFloorPlansAutoLocateJobs()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for batchNetworkFloorPlansDevicesUpdate
     *
     * Update floorplan assignments for a batch of devices.
     *
     */
    public function testBatchNetworkFloorPlansDevicesUpdate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for bindAdministeredLicensingSubscriptionSubscription
     *
     * Bind networks to a subscription.
     *
     */
    public function testBindAdministeredLicensingSubscriptionSubscription()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for bindNetwork
     *
     * Bind a network to a template..
     *
     */
    public function testBindNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate
     *
     * Assign the local DNS profile to networks in the organization.
     *
     */
    public function testBulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for bulkUpdateOrganizationDevicesDetails
     *
     * Updating device details (currently only used for Catalyst devices).
     *
     */
    public function testBulkUpdateOrganizationDevicesDetails()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cancelNetworkFloorPlansAutoLocateJob
     *
     * Cancel a scheduled or running auto locate job.
     *
     */
    public function testCancelNetworkFloorPlansAutoLocateJob()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for checkinNetworkSmDevices
     *
     * Force check-in a set of devices.
     *
     */
    public function testCheckinNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for claimAdministeredLicensingSubscriptionSubscriptions
     *
     * Claim a subscription into an organization..
     *
     */
    public function testClaimAdministeredLicensingSubscriptionSubscriptions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for claimIntoOrganization
     *
     * Claim a list of devices, licenses, and/or orders into an organization inventory.
     *
     */
    public function testClaimIntoOrganization()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for claimIntoOrganizationInventory
     *
     * Claim a list of devices, licenses, and/or orders into an organization inventory.
     *
     */
    public function testClaimIntoOrganizationInventory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for claimNetworkDevices
     *
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requests against that device to succeed).
     *
     */
    public function testClaimNetworkDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cloneOrganization
     *
     * Create a new organization by cloning the addressed organization.
     *
     */
    public function testCloneOrganization()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cloneOrganizationSwitchDevices
     *
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches.
     *
     */
    public function testCloneOrganizationSwitchDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for combineOrganizationNetworks
     *
     * Combine multiple networks into a single network.
     *
     */
    public function testCombineOrganizationNetworks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceApplianceVmxAuthenticationToken
     *
     * Generate a new vMX authentication token.
     *
     */
    public function testCreateDeviceApplianceVmxAuthenticationToken()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceSensorCommand
     *
     * Sends a command to a sensor.
     *
     */
    public function testCreateDeviceSensorCommand()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceSwitchRoutingInterface
     *
     * Create a layer 3 interface for a switch.
     *
     */
    public function testCreateDeviceSwitchRoutingInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceSwitchRoutingStaticRoute
     *
     * Create a layer 3 static route for a switch.
     *
     */
    public function testCreateDeviceSwitchRoutingStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkAppliancePrefixesDelegatedStatic
     *
     * Add a static delegated prefix from a network.
     *
     */
    public function testCreateNetworkAppliancePrefixesDelegatedStatic()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkApplianceRfProfile
     *
     * Creates new RF profile for this network.
     *
     */
    public function testCreateNetworkApplianceRfProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkApplianceStaticRoute
     *
     * Add a static route for an MX or teleworker network.
     *
     */
    public function testCreateNetworkApplianceStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkApplianceTrafficShapingCustomPerformanceClass
     *
     * Add a custom performance class for an MX network.
     *
     */
    public function testCreateNetworkApplianceTrafficShapingCustomPerformanceClass()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkApplianceVlan
     *
     * Add a VLAN.
     *
     */
    public function testCreateNetworkApplianceVlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkCameraQualityRetentionProfile
     *
     * Creates new quality retention profile for this network..
     *
     */
    public function testCreateNetworkCameraQualityRetentionProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkCameraWirelessProfile
     *
     * Creates a new camera wireless profile for this network..
     *
     */
    public function testCreateNetworkCameraWirelessProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkFirmwareUpgradesRollback
     *
     * Rollback a Firmware Upgrade For A Network.
     *
     */
    public function testCreateNetworkFirmwareUpgradesRollback()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkFirmwareUpgradesStagedEvent
     *
     * Create a Staged Upgrade Event for a network.
     *
     */
    public function testCreateNetworkFirmwareUpgradesStagedEvent()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkFirmwareUpgradesStagedGroup
     *
     * Create a Staged Upgrade Group for a network.
     *
     */
    public function testCreateNetworkFirmwareUpgradesStagedGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkFloorPlan
     *
     * Upload a floor plan.
     *
     */
    public function testCreateNetworkFloorPlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkGroupPolicy
     *
     * Create a group policy.
     *
     */
    public function testCreateNetworkGroupPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkMerakiAuthUser
     *
     * Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap).
     *
     */
    public function testCreateNetworkMerakiAuthUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkMqttBroker
     *
     * Add an MQTT broker.
     *
     */
    public function testCreateNetworkMqttBroker()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkPiiRequest
     *
     * Submit a new delete or restrict processing PII request.
     *
     */
    public function testCreateNetworkPiiRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSensorAlertsProfile
     *
     * Creates a sensor alert profile for a network..
     *
     */
    public function testCreateNetworkSensorAlertsProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSmBypassActivationLockAttempt
     *
     * Bypass activation lock attempt.
     *
     */
    public function testCreateNetworkSmBypassActivationLockAttempt()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSmTargetGroup
     *
     * Add a target group.
     *
     */
    public function testCreateNetworkSmTargetGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSwitchAccessPolicy
     *
     * Create an access policy for a switch network.
     *
     */
    public function testCreateNetworkSwitchAccessPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer
     *
     * Add a server to be trusted by Dynamic ARP Inspection on this network.
     *
     */
    public function testCreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSwitchLinkAggregation
     *
     * Create a link aggregation group.
     *
     */
    public function testCreateNetworkSwitchLinkAggregation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSwitchPortSchedule
     *
     * Add a switch port schedule.
     *
     */
    public function testCreateNetworkSwitchPortSchedule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSwitchQosRule
     *
     * Add a quality of service rule.
     *
     */
    public function testCreateNetworkSwitchQosRule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSwitchRoutingMulticastRendezvousPoint
     *
     * Create a multicast rendezvous point.
     *
     */
    public function testCreateNetworkSwitchRoutingMulticastRendezvousPoint()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSwitchStack
     *
     * Create a switch stack.
     *
     */
    public function testCreateNetworkSwitchStack()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSwitchStackRoutingInterface
     *
     * Create a layer 3 interface for a switch stack.
     *
     */
    public function testCreateNetworkSwitchStackRoutingInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSwitchStackRoutingStaticRoute
     *
     * Create a layer 3 static route for a switch stack.
     *
     */
    public function testCreateNetworkSwitchStackRoutingStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkVlanProfile
     *
     * Create a VLAN profile for a network.
     *
     */
    public function testCreateNetworkVlanProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkWebhooksHttpServer
     *
     * Add an HTTP server to a network.
     *
     */
    public function testCreateNetworkWebhooksHttpServer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkWebhooksPayloadTemplate
     *
     * Create a webhook payload template for a network.
     *
     */
    public function testCreateNetworkWebhooksPayloadTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkWebhooksWebhookTest
     *
     * Send a test webhook for a network.
     *
     */
    public function testCreateNetworkWebhooksWebhookTest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkWirelessAirMarshalRule
     *
     * Creates a new rule.
     *
     */
    public function testCreateNetworkWirelessAirMarshalRule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkWirelessEthernetPortsProfile
     *
     * Create an AP port profile.
     *
     */
    public function testCreateNetworkWirelessEthernetPortsProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkWirelessRfProfile
     *
     * Creates new RF profile for this network.
     *
     */
    public function testCreateNetworkWirelessRfProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkWirelessSsidIdentityPsk
     *
     * Create an Identity PSK.
     *
     */
    public function testCreateNetworkWirelessSsidIdentityPsk()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganization
     *
     * Create a new organization.
     *
     */
    public function testCreateOrganization()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationActionBatch
     *
     * Create an action batch.
     *
     */
    public function testCreateOrganizationActionBatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationAdaptivePolicyAcl
     *
     * Creates new adaptive policy ACL.
     *
     */
    public function testCreateOrganizationAdaptivePolicyAcl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationAdaptivePolicyGroup
     *
     * Creates a new adaptive policy group.
     *
     */
    public function testCreateOrganizationAdaptivePolicyGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationAdaptivePolicyPolicy
     *
     * Add an Adaptive Policy.
     *
     */
    public function testCreateOrganizationAdaptivePolicyPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationAdmin
     *
     * Create a new dashboard administrator.
     *
     */
    public function testCreateOrganizationAdmin()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationAlertsProfile
     *
     * Create an organization-wide alert configuration.
     *
     */
    public function testCreateOrganizationAlertsProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationApplianceDnsLocalProfile
     *
     * Create a new local DNS profile.
     *
     */
    public function testCreateOrganizationApplianceDnsLocalProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete
     *
     * Unassign the local DNS profile to networks in the organization.
     *
     */
    public function testCreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationApplianceDnsLocalRecord
     *
     * Create a new local DNS record.
     *
     */
    public function testCreateOrganizationApplianceDnsLocalRecord()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationApplianceDnsSplitProfile
     *
     * Create a new split DNS profile.
     *
     */
    public function testCreateOrganizationApplianceDnsSplitProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate
     *
     * Assign the split DNS profile to networks in the organization.
     *
     */
    public function testCreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete
     *
     * Unassign the split DNS profile to networks in the organization.
     *
     */
    public function testCreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationBrandingPolicy
     *
     * Add a new branding policy to an organization.
     *
     */
    public function testCreateOrganizationBrandingPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationCameraCustomAnalyticsArtifact
     *
     * Create custom analytics artifact.
     *
     */
    public function testCreateOrganizationCameraCustomAnalyticsArtifact()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationCameraRole
     *
     * Creates new role for this organization..
     *
     */
    public function testCreateOrganizationCameraRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationCellularGatewayEsimsServiceProvidersAccount
     *
     * Add a service provider account..
     *
     */
    public function testCreateOrganizationCellularGatewayEsimsServiceProvidersAccount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationCellularGatewayEsimsSwap
     *
     * Swap which profile an eSIM uses..
     *
     */
    public function testCreateOrganizationCellularGatewayEsimsSwap()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationConfigTemplate
     *
     * Create a new configuration template.
     *
     */
    public function testCreateOrganizationConfigTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationDevicesControllerMigration
     *
     * Migrate devices to another controller or management mode.
     *
     */
    public function testCreateOrganizationDevicesControllerMigration()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationEarlyAccessFeaturesOptIn
     *
     * Create a new early access feature opt-in for an organization.
     *
     */
    public function testCreateOrganizationEarlyAccessFeaturesOptIn()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationInsightMonitoredMediaServer
     *
     * Add a media server to be monitored for this organization.
     *
     */
    public function testCreateOrganizationInsightMonitoredMediaServer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationInventoryDevicesSwapsBulk
     *
     * Swap the devices identified by devices.old with a devices.new, then perform the :afterAction on the devices.old..
     *
     */
    public function testCreateOrganizationInventoryDevicesSwapsBulk()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationInventoryOnboardingCloudMonitoringExportEvent
     *
     * Imports event logs related to the onboarding app into elastisearch.
     *
     */
    public function testCreateOrganizationInventoryOnboardingCloudMonitoringExportEvent()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationInventoryOnboardingCloudMonitoringImport
     *
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring..
     *
     */
    public function testCreateOrganizationInventoryOnboardingCloudMonitoringImport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationInventoryOnboardingCloudMonitoringPrepare
     *
     * Initiates or updates an import session.
     *
     */
    public function testCreateOrganizationInventoryOnboardingCloudMonitoringPrepare()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationNetwork
     *
     * Create a network.
     *
     */
    public function testCreateOrganizationNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationPolicyObject
     *
     * Creates a new Policy Object..
     *
     */
    public function testCreateOrganizationPolicyObject()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationPolicyObjectsGroup
     *
     * Creates a new Policy Object Group..
     *
     */
    public function testCreateOrganizationPolicyObjectsGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationSamlIdp
     *
     * Create a SAML IdP for your organization..
     *
     */
    public function testCreateOrganizationSamlIdp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationSamlRole
     *
     * Create a SAML role.
     *
     */
    public function testCreateOrganizationSamlRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationSmAdminsRole
     *
     * Create a Limited Access Role.
     *
     */
    public function testCreateOrganizationSmAdminsRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationSplashTheme
     *
     * Create a Splash Theme.
     *
     */
    public function testCreateOrganizationSplashTheme()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationSplashThemeAsset
     *
     * Create a Splash Theme Asset.
     *
     */
    public function testCreateOrganizationSplashThemeAsset()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry
     *
     * Create isolation allow list MAC entry for this organization.
     *
     */
    public function testCreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deferNetworkFirmwareUpgradesStagedEvents
     *
     * Postpone by 1 week all pending staged upgrade stages for a network.
     *
     */
    public function testDeferNetworkFirmwareUpgradesStagedEvents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteDeviceSwitchRoutingInterface
     *
     * Delete a layer 3 interface from the switch.
     *
     */
    public function testDeleteDeviceSwitchRoutingInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteDeviceSwitchRoutingStaticRoute
     *
     * Delete a layer 3 static route for a switch.
     *
     */
    public function testDeleteDeviceSwitchRoutingStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetwork
     *
     * Delete a network.
     *
     */
    public function testDeleteNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkAppliancePrefixesDelegatedStatic
     *
     * Delete a static delegated prefix from a network.
     *
     */
    public function testDeleteNetworkAppliancePrefixesDelegatedStatic()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkApplianceRfProfile
     *
     * Delete a RF Profile.
     *
     */
    public function testDeleteNetworkApplianceRfProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkApplianceStaticRoute
     *
     * Delete a static route from an MX or teleworker network.
     *
     */
    public function testDeleteNetworkApplianceStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkApplianceTrafficShapingCustomPerformanceClass
     *
     * Delete a custom performance class from an MX network.
     *
     */
    public function testDeleteNetworkApplianceTrafficShapingCustomPerformanceClass()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkApplianceVlan
     *
     * Delete a VLAN from a network.
     *
     */
    public function testDeleteNetworkApplianceVlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkCameraQualityRetentionProfile
     *
     * Delete an existing quality retention profile for this network..
     *
     */
    public function testDeleteNetworkCameraQualityRetentionProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkCameraWirelessProfile
     *
     * Delete an existing camera wireless profile for this network..
     *
     */
    public function testDeleteNetworkCameraWirelessProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkFirmwareUpgradesStagedGroup
     *
     * Delete a Staged Upgrade Group.
     *
     */
    public function testDeleteNetworkFirmwareUpgradesStagedGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkFloorPlan
     *
     * Destroy a floor plan.
     *
     */
    public function testDeleteNetworkFloorPlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkGroupPolicy
     *
     * Delete a group policy.
     *
     */
    public function testDeleteNetworkGroupPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkMerakiAuthUser
     *
     * Delete an 802.1X RADIUS user, or deauthorize and optionally delete a splash guest or client VPN user..
     *
     */
    public function testDeleteNetworkMerakiAuthUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkMqttBroker
     *
     * Delete an MQTT broker.
     *
     */
    public function testDeleteNetworkMqttBroker()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkPiiRequest
     *
     * Delete a restrict processing PII request.
     *
     */
    public function testDeleteNetworkPiiRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSensorAlertsProfile
     *
     * Deletes a sensor alert profile from a network..
     *
     */
    public function testDeleteNetworkSensorAlertsProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSmTargetGroup
     *
     * Delete a target group from a network.
     *
     */
    public function testDeleteNetworkSmTargetGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSmUserAccessDevice
     *
     * Delete a User Access Device.
     *
     */
    public function testDeleteNetworkSmUserAccessDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSwitchAccessPolicy
     *
     * Delete an access policy for a switch network.
     *
     */
    public function testDeleteNetworkSwitchAccessPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer
     *
     * Remove a server from being trusted by Dynamic ARP Inspection on this network.
     *
     */
    public function testDeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSwitchLinkAggregation
     *
     * Split a link aggregation group into separate ports.
     *
     */
    public function testDeleteNetworkSwitchLinkAggregation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSwitchPortSchedule
     *
     * Delete a switch port schedule.
     *
     */
    public function testDeleteNetworkSwitchPortSchedule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSwitchQosRule
     *
     * Delete a quality of service rule.
     *
     */
    public function testDeleteNetworkSwitchQosRule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSwitchRoutingMulticastRendezvousPoint
     *
     * Delete a multicast rendezvous point.
     *
     */
    public function testDeleteNetworkSwitchRoutingMulticastRendezvousPoint()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSwitchStack
     *
     * Delete a stack.
     *
     */
    public function testDeleteNetworkSwitchStack()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSwitchStackRoutingInterface
     *
     * Delete a layer 3 interface from a switch stack.
     *
     */
    public function testDeleteNetworkSwitchStackRoutingInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSwitchStackRoutingStaticRoute
     *
     * Delete a layer 3 static route for a switch stack.
     *
     */
    public function testDeleteNetworkSwitchStackRoutingStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkVlanProfile
     *
     * Delete a VLAN profile of a network.
     *
     */
    public function testDeleteNetworkVlanProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkWebhooksHttpServer
     *
     * Delete an HTTP server from a network.
     *
     */
    public function testDeleteNetworkWebhooksHttpServer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkWebhooksPayloadTemplate
     *
     * Destroy a webhook payload template for a network.
     *
     */
    public function testDeleteNetworkWebhooksPayloadTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkWirelessAirMarshalRule
     *
     * Delete an Air Marshal rule..
     *
     */
    public function testDeleteNetworkWirelessAirMarshalRule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkWirelessEthernetPortsProfile
     *
     * Delete an AP port profile.
     *
     */
    public function testDeleteNetworkWirelessEthernetPortsProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkWirelessRfProfile
     *
     * Delete a RF Profile.
     *
     */
    public function testDeleteNetworkWirelessRfProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkWirelessSsidIdentityPsk
     *
     * Delete an Identity PSK.
     *
     */
    public function testDeleteNetworkWirelessSsidIdentityPsk()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganization
     *
     * Delete an organization.
     *
     */
    public function testDeleteOrganization()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationActionBatch
     *
     * Delete an action batch.
     *
     */
    public function testDeleteOrganizationActionBatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationAdaptivePolicyAcl
     *
     * Deletes the specified adaptive policy ACL.
     *
     */
    public function testDeleteOrganizationAdaptivePolicyAcl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationAdaptivePolicyGroup
     *
     * Deletes the specified adaptive policy group and any associated policies and references.
     *
     */
    public function testDeleteOrganizationAdaptivePolicyGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationAdaptivePolicyPolicy
     *
     * Delete an Adaptive Policy.
     *
     */
    public function testDeleteOrganizationAdaptivePolicyPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationAdmin
     *
     * Revoke all access for a dashboard administrator within this organization.
     *
     */
    public function testDeleteOrganizationAdmin()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationAlertsProfile
     *
     * Removes an organization-wide alert config.
     *
     */
    public function testDeleteOrganizationAlertsProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationApplianceDnsLocalProfile
     *
     * Deletes a local DNS profile.
     *
     */
    public function testDeleteOrganizationApplianceDnsLocalProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationApplianceDnsLocalRecord
     *
     * Deletes a local DNS record.
     *
     */
    public function testDeleteOrganizationApplianceDnsLocalRecord()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationApplianceDnsSplitProfile
     *
     * Deletes a split DNS profile.
     *
     */
    public function testDeleteOrganizationApplianceDnsSplitProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationBrandingPolicy
     *
     * Delete a branding policy.
     *
     */
    public function testDeleteOrganizationBrandingPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationCameraCustomAnalyticsArtifact
     *
     * Delete Custom Analytics Artifact.
     *
     */
    public function testDeleteOrganizationCameraCustomAnalyticsArtifact()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationCameraRole
     *
     * Delete an existing role for this organization..
     *
     */
    public function testDeleteOrganizationCameraRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationCellularGatewayEsimsServiceProvidersAccount
     *
     * Remove a service provider account's integration with the Dashboard..
     *
     */
    public function testDeleteOrganizationCellularGatewayEsimsServiceProvidersAccount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationConfigTemplate
     *
     * Remove a configuration template.
     *
     */
    public function testDeleteOrganizationConfigTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationEarlyAccessFeaturesOptIn
     *
     * Delete an early access feature opt-in.
     *
     */
    public function testDeleteOrganizationEarlyAccessFeaturesOptIn()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationInsightMonitoredMediaServer
     *
     * Delete a monitored media server from this organization.
     *
     */
    public function testDeleteOrganizationInsightMonitoredMediaServer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationPolicyObject
     *
     * Deletes a Policy Object..
     *
     */
    public function testDeleteOrganizationPolicyObject()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationPolicyObjectsGroup
     *
     * Deletes a Policy Object Group..
     *
     */
    public function testDeleteOrganizationPolicyObjectsGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationSamlIdp
     *
     * Remove a SAML IdP in your organization..
     *
     */
    public function testDeleteOrganizationSamlIdp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationSamlRole
     *
     * Remove a SAML role.
     *
     */
    public function testDeleteOrganizationSamlRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationSmAdminsRole
     *
     * Delete a Limited Access Role.
     *
     */
    public function testDeleteOrganizationSmAdminsRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationSplashAsset
     *
     * Delete a Splash Theme Asset.
     *
     */
    public function testDeleteOrganizationSplashAsset()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationSplashTheme
     *
     * Delete a Splash Theme.
     *
     */
    public function testDeleteOrganizationSplashTheme()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry
     *
     * Destroy isolation allow list MAC entry for this organization.
     *
     */
    public function testDeleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for disableOrganizationIntegrationsXdrNetworks
     *
     * Disable XDR on networks.
     *
     */
    public function testDisableOrganizationIntegrationsXdrNetworks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for enableOrganizationIntegrationsXdrNetworks
     *
     * Enable XDR on networks.
     *
     */
    public function testEnableOrganizationIntegrationsXdrNetworks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateAdministeredIdentitiesMeApiKeys
     *
     * Generates an API key for an identity.
     *
     */
    public function testGenerateAdministeredIdentitiesMeApiKeys()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAdministeredIdentitiesMeApiKeys
     *
     * List the non-sensitive metadata associated with the API keys that belong to the user.
     *
     */
    public function testGetAdministeredIdentitiesMeApiKeys()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAdministeredLicensingSubscriptionEntitlements
     *
     * Retrieve the list of purchasable entitlements.
     *
     */
    public function testGetAdministeredLicensingSubscriptionEntitlements()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAdministeredLicensingSubscriptionSubscriptions
     *
     * List available subscriptions.
     *
     */
    public function testGetAdministeredLicensingSubscriptionSubscriptions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses
     *
     * Get compliance status for requested subscriptions.
     *
     */
    public function testGetAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDevice
     *
     * Return a single device.
     *
     */
    public function testGetDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceApplianceRadioSettings
     *
     * Return the radio settings of an appliance.
     *
     */
    public function testGetDeviceApplianceRadioSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceApplianceUplinksSettings
     *
     * Return the uplink settings for an MX appliance.
     *
     */
    public function testGetDeviceApplianceUplinksSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCameraCustomAnalytics
     *
     * Return custom analytics settings for a camera.
     *
     */
    public function testGetDeviceCameraCustomAnalytics()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCameraQualityAndRetention
     *
     * Returns quality and retention settings for the given camera.
     *
     */
    public function testGetDeviceCameraQualityAndRetention()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCameraSense
     *
     * Returns sense settings for a given camera.
     *
     */
    public function testGetDeviceCameraSense()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCameraSenseObjectDetectionModels
     *
     * Returns the MV Sense object detection model list for the given camera.
     *
     */
    public function testGetDeviceCameraSenseObjectDetectionModels()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCameraVideoLink
     *
     * Returns video link to the specified camera.
     *
     */
    public function testGetDeviceCameraVideoLink()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCameraVideoSettings
     *
     * Returns video settings for the given camera.
     *
     */
    public function testGetDeviceCameraVideoSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCameraWirelessProfiles
     *
     * Returns wireless profile assigned to the given camera.
     *
     */
    public function testGetDeviceCameraWirelessProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCellularGatewayLan
     *
     * Show the LAN Settings of a MG.
     *
     */
    public function testGetDeviceCellularGatewayLan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCellularGatewayPortForwardingRules
     *
     * Returns the port forwarding rules for a single MG..
     *
     */
    public function testGetDeviceCellularGatewayPortForwardingRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCellularSims
     *
     * Return the SIM and APN configurations for a cellular device..
     *
     */
    public function testGetDeviceCellularSims()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceManagementInterface
     *
     * Return the management interface settings for a device.
     *
     */
    public function testGetDeviceManagementInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSensorCommand
     *
     * Returns information about the command's execution, including the status.
     *
     */
    public function testGetDeviceSensorCommand()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSensorCommands
     *
     * Returns a historical log of all commands.
     *
     */
    public function testGetDeviceSensorCommands()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSensorRelationships
     *
     * List the sensor roles for a given sensor or camera device..
     *
     */
    public function testGetDeviceSensorRelationships()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSwitchPort
     *
     * Return a switch port.
     *
     */
    public function testGetDeviceSwitchPort()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSwitchPorts
     *
     * List the switch ports for a switch.
     *
     */
    public function testGetDeviceSwitchPorts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSwitchRoutingInterface
     *
     * Return a layer 3 interface for a switch.
     *
     */
    public function testGetDeviceSwitchRoutingInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSwitchRoutingInterfaceDhcp
     *
     * Return a layer 3 interface DHCP configuration for a switch.
     *
     */
    public function testGetDeviceSwitchRoutingInterfaceDhcp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSwitchRoutingInterfaces
     *
     * List layer 3 interfaces for a switch.
     *
     */
    public function testGetDeviceSwitchRoutingInterfaces()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSwitchRoutingStaticRoute
     *
     * Return a layer 3 static route for a switch.
     *
     */
    public function testGetDeviceSwitchRoutingStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSwitchRoutingStaticRoutes
     *
     * List layer 3 static routes for a switch.
     *
     */
    public function testGetDeviceSwitchRoutingStaticRoutes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSwitchWarmSpare
     *
     * Return warm spare configuration for a switch.
     *
     */
    public function testGetDeviceSwitchWarmSpare()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceWirelessBluetoothSettings
     *
     * Return the bluetooth settings for a wireless device.
     *
     */
    public function testGetDeviceWirelessBluetoothSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceWirelessElectronicShelfLabel
     *
     * Return the ESL settings of a device.
     *
     */
    public function testGetDeviceWirelessElectronicShelfLabel()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceWirelessRadioSettings
     *
     * Return the manually configured radio settings overrides of a device, which take precedence over RF profiles..
     *
     */
    public function testGetDeviceWirelessRadioSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetwork
     *
     * Return a network.
     *
     */
    public function testGetNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkAlertsSettings
     *
     * Return the alert configuration for this network.
     *
     */
    public function testGetNetworkAlertsSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceConnectivityMonitoringDestinations
     *
     * Return the connectivity testing destinations for an MX network.
     *
     */
    public function testGetNetworkApplianceConnectivityMonitoringDestinations()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceContentFiltering
     *
     * Return the content filtering settings for an MX network.
     *
     */
    public function testGetNetworkApplianceContentFiltering()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceContentFilteringCategories
     *
     * List all available content filtering categories for an MX network.
     *
     */
    public function testGetNetworkApplianceContentFilteringCategories()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallCellularFirewallRules
     *
     * Return the cellular firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallCellularFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallFirewalledService
     *
     * Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP').
     *
     */
    public function testGetNetworkApplianceFirewallFirewalledService()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallFirewalledServices
     *
     * List the appliance services and their accessibility rules.
     *
     */
    public function testGetNetworkApplianceFirewallFirewalledServices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallInboundCellularFirewallRules
     *
     * Return the inbound cellular firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallInboundCellularFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallInboundFirewallRules
     *
     * Return the inbound firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallInboundFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallL3FirewallRules
     *
     * Return the L3 firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallL3FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallL7FirewallRules
     *
     * List the MX L7 firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallL7FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallL7FirewallRulesApplicationCategories
     *
     * Return the L7 firewall application categories and their associated applications for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallL7FirewallRulesApplicationCategories()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallOneToManyNatRules
     *
     * Return the 1:Many NAT mapping rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallOneToManyNatRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallOneToOneNatRules
     *
     * Return the 1:1 NAT mapping rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallOneToOneNatRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallPortForwardingRules
     *
     * Return the port forwarding rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallPortForwardingRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallSettings
     *
     * Return the firewall settings for this network.
     *
     */
    public function testGetNetworkApplianceFirewallSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkAppliancePort
     *
     * Return per-port VLAN settings for a single MX port..
     *
     */
    public function testGetNetworkAppliancePort()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkAppliancePorts
     *
     * List per-port VLAN settings for all ports of a MX..
     *
     */
    public function testGetNetworkAppliancePorts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkAppliancePrefixesDelegatedStatic
     *
     * Return a static delegated prefix from a network.
     *
     */
    public function testGetNetworkAppliancePrefixesDelegatedStatic()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkAppliancePrefixesDelegatedStatics
     *
     * List static delegated prefixes for a network.
     *
     */
    public function testGetNetworkAppliancePrefixesDelegatedStatics()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceRfProfile
     *
     * Return a RF profile.
     *
     */
    public function testGetNetworkApplianceRfProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceRfProfiles
     *
     * List the RF profiles for this network.
     *
     */
    public function testGetNetworkApplianceRfProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceSecurityIntrusion
     *
     * Returns all supported intrusion settings for an MX network.
     *
     */
    public function testGetNetworkApplianceSecurityIntrusion()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceSecurityMalware
     *
     * Returns all supported malware settings for an MX network.
     *
     */
    public function testGetNetworkApplianceSecurityMalware()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceSettings
     *
     * Return the appliance settings for a network.
     *
     */
    public function testGetNetworkApplianceSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceSingleLan
     *
     * Return single LAN configuration.
     *
     */
    public function testGetNetworkApplianceSingleLan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceSsid
     *
     * Return a single MX SSID.
     *
     */
    public function testGetNetworkApplianceSsid()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceSsids
     *
     * List the MX SSIDs in a network.
     *
     */
    public function testGetNetworkApplianceSsids()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceStaticRoute
     *
     * Return a static route for an MX or teleworker network.
     *
     */
    public function testGetNetworkApplianceStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceStaticRoutes
     *
     * List the static routes for an MX or teleworker network.
     *
     */
    public function testGetNetworkApplianceStaticRoutes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceTrafficShaping
     *
     * Display the traffic shaping settings for an MX network.
     *
     */
    public function testGetNetworkApplianceTrafficShaping()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceTrafficShapingCustomPerformanceClass
     *
     * Return a custom performance class for an MX network.
     *
     */
    public function testGetNetworkApplianceTrafficShapingCustomPerformanceClass()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceTrafficShapingCustomPerformanceClasses
     *
     * List all custom performance classes for an MX network.
     *
     */
    public function testGetNetworkApplianceTrafficShapingCustomPerformanceClasses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceTrafficShapingRules
     *
     * Display the traffic shaping settings rules for an MX network.
     *
     */
    public function testGetNetworkApplianceTrafficShapingRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceTrafficShapingUplinkBandwidth
     *
     * Returns the uplink bandwidth limits for your MX network.
     *
     */
    public function testGetNetworkApplianceTrafficShapingUplinkBandwidth()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceTrafficShapingUplinkSelection
     *
     * Show uplink selection settings for an MX network.
     *
     */
    public function testGetNetworkApplianceTrafficShapingUplinkSelection()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceVlan
     *
     * Return a VLAN.
     *
     */
    public function testGetNetworkApplianceVlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceVlans
     *
     * List the VLANs for an MX network.
     *
     */
    public function testGetNetworkApplianceVlans()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceVlansSettings
     *
     * Returns the enabled status of VLANs for the network.
     *
     */
    public function testGetNetworkApplianceVlansSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceVpnBgp
     *
     * Return a Hub BGP Configuration.
     *
     */
    public function testGetNetworkApplianceVpnBgp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceVpnSiteToSiteVpn
     *
     * Return the site-to-site VPN settings of a network.
     *
     */
    public function testGetNetworkApplianceVpnSiteToSiteVpn()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceWarmSpare
     *
     * Return MX warm spare settings.
     *
     */
    public function testGetNetworkApplianceWarmSpare()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkCameraQualityRetentionProfile
     *
     * Retrieve a single quality retention profile.
     *
     */
    public function testGetNetworkCameraQualityRetentionProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkCameraQualityRetentionProfiles
     *
     * List the quality retention profiles for this network.
     *
     */
    public function testGetNetworkCameraQualityRetentionProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkCameraSchedules
     *
     * Returns a list of all camera recording schedules..
     *
     */
    public function testGetNetworkCameraSchedules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkCameraWirelessProfile
     *
     * Retrieve a single camera wireless profile..
     *
     */
    public function testGetNetworkCameraWirelessProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkCameraWirelessProfiles
     *
     * List the camera wireless profiles for this network..
     *
     */
    public function testGetNetworkCameraWirelessProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkCellularGatewayConnectivityMonitoringDestinations
     *
     * Return the connectivity testing destinations for an MG network.
     *
     */
    public function testGetNetworkCellularGatewayConnectivityMonitoringDestinations()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkCellularGatewayDhcp
     *
     * List common DHCP settings of MGs.
     *
     */
    public function testGetNetworkCellularGatewayDhcp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkCellularGatewaySubnetPool
     *
     * Return the subnet pool and mask configured for MGs in the network..
     *
     */
    public function testGetNetworkCellularGatewaySubnetPool()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkCellularGatewayUplink
     *
     * Returns the uplink settings for your MG network..
     *
     */
    public function testGetNetworkCellularGatewayUplink()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkClientPolicy
     *
     * Return the policy assigned to a client on the network.
     *
     */
    public function testGetNetworkClientPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkClientSplashAuthorizationStatus
     *
     * Return the splash authorization for a client, for each SSID they've associated with through splash.
     *
     */
    public function testGetNetworkClientSplashAuthorizationStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkDevices
     *
     * List the devices in a network.
     *
     */
    public function testGetNetworkDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkFirmwareUpgrades
     *
     * Get firmware upgrade information for a network.
     *
     */
    public function testGetNetworkFirmwareUpgrades()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkFirmwareUpgradesStagedEvents
     *
     * Get the Staged Upgrade Event from a network.
     *
     */
    public function testGetNetworkFirmwareUpgradesStagedEvents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkFirmwareUpgradesStagedGroup
     *
     * Get a Staged Upgrade Group from a network.
     *
     */
    public function testGetNetworkFirmwareUpgradesStagedGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkFirmwareUpgradesStagedGroups
     *
     * List of Staged Upgrade Groups in a network.
     *
     */
    public function testGetNetworkFirmwareUpgradesStagedGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkFirmwareUpgradesStagedStages
     *
     * Order of Staged Upgrade Groups in a network.
     *
     */
    public function testGetNetworkFirmwareUpgradesStagedStages()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkFloorPlan
     *
     * Find a floor plan by ID.
     *
     */
    public function testGetNetworkFloorPlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkFloorPlans
     *
     * List the floor plans that belong to your network.
     *
     */
    public function testGetNetworkFloorPlans()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkGroupPolicies
     *
     * List the group policies in a network.
     *
     */
    public function testGetNetworkGroupPolicies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkGroupPolicy
     *
     * Display a group policy.
     *
     */
    public function testGetNetworkGroupPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkHealthAlerts
     *
     * Return all global alerts on this network.
     *
     */
    public function testGetNetworkHealthAlerts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkMerakiAuthUser
     *
     * Return the Meraki Auth splash guest, RADIUS, or client VPN user.
     *
     */
    public function testGetNetworkMerakiAuthUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkMerakiAuthUsers
     *
     * List the authorized users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a MX network).
     *
     */
    public function testGetNetworkMerakiAuthUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkMqttBroker
     *
     * Return an MQTT broker.
     *
     */
    public function testGetNetworkMqttBroker()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkMqttBrokers
     *
     * List the MQTT brokers for this network.
     *
     */
    public function testGetNetworkMqttBrokers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkNetflow
     *
     * Return the NetFlow traffic reporting settings for a network.
     *
     */
    public function testGetNetworkNetflow()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkPiiPiiKeys
     *
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier.
     *
     */
    public function testGetNetworkPiiPiiKeys()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkPiiRequest
     *
     * Return a PII request.
     *
     */
    public function testGetNetworkPiiRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkPiiRequests
     *
     * List the PII requests for this network or organization.
     *
     */
    public function testGetNetworkPiiRequests()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkPiiSmDevicesForKey
     *
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier.
     *
     */
    public function testGetNetworkPiiSmDevicesForKey()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkPiiSmOwnersForKey
     *
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier.
     *
     */
    public function testGetNetworkPiiSmOwnersForKey()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkPoliciesByClient
     *
     * Get policies for all clients with policies.
     *
     */
    public function testGetNetworkPoliciesByClient()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSensorAlertsProfile
     *
     * Show details of a sensor alert profile for a network..
     *
     */
    public function testGetNetworkSensorAlertsProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSensorAlertsProfiles
     *
     * Lists all sensor alert profiles for a network..
     *
     */
    public function testGetNetworkSensorAlertsProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSensorMqttBroker
     *
     * Return the sensor settings of an MQTT broker.
     *
     */
    public function testGetNetworkSensorMqttBroker()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSensorMqttBrokers
     *
     * List the sensor settings of all MQTT brokers for this network.
     *
     */
    public function testGetNetworkSensorMqttBrokers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSensorRelationships
     *
     * List the sensor roles for devices in a given network.
     *
     */
    public function testGetNetworkSensorRelationships()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSettings
     *
     * Return the settings for a network.
     *
     */
    public function testGetNetworkSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmBypassActivationLockAttempt
     *
     * Bypass activation lock attempt status.
     *
     */
    public function testGetNetworkSmBypassActivationLockAttempt()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceCerts
     *
     * List the certs on a device.
     *
     */
    public function testGetNetworkSmDeviceCerts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceDeviceProfiles
     *
     * Get the installed profiles associated with a device.
     *
     */
    public function testGetNetworkSmDeviceDeviceProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceNetworkAdapters
     *
     * List the network adapters of a device.
     *
     */
    public function testGetNetworkSmDeviceNetworkAdapters()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceRestrictions
     *
     * List the restrictions on a device.
     *
     */
    public function testGetNetworkSmDeviceRestrictions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceSecurityCenters
     *
     * List the security centers on a device.
     *
     */
    public function testGetNetworkSmDeviceSecurityCenters()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceSoftwares
     *
     * Get a list of softwares associated with a device.
     *
     */
    public function testGetNetworkSmDeviceSoftwares()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceWlanLists
     *
     * List the saved SSID names on a device.
     *
     */
    public function testGetNetworkSmDeviceWlanLists()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDevices
     *
     * List the devices enrolled in an SM network with various specified fields and filters.
     *
     */
    public function testGetNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmProfiles
     *
     * List all profiles in a network.
     *
     */
    public function testGetNetworkSmProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmTargetGroup
     *
     * Return a target group.
     *
     */
    public function testGetNetworkSmTargetGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmTargetGroups
     *
     * List the target groups in this network.
     *
     */
    public function testGetNetworkSmTargetGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmTrustedAccessConfigs
     *
     * List Trusted Access Configs.
     *
     */
    public function testGetNetworkSmTrustedAccessConfigs()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmUserAccessDevices
     *
     * List User Access Devices and its Trusted Access Connections.
     *
     */
    public function testGetNetworkSmUserAccessDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmUserDeviceProfiles
     *
     * Get the profiles associated with a user.
     *
     */
    public function testGetNetworkSmUserDeviceProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmUserSoftwares
     *
     * Get a list of softwares associated with a user.
     *
     */
    public function testGetNetworkSmUserSoftwares()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmUsers
     *
     * List the owners in an SM network with various specified fields and filters.
     *
     */
    public function testGetNetworkSmUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSnmp
     *
     * Return the SNMP settings for a network.
     *
     */
    public function testGetNetworkSnmp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchAccessControlLists
     *
     * Return the access control lists for a MS network.
     *
     */
    public function testGetNetworkSwitchAccessControlLists()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchAccessPolicies
     *
     * List the access policies for a switch network.
     *
     */
    public function testGetNetworkSwitchAccessPolicies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchAccessPolicy
     *
     * Return a specific access policy for a switch network.
     *
     */
    public function testGetNetworkSwitchAccessPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchAlternateManagementInterface
     *
     * Return the switch alternate management interface for the network.
     *
     */
    public function testGetNetworkSwitchAlternateManagementInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchDhcpServerPolicy
     *
     * Return the DHCP server settings.
     *
     */
    public function testGetNetworkSwitchDhcpServerPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers
     *
     * Return the list of servers trusted by Dynamic ARP Inspection on this network.
     *
     */
    public function testGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice
     *
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings.
     *
     */
    public function testGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchDhcpV4ServersSeen
     *
     * Return the network's DHCPv4 servers seen within the selected timeframe (default 1 day).
     *
     */
    public function testGetNetworkSwitchDhcpV4ServersSeen()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchDscpToCosMappings
     *
     * Return the DSCP to CoS mappings.
     *
     */
    public function testGetNetworkSwitchDscpToCosMappings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchLinkAggregations
     *
     * List link aggregation groups.
     *
     */
    public function testGetNetworkSwitchLinkAggregations()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchMtu
     *
     * Return the MTU configuration.
     *
     */
    public function testGetNetworkSwitchMtu()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchPortSchedules
     *
     * List switch port schedules.
     *
     */
    public function testGetNetworkSwitchPortSchedules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchQosRule
     *
     * Return a quality of service rule.
     *
     */
    public function testGetNetworkSwitchQosRule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchQosRules
     *
     * List quality of service rules.
     *
     */
    public function testGetNetworkSwitchQosRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchQosRulesOrder
     *
     * Return the quality of service rule IDs by order in which they will be processed by the switch.
     *
     */
    public function testGetNetworkSwitchQosRulesOrder()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchRoutingMulticast
     *
     * Return multicast settings for a network.
     *
     */
    public function testGetNetworkSwitchRoutingMulticast()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchRoutingMulticastRendezvousPoint
     *
     * Return a multicast rendezvous point.
     *
     */
    public function testGetNetworkSwitchRoutingMulticastRendezvousPoint()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchRoutingMulticastRendezvousPoints
     *
     * List multicast rendezvous points.
     *
     */
    public function testGetNetworkSwitchRoutingMulticastRendezvousPoints()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchRoutingOspf
     *
     * Return layer 3 OSPF routing configuration.
     *
     */
    public function testGetNetworkSwitchRoutingOspf()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchSettings
     *
     * Returns the switch network settings.
     *
     */
    public function testGetNetworkSwitchSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchStack
     *
     * Show a switch stack.
     *
     */
    public function testGetNetworkSwitchStack()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchStackRoutingInterface
     *
     * Return a layer 3 interface from a switch stack.
     *
     */
    public function testGetNetworkSwitchStackRoutingInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchStackRoutingInterfaceDhcp
     *
     * Return a layer 3 interface DHCP configuration for a switch stack.
     *
     */
    public function testGetNetworkSwitchStackRoutingInterfaceDhcp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchStackRoutingInterfaces
     *
     * List layer 3 interfaces for a switch stack.
     *
     */
    public function testGetNetworkSwitchStackRoutingInterfaces()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchStackRoutingStaticRoute
     *
     * Return a layer 3 static route for a switch stack.
     *
     */
    public function testGetNetworkSwitchStackRoutingStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchStackRoutingStaticRoutes
     *
     * List layer 3 static routes for a switch stack.
     *
     */
    public function testGetNetworkSwitchStackRoutingStaticRoutes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchStacks
     *
     * List the switch stacks in a network.
     *
     */
    public function testGetNetworkSwitchStacks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchStormControl
     *
     * Return the storm control configuration for a switch network.
     *
     */
    public function testGetNetworkSwitchStormControl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchStp
     *
     * Returns STP settings.
     *
     */
    public function testGetNetworkSwitchStp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSyslogServers
     *
     * List the syslog servers for a network.
     *
     */
    public function testGetNetworkSyslogServers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkTrafficAnalysis
     *
     * Return the traffic analysis settings for a network.
     *
     */
    public function testGetNetworkTrafficAnalysis()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkTrafficShapingApplicationCategories
     *
     * Returns the application categories for traffic shaping rules.
     *
     */
    public function testGetNetworkTrafficShapingApplicationCategories()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkTrafficShapingDscpTaggingOptions
     *
     * Returns the available DSCP tagging options for your traffic shaping rules..
     *
     */
    public function testGetNetworkTrafficShapingDscpTaggingOptions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkVlanProfile
     *
     * Get an existing VLAN profile of a network.
     *
     */
    public function testGetNetworkVlanProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkVlanProfiles
     *
     * List VLAN profiles for a network.
     *
     */
    public function testGetNetworkVlanProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkVlanProfilesAssignmentsByDevice
     *
     * Get the assigned VLAN Profiles for devices in a network.
     *
     */
    public function testGetNetworkVlanProfilesAssignmentsByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWebhooksHttpServer
     *
     * Return an HTTP server for a network.
     *
     */
    public function testGetNetworkWebhooksHttpServer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWebhooksHttpServers
     *
     * List the HTTP servers for a network.
     *
     */
    public function testGetNetworkWebhooksHttpServers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWebhooksPayloadTemplate
     *
     * Get the webhook payload template for a network.
     *
     */
    public function testGetNetworkWebhooksPayloadTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWebhooksPayloadTemplates
     *
     * List the webhook payload templates for a network.
     *
     */
    public function testGetNetworkWebhooksPayloadTemplates()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWebhooksWebhookTest
     *
     * Return the status of a webhook test for a network.
     *
     */
    public function testGetNetworkWebhooksWebhookTest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessAlternateManagementInterface
     *
     * Return alternate management interface and devices with IP assigned.
     *
     */
    public function testGetNetworkWirelessAlternateManagementInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessBilling
     *
     * Return the billing settings of this network.
     *
     */
    public function testGetNetworkWirelessBilling()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessBluetoothSettings
     *
     * Return the Bluetooth settings for a network. <a href=\"https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\">Bluetooth settings</a> must be enabled on the network..
     *
     */
    public function testGetNetworkWirelessBluetoothSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessElectronicShelfLabel
     *
     * Return the ESL settings of a wireless network.
     *
     */
    public function testGetNetworkWirelessElectronicShelfLabel()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessElectronicShelfLabelConfiguredDevices
     *
     * Get a list of all ESL eligible devices of a network.
     *
     */
    public function testGetNetworkWirelessElectronicShelfLabelConfiguredDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessEthernetPortsProfile
     *
     * Show the AP port profile by ID for this network.
     *
     */
    public function testGetNetworkWirelessEthernetPortsProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessEthernetPortsProfiles
     *
     * List the AP port profiles for this network.
     *
     */
    public function testGetNetworkWirelessEthernetPortsProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessRfProfile
     *
     * Return a RF profile.
     *
     */
    public function testGetNetworkWirelessRfProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessRfProfiles
     *
     * List RF profiles for this network.
     *
     */
    public function testGetNetworkWirelessRfProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSettings
     *
     * Return the wireless settings for a network.
     *
     */
    public function testGetNetworkWirelessSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsid
     *
     * Return a single MR SSID.
     *
     */
    public function testGetNetworkWirelessSsid()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidBonjourForwarding
     *
     * List the Bonjour forwarding setting and rules for the SSID.
     *
     */
    public function testGetNetworkWirelessSsidBonjourForwarding()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidDeviceTypeGroupPolicies
     *
     * List the device type group policies for the SSID.
     *
     */
    public function testGetNetworkWirelessSsidDeviceTypeGroupPolicies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidEapOverride
     *
     * Return the EAP overridden parameters for an SSID.
     *
     */
    public function testGetNetworkWirelessSsidEapOverride()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidFirewallL3FirewallRules
     *
     * Return the L3 firewall rules for an SSID on an MR network.
     *
     */
    public function testGetNetworkWirelessSsidFirewallL3FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidFirewallL7FirewallRules
     *
     * Return the L7 firewall rules for an SSID on an MR network.
     *
     */
    public function testGetNetworkWirelessSsidFirewallL7FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidHotspot20
     *
     * Return the Hotspot 2.0 settings for an SSID.
     *
     */
    public function testGetNetworkWirelessSsidHotspot20()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidIdentityPsk
     *
     * Return an Identity PSK.
     *
     */
    public function testGetNetworkWirelessSsidIdentityPsk()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidIdentityPsks
     *
     * List all Identity PSKs in a wireless network.
     *
     */
    public function testGetNetworkWirelessSsidIdentityPsks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidSchedules
     *
     * List the outage schedule for the SSID.
     *
     */
    public function testGetNetworkWirelessSsidSchedules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidSplashSettings
     *
     * Display the splash page settings for the given SSID.
     *
     */
    public function testGetNetworkWirelessSsidSplashSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidTrafficShapingRules
     *
     * Display the traffic shaping settings for a SSID on an MR network.
     *
     */
    public function testGetNetworkWirelessSsidTrafficShapingRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidVpn
     *
     * List the VPN settings for the SSID..
     *
     */
    public function testGetNetworkWirelessSsidVpn()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsids
     *
     * List the MR SSIDs in a network.
     *
     */
    public function testGetNetworkWirelessSsids()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganization
     *
     * Return an organization.
     *
     */
    public function testGetOrganization()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationActionBatch
     *
     * Return an action batch.
     *
     */
    public function testGetOrganizationActionBatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationActionBatches
     *
     * Return the list of action batches in the organization.
     *
     */
    public function testGetOrganizationActionBatches()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdaptivePolicyAcl
     *
     * Returns the adaptive policy ACL information.
     *
     */
    public function testGetOrganizationAdaptivePolicyAcl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdaptivePolicyAcls
     *
     * List adaptive policy ACLs in a organization.
     *
     */
    public function testGetOrganizationAdaptivePolicyAcls()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdaptivePolicyGroup
     *
     * Returns an adaptive policy group.
     *
     */
    public function testGetOrganizationAdaptivePolicyGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdaptivePolicyGroups
     *
     * List adaptive policy groups in a organization.
     *
     */
    public function testGetOrganizationAdaptivePolicyGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdaptivePolicyPolicies
     *
     * List adaptive policies in an organization.
     *
     */
    public function testGetOrganizationAdaptivePolicyPolicies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdaptivePolicyPolicy
     *
     * Return an adaptive policy.
     *
     */
    public function testGetOrganizationAdaptivePolicyPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdaptivePolicySettings
     *
     * Returns global adaptive policy settings in an organization.
     *
     */
    public function testGetOrganizationAdaptivePolicySettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAdmins
     *
     * List the dashboard administrators in this organization.
     *
     */
    public function testGetOrganizationAdmins()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationAlertsProfiles
     *
     * List all organization-wide alert configurations.
     *
     */
    public function testGetOrganizationAlertsProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceDnsLocalProfiles
     *
     * Fetch the local DNS profiles used in the organization.
     *
     */
    public function testGetOrganizationApplianceDnsLocalProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceDnsLocalProfilesAssignments
     *
     * Fetch the local DNS profile assignments in the organization.
     *
     */
    public function testGetOrganizationApplianceDnsLocalProfilesAssignments()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceDnsLocalRecords
     *
     * Fetch the DNS records used in local DNS profiles.
     *
     */
    public function testGetOrganizationApplianceDnsLocalRecords()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceDnsSplitProfiles
     *
     * Fetch the split DNS profiles used in the organization.
     *
     */
    public function testGetOrganizationApplianceDnsSplitProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceDnsSplitProfilesAssignments
     *
     * Fetch the split DNS profile assignments in the organization.
     *
     */
    public function testGetOrganizationApplianceDnsSplitProfilesAssignments()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceFirewallMulticastForwardingByNetwork
     *
     * List Static Multicasting forwarding settings for MX networks.
     *
     */
    public function testGetOrganizationApplianceFirewallMulticastForwardingByNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceSecurityIntrusion
     *
     * Returns all supported intrusion settings for an organization.
     *
     */
    public function testGetOrganizationApplianceSecurityIntrusion()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceTrafficShapingVpnExclusionsByNetwork
     *
     * Display VPN exclusion rules for MX networks..
     *
     */
    public function testGetOrganizationApplianceTrafficShapingVpnExclusionsByNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceVpnThirdPartyVPNPeers
     *
     * Return the third party VPN peers for an organization.
     *
     */
    public function testGetOrganizationApplianceVpnThirdPartyVPNPeers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceVpnVpnFirewallRules
     *
     * Return the firewall rules for an organization's site-to-site VPN.
     *
     */
    public function testGetOrganizationApplianceVpnVpnFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationBrandingPolicies
     *
     * List the branding policies of an organization.
     *
     */
    public function testGetOrganizationBrandingPolicies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationBrandingPoliciesPriorities
     *
     * Return the branding policy IDs of an organization in priority order.
     *
     */
    public function testGetOrganizationBrandingPoliciesPriorities()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationBrandingPolicy
     *
     * Return a branding policy.
     *
     */
    public function testGetOrganizationBrandingPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraBoundariesAreasByDevice
     *
     * Returns all configured area boundaries of cameras.
     *
     */
    public function testGetOrganizationCameraBoundariesAreasByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraBoundariesLinesByDevice
     *
     * Returns all configured crossingline boundaries of cameras.
     *
     */
    public function testGetOrganizationCameraBoundariesLinesByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraCustomAnalyticsArtifact
     *
     * Get Custom Analytics Artifact.
     *
     */
    public function testGetOrganizationCameraCustomAnalyticsArtifact()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraCustomAnalyticsArtifacts
     *
     * List Custom Analytics Artifacts.
     *
     */
    public function testGetOrganizationCameraCustomAnalyticsArtifacts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraDetectionsHistoryByBoundaryByInterval
     *
     * Returns analytics data for timespans.
     *
     */
    public function testGetOrganizationCameraDetectionsHistoryByBoundaryByInterval()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraOnboardingStatuses
     *
     * Fetch onboarding status of cameras.
     *
     */
    public function testGetOrganizationCameraOnboardingStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraPermission
     *
     * Retrieve a single permission scope.
     *
     */
    public function testGetOrganizationCameraPermission()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraPermissions
     *
     * List the permissions scopes for this organization.
     *
     */
    public function testGetOrganizationCameraPermissions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraRole
     *
     * Retrieve a single role..
     *
     */
    public function testGetOrganizationCameraRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCameraRoles
     *
     * List all the roles in this organization.
     *
     */
    public function testGetOrganizationCameraRoles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCellularGatewayEsimsInventory
     *
     * The eSIM inventory of a given organization..
     *
     */
    public function testGetOrganizationCellularGatewayEsimsInventory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCellularGatewayEsimsServiceProviders
     *
     * Service providers customers can add accounts for..
     *
     */
    public function testGetOrganizationCellularGatewayEsimsServiceProviders()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCellularGatewayEsimsServiceProvidersAccounts
     *
     * Inventory of service provider accounts tied to the organization..
     *
     */
    public function testGetOrganizationCellularGatewayEsimsServiceProvidersAccounts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans
     *
     * The communication plans available for a given provider..
     *
     */
    public function testGetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans
     *
     * The rate plans available for a given provider..
     *
     */
    public function testGetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationClientsSearch
     *
     * Return the client details in an organization.
     *
     */
    public function testGetOrganizationClientsSearch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationConfigTemplate
     *
     * Return a single configuration template.
     *
     */
    public function testGetOrganizationConfigTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationConfigTemplateSwitchProfilePort
     *
     * Return a switch template port.
     *
     */
    public function testGetOrganizationConfigTemplateSwitchProfilePort()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationConfigTemplateSwitchProfilePorts
     *
     * Return all the ports of a switch template.
     *
     */
    public function testGetOrganizationConfigTemplateSwitchProfilePorts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationConfigTemplateSwitchProfiles
     *
     * List the switch templates for your switch template configuration.
     *
     */
    public function testGetOrganizationConfigTemplateSwitchProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationConfigTemplates
     *
     * List the configuration templates for this organization.
     *
     */
    public function testGetOrganizationConfigTemplates()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevices
     *
     * List the devices in an organization that have been assigned to a network..
     *
     */
    public function testGetOrganizationDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesControllerMigrations
     *
     * Retrieve device migration statuses in an organization.
     *
     */
    public function testGetOrganizationDevicesControllerMigrations()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesOverviewByModel
     *
     * Lists the count for each device model.
     *
     */
    public function testGetOrganizationDevicesOverviewByModel()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationEarlyAccessFeatures
     *
     * List the available early access features for organization.
     *
     */
    public function testGetOrganizationEarlyAccessFeatures()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationEarlyAccessFeaturesOptIn
     *
     * Show an early access feature opt-in for an organization.
     *
     */
    public function testGetOrganizationEarlyAccessFeaturesOptIn()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationEarlyAccessFeaturesOptIns
     *
     * List the early access feature opt-ins for an organization.
     *
     */
    public function testGetOrganizationEarlyAccessFeaturesOptIns()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationFirmwareUpgrades
     *
     * Get firmware upgrade information for an organization.
     *
     */
    public function testGetOrganizationFirmwareUpgrades()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationFirmwareUpgradesByDevice
     *
     * Get firmware upgrade status for the filtered devices.
     *
     */
    public function testGetOrganizationFirmwareUpgradesByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationFloorPlansAutoLocateDevices
     *
     * List auto locate details for each device in your organization.
     *
     */
    public function testGetOrganizationFloorPlansAutoLocateDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationFloorPlansAutoLocateStatuses
     *
     * List the status of auto locate for each floorplan in your organization.
     *
     */
    public function testGetOrganizationFloorPlansAutoLocateStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationInsightApplications
     *
     * List all Insight tracked applications.
     *
     */
    public function testGetOrganizationInsightApplications()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationInsightMonitoredMediaServer
     *
     * Return a monitored media server for this organization.
     *
     */
    public function testGetOrganizationInsightMonitoredMediaServer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationInsightMonitoredMediaServers
     *
     * List the monitored media servers for this organization.
     *
     */
    public function testGetOrganizationInsightMonitoredMediaServers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationIntegrationsXdrNetworks
     *
     * Returns the networks in the organization that have XDR enabled.
     *
     */
    public function testGetOrganizationIntegrationsXdrNetworks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationInventoryDevice
     *
     * Return a single device from the inventory of an organization.
     *
     */
    public function testGetOrganizationInventoryDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationInventoryDevices
     *
     * Return the device inventory for an organization.
     *
     */
    public function testGetOrganizationInventoryDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationInventoryDevicesSwapsBulk
     *
     * List of device swaps for a given request ID ({id})..
     *
     */
    public function testGetOrganizationInventoryDevicesSwapsBulk()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationInventoryOnboardingCloudMonitoringImports
     *
     * Check the status of a committed Import operation.
     *
     */
    public function testGetOrganizationInventoryOnboardingCloudMonitoringImports()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationInventoryOnboardingCloudMonitoringNetworks
     *
     * Returns list of networks eligible for adding cloud monitored device.
     *
     */
    public function testGetOrganizationInventoryOnboardingCloudMonitoringNetworks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationLicense
     *
     * Display a license.
     *
     */
    public function testGetOrganizationLicense()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationLicenses
     *
     * List the licenses for an organization.
     *
     */
    public function testGetOrganizationLicenses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationLicensingCotermLicenses
     *
     * List the licenses in a coterm organization.
     *
     */
    public function testGetOrganizationLicensingCotermLicenses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationLoginSecurity
     *
     * Returns the login security settings for an organization..
     *
     */
    public function testGetOrganizationLoginSecurity()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationNetworks
     *
     * List the networks that the user has privileges on in an organization.
     *
     */
    public function testGetOrganizationNetworks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationPolicyObject
     *
     * Shows details of a Policy Object..
     *
     */
    public function testGetOrganizationPolicyObject()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationPolicyObjects
     *
     * Lists Policy Objects belonging to the organization..
     *
     */
    public function testGetOrganizationPolicyObjects()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationPolicyObjectsGroup
     *
     * Shows details of a Policy Object Group..
     *
     */
    public function testGetOrganizationPolicyObjectsGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationPolicyObjectsGroups
     *
     * Lists Policy Object Groups belonging to the organization..
     *
     */
    public function testGetOrganizationPolicyObjectsGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSaml
     *
     * Returns the SAML SSO enabled settings for an organization..
     *
     */
    public function testGetOrganizationSaml()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSamlIdp
     *
     * Get a SAML IdP from your organization..
     *
     */
    public function testGetOrganizationSamlIdp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSamlIdps
     *
     * List the SAML IdPs in your organization..
     *
     */
    public function testGetOrganizationSamlIdps()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSamlRole
     *
     * Return a SAML role.
     *
     */
    public function testGetOrganizationSamlRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSamlRoles
     *
     * List the SAML roles for this organization.
     *
     */
    public function testGetOrganizationSamlRoles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSmAdminsRole
     *
     * Return a Limited Access Role.
     *
     */
    public function testGetOrganizationSmAdminsRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSmAdminsRoles
     *
     * List the Limited Access Roles for an organization.
     *
     */
    public function testGetOrganizationSmAdminsRoles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSmApnsCert
     *
     * Get the organization's APNS certificate.
     *
     */
    public function testGetOrganizationSmApnsCert()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSmSentryPoliciesAssignmentsByNetwork
     *
     * List the Sentry Policies for an organization ordered in ascending order of priority.
     *
     */
    public function testGetOrganizationSmSentryPoliciesAssignmentsByNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSmVppAccount
     *
     * Get a hash containing the unparsed token of the VPP account with the given ID.
     *
     */
    public function testGetOrganizationSmVppAccount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSmVppAccounts
     *
     * List the VPP accounts in the organization.
     *
     */
    public function testGetOrganizationSmVppAccounts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSnmp
     *
     * Return the SNMP settings for an organization.
     *
     */
    public function testGetOrganizationSnmp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSplashAsset
     *
     * Get a Splash Theme Asset.
     *
     */
    public function testGetOrganizationSplashAsset()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSplashThemes
     *
     * List Splash Themes.
     *
     */
    public function testGetOrganizationSplashThemes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSwitchPortsBySwitch
     *
     * List the switchports in an organization by switch.
     *
     */
    public function testGetOrganizationSwitchPortsBySwitch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWebhooksCallbacksStatus
     *
     * Return the status of an API callback.
     *
     */
    public function testGetOrganizationWebhooksCallbacksStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessAirMarshalRules
     *
     * Returns the current Air Marshal rules for this organization.
     *
     */
    public function testGetOrganizationWirelessAirMarshalRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessAirMarshalSettingsByNetwork
     *
     * Returns the current Air Marshal settings for this network.
     *
     */
    public function testGetOrganizationWirelessAirMarshalSettingsByNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessRfProfilesAssignmentsByDevice
     *
     * List the RF profiles of an organization by device.
     *
     */
    public function testGetOrganizationWirelessRfProfilesAssignmentsByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessSsidsFirewallIsolationAllowlistEntries
     *
     * List the L2 isolation allow list MAC entry in an organization.
     *
     */
    public function testGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizations
     *
     * List the organizations that the user has privileges on.
     *
     */
    public function testGetOrganizations()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for installNetworkSmDeviceApps
     *
     * Install applications on a device.
     *
     */
    public function testInstallNetworkSmDeviceApps()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for lockNetworkSmDevices
     *
     * Lock a set of devices.
     *
     */
    public function testLockNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modifyNetworkSmDevicesTags
     *
     * Add, delete, or update the tags of a set of devices.
     *
     */
    public function testModifyNetworkSmDevicesTags()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for moveNetworkSmDevices
     *
     * Move a set of devices to a new network.
     *
     */
    public function testMoveNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for moveOrganizationLicenses
     *
     * Move licenses to another organization.
     *
     */
    public function testMoveOrganizationLicenses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for moveOrganizationLicensesSeats
     *
     * Move SM seats to another organization.
     *
     */
    public function testMoveOrganizationLicensesSeats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for moveOrganizationLicensingCotermLicenses
     *
     * Moves a license to a different organization (coterm only).
     *
     */
    public function testMoveOrganizationLicensingCotermLicenses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for provisionNetworkClients
     *
     * Provisions a client with a name and policy.
     *
     */
    public function testProvisionNetworkClients()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for publishNetworkFloorPlansAutoLocateJob
     *
     * Update the status of a finished auto locate job to be published, and update device locations.
     *
     */
    public function testPublishNetworkFloorPlansAutoLocateJob()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for reassignNetworkVlanProfilesAssignments
     *
     * Update the assigned VLAN Profile for devices in a network.
     *
     */
    public function testReassignNetworkVlanProfilesAssignments()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for rebootNetworkSmDevices
     *
     * Reboot a set of endpoints.
     *
     */
    public function testRebootNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for recalculateNetworkFloorPlansAutoLocateJob
     *
     * Trigger auto locate recalculation for a job, and optionally set anchors.
     *
     */
    public function testRecalculateNetworkFloorPlansAutoLocateJob()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for recalculateOrganizationWirelessRadioAutoRfChannels
     *
     * Recalculates automatically assigned channels for every AP within specified the specified network(s).
     *
     */
    public function testRecalculateOrganizationWirelessRadioAutoRfChannels()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for refreshNetworkSmDeviceDetails
     *
     * Refresh the details of a device.
     *
     */
    public function testRefreshNetworkSmDeviceDetails()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for releaseFromOrganizationInventory
     *
     * Release a list of claimed devices from an organization..
     *
     */
    public function testReleaseFromOrganizationInventory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for removeNetworkDevices
     *
     * Remove a single device.
     *
     */
    public function testRemoveNetworkDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for removeNetworkSwitchStack
     *
     * Remove a switch from a stack.
     *
     */
    public function testRemoveNetworkSwitchStack()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for renewOrganizationLicensesSeats
     *
     * Renew SM seats of a license.
     *
     */
    public function testRenewOrganizationLicensesSeats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for revokeAdministeredIdentitiesMeApiKeys
     *
     * Revokes an identity's API key, using the last four characters of the key.
     *
     */
    public function testRevokeAdministeredIdentitiesMeApiKeys()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for rollbacksNetworkFirmwareUpgradesStagedEvents
     *
     * Rollback a Staged Upgrade Event for a network.
     *
     */
    public function testRollbacksNetworkFirmwareUpgradesStagedEvents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setNetworkWirelessEthernetPortsProfilesDefault
     *
     * Set the AP port profile to be default for this network.
     *
     */
    public function testSetNetworkWirelessEthernetPortsProfilesDefault()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for shutdownNetworkSmDevices
     *
     * Shutdown a set of endpoints.
     *
     */
    public function testShutdownNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for splitNetwork
     *
     * Split a combined network into individual networks for each type of device.
     *
     */
    public function testSplitNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for swapNetworkApplianceWarmSpare
     *
     * Swap MX primary and warm spare appliances.
     *
     */
    public function testSwapNetworkApplianceWarmSpare()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for unbindNetwork
     *
     * Unbind a network from a template..
     *
     */
    public function testUnbindNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for unenrollNetworkSmDevice
     *
     * Unenroll a device.
     *
     */
    public function testUnenrollNetworkSmDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uninstallNetworkSmDeviceApps
     *
     * Uninstall applications on a device.
     *
     */
    public function testUninstallNetworkSmDeviceApps()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDevice
     *
     * Update the attributes of a device.
     *
     */
    public function testUpdateDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceApplianceRadioSettings
     *
     * Update the radio settings of an appliance.
     *
     */
    public function testUpdateDeviceApplianceRadioSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceApplianceUplinksSettings
     *
     * Update the uplink settings for an MX appliance.
     *
     */
    public function testUpdateDeviceApplianceUplinksSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceCameraCustomAnalytics
     *
     * Update custom analytics settings for a camera.
     *
     */
    public function testUpdateDeviceCameraCustomAnalytics()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceCameraQualityAndRetention
     *
     * Update quality and retention settings for the given camera.
     *
     */
    public function testUpdateDeviceCameraQualityAndRetention()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceCameraSense
     *
     * Update sense settings for the given camera.
     *
     */
    public function testUpdateDeviceCameraSense()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceCameraVideoSettings
     *
     * Update video settings for the given camera.
     *
     */
    public function testUpdateDeviceCameraVideoSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceCameraWirelessProfiles
     *
     * Assign wireless profiles to the given camera.
     *
     */
    public function testUpdateDeviceCameraWirelessProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceCellularGatewayLan
     *
     * Update the LAN Settings for a single MG..
     *
     */
    public function testUpdateDeviceCellularGatewayLan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceCellularGatewayPortForwardingRules
     *
     * Updates the port forwarding rules for a single MG..
     *
     */
    public function testUpdateDeviceCellularGatewayPortForwardingRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceCellularSims
     *
     * Updates the SIM and APN configurations for a cellular device..
     *
     */
    public function testUpdateDeviceCellularSims()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceManagementInterface
     *
     * Update the management interface settings for a device.
     *
     */
    public function testUpdateDeviceManagementInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceSensorRelationships
     *
     * Assign one or more sensor roles to a given sensor or camera device..
     *
     */
    public function testUpdateDeviceSensorRelationships()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceSwitchPort
     *
     * Update a switch port.
     *
     */
    public function testUpdateDeviceSwitchPort()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceSwitchRoutingInterface
     *
     * Update a layer 3 interface for a switch.
     *
     */
    public function testUpdateDeviceSwitchRoutingInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceSwitchRoutingInterfaceDhcp
     *
     * Update a layer 3 interface DHCP configuration for a switch.
     *
     */
    public function testUpdateDeviceSwitchRoutingInterfaceDhcp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceSwitchRoutingStaticRoute
     *
     * Update a layer 3 static route for a switch.
     *
     */
    public function testUpdateDeviceSwitchRoutingStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceSwitchWarmSpare
     *
     * Update warm spare configuration for a switch.
     *
     */
    public function testUpdateDeviceSwitchWarmSpare()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceWirelessAlternateManagementInterfaceIpv6
     *
     * Update alternate management interface IPv6 address.
     *
     */
    public function testUpdateDeviceWirelessAlternateManagementInterfaceIpv6()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceWirelessBluetoothSettings
     *
     * Update the bluetooth settings for a wireless device.
     *
     */
    public function testUpdateDeviceWirelessBluetoothSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceWirelessElectronicShelfLabel
     *
     * Update the ESL settings of a device.
     *
     */
    public function testUpdateDeviceWirelessElectronicShelfLabel()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceWirelessRadioSettings
     *
     * Update the radio settings overrides of a device, which take precedence over RF profiles..
     *
     */
    public function testUpdateDeviceWirelessRadioSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetwork
     *
     * Update a network.
     *
     */
    public function testUpdateNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkAlertsSettings
     *
     * Update the alert configuration for this network.
     *
     */
    public function testUpdateNetworkAlertsSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceConnectivityMonitoringDestinations
     *
     * Update the connectivity testing destinations for an MX network.
     *
     */
    public function testUpdateNetworkApplianceConnectivityMonitoringDestinations()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceContentFiltering
     *
     * Update the content filtering settings for an MX network.
     *
     */
    public function testUpdateNetworkApplianceContentFiltering()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallCellularFirewallRules
     *
     * Update the cellular firewall rules of an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallCellularFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallFirewalledService
     *
     * Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP').
     *
     */
    public function testUpdateNetworkApplianceFirewallFirewalledService()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallInboundCellularFirewallRules
     *
     * Update the inbound cellular firewall rules of an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallInboundCellularFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallInboundFirewallRules
     *
     * Update the inbound firewall rules of an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallInboundFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallL3FirewallRules
     *
     * Update the L3 firewall rules of an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallL3FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallL7FirewallRules
     *
     * Update the MX L7 firewall rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallL7FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallMulticastForwarding
     *
     * Update static multicast forward rules for a network.
     *
     */
    public function testUpdateNetworkApplianceFirewallMulticastForwarding()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallOneToManyNatRules
     *
     * Set the 1:Many NAT mapping rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallOneToManyNatRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallOneToOneNatRules
     *
     * Set the 1:1 NAT mapping rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallOneToOneNatRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallPortForwardingRules
     *
     * Update the port forwarding rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallPortForwardingRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallSettings
     *
     * Update the firewall settings for this network.
     *
     */
    public function testUpdateNetworkApplianceFirewallSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkAppliancePort
     *
     * Update the per-port VLAN settings for a single MX port..
     *
     */
    public function testUpdateNetworkAppliancePort()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkAppliancePrefixesDelegatedStatic
     *
     * Update a static delegated prefix from a network.
     *
     */
    public function testUpdateNetworkAppliancePrefixesDelegatedStatic()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceRfProfile
     *
     * Updates specified RF profile for this network.
     *
     */
    public function testUpdateNetworkApplianceRfProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceSdwanInternetPolicies
     *
     * Update SDWAN internet traffic preferences for an MX network.
     *
     */
    public function testUpdateNetworkApplianceSdwanInternetPolicies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceSecurityIntrusion
     *
     * Set the supported intrusion settings for an MX network.
     *
     */
    public function testUpdateNetworkApplianceSecurityIntrusion()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceSecurityMalware
     *
     * Set the supported malware settings for an MX network.
     *
     */
    public function testUpdateNetworkApplianceSecurityMalware()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceSettings
     *
     * Update the appliance settings for a network.
     *
     */
    public function testUpdateNetworkApplianceSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceSingleLan
     *
     * Update single LAN configuration.
     *
     */
    public function testUpdateNetworkApplianceSingleLan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceSsid
     *
     * Update the attributes of an MX SSID.
     *
     */
    public function testUpdateNetworkApplianceSsid()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceStaticRoute
     *
     * Update a static route for an MX or teleworker network.
     *
     */
    public function testUpdateNetworkApplianceStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceTrafficShaping
     *
     * Update the traffic shaping settings for an MX network.
     *
     */
    public function testUpdateNetworkApplianceTrafficShaping()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceTrafficShapingCustomPerformanceClass
     *
     * Update a custom performance class for an MX network.
     *
     */
    public function testUpdateNetworkApplianceTrafficShapingCustomPerformanceClass()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceTrafficShapingRules
     *
     * Update the traffic shaping settings rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceTrafficShapingRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceTrafficShapingUplinkBandwidth
     *
     * Updates the uplink bandwidth settings for your MX network..
     *
     */
    public function testUpdateNetworkApplianceTrafficShapingUplinkBandwidth()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceTrafficShapingUplinkSelection
     *
     * Update uplink selection settings for an MX network.
     *
     */
    public function testUpdateNetworkApplianceTrafficShapingUplinkSelection()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceTrafficShapingVpnExclusions
     *
     * Update VPN exclusion rules for an MX network..
     *
     */
    public function testUpdateNetworkApplianceTrafficShapingVpnExclusions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceVlan
     *
     * Update a VLAN.
     *
     */
    public function testUpdateNetworkApplianceVlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceVlansSettings
     *
     * Enable/Disable VLANs for the given network.
     *
     */
    public function testUpdateNetworkApplianceVlansSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceVpnBgp
     *
     * Update a Hub BGP Configuration.
     *
     */
    public function testUpdateNetworkApplianceVpnBgp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceVpnSiteToSiteVpn
     *
     * Update the site-to-site VPN settings of a network.
     *
     */
    public function testUpdateNetworkApplianceVpnSiteToSiteVpn()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceWarmSpare
     *
     * Update MX warm spare settings.
     *
     */
    public function testUpdateNetworkApplianceWarmSpare()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkCameraQualityRetentionProfile
     *
     * Update an existing quality retention profile for this network..
     *
     */
    public function testUpdateNetworkCameraQualityRetentionProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkCameraWirelessProfile
     *
     * Update an existing camera wireless profile in this network..
     *
     */
    public function testUpdateNetworkCameraWirelessProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkCellularGatewayConnectivityMonitoringDestinations
     *
     * Update the connectivity testing destinations for an MG network.
     *
     */
    public function testUpdateNetworkCellularGatewayConnectivityMonitoringDestinations()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkCellularGatewayDhcp
     *
     * Update common DHCP settings of MGs.
     *
     */
    public function testUpdateNetworkCellularGatewayDhcp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkCellularGatewaySubnetPool
     *
     * Update the subnet pool and mask configuration for MGs in the network..
     *
     */
    public function testUpdateNetworkCellularGatewaySubnetPool()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkCellularGatewayUplink
     *
     * Updates the uplink settings for your MG network..
     *
     */
    public function testUpdateNetworkCellularGatewayUplink()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkClientPolicy
     *
     * Update the policy assigned to a client on the network.
     *
     */
    public function testUpdateNetworkClientPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkClientSplashAuthorizationStatus
     *
     * Update a client's splash authorization.
     *
     */
    public function testUpdateNetworkClientSplashAuthorizationStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkFirmwareUpgrades
     *
     * Update firmware upgrade information for a network.
     *
     */
    public function testUpdateNetworkFirmwareUpgrades()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkFirmwareUpgradesStagedEvents
     *
     * Update the Staged Upgrade Event for a network.
     *
     */
    public function testUpdateNetworkFirmwareUpgradesStagedEvents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkFirmwareUpgradesStagedGroup
     *
     * Update a Staged Upgrade Group for a network.
     *
     */
    public function testUpdateNetworkFirmwareUpgradesStagedGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkFirmwareUpgradesStagedStages
     *
     * Assign Staged Upgrade Group order in the sequence..
     *
     */
    public function testUpdateNetworkFirmwareUpgradesStagedStages()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkFloorPlan
     *
     * Update a floor plan's geolocation and other meta data.
     *
     */
    public function testUpdateNetworkFloorPlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkGroupPolicy
     *
     * Update a group policy.
     *
     */
    public function testUpdateNetworkGroupPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkMerakiAuthUser
     *
     * Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated).
     *
     */
    public function testUpdateNetworkMerakiAuthUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkMqttBroker
     *
     * Update an MQTT broker.
     *
     */
    public function testUpdateNetworkMqttBroker()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkNetflow
     *
     * Update the NetFlow traffic reporting settings for a network.
     *
     */
    public function testUpdateNetworkNetflow()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSensorAlertsProfile
     *
     * Updates a sensor alert profile for a network..
     *
     */
    public function testUpdateNetworkSensorAlertsProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSensorMqttBroker
     *
     * Update the sensor settings of an MQTT broker.
     *
     */
    public function testUpdateNetworkSensorMqttBroker()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSettings
     *
     * Update the settings for a network.
     *
     */
    public function testUpdateNetworkSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSmDevicesFields
     *
     * Modify the fields of a device.
     *
     */
    public function testUpdateNetworkSmDevicesFields()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSmTargetGroup
     *
     * Update a target group.
     *
     */
    public function testUpdateNetworkSmTargetGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSnmp
     *
     * Update the SNMP settings for a network.
     *
     */
    public function testUpdateNetworkSnmp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchAccessControlLists
     *
     * Update the access control lists for a MS network.
     *
     */
    public function testUpdateNetworkSwitchAccessControlLists()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchAccessPolicy
     *
     * Update an access policy for a switch network.
     *
     */
    public function testUpdateNetworkSwitchAccessPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchAlternateManagementInterface
     *
     * Update the switch alternate management interface for the network.
     *
     */
    public function testUpdateNetworkSwitchAlternateManagementInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchDhcpServerPolicy
     *
     * Update the DHCP server settings.
     *
     */
    public function testUpdateNetworkSwitchDhcpServerPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer
     *
     * Update a server that is trusted by Dynamic ARP Inspection on this network.
     *
     */
    public function testUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchDscpToCosMappings
     *
     * Update the DSCP to CoS mappings.
     *
     */
    public function testUpdateNetworkSwitchDscpToCosMappings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchLinkAggregation
     *
     * Update a link aggregation group.
     *
     */
    public function testUpdateNetworkSwitchLinkAggregation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchMtu
     *
     * Update the MTU configuration.
     *
     */
    public function testUpdateNetworkSwitchMtu()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchPortSchedule
     *
     * Update a switch port schedule.
     *
     */
    public function testUpdateNetworkSwitchPortSchedule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchQosRule
     *
     * Update a quality of service rule.
     *
     */
    public function testUpdateNetworkSwitchQosRule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchQosRulesOrder
     *
     * Update the order in which the rules should be processed by the switch.
     *
     */
    public function testUpdateNetworkSwitchQosRulesOrder()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchRoutingMulticast
     *
     * Update multicast settings for a network.
     *
     */
    public function testUpdateNetworkSwitchRoutingMulticast()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchRoutingMulticastRendezvousPoint
     *
     * Update a multicast rendezvous point.
     *
     */
    public function testUpdateNetworkSwitchRoutingMulticastRendezvousPoint()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchRoutingOspf
     *
     * Update layer 3 OSPF routing configuration.
     *
     */
    public function testUpdateNetworkSwitchRoutingOspf()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchSettings
     *
     * Update switch network settings.
     *
     */
    public function testUpdateNetworkSwitchSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchStackRoutingInterface
     *
     * Update a layer 3 interface for a switch stack.
     *
     */
    public function testUpdateNetworkSwitchStackRoutingInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchStackRoutingInterfaceDhcp
     *
     * Update a layer 3 interface DHCP configuration for a switch stack.
     *
     */
    public function testUpdateNetworkSwitchStackRoutingInterfaceDhcp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchStackRoutingStaticRoute
     *
     * Update a layer 3 static route for a switch stack.
     *
     */
    public function testUpdateNetworkSwitchStackRoutingStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchStormControl
     *
     * Update the storm control configuration for a switch network.
     *
     */
    public function testUpdateNetworkSwitchStormControl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchStp
     *
     * Updates STP settings.
     *
     */
    public function testUpdateNetworkSwitchStp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSyslogServers
     *
     * Update the syslog servers for a network.
     *
     */
    public function testUpdateNetworkSyslogServers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkTrafficAnalysis
     *
     * Update the traffic analysis settings for a network.
     *
     */
    public function testUpdateNetworkTrafficAnalysis()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkVlanProfile
     *
     * Update an existing VLAN profile of a network.
     *
     */
    public function testUpdateNetworkVlanProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWebhooksHttpServer
     *
     * Update an HTTP server.
     *
     */
    public function testUpdateNetworkWebhooksHttpServer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWebhooksPayloadTemplate
     *
     * Update a webhook payload template for a network.
     *
     */
    public function testUpdateNetworkWebhooksPayloadTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessAirMarshalRule
     *
     * Update a rule.
     *
     */
    public function testUpdateNetworkWirelessAirMarshalRule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessAirMarshalSettings
     *
     * Updates Air Marshal settings..
     *
     */
    public function testUpdateNetworkWirelessAirMarshalSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessAlternateManagementInterface
     *
     * Update alternate management interface and device static IP.
     *
     */
    public function testUpdateNetworkWirelessAlternateManagementInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessBilling
     *
     * Update the billing settings.
     *
     */
    public function testUpdateNetworkWirelessBilling()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessBluetoothSettings
     *
     * Update the Bluetooth settings for a network.
     *
     */
    public function testUpdateNetworkWirelessBluetoothSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessElectronicShelfLabel
     *
     * Update the ESL settings of a wireless network.
     *
     */
    public function testUpdateNetworkWirelessElectronicShelfLabel()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessEthernetPortsProfile
     *
     * Update the AP port profile by ID for this network.
     *
     */
    public function testUpdateNetworkWirelessEthernetPortsProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessRfProfile
     *
     * Updates specified RF profile for this network.
     *
     */
    public function testUpdateNetworkWirelessRfProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSettings
     *
     * Update the wireless settings for a network.
     *
     */
    public function testUpdateNetworkWirelessSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsid
     *
     * Update the attributes of an MR SSID.
     *
     */
    public function testUpdateNetworkWirelessSsid()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidBonjourForwarding
     *
     * Update the bonjour forwarding setting and rules for the SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidBonjourForwarding()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidDeviceTypeGroupPolicies
     *
     * Update the device type group policies for the SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidDeviceTypeGroupPolicies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidEapOverride
     *
     * Update the EAP overridden parameters for an SSID..
     *
     */
    public function testUpdateNetworkWirelessSsidEapOverride()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidFirewallL3FirewallRules
     *
     * Update the L3 firewall rules of an SSID on an MR network.
     *
     */
    public function testUpdateNetworkWirelessSsidFirewallL3FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidFirewallL7FirewallRules
     *
     * Update the L7 firewall rules of an SSID on an MR network.
     *
     */
    public function testUpdateNetworkWirelessSsidFirewallL7FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidHotspot20
     *
     * Update the Hotspot 2.0 settings of an SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidHotspot20()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidIdentityPsk
     *
     * Update an Identity PSK.
     *
     */
    public function testUpdateNetworkWirelessSsidIdentityPsk()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidSchedules
     *
     * Update the outage schedule for the SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidSchedules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidSplashSettings
     *
     * Modify the splash page settings for the given SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidSplashSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidTrafficShapingRules
     *
     * Update the traffic shaping rules for an SSID on an MR network..
     *
     */
    public function testUpdateNetworkWirelessSsidTrafficShapingRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidVpn
     *
     * Update the VPN settings for the SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidVpn()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganization
     *
     * Update an organization.
     *
     */
    public function testUpdateOrganization()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationActionBatch
     *
     * Update an action batch.
     *
     */
    public function testUpdateOrganizationActionBatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationAdaptivePolicyAcl
     *
     * Updates an adaptive policy ACL.
     *
     */
    public function testUpdateOrganizationAdaptivePolicyAcl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationAdaptivePolicyGroup
     *
     * Updates an adaptive policy group.
     *
     */
    public function testUpdateOrganizationAdaptivePolicyGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationAdaptivePolicyPolicy
     *
     * Update an Adaptive Policy.
     *
     */
    public function testUpdateOrganizationAdaptivePolicyPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationAdaptivePolicySettings
     *
     * Update global adaptive policy settings.
     *
     */
    public function testUpdateOrganizationAdaptivePolicySettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationAdmin
     *
     * Update an administrator.
     *
     */
    public function testUpdateOrganizationAdmin()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationAlertsProfile
     *
     * Update an organization-wide alert config.
     *
     */
    public function testUpdateOrganizationAlertsProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationApplianceDnsLocalProfile
     *
     * Update a local DNS profile.
     *
     */
    public function testUpdateOrganizationApplianceDnsLocalProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationApplianceDnsLocalRecord
     *
     * Updates a local DNS record.
     *
     */
    public function testUpdateOrganizationApplianceDnsLocalRecord()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationApplianceDnsSplitProfile
     *
     * Update a split DNS profile.
     *
     */
    public function testUpdateOrganizationApplianceDnsSplitProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationApplianceSecurityIntrusion
     *
     * Sets supported intrusion settings for an organization.
     *
     */
    public function testUpdateOrganizationApplianceSecurityIntrusion()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationApplianceVpnThirdPartyVPNPeers
     *
     * Update the third party VPN peers for an organization.
     *
     */
    public function testUpdateOrganizationApplianceVpnThirdPartyVPNPeers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationApplianceVpnVpnFirewallRules
     *
     * Update the firewall rules of an organization's site-to-site VPN.
     *
     */
    public function testUpdateOrganizationApplianceVpnVpnFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationBrandingPoliciesPriorities
     *
     * Update the priority ordering of an organization's branding policies..
     *
     */
    public function testUpdateOrganizationBrandingPoliciesPriorities()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationBrandingPolicy
     *
     * Update a branding policy.
     *
     */
    public function testUpdateOrganizationBrandingPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationCameraOnboardingStatuses
     *
     * Notify that credential handoff to camera has completed.
     *
     */
    public function testUpdateOrganizationCameraOnboardingStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationCameraRole
     *
     * Update an existing role in this organization..
     *
     */
    public function testUpdateOrganizationCameraRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationCellularGatewayEsimsInventory
     *
     * Toggle the status of an eSIM.
     *
     */
    public function testUpdateOrganizationCellularGatewayEsimsInventory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationCellularGatewayEsimsServiceProvidersAccount
     *
     * Edit service provider account info stored in Meraki's database..
     *
     */
    public function testUpdateOrganizationCellularGatewayEsimsServiceProvidersAccount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationCellularGatewayEsimsSwap
     *
     * Get the status of a profile swap..
     *
     */
    public function testUpdateOrganizationCellularGatewayEsimsSwap()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationConfigTemplate
     *
     * Update a configuration template.
     *
     */
    public function testUpdateOrganizationConfigTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationConfigTemplateSwitchProfilePort
     *
     * Update a switch template port.
     *
     */
    public function testUpdateOrganizationConfigTemplateSwitchProfilePort()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationEarlyAccessFeaturesOptIn
     *
     * Update an early access feature opt-in for an organization.
     *
     */
    public function testUpdateOrganizationEarlyAccessFeaturesOptIn()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationInsightMonitoredMediaServer
     *
     * Update a monitored media server for this organization.
     *
     */
    public function testUpdateOrganizationInsightMonitoredMediaServer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationLicense
     *
     * Update a license.
     *
     */
    public function testUpdateOrganizationLicense()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationLoginSecurity
     *
     * Update the login security settings for an organization.
     *
     */
    public function testUpdateOrganizationLoginSecurity()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationPolicyObject
     *
     * Updates a Policy Object..
     *
     */
    public function testUpdateOrganizationPolicyObject()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationPolicyObjectsGroup
     *
     * Updates a Policy Object Group..
     *
     */
    public function testUpdateOrganizationPolicyObjectsGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationSaml
     *
     * Updates the SAML SSO enabled settings for an organization..
     *
     */
    public function testUpdateOrganizationSaml()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationSamlIdp
     *
     * Update a SAML IdP in your organization.
     *
     */
    public function testUpdateOrganizationSamlIdp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationSamlRole
     *
     * Update a SAML role.
     *
     */
    public function testUpdateOrganizationSamlRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationSmAdminsRole
     *
     * Update a Limited Access Role.
     *
     */
    public function testUpdateOrganizationSmAdminsRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationSmSentryPoliciesAssignments
     *
     * Update an Organizations Sentry Policies using the provided list.
     *
     */
    public function testUpdateOrganizationSmSentryPoliciesAssignments()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationSnmp
     *
     * Update the SNMP settings for an organization.
     *
     */
    public function testUpdateOrganizationSnmp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry
     *
     * Update isolation allow list MAC entry info.
     *
     */
    public function testUpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for validateAdministeredLicensingSubscriptionSubscriptionsClaimKey
     *
     * Find a subscription by claim key.
     *
     */
    public function testValidateAdministeredLicensingSubscriptionSubscriptionsClaimKey()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vmxNetworkDevicesClaim
     *
     * Claim a vMX into a network.
     *
     */
    public function testVmxNetworkDevicesClaim()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for wipeNetworkSmDevices
     *
     * Wipe a device.
     *
     */
    public function testWipeNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
