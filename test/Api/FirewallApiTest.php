<?php
/**
 * FirewallApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Meraki\Test\Api;

use \Meraki\Configuration;
use \Meraki\ApiException;
use \Meraki\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * FirewallApiTest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FirewallApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry
     *
     * Create isolation allow list MAC entry for this organization.
     *
     */
    public function testCreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry
     *
     * Destroy isolation allow list MAC entry for this organization.
     *
     */
    public function testDeleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallCellularFirewallRules
     *
     * Return the cellular firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallCellularFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallFirewalledService
     *
     * Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP').
     *
     */
    public function testGetNetworkApplianceFirewallFirewalledService()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallFirewalledServices
     *
     * List the appliance services and their accessibility rules.
     *
     */
    public function testGetNetworkApplianceFirewallFirewalledServices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallInboundCellularFirewallRules
     *
     * Return the inbound cellular firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallInboundCellularFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallInboundFirewallRules
     *
     * Return the inbound firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallInboundFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallL3FirewallRules
     *
     * Return the L3 firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallL3FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallL7FirewallRules
     *
     * List the MX L7 firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallL7FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallL7FirewallRulesApplicationCategories
     *
     * Return the L7 firewall application categories and their associated applications for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallL7FirewallRulesApplicationCategories()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallOneToManyNatRules
     *
     * Return the 1:Many NAT mapping rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallOneToManyNatRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallOneToOneNatRules
     *
     * Return the 1:1 NAT mapping rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallOneToOneNatRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallPortForwardingRules
     *
     * Return the port forwarding rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallPortForwardingRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallSettings
     *
     * Return the firewall settings for this network.
     *
     */
    public function testGetNetworkApplianceFirewallSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidFirewallL3FirewallRules
     *
     * Return the L3 firewall rules for an SSID on an MR network.
     *
     */
    public function testGetNetworkWirelessSsidFirewallL3FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidFirewallL7FirewallRules
     *
     * Return the L7 firewall rules for an SSID on an MR network.
     *
     */
    public function testGetNetworkWirelessSsidFirewallL7FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceFirewallMulticastForwardingByNetwork
     *
     * List Static Multicasting forwarding settings for MX networks.
     *
     */
    public function testGetOrganizationApplianceFirewallMulticastForwardingByNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessSsidsFirewallIsolationAllowlistEntries
     *
     * List the L2 isolation allow list MAC entry in an organization.
     *
     */
    public function testGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallCellularFirewallRules
     *
     * Update the cellular firewall rules of an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallCellularFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallFirewalledService
     *
     * Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP').
     *
     */
    public function testUpdateNetworkApplianceFirewallFirewalledService()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallInboundCellularFirewallRules
     *
     * Update the inbound cellular firewall rules of an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallInboundCellularFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallInboundFirewallRules
     *
     * Update the inbound firewall rules of an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallInboundFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallL3FirewallRules
     *
     * Update the L3 firewall rules of an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallL3FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallL7FirewallRules
     *
     * Update the MX L7 firewall rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallL7FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallMulticastForwarding
     *
     * Update static multicast forward rules for a network.
     *
     */
    public function testUpdateNetworkApplianceFirewallMulticastForwarding()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallOneToManyNatRules
     *
     * Set the 1:Many NAT mapping rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallOneToManyNatRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallOneToOneNatRules
     *
     * Set the 1:1 NAT mapping rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallOneToOneNatRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallPortForwardingRules
     *
     * Update the port forwarding rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallPortForwardingRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallSettings
     *
     * Update the firewall settings for this network.
     *
     */
    public function testUpdateNetworkApplianceFirewallSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidFirewallL3FirewallRules
     *
     * Update the L3 firewall rules of an SSID on an MR network.
     *
     */
    public function testUpdateNetworkWirelessSsidFirewallL3FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidFirewallL7FirewallRules
     *
     * Update the L7 firewall rules of an SSID on an MR network.
     *
     */
    public function testUpdateNetworkWirelessSsidFirewallL7FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry
     *
     * Update isolation allow list MAC entry info.
     *
     */
    public function testUpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
