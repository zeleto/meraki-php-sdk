<?php
/**
 * ApplianceApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Meraki\Test\Api;

use \Meraki\Configuration;
use \Meraki\ApiException;
use \Meraki\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ApplianceApiTest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ApplianceApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate
     *
     * Assign the local DNS profile to networks in the organization.
     *
     */
    public function testBulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceApplianceVmxAuthenticationToken
     *
     * Generate a new vMX authentication token.
     *
     */
    public function testCreateDeviceApplianceVmxAuthenticationToken()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkAppliancePrefixesDelegatedStatic
     *
     * Add a static delegated prefix from a network.
     *
     */
    public function testCreateNetworkAppliancePrefixesDelegatedStatic()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkApplianceRfProfile
     *
     * Creates new RF profile for this network.
     *
     */
    public function testCreateNetworkApplianceRfProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkApplianceStaticRoute
     *
     * Add a static route for an MX or teleworker network.
     *
     */
    public function testCreateNetworkApplianceStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkApplianceTrafficShapingCustomPerformanceClass
     *
     * Add a custom performance class for an MX network.
     *
     */
    public function testCreateNetworkApplianceTrafficShapingCustomPerformanceClass()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkApplianceVlan
     *
     * Add a VLAN.
     *
     */
    public function testCreateNetworkApplianceVlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationApplianceDnsLocalProfile
     *
     * Create a new local DNS profile.
     *
     */
    public function testCreateOrganizationApplianceDnsLocalProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete
     *
     * Unassign the local DNS profile to networks in the organization.
     *
     */
    public function testCreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationApplianceDnsLocalRecord
     *
     * Create a new local DNS record.
     *
     */
    public function testCreateOrganizationApplianceDnsLocalRecord()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationApplianceDnsSplitProfile
     *
     * Create a new split DNS profile.
     *
     */
    public function testCreateOrganizationApplianceDnsSplitProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate
     *
     * Assign the split DNS profile to networks in the organization.
     *
     */
    public function testCreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete
     *
     * Unassign the split DNS profile to networks in the organization.
     *
     */
    public function testCreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkAppliancePrefixesDelegatedStatic
     *
     * Delete a static delegated prefix from a network.
     *
     */
    public function testDeleteNetworkAppliancePrefixesDelegatedStatic()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkApplianceRfProfile
     *
     * Delete a RF Profile.
     *
     */
    public function testDeleteNetworkApplianceRfProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkApplianceStaticRoute
     *
     * Delete a static route from an MX or teleworker network.
     *
     */
    public function testDeleteNetworkApplianceStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkApplianceTrafficShapingCustomPerformanceClass
     *
     * Delete a custom performance class from an MX network.
     *
     */
    public function testDeleteNetworkApplianceTrafficShapingCustomPerformanceClass()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkApplianceVlan
     *
     * Delete a VLAN from a network.
     *
     */
    public function testDeleteNetworkApplianceVlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationApplianceDnsLocalProfile
     *
     * Deletes a local DNS profile.
     *
     */
    public function testDeleteOrganizationApplianceDnsLocalProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationApplianceDnsLocalRecord
     *
     * Deletes a local DNS record.
     *
     */
    public function testDeleteOrganizationApplianceDnsLocalRecord()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationApplianceDnsSplitProfile
     *
     * Deletes a split DNS profile.
     *
     */
    public function testDeleteOrganizationApplianceDnsSplitProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceApplianceDhcpSubnets
     *
     * Return the DHCP subnet information for an appliance.
     *
     */
    public function testGetDeviceApplianceDhcpSubnets()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceAppliancePerformance
     *
     * Return the performance score for a single MX.
     *
     */
    public function testGetDeviceAppliancePerformance()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceAppliancePrefixesDelegated
     *
     * Return current delegated IPv6 prefixes on an appliance..
     *
     */
    public function testGetDeviceAppliancePrefixesDelegated()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceAppliancePrefixesDelegatedVlanAssignments
     *
     * Return prefixes assigned to all IPv6 enabled VLANs on an appliance..
     *
     */
    public function testGetDeviceAppliancePrefixesDelegatedVlanAssignments()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceApplianceRadioSettings
     *
     * Return the radio settings of an appliance.
     *
     */
    public function testGetDeviceApplianceRadioSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceApplianceUplinksSettings
     *
     * Return the uplink settings for an MX appliance.
     *
     */
    public function testGetDeviceApplianceUplinksSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceClientSecurityEvents
     *
     * List the security events for a client.
     *
     */
    public function testGetNetworkApplianceClientSecurityEvents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceConnectivityMonitoringDestinations
     *
     * Return the connectivity testing destinations for an MX network.
     *
     */
    public function testGetNetworkApplianceConnectivityMonitoringDestinations()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceContentFiltering
     *
     * Return the content filtering settings for an MX network.
     *
     */
    public function testGetNetworkApplianceContentFiltering()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceContentFilteringCategories
     *
     * List all available content filtering categories for an MX network.
     *
     */
    public function testGetNetworkApplianceContentFilteringCategories()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallCellularFirewallRules
     *
     * Return the cellular firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallCellularFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallFirewalledService
     *
     * Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP').
     *
     */
    public function testGetNetworkApplianceFirewallFirewalledService()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallFirewalledServices
     *
     * List the appliance services and their accessibility rules.
     *
     */
    public function testGetNetworkApplianceFirewallFirewalledServices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallInboundCellularFirewallRules
     *
     * Return the inbound cellular firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallInboundCellularFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallInboundFirewallRules
     *
     * Return the inbound firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallInboundFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallL3FirewallRules
     *
     * Return the L3 firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallL3FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallL7FirewallRules
     *
     * List the MX L7 firewall rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallL7FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallL7FirewallRulesApplicationCategories
     *
     * Return the L7 firewall application categories and their associated applications for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallL7FirewallRulesApplicationCategories()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallOneToManyNatRules
     *
     * Return the 1:Many NAT mapping rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallOneToManyNatRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallOneToOneNatRules
     *
     * Return the 1:1 NAT mapping rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallOneToOneNatRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallPortForwardingRules
     *
     * Return the port forwarding rules for an MX network.
     *
     */
    public function testGetNetworkApplianceFirewallPortForwardingRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceFirewallSettings
     *
     * Return the firewall settings for this network.
     *
     */
    public function testGetNetworkApplianceFirewallSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkAppliancePort
     *
     * Return per-port VLAN settings for a single MX port..
     *
     */
    public function testGetNetworkAppliancePort()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkAppliancePorts
     *
     * List per-port VLAN settings for all ports of a MX..
     *
     */
    public function testGetNetworkAppliancePorts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkAppliancePrefixesDelegatedStatic
     *
     * Return a static delegated prefix from a network.
     *
     */
    public function testGetNetworkAppliancePrefixesDelegatedStatic()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkAppliancePrefixesDelegatedStatics
     *
     * List static delegated prefixes for a network.
     *
     */
    public function testGetNetworkAppliancePrefixesDelegatedStatics()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceRfProfile
     *
     * Return a RF profile.
     *
     */
    public function testGetNetworkApplianceRfProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceRfProfiles
     *
     * List the RF profiles for this network.
     *
     */
    public function testGetNetworkApplianceRfProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceSecurityEvents
     *
     * List the security events for a network.
     *
     */
    public function testGetNetworkApplianceSecurityEvents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceSecurityIntrusion
     *
     * Returns all supported intrusion settings for an MX network.
     *
     */
    public function testGetNetworkApplianceSecurityIntrusion()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceSecurityMalware
     *
     * Returns all supported malware settings for an MX network.
     *
     */
    public function testGetNetworkApplianceSecurityMalware()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceSettings
     *
     * Return the appliance settings for a network.
     *
     */
    public function testGetNetworkApplianceSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceSingleLan
     *
     * Return single LAN configuration.
     *
     */
    public function testGetNetworkApplianceSingleLan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceSsid
     *
     * Return a single MX SSID.
     *
     */
    public function testGetNetworkApplianceSsid()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceSsids
     *
     * List the MX SSIDs in a network.
     *
     */
    public function testGetNetworkApplianceSsids()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceStaticRoute
     *
     * Return a static route for an MX or teleworker network.
     *
     */
    public function testGetNetworkApplianceStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceStaticRoutes
     *
     * List the static routes for an MX or teleworker network.
     *
     */
    public function testGetNetworkApplianceStaticRoutes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceTrafficShaping
     *
     * Display the traffic shaping settings for an MX network.
     *
     */
    public function testGetNetworkApplianceTrafficShaping()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceTrafficShapingCustomPerformanceClass
     *
     * Return a custom performance class for an MX network.
     *
     */
    public function testGetNetworkApplianceTrafficShapingCustomPerformanceClass()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceTrafficShapingCustomPerformanceClasses
     *
     * List all custom performance classes for an MX network.
     *
     */
    public function testGetNetworkApplianceTrafficShapingCustomPerformanceClasses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceTrafficShapingRules
     *
     * Display the traffic shaping settings rules for an MX network.
     *
     */
    public function testGetNetworkApplianceTrafficShapingRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceTrafficShapingUplinkBandwidth
     *
     * Returns the uplink bandwidth limits for your MX network.
     *
     */
    public function testGetNetworkApplianceTrafficShapingUplinkBandwidth()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceTrafficShapingUplinkSelection
     *
     * Show uplink selection settings for an MX network.
     *
     */
    public function testGetNetworkApplianceTrafficShapingUplinkSelection()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceUplinksUsageHistory
     *
     * Get the sent and received bytes for each uplink of a network..
     *
     */
    public function testGetNetworkApplianceUplinksUsageHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceVlan
     *
     * Return a VLAN.
     *
     */
    public function testGetNetworkApplianceVlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceVlans
     *
     * List the VLANs for an MX network.
     *
     */
    public function testGetNetworkApplianceVlans()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceVlansSettings
     *
     * Returns the enabled status of VLANs for the network.
     *
     */
    public function testGetNetworkApplianceVlansSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceVpnBgp
     *
     * Return a Hub BGP Configuration.
     *
     */
    public function testGetNetworkApplianceVpnBgp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceVpnSiteToSiteVpn
     *
     * Return the site-to-site VPN settings of a network.
     *
     */
    public function testGetNetworkApplianceVpnSiteToSiteVpn()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkApplianceWarmSpare
     *
     * Return MX warm spare settings.
     *
     */
    public function testGetNetworkApplianceWarmSpare()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceDnsLocalProfiles
     *
     * Fetch the local DNS profiles used in the organization.
     *
     */
    public function testGetOrganizationApplianceDnsLocalProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceDnsLocalProfilesAssignments
     *
     * Fetch the local DNS profile assignments in the organization.
     *
     */
    public function testGetOrganizationApplianceDnsLocalProfilesAssignments()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceDnsLocalRecords
     *
     * Fetch the DNS records used in local DNS profiles.
     *
     */
    public function testGetOrganizationApplianceDnsLocalRecords()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceDnsSplitProfiles
     *
     * Fetch the split DNS profiles used in the organization.
     *
     */
    public function testGetOrganizationApplianceDnsSplitProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceDnsSplitProfilesAssignments
     *
     * Fetch the split DNS profile assignments in the organization.
     *
     */
    public function testGetOrganizationApplianceDnsSplitProfilesAssignments()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceFirewallMulticastForwardingByNetwork
     *
     * List Static Multicasting forwarding settings for MX networks.
     *
     */
    public function testGetOrganizationApplianceFirewallMulticastForwardingByNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceSecurityEvents
     *
     * List the security events for an organization.
     *
     */
    public function testGetOrganizationApplianceSecurityEvents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceSecurityIntrusion
     *
     * Returns all supported intrusion settings for an organization.
     *
     */
    public function testGetOrganizationApplianceSecurityIntrusion()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceTrafficShapingVpnExclusionsByNetwork
     *
     * Display VPN exclusion rules for MX networks..
     *
     */
    public function testGetOrganizationApplianceTrafficShapingVpnExclusionsByNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceUplinkStatuses
     *
     * List the uplink status of every Meraki MX and Z series appliances in the organization.
     *
     */
    public function testGetOrganizationApplianceUplinkStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceUplinksStatusesOverview
     *
     * Returns an overview of uplink statuses.
     *
     */
    public function testGetOrganizationApplianceUplinksStatusesOverview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceUplinksUsageByNetwork
     *
     * Get the sent and received bytes for each uplink of all MX and Z networks within an organization.
     *
     */
    public function testGetOrganizationApplianceUplinksUsageByNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceVpnStats
     *
     * Show VPN history stat for networks in an organization.
     *
     */
    public function testGetOrganizationApplianceVpnStats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceVpnStatuses
     *
     * Show VPN status for networks in an organization.
     *
     */
    public function testGetOrganizationApplianceVpnStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceVpnThirdPartyVPNPeers
     *
     * Return the third party VPN peers for an organization.
     *
     */
    public function testGetOrganizationApplianceVpnThirdPartyVPNPeers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationApplianceVpnVpnFirewallRules
     *
     * Return the firewall rules for an organization's site-to-site VPN.
     *
     */
    public function testGetOrganizationApplianceVpnVpnFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for swapNetworkApplianceWarmSpare
     *
     * Swap MX primary and warm spare appliances.
     *
     */
    public function testSwapNetworkApplianceWarmSpare()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceApplianceRadioSettings
     *
     * Update the radio settings of an appliance.
     *
     */
    public function testUpdateDeviceApplianceRadioSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceApplianceUplinksSettings
     *
     * Update the uplink settings for an MX appliance.
     *
     */
    public function testUpdateDeviceApplianceUplinksSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceConnectivityMonitoringDestinations
     *
     * Update the connectivity testing destinations for an MX network.
     *
     */
    public function testUpdateNetworkApplianceConnectivityMonitoringDestinations()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceContentFiltering
     *
     * Update the content filtering settings for an MX network.
     *
     */
    public function testUpdateNetworkApplianceContentFiltering()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallCellularFirewallRules
     *
     * Update the cellular firewall rules of an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallCellularFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallFirewalledService
     *
     * Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP').
     *
     */
    public function testUpdateNetworkApplianceFirewallFirewalledService()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallInboundCellularFirewallRules
     *
     * Update the inbound cellular firewall rules of an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallInboundCellularFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallInboundFirewallRules
     *
     * Update the inbound firewall rules of an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallInboundFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallL3FirewallRules
     *
     * Update the L3 firewall rules of an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallL3FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallL7FirewallRules
     *
     * Update the MX L7 firewall rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallL7FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallMulticastForwarding
     *
     * Update static multicast forward rules for a network.
     *
     */
    public function testUpdateNetworkApplianceFirewallMulticastForwarding()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallOneToManyNatRules
     *
     * Set the 1:Many NAT mapping rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallOneToManyNatRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallOneToOneNatRules
     *
     * Set the 1:1 NAT mapping rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallOneToOneNatRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallPortForwardingRules
     *
     * Update the port forwarding rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceFirewallPortForwardingRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceFirewallSettings
     *
     * Update the firewall settings for this network.
     *
     */
    public function testUpdateNetworkApplianceFirewallSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkAppliancePort
     *
     * Update the per-port VLAN settings for a single MX port..
     *
     */
    public function testUpdateNetworkAppliancePort()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkAppliancePrefixesDelegatedStatic
     *
     * Update a static delegated prefix from a network.
     *
     */
    public function testUpdateNetworkAppliancePrefixesDelegatedStatic()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceRfProfile
     *
     * Updates specified RF profile for this network.
     *
     */
    public function testUpdateNetworkApplianceRfProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceSdwanInternetPolicies
     *
     * Update SDWAN internet traffic preferences for an MX network.
     *
     */
    public function testUpdateNetworkApplianceSdwanInternetPolicies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceSecurityIntrusion
     *
     * Set the supported intrusion settings for an MX network.
     *
     */
    public function testUpdateNetworkApplianceSecurityIntrusion()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceSecurityMalware
     *
     * Set the supported malware settings for an MX network.
     *
     */
    public function testUpdateNetworkApplianceSecurityMalware()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceSettings
     *
     * Update the appliance settings for a network.
     *
     */
    public function testUpdateNetworkApplianceSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceSingleLan
     *
     * Update single LAN configuration.
     *
     */
    public function testUpdateNetworkApplianceSingleLan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceSsid
     *
     * Update the attributes of an MX SSID.
     *
     */
    public function testUpdateNetworkApplianceSsid()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceStaticRoute
     *
     * Update a static route for an MX or teleworker network.
     *
     */
    public function testUpdateNetworkApplianceStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceTrafficShaping
     *
     * Update the traffic shaping settings for an MX network.
     *
     */
    public function testUpdateNetworkApplianceTrafficShaping()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceTrafficShapingCustomPerformanceClass
     *
     * Update a custom performance class for an MX network.
     *
     */
    public function testUpdateNetworkApplianceTrafficShapingCustomPerformanceClass()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceTrafficShapingRules
     *
     * Update the traffic shaping settings rules for an MX network.
     *
     */
    public function testUpdateNetworkApplianceTrafficShapingRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceTrafficShapingUplinkBandwidth
     *
     * Updates the uplink bandwidth settings for your MX network..
     *
     */
    public function testUpdateNetworkApplianceTrafficShapingUplinkBandwidth()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceTrafficShapingUplinkSelection
     *
     * Update uplink selection settings for an MX network.
     *
     */
    public function testUpdateNetworkApplianceTrafficShapingUplinkSelection()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceTrafficShapingVpnExclusions
     *
     * Update VPN exclusion rules for an MX network..
     *
     */
    public function testUpdateNetworkApplianceTrafficShapingVpnExclusions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceVlan
     *
     * Update a VLAN.
     *
     */
    public function testUpdateNetworkApplianceVlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceVlansSettings
     *
     * Enable/Disable VLANs for the given network.
     *
     */
    public function testUpdateNetworkApplianceVlansSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceVpnBgp
     *
     * Update a Hub BGP Configuration.
     *
     */
    public function testUpdateNetworkApplianceVpnBgp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceVpnSiteToSiteVpn
     *
     * Update the site-to-site VPN settings of a network.
     *
     */
    public function testUpdateNetworkApplianceVpnSiteToSiteVpn()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkApplianceWarmSpare
     *
     * Update MX warm spare settings.
     *
     */
    public function testUpdateNetworkApplianceWarmSpare()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationApplianceDnsLocalProfile
     *
     * Update a local DNS profile.
     *
     */
    public function testUpdateOrganizationApplianceDnsLocalProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationApplianceDnsLocalRecord
     *
     * Updates a local DNS record.
     *
     */
    public function testUpdateOrganizationApplianceDnsLocalRecord()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationApplianceDnsSplitProfile
     *
     * Update a split DNS profile.
     *
     */
    public function testUpdateOrganizationApplianceDnsSplitProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationApplianceSecurityIntrusion
     *
     * Sets supported intrusion settings for an organization.
     *
     */
    public function testUpdateOrganizationApplianceSecurityIntrusion()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationApplianceVpnThirdPartyVPNPeers
     *
     * Update the third party VPN peers for an organization.
     *
     */
    public function testUpdateOrganizationApplianceVpnThirdPartyVPNPeers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationApplianceVpnVpnFirewallRules
     *
     * Update the firewall rules of an organization's site-to-site VPN.
     *
     */
    public function testUpdateOrganizationApplianceVpnVpnFirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
