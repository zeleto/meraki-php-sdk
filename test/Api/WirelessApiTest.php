<?php
/**
 * WirelessApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Meraki\Test\Api;

use \Meraki\Configuration;
use \Meraki\ApiException;
use \Meraki\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * WirelessApiTest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WirelessApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for assignNetworkWirelessEthernetPortsProfiles
     *
     * Assign AP port profile to list of APs.
     *
     */
    public function testAssignNetworkWirelessEthernetPortsProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkWirelessAirMarshalRule
     *
     * Creates a new rule.
     *
     */
    public function testCreateNetworkWirelessAirMarshalRule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkWirelessEthernetPortsProfile
     *
     * Create an AP port profile.
     *
     */
    public function testCreateNetworkWirelessEthernetPortsProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkWirelessRfProfile
     *
     * Creates new RF profile for this network.
     *
     */
    public function testCreateNetworkWirelessRfProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkWirelessSsidIdentityPsk
     *
     * Create an Identity PSK.
     *
     */
    public function testCreateNetworkWirelessSsidIdentityPsk()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry
     *
     * Create isolation allow list MAC entry for this organization.
     *
     */
    public function testCreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkWirelessAirMarshalRule
     *
     * Delete an Air Marshal rule..
     *
     */
    public function testDeleteNetworkWirelessAirMarshalRule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkWirelessEthernetPortsProfile
     *
     * Delete an AP port profile.
     *
     */
    public function testDeleteNetworkWirelessEthernetPortsProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkWirelessRfProfile
     *
     * Delete a RF Profile.
     *
     */
    public function testDeleteNetworkWirelessRfProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkWirelessSsidIdentityPsk
     *
     * Delete an Identity PSK.
     *
     */
    public function testDeleteNetworkWirelessSsidIdentityPsk()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry
     *
     * Destroy isolation allow list MAC entry for this organization.
     *
     */
    public function testDeleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceWirelessBluetoothSettings
     *
     * Return the bluetooth settings for a wireless device.
     *
     */
    public function testGetDeviceWirelessBluetoothSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceWirelessConnectionStats
     *
     * Aggregated connectivity info for a given AP on this network.
     *
     */
    public function testGetDeviceWirelessConnectionStats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceWirelessElectronicShelfLabel
     *
     * Return the ESL settings of a device.
     *
     */
    public function testGetDeviceWirelessElectronicShelfLabel()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceWirelessLatencyStats
     *
     * Aggregated latency info for a given AP on this network.
     *
     */
    public function testGetDeviceWirelessLatencyStats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceWirelessRadioSettings
     *
     * Return the manually configured radio settings overrides of a device, which take precedence over RF profiles..
     *
     */
    public function testGetDeviceWirelessRadioSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceWirelessStatus
     *
     * Return the SSID statuses of an access point.
     *
     */
    public function testGetDeviceWirelessStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessAirMarshal
     *
     * List Air Marshal scan results from a network.
     *
     */
    public function testGetNetworkWirelessAirMarshal()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessAlternateManagementInterface
     *
     * Return alternate management interface and devices with IP assigned.
     *
     */
    public function testGetNetworkWirelessAlternateManagementInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessBilling
     *
     * Return the billing settings of this network.
     *
     */
    public function testGetNetworkWirelessBilling()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessBluetoothSettings
     *
     * Return the Bluetooth settings for a network. <a href=\"https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)\">Bluetooth settings</a> must be enabled on the network..
     *
     */
    public function testGetNetworkWirelessBluetoothSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessChannelUtilizationHistory
     *
     * Return AP channel utilization over time for a device or network client.
     *
     */
    public function testGetNetworkWirelessChannelUtilizationHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessClientConnectionStats
     *
     * Aggregated connectivity info for a given client on this network.
     *
     */
    public function testGetNetworkWirelessClientConnectionStats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessClientConnectivityEvents
     *
     * List the wireless connectivity events for a client within a network in the timespan..
     *
     */
    public function testGetNetworkWirelessClientConnectivityEvents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessClientCountHistory
     *
     * Return wireless client counts over time for a network, device, or network client.
     *
     */
    public function testGetNetworkWirelessClientCountHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessClientLatencyHistory
     *
     * Return the latency history for a client.
     *
     */
    public function testGetNetworkWirelessClientLatencyHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessClientLatencyStats
     *
     * Aggregated latency info for a given client on this network.
     *
     */
    public function testGetNetworkWirelessClientLatencyStats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessClientsConnectionStats
     *
     * Aggregated connectivity info for this network, grouped by clients.
     *
     */
    public function testGetNetworkWirelessClientsConnectionStats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessClientsLatencyStats
     *
     * Aggregated latency info for this network, grouped by clients.
     *
     */
    public function testGetNetworkWirelessClientsLatencyStats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessConnectionStats
     *
     * Aggregated connectivity info for this network.
     *
     */
    public function testGetNetworkWirelessConnectionStats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessDataRateHistory
     *
     * Return PHY data rates over time for a network, device, or network client.
     *
     */
    public function testGetNetworkWirelessDataRateHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessDevicesConnectionStats
     *
     * Aggregated connectivity info for this network, grouped by node.
     *
     */
    public function testGetNetworkWirelessDevicesConnectionStats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessDevicesLatencyStats
     *
     * Aggregated latency info for this network, grouped by node.
     *
     */
    public function testGetNetworkWirelessDevicesLatencyStats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessElectronicShelfLabel
     *
     * Return the ESL settings of a wireless network.
     *
     */
    public function testGetNetworkWirelessElectronicShelfLabel()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessElectronicShelfLabelConfiguredDevices
     *
     * Get a list of all ESL eligible devices of a network.
     *
     */
    public function testGetNetworkWirelessElectronicShelfLabelConfiguredDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessEthernetPortsProfile
     *
     * Show the AP port profile by ID for this network.
     *
     */
    public function testGetNetworkWirelessEthernetPortsProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessEthernetPortsProfiles
     *
     * List the AP port profiles for this network.
     *
     */
    public function testGetNetworkWirelessEthernetPortsProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessFailedConnections
     *
     * List of all failed client connection events on this network in a given time range.
     *
     */
    public function testGetNetworkWirelessFailedConnections()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessLatencyHistory
     *
     * Return average wireless latency over time for a network, device, or network client.
     *
     */
    public function testGetNetworkWirelessLatencyHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessLatencyStats
     *
     * Aggregated latency info for this network.
     *
     */
    public function testGetNetworkWirelessLatencyStats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessMeshStatuses
     *
     * List wireless mesh statuses for repeaters.
     *
     */
    public function testGetNetworkWirelessMeshStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessRfProfile
     *
     * Return a RF profile.
     *
     */
    public function testGetNetworkWirelessRfProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessRfProfiles
     *
     * List RF profiles for this network.
     *
     */
    public function testGetNetworkWirelessRfProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSettings
     *
     * Return the wireless settings for a network.
     *
     */
    public function testGetNetworkWirelessSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSignalQualityHistory
     *
     * Return signal quality (SNR/RSSI) over time for a device or network client.
     *
     */
    public function testGetNetworkWirelessSignalQualityHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsid
     *
     * Return a single MR SSID.
     *
     */
    public function testGetNetworkWirelessSsid()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidBonjourForwarding
     *
     * List the Bonjour forwarding setting and rules for the SSID.
     *
     */
    public function testGetNetworkWirelessSsidBonjourForwarding()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidDeviceTypeGroupPolicies
     *
     * List the device type group policies for the SSID.
     *
     */
    public function testGetNetworkWirelessSsidDeviceTypeGroupPolicies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidEapOverride
     *
     * Return the EAP overridden parameters for an SSID.
     *
     */
    public function testGetNetworkWirelessSsidEapOverride()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidFirewallL3FirewallRules
     *
     * Return the L3 firewall rules for an SSID on an MR network.
     *
     */
    public function testGetNetworkWirelessSsidFirewallL3FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidFirewallL7FirewallRules
     *
     * Return the L7 firewall rules for an SSID on an MR network.
     *
     */
    public function testGetNetworkWirelessSsidFirewallL7FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidHotspot20
     *
     * Return the Hotspot 2.0 settings for an SSID.
     *
     */
    public function testGetNetworkWirelessSsidHotspot20()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidIdentityPsk
     *
     * Return an Identity PSK.
     *
     */
    public function testGetNetworkWirelessSsidIdentityPsk()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidIdentityPsks
     *
     * List all Identity PSKs in a wireless network.
     *
     */
    public function testGetNetworkWirelessSsidIdentityPsks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidSchedules
     *
     * List the outage schedule for the SSID.
     *
     */
    public function testGetNetworkWirelessSsidSchedules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidSplashSettings
     *
     * Display the splash page settings for the given SSID.
     *
     */
    public function testGetNetworkWirelessSsidSplashSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidTrafficShapingRules
     *
     * Display the traffic shaping settings for a SSID on an MR network.
     *
     */
    public function testGetNetworkWirelessSsidTrafficShapingRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsidVpn
     *
     * List the VPN settings for the SSID..
     *
     */
    public function testGetNetworkWirelessSsidVpn()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessSsids
     *
     * List the MR SSIDs in a network.
     *
     */
    public function testGetNetworkWirelessSsids()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessUsageHistory
     *
     * Return AP usage over time for a device or network client.
     *
     */
    public function testGetNetworkWirelessUsageHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessAirMarshalRules
     *
     * Returns the current Air Marshal rules for this organization.
     *
     */
    public function testGetOrganizationWirelessAirMarshalRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessAirMarshalSettingsByNetwork
     *
     * Returns the current Air Marshal settings for this network.
     *
     */
    public function testGetOrganizationWirelessAirMarshalSettingsByNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessClientsOverviewByDevice
     *
     * List access point client count at the moment in an organization.
     *
     */
    public function testGetOrganizationWirelessClientsOverviewByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesChannelUtilizationByDevice
     *
     * Get average channel utilization for all bands in a network, split by AP.
     *
     */
    public function testGetOrganizationWirelessDevicesChannelUtilizationByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesChannelUtilizationByNetwork
     *
     * Get average channel utilization across all bands for all networks in the organization.
     *
     */
    public function testGetOrganizationWirelessDevicesChannelUtilizationByNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByInterval
     *
     * Get a time-series of average channel utilization for all bands, segmented by device..
     *
     */
    public function testGetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByInterval()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesChannelUtilizationHistoryByNetworkByInterval
     *
     * Get a time-series of average channel utilization for all bands.
     *
     */
    public function testGetOrganizationWirelessDevicesChannelUtilizationHistoryByNetworkByInterval()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesEthernetStatuses
     *
     * List the most recent Ethernet link speed, duplex, aggregation and power mode and status information for wireless devices..
     *
     */
    public function testGetOrganizationWirelessDevicesEthernetStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesPacketLossByClient
     *
     * Get average packet loss for the given timespan for all clients in the organization..
     *
     */
    public function testGetOrganizationWirelessDevicesPacketLossByClient()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesPacketLossByDevice
     *
     * Get average packet loss for the given timespan for all devices in the organization.
     *
     */
    public function testGetOrganizationWirelessDevicesPacketLossByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesPacketLossByNetwork
     *
     * Get average packet loss for the given timespan for all networks in the organization..
     *
     */
    public function testGetOrganizationWirelessDevicesPacketLossByNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesPowerModeHistory
     *
     * Return a record of power mode changes for wireless devices in the organization.
     *
     */
    public function testGetOrganizationWirelessDevicesPowerModeHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesSystemCpuLoadHistory
     *
     * Return the CPU Load history for a list of wireless devices in the organization..
     *
     */
    public function testGetOrganizationWirelessDevicesSystemCpuLoadHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesWirelessControllersByDevice
     *
     * List of Catalyst access points information.
     *
     */
    public function testGetOrganizationWirelessDevicesWirelessControllersByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessRfProfilesAssignmentsByDevice
     *
     * List the RF profiles of an organization by device.
     *
     */
    public function testGetOrganizationWirelessRfProfilesAssignmentsByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessSsidsFirewallIsolationAllowlistEntries
     *
     * List the L2 isolation allow list MAC entry in an organization.
     *
     */
    public function testGetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessSsidsStatusesByDevice
     *
     * List status information of all BSSIDs in your organization.
     *
     */
    public function testGetOrganizationWirelessSsidsStatusesByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for recalculateOrganizationWirelessRadioAutoRfChannels
     *
     * Recalculates automatically assigned channels for every AP within specified the specified network(s).
     *
     */
    public function testRecalculateOrganizationWirelessRadioAutoRfChannels()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setNetworkWirelessEthernetPortsProfilesDefault
     *
     * Set the AP port profile to be default for this network.
     *
     */
    public function testSetNetworkWirelessEthernetPortsProfilesDefault()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceWirelessAlternateManagementInterfaceIpv6
     *
     * Update alternate management interface IPv6 address.
     *
     */
    public function testUpdateDeviceWirelessAlternateManagementInterfaceIpv6()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceWirelessBluetoothSettings
     *
     * Update the bluetooth settings for a wireless device.
     *
     */
    public function testUpdateDeviceWirelessBluetoothSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceWirelessElectronicShelfLabel
     *
     * Update the ESL settings of a device.
     *
     */
    public function testUpdateDeviceWirelessElectronicShelfLabel()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceWirelessRadioSettings
     *
     * Update the radio settings overrides of a device, which take precedence over RF profiles..
     *
     */
    public function testUpdateDeviceWirelessRadioSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessAirMarshalRule
     *
     * Update a rule.
     *
     */
    public function testUpdateNetworkWirelessAirMarshalRule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessAirMarshalSettings
     *
     * Updates Air Marshal settings..
     *
     */
    public function testUpdateNetworkWirelessAirMarshalSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessAlternateManagementInterface
     *
     * Update alternate management interface and device static IP.
     *
     */
    public function testUpdateNetworkWirelessAlternateManagementInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessBilling
     *
     * Update the billing settings.
     *
     */
    public function testUpdateNetworkWirelessBilling()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessBluetoothSettings
     *
     * Update the Bluetooth settings for a network.
     *
     */
    public function testUpdateNetworkWirelessBluetoothSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessElectronicShelfLabel
     *
     * Update the ESL settings of a wireless network.
     *
     */
    public function testUpdateNetworkWirelessElectronicShelfLabel()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessEthernetPortsProfile
     *
     * Update the AP port profile by ID for this network.
     *
     */
    public function testUpdateNetworkWirelessEthernetPortsProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessRfProfile
     *
     * Updates specified RF profile for this network.
     *
     */
    public function testUpdateNetworkWirelessRfProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSettings
     *
     * Update the wireless settings for a network.
     *
     */
    public function testUpdateNetworkWirelessSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsid
     *
     * Update the attributes of an MR SSID.
     *
     */
    public function testUpdateNetworkWirelessSsid()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidBonjourForwarding
     *
     * Update the bonjour forwarding setting and rules for the SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidBonjourForwarding()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidDeviceTypeGroupPolicies
     *
     * Update the device type group policies for the SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidDeviceTypeGroupPolicies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidEapOverride
     *
     * Update the EAP overridden parameters for an SSID..
     *
     */
    public function testUpdateNetworkWirelessSsidEapOverride()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidFirewallL3FirewallRules
     *
     * Update the L3 firewall rules of an SSID on an MR network.
     *
     */
    public function testUpdateNetworkWirelessSsidFirewallL3FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidFirewallL7FirewallRules
     *
     * Update the L7 firewall rules of an SSID on an MR network.
     *
     */
    public function testUpdateNetworkWirelessSsidFirewallL7FirewallRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidHotspot20
     *
     * Update the Hotspot 2.0 settings of an SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidHotspot20()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidIdentityPsk
     *
     * Update an Identity PSK.
     *
     */
    public function testUpdateNetworkWirelessSsidIdentityPsk()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidSchedules
     *
     * Update the outage schedule for the SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidSchedules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidSplashSettings
     *
     * Modify the splash page settings for the given SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidSplashSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidTrafficShapingRules
     *
     * Update the traffic shaping rules for an SSID on an MR network..
     *
     */
    public function testUpdateNetworkWirelessSsidTrafficShapingRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkWirelessSsidVpn
     *
     * Update the VPN settings for the SSID.
     *
     */
    public function testUpdateNetworkWirelessSsidVpn()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry
     *
     * Update isolation allow list MAC entry info.
     *
     */
    public function testUpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
