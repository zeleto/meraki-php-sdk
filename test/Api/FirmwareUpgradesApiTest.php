<?php
/**
 * FirmwareUpgradesApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Meraki\Test\Api;

use \Meraki\Configuration;
use \Meraki\ApiException;
use \Meraki\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * FirmwareUpgradesApiTest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FirmwareUpgradesApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for createNetworkFirmwareUpgradesRollback
     *
     * Rollback a Firmware Upgrade For A Network.
     *
     */
    public function testCreateNetworkFirmwareUpgradesRollback()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkFirmwareUpgradesStagedEvent
     *
     * Create a Staged Upgrade Event for a network.
     *
     */
    public function testCreateNetworkFirmwareUpgradesStagedEvent()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkFirmwareUpgradesStagedGroup
     *
     * Create a Staged Upgrade Group for a network.
     *
     */
    public function testCreateNetworkFirmwareUpgradesStagedGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deferNetworkFirmwareUpgradesStagedEvents
     *
     * Postpone by 1 week all pending staged upgrade stages for a network.
     *
     */
    public function testDeferNetworkFirmwareUpgradesStagedEvents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkFirmwareUpgradesStagedGroup
     *
     * Delete a Staged Upgrade Group.
     *
     */
    public function testDeleteNetworkFirmwareUpgradesStagedGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkFirmwareUpgrades
     *
     * Get firmware upgrade information for a network.
     *
     */
    public function testGetNetworkFirmwareUpgrades()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkFirmwareUpgradesStagedEvents
     *
     * Get the Staged Upgrade Event from a network.
     *
     */
    public function testGetNetworkFirmwareUpgradesStagedEvents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkFirmwareUpgradesStagedGroup
     *
     * Get a Staged Upgrade Group from a network.
     *
     */
    public function testGetNetworkFirmwareUpgradesStagedGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkFirmwareUpgradesStagedGroups
     *
     * List of Staged Upgrade Groups in a network.
     *
     */
    public function testGetNetworkFirmwareUpgradesStagedGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkFirmwareUpgradesStagedStages
     *
     * Order of Staged Upgrade Groups in a network.
     *
     */
    public function testGetNetworkFirmwareUpgradesStagedStages()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for rollbacksNetworkFirmwareUpgradesStagedEvents
     *
     * Rollback a Staged Upgrade Event for a network.
     *
     */
    public function testRollbacksNetworkFirmwareUpgradesStagedEvents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkFirmwareUpgrades
     *
     * Update firmware upgrade information for a network.
     *
     */
    public function testUpdateNetworkFirmwareUpgrades()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkFirmwareUpgradesStagedEvents
     *
     * Update the Staged Upgrade Event for a network.
     *
     */
    public function testUpdateNetworkFirmwareUpgradesStagedEvents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkFirmwareUpgradesStagedGroup
     *
     * Update a Staged Upgrade Group for a network.
     *
     */
    public function testUpdateNetworkFirmwareUpgradesStagedGroup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkFirmwareUpgradesStagedStages
     *
     * Assign Staged Upgrade Group order in the sequence..
     *
     */
    public function testUpdateNetworkFirmwareUpgradesStagedStages()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
