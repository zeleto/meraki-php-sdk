<?php
/**
 * DevicesApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Meraki\Test\Api;

use \Meraki\Configuration;
use \Meraki\ApiException;
use \Meraki\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * DevicesApiTest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DevicesApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for batchNetworkFloorPlansDevicesUpdate
     *
     * Update floorplan assignments for a batch of devices.
     *
     */
    public function testBatchNetworkFloorPlansDevicesUpdate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for blinkDeviceLeds
     *
     * Blink the LEDs on a device.
     *
     */
    public function testBlinkDeviceLeds()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for bulkUpdateOrganizationDevicesDetails
     *
     * Updating device details (currently only used for Catalyst devices).
     *
     */
    public function testBulkUpdateOrganizationDevicesDetails()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for checkinNetworkSmDevices
     *
     * Force check-in a set of devices.
     *
     */
    public function testCheckinNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for claimNetworkDevices
     *
     * Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requests against that device to succeed).
     *
     */
    public function testClaimNetworkDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cloneOrganizationSwitchDevices
     *
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches.
     *
     */
    public function testCloneOrganizationSwitchDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceLiveToolsArpTable
     *
     * Enqueue a job to perform a ARP table request for the device.
     *
     */
    public function testCreateDeviceLiveToolsArpTable()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceLiveToolsCableTest
     *
     * Enqueue a job to perform a cable test for the device on the specified ports.
     *
     */
    public function testCreateDeviceLiveToolsCableTest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceLiveToolsLedsBlink
     *
     * Enqueue a job to blink LEDs on a device.
     *
     */
    public function testCreateDeviceLiveToolsLedsBlink()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceLiveToolsPing
     *
     * Enqueue a job to ping a target host from the device.
     *
     */
    public function testCreateDeviceLiveToolsPing()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceLiveToolsPingDevice
     *
     * Enqueue a job to check connectivity status to the device.
     *
     */
    public function testCreateDeviceLiveToolsPingDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceLiveToolsThroughputTest
     *
     * Enqueue a job to test a device throughput, the test will run for 10 secs to test throughput.
     *
     */
    public function testCreateDeviceLiveToolsThroughputTest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceLiveToolsWakeOnLan
     *
     * Enqueue a job to send a Wake-on-LAN packet from the device.
     *
     */
    public function testCreateDeviceLiveToolsWakeOnLan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationDevicesControllerMigration
     *
     * Migrate devices to another controller or management mode.
     *
     */
    public function testCreateOrganizationDevicesControllerMigration()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOrganizationInventoryDevicesSwapsBulk
     *
     * Swap the devices identified by devices.old with a devices.new, then perform the :afterAction on the devices.old..
     *
     */
    public function testCreateOrganizationInventoryDevicesSwapsBulk()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDevice
     *
     * Return a single device.
     *
     */
    public function testGetDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceCellularSims
     *
     * Return the SIM and APN configurations for a cellular device..
     *
     */
    public function testGetDeviceCellularSims()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceClients
     *
     * List the clients of a device, up to a maximum of a month ago.
     *
     */
    public function testGetDeviceClients()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceLiveToolsArpTable
     *
     * Return an ARP table live tool job..
     *
     */
    public function testGetDeviceLiveToolsArpTable()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceLiveToolsCableTest
     *
     * Return a cable test live tool job..
     *
     */
    public function testGetDeviceLiveToolsCableTest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceLiveToolsLedsBlink
     *
     * Return a blink LEDs job.
     *
     */
    public function testGetDeviceLiveToolsLedsBlink()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceLiveToolsPing
     *
     * Return a ping job.
     *
     */
    public function testGetDeviceLiveToolsPing()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceLiveToolsPingDevice
     *
     * Return a ping device job.
     *
     */
    public function testGetDeviceLiveToolsPingDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceLiveToolsThroughputTest
     *
     * Return a throughput test job.
     *
     */
    public function testGetDeviceLiveToolsThroughputTest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceLiveToolsWakeOnLan
     *
     * Return a Wake-on-LAN job.
     *
     */
    public function testGetDeviceLiveToolsWakeOnLan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceLldpCdp
     *
     * List LLDP and CDP information for a device.
     *
     */
    public function testGetDeviceLldpCdp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceLossAndLatencyHistory
     *
     * Get the uplink loss percentage and latency in milliseconds, and goodput in kilobits per second for MX, MG and Z devices..
     *
     */
    public function testGetDeviceLossAndLatencyHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceManagementInterface
     *
     * Return the management interface settings for a device.
     *
     */
    public function testGetDeviceManagementInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkDevices
     *
     * List the devices in a network.
     *
     */
    public function testGetNetworkDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceCellularUsageHistory
     *
     * Return the client's daily cellular data usage history.
     *
     */
    public function testGetNetworkSmDeviceCellularUsageHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceCerts
     *
     * List the certs on a device.
     *
     */
    public function testGetNetworkSmDeviceCerts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceConnectivity
     *
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard)..
     *
     */
    public function testGetNetworkSmDeviceConnectivity()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceDesktopLogs
     *
     * Return historical records of various Systems Manager network connection details for desktop devices..
     *
     */
    public function testGetNetworkSmDeviceDesktopLogs()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceDeviceCommandLogs
     *
     * Return historical records of commands sent to Systems Manager devices.
     *
     */
    public function testGetNetworkSmDeviceDeviceCommandLogs()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceDeviceProfiles
     *
     * Get the installed profiles associated with a device.
     *
     */
    public function testGetNetworkSmDeviceDeviceProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceNetworkAdapters
     *
     * List the network adapters of a device.
     *
     */
    public function testGetNetworkSmDeviceNetworkAdapters()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDevicePerformanceHistory
     *
     * Return historical records of various Systems Manager client metrics for desktop devices..
     *
     */
    public function testGetNetworkSmDevicePerformanceHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceRestrictions
     *
     * List the restrictions on a device.
     *
     */
    public function testGetNetworkSmDeviceRestrictions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceSecurityCenters
     *
     * List the security centers on a device.
     *
     */
    public function testGetNetworkSmDeviceSecurityCenters()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceSoftwares
     *
     * Get a list of softwares associated with a device.
     *
     */
    public function testGetNetworkSmDeviceSoftwares()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDeviceWlanLists
     *
     * List the saved SSID names on a device.
     *
     */
    public function testGetNetworkSmDeviceWlanLists()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSmDevices
     *
     * List the devices enrolled in an SM network with various specified fields and filters.
     *
     */
    public function testGetNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessDevicesConnectionStats
     *
     * Aggregated connectivity info for this network, grouped by node.
     *
     */
    public function testGetNetworkWirelessDevicesConnectionStats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkWirelessDevicesLatencyStats
     *
     * Aggregated latency info for this network, grouped by node.
     *
     */
    public function testGetNetworkWirelessDevicesLatencyStats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevices
     *
     * List the devices in an organization that have been assigned to a network..
     *
     */
    public function testGetOrganizationDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesAvailabilities
     *
     * List the availability information for devices in an organization.
     *
     */
    public function testGetOrganizationDevicesAvailabilities()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesAvailabilitiesChangeHistory
     *
     * List the availability history information for devices in an organization..
     *
     */
    public function testGetOrganizationDevicesAvailabilitiesChangeHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesControllerMigrations
     *
     * Retrieve device migration statuses in an organization.
     *
     */
    public function testGetOrganizationDevicesControllerMigrations()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesOverviewByModel
     *
     * Lists the count for each device model.
     *
     */
    public function testGetOrganizationDevicesOverviewByModel()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesPowerModulesStatusesByDevice
     *
     * List the most recent status information for power modules in rackmount MX and MS devices that support them.
     *
     */
    public function testGetOrganizationDevicesPowerModulesStatusesByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesProvisioningStatuses
     *
     * List the provisioning statuses information for devices in an organization..
     *
     */
    public function testGetOrganizationDevicesProvisioningStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesStatuses
     *
     * List the status of every Meraki device in the organization.
     *
     */
    public function testGetOrganizationDevicesStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesStatusesOverview
     *
     * Return an overview of current device statuses.
     *
     */
    public function testGetOrganizationDevicesStatusesOverview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesSystemMemoryUsageHistoryByInterval
     *
     * Return the memory utilization history in kB for devices in the organization..
     *
     */
    public function testGetOrganizationDevicesSystemMemoryUsageHistoryByInterval()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesUplinksAddressesByDevice
     *
     * List the current uplink addresses for devices in an organization..
     *
     */
    public function testGetOrganizationDevicesUplinksAddressesByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationDevicesUplinksLossAndLatency
     *
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago.
     *
     */
    public function testGetOrganizationDevicesUplinksLossAndLatency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationFloorPlansAutoLocateDevices
     *
     * List auto locate details for each device in your organization.
     *
     */
    public function testGetOrganizationFloorPlansAutoLocateDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationInventoryDevice
     *
     * Return a single device from the inventory of an organization.
     *
     */
    public function testGetOrganizationInventoryDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationInventoryDevices
     *
     * Return the device inventory for an organization.
     *
     */
    public function testGetOrganizationInventoryDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationInventoryDevicesSwapsBulk
     *
     * List of device swaps for a given request ID ({id})..
     *
     */
    public function testGetOrganizationInventoryDevicesSwapsBulk()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSummaryTopDevicesByUsage
     *
     * Return metrics for organization's top 10 devices sorted by data usage over given time range.
     *
     */
    public function testGetOrganizationSummaryTopDevicesByUsage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSummaryTopDevicesModelsByUsage
     *
     * Return metrics for organization's top 10 device models sorted by data usage over given time range.
     *
     */
    public function testGetOrganizationSummaryTopDevicesModelsByUsage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessControllerDevicesInterfacesL2ByDevice
     *
     * List wireless LAN controller layer 2 interfaces in an organization.
     *
     */
    public function testGetOrganizationWirelessControllerDevicesInterfacesL2ByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessControllerDevicesInterfacesL2StatusesChangeHistoryByDevice
     *
     * List wireless LAN controller layer 2 interfaces history status in an organization.
     *
     */
    public function testGetOrganizationWirelessControllerDevicesInterfacesL2StatusesChangeHistoryByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessControllerDevicesInterfacesL2UsageHistoryByInterval
     *
     * List wireless LAN controller layer 2 interfaces history usage in an organization.
     *
     */
    public function testGetOrganizationWirelessControllerDevicesInterfacesL2UsageHistoryByInterval()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessControllerDevicesInterfacesL3ByDevice
     *
     * List wireless LAN controller layer 3 interfaces in an organization.
     *
     */
    public function testGetOrganizationWirelessControllerDevicesInterfacesL3ByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessControllerDevicesInterfacesL3StatusesChangeHistoryByDevice
     *
     * List wireless LAN controller layer 3 interfaces history status in an organization.
     *
     */
    public function testGetOrganizationWirelessControllerDevicesInterfacesL3StatusesChangeHistoryByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessControllerDevicesInterfacesL3UsageHistoryByInterval
     *
     * List wireless LAN controller layer 3 interfaces history usage in an organization.
     *
     */
    public function testGetOrganizationWirelessControllerDevicesInterfacesL3UsageHistoryByInterval()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessControllerDevicesInterfacesPacketsOverviewByDevice
     *
     * Retrieve the packet counters for the interfaces of a Wireless LAN controller.
     *
     */
    public function testGetOrganizationWirelessControllerDevicesInterfacesPacketsOverviewByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessControllerDevicesInterfacesUsageHistoryByInterval
     *
     * Retrieve the traffic for the interfaces of a Wireless LAN controller.
     *
     */
    public function testGetOrganizationWirelessControllerDevicesInterfacesUsageHistoryByInterval()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessControllerDevicesRedundancyFailoverHistory
     *
     * List the failover events of wireless LAN controllers in an organization.
     *
     */
    public function testGetOrganizationWirelessControllerDevicesRedundancyFailoverHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessControllerDevicesRedundancyStatuses
     *
     * List redundancy details of wireless LAN controllers in an organization.
     *
     */
    public function testGetOrganizationWirelessControllerDevicesRedundancyStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessControllerDevicesSystemUtilizationHistoryByInterval
     *
     * List cpu utilization data of wireless LAN controllers in an organization.
     *
     */
    public function testGetOrganizationWirelessControllerDevicesSystemUtilizationHistoryByInterval()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesChannelUtilizationByDevice
     *
     * Get average channel utilization for all bands in a network, split by AP.
     *
     */
    public function testGetOrganizationWirelessDevicesChannelUtilizationByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesChannelUtilizationByNetwork
     *
     * Get average channel utilization across all bands for all networks in the organization.
     *
     */
    public function testGetOrganizationWirelessDevicesChannelUtilizationByNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByInterval
     *
     * Get a time-series of average channel utilization for all bands, segmented by device..
     *
     */
    public function testGetOrganizationWirelessDevicesChannelUtilizationHistoryByDeviceByInterval()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesChannelUtilizationHistoryByNetworkByInterval
     *
     * Get a time-series of average channel utilization for all bands.
     *
     */
    public function testGetOrganizationWirelessDevicesChannelUtilizationHistoryByNetworkByInterval()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesEthernetStatuses
     *
     * List the most recent Ethernet link speed, duplex, aggregation and power mode and status information for wireless devices..
     *
     */
    public function testGetOrganizationWirelessDevicesEthernetStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesPacketLossByClient
     *
     * Get average packet loss for the given timespan for all clients in the organization..
     *
     */
    public function testGetOrganizationWirelessDevicesPacketLossByClient()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesPacketLossByDevice
     *
     * Get average packet loss for the given timespan for all devices in the organization.
     *
     */
    public function testGetOrganizationWirelessDevicesPacketLossByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesPacketLossByNetwork
     *
     * Get average packet loss for the given timespan for all networks in the organization..
     *
     */
    public function testGetOrganizationWirelessDevicesPacketLossByNetwork()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesPowerModeHistory
     *
     * Return a record of power mode changes for wireless devices in the organization.
     *
     */
    public function testGetOrganizationWirelessDevicesPowerModeHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesSystemCpuLoadHistory
     *
     * Return the CPU Load history for a list of wireless devices in the organization..
     *
     */
    public function testGetOrganizationWirelessDevicesSystemCpuLoadHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationWirelessDevicesWirelessControllersByDevice
     *
     * List of Catalyst access points information.
     *
     */
    public function testGetOrganizationWirelessDevicesWirelessControllersByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for installNetworkSmDeviceApps
     *
     * Install applications on a device.
     *
     */
    public function testInstallNetworkSmDeviceApps()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for lockNetworkSmDevices
     *
     * Lock a set of devices.
     *
     */
    public function testLockNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modifyNetworkSmDevicesTags
     *
     * Add, delete, or update the tags of a set of devices.
     *
     */
    public function testModifyNetworkSmDevicesTags()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for moveNetworkSmDevices
     *
     * Move a set of devices to a new network.
     *
     */
    public function testMoveNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for rebootDevice
     *
     * Reboot a device.
     *
     */
    public function testRebootDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for rebootNetworkSmDevices
     *
     * Reboot a set of endpoints.
     *
     */
    public function testRebootNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for refreshNetworkSmDeviceDetails
     *
     * Refresh the details of a device.
     *
     */
    public function testRefreshNetworkSmDeviceDetails()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for removeNetworkDevices
     *
     * Remove a single device.
     *
     */
    public function testRemoveNetworkDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for shutdownNetworkSmDevices
     *
     * Shutdown a set of endpoints.
     *
     */
    public function testShutdownNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for unenrollNetworkSmDevice
     *
     * Unenroll a device.
     *
     */
    public function testUnenrollNetworkSmDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uninstallNetworkSmDeviceApps
     *
     * Uninstall applications on a device.
     *
     */
    public function testUninstallNetworkSmDeviceApps()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDevice
     *
     * Update the attributes of a device.
     *
     */
    public function testUpdateDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceCellularSims
     *
     * Updates the SIM and APN configurations for a cellular device..
     *
     */
    public function testUpdateDeviceCellularSims()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceManagementInterface
     *
     * Update the management interface settings for a device.
     *
     */
    public function testUpdateDeviceManagementInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSmDevicesFields
     *
     * Modify the fields of a device.
     *
     */
    public function testUpdateNetworkSmDevicesFields()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for vmxNetworkDevicesClaim
     *
     * Claim a vMX into a network.
     *
     */
    public function testVmxNetworkDevicesClaim()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for wipeNetworkSmDevices
     *
     * Wipe a device.
     *
     */
    public function testWipeNetworkSmDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
