<?php
/**
 * SwitchApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Meraki\Test\Api;

use \Meraki\Configuration;
use \Meraki\ApiException;
use \Meraki\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * SwitchApiTest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SwitchApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for addNetworkSwitchStack
     *
     * Add a switch to a stack.
     *
     */
    public function testAddNetworkSwitchStack()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cloneOrganizationSwitchDevices
     *
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches.
     *
     */
    public function testCloneOrganizationSwitchDevices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceSwitchRoutingInterface
     *
     * Create a layer 3 interface for a switch.
     *
     */
    public function testCreateDeviceSwitchRoutingInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createDeviceSwitchRoutingStaticRoute
     *
     * Create a layer 3 static route for a switch.
     *
     */
    public function testCreateDeviceSwitchRoutingStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSwitchAccessPolicy
     *
     * Create an access policy for a switch network.
     *
     */
    public function testCreateNetworkSwitchAccessPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer
     *
     * Add a server to be trusted by Dynamic ARP Inspection on this network.
     *
     */
    public function testCreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSwitchLinkAggregation
     *
     * Create a link aggregation group.
     *
     */
    public function testCreateNetworkSwitchLinkAggregation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSwitchPortSchedule
     *
     * Add a switch port schedule.
     *
     */
    public function testCreateNetworkSwitchPortSchedule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSwitchQosRule
     *
     * Add a quality of service rule.
     *
     */
    public function testCreateNetworkSwitchQosRule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSwitchRoutingMulticastRendezvousPoint
     *
     * Create a multicast rendezvous point.
     *
     */
    public function testCreateNetworkSwitchRoutingMulticastRendezvousPoint()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSwitchStack
     *
     * Create a switch stack.
     *
     */
    public function testCreateNetworkSwitchStack()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSwitchStackRoutingInterface
     *
     * Create a layer 3 interface for a switch stack.
     *
     */
    public function testCreateNetworkSwitchStackRoutingInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNetworkSwitchStackRoutingStaticRoute
     *
     * Create a layer 3 static route for a switch stack.
     *
     */
    public function testCreateNetworkSwitchStackRoutingStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cycleDeviceSwitchPorts
     *
     * Cycle a set of switch ports.
     *
     */
    public function testCycleDeviceSwitchPorts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteDeviceSwitchRoutingInterface
     *
     * Delete a layer 3 interface from the switch.
     *
     */
    public function testDeleteDeviceSwitchRoutingInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteDeviceSwitchRoutingStaticRoute
     *
     * Delete a layer 3 static route for a switch.
     *
     */
    public function testDeleteDeviceSwitchRoutingStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSwitchAccessPolicy
     *
     * Delete an access policy for a switch network.
     *
     */
    public function testDeleteNetworkSwitchAccessPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer
     *
     * Remove a server from being trusted by Dynamic ARP Inspection on this network.
     *
     */
    public function testDeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSwitchLinkAggregation
     *
     * Split a link aggregation group into separate ports.
     *
     */
    public function testDeleteNetworkSwitchLinkAggregation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSwitchPortSchedule
     *
     * Delete a switch port schedule.
     *
     */
    public function testDeleteNetworkSwitchPortSchedule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSwitchQosRule
     *
     * Delete a quality of service rule.
     *
     */
    public function testDeleteNetworkSwitchQosRule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSwitchRoutingMulticastRendezvousPoint
     *
     * Delete a multicast rendezvous point.
     *
     */
    public function testDeleteNetworkSwitchRoutingMulticastRendezvousPoint()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSwitchStack
     *
     * Delete a stack.
     *
     */
    public function testDeleteNetworkSwitchStack()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSwitchStackRoutingInterface
     *
     * Delete a layer 3 interface from a switch stack.
     *
     */
    public function testDeleteNetworkSwitchStackRoutingInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteNetworkSwitchStackRoutingStaticRoute
     *
     * Delete a layer 3 static route for a switch stack.
     *
     */
    public function testDeleteNetworkSwitchStackRoutingStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSwitchPort
     *
     * Return a switch port.
     *
     */
    public function testGetDeviceSwitchPort()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSwitchPorts
     *
     * List the switch ports for a switch.
     *
     */
    public function testGetDeviceSwitchPorts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSwitchPortsStatuses
     *
     * Return the status for all the ports of a switch.
     *
     */
    public function testGetDeviceSwitchPortsStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSwitchPortsStatusesPackets
     *
     * Return the packet counters for all the ports of a switch.
     *
     */
    public function testGetDeviceSwitchPortsStatusesPackets()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSwitchRoutingInterface
     *
     * Return a layer 3 interface for a switch.
     *
     */
    public function testGetDeviceSwitchRoutingInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSwitchRoutingInterfaceDhcp
     *
     * Return a layer 3 interface DHCP configuration for a switch.
     *
     */
    public function testGetDeviceSwitchRoutingInterfaceDhcp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSwitchRoutingInterfaces
     *
     * List layer 3 interfaces for a switch.
     *
     */
    public function testGetDeviceSwitchRoutingInterfaces()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSwitchRoutingStaticRoute
     *
     * Return a layer 3 static route for a switch.
     *
     */
    public function testGetDeviceSwitchRoutingStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSwitchRoutingStaticRoutes
     *
     * List layer 3 static routes for a switch.
     *
     */
    public function testGetDeviceSwitchRoutingStaticRoutes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeviceSwitchWarmSpare
     *
     * Return warm spare configuration for a switch.
     *
     */
    public function testGetDeviceSwitchWarmSpare()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchAccessControlLists
     *
     * Return the access control lists for a MS network.
     *
     */
    public function testGetNetworkSwitchAccessControlLists()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchAccessPolicies
     *
     * List the access policies for a switch network.
     *
     */
    public function testGetNetworkSwitchAccessPolicies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchAccessPolicy
     *
     * Return a specific access policy for a switch network.
     *
     */
    public function testGetNetworkSwitchAccessPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchAlternateManagementInterface
     *
     * Return the switch alternate management interface for the network.
     *
     */
    public function testGetNetworkSwitchAlternateManagementInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchDhcpServerPolicy
     *
     * Return the DHCP server settings.
     *
     */
    public function testGetNetworkSwitchDhcpServerPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers
     *
     * Return the list of servers trusted by Dynamic ARP Inspection on this network.
     *
     */
    public function testGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice
     *
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings.
     *
     */
    public function testGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchDhcpV4ServersSeen
     *
     * Return the network's DHCPv4 servers seen within the selected timeframe (default 1 day).
     *
     */
    public function testGetNetworkSwitchDhcpV4ServersSeen()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchDscpToCosMappings
     *
     * Return the DSCP to CoS mappings.
     *
     */
    public function testGetNetworkSwitchDscpToCosMappings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchLinkAggregations
     *
     * List link aggregation groups.
     *
     */
    public function testGetNetworkSwitchLinkAggregations()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchMtu
     *
     * Return the MTU configuration.
     *
     */
    public function testGetNetworkSwitchMtu()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchPortSchedules
     *
     * List switch port schedules.
     *
     */
    public function testGetNetworkSwitchPortSchedules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchQosRule
     *
     * Return a quality of service rule.
     *
     */
    public function testGetNetworkSwitchQosRule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchQosRules
     *
     * List quality of service rules.
     *
     */
    public function testGetNetworkSwitchQosRules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchQosRulesOrder
     *
     * Return the quality of service rule IDs by order in which they will be processed by the switch.
     *
     */
    public function testGetNetworkSwitchQosRulesOrder()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchRoutingMulticast
     *
     * Return multicast settings for a network.
     *
     */
    public function testGetNetworkSwitchRoutingMulticast()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchRoutingMulticastRendezvousPoint
     *
     * Return a multicast rendezvous point.
     *
     */
    public function testGetNetworkSwitchRoutingMulticastRendezvousPoint()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchRoutingMulticastRendezvousPoints
     *
     * List multicast rendezvous points.
     *
     */
    public function testGetNetworkSwitchRoutingMulticastRendezvousPoints()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchRoutingOspf
     *
     * Return layer 3 OSPF routing configuration.
     *
     */
    public function testGetNetworkSwitchRoutingOspf()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchSettings
     *
     * Returns the switch network settings.
     *
     */
    public function testGetNetworkSwitchSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchStack
     *
     * Show a switch stack.
     *
     */
    public function testGetNetworkSwitchStack()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchStackRoutingInterface
     *
     * Return a layer 3 interface from a switch stack.
     *
     */
    public function testGetNetworkSwitchStackRoutingInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchStackRoutingInterfaceDhcp
     *
     * Return a layer 3 interface DHCP configuration for a switch stack.
     *
     */
    public function testGetNetworkSwitchStackRoutingInterfaceDhcp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchStackRoutingInterfaces
     *
     * List layer 3 interfaces for a switch stack.
     *
     */
    public function testGetNetworkSwitchStackRoutingInterfaces()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchStackRoutingStaticRoute
     *
     * Return a layer 3 static route for a switch stack.
     *
     */
    public function testGetNetworkSwitchStackRoutingStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchStackRoutingStaticRoutes
     *
     * List layer 3 static routes for a switch stack.
     *
     */
    public function testGetNetworkSwitchStackRoutingStaticRoutes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchStacks
     *
     * List the switch stacks in a network.
     *
     */
    public function testGetNetworkSwitchStacks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchStormControl
     *
     * Return the storm control configuration for a switch network.
     *
     */
    public function testGetNetworkSwitchStormControl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getNetworkSwitchStp
     *
     * Returns STP settings.
     *
     */
    public function testGetNetworkSwitchStp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationConfigTemplateSwitchProfilePort
     *
     * Return a switch template port.
     *
     */
    public function testGetOrganizationConfigTemplateSwitchProfilePort()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationConfigTemplateSwitchProfilePorts
     *
     * Return all the ports of a switch template.
     *
     */
    public function testGetOrganizationConfigTemplateSwitchProfilePorts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationConfigTemplateSwitchProfiles
     *
     * List the switch templates for your switch template configuration.
     *
     */
    public function testGetOrganizationConfigTemplateSwitchProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSummarySwitchPowerHistory
     *
     * Returns the total PoE power draw for all switch ports in the organization over the requested timespan (by default the last 24 hours).
     *
     */
    public function testGetOrganizationSummarySwitchPowerHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSwitchPortsBySwitch
     *
     * List the switchports in an organization by switch.
     *
     */
    public function testGetOrganizationSwitchPortsBySwitch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSwitchPortsClientsOverviewByDevice
     *
     * List the number of clients for all switchports with at least one online client in an organization..
     *
     */
    public function testGetOrganizationSwitchPortsClientsOverviewByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSwitchPortsOverview
     *
     * Returns the counts of all active ports for the requested timespan, grouped by speed.
     *
     */
    public function testGetOrganizationSwitchPortsOverview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSwitchPortsStatusesBySwitch
     *
     * List the switchports in an organization.
     *
     */
    public function testGetOrganizationSwitchPortsStatusesBySwitch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSwitchPortsTopologyDiscoveryByDevice
     *
     * List most recently seen LLDP/CDP discovery and topology information per switch port in an organization..
     *
     */
    public function testGetOrganizationSwitchPortsTopologyDiscoveryByDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationSwitchPortsUsageHistoryByDeviceByInterval
     *
     * List the historical usage and traffic data of switchports in an organization..
     *
     */
    public function testGetOrganizationSwitchPortsUsageHistoryByDeviceByInterval()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for removeNetworkSwitchStack
     *
     * Remove a switch from a stack.
     *
     */
    public function testRemoveNetworkSwitchStack()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceSwitchPort
     *
     * Update a switch port.
     *
     */
    public function testUpdateDeviceSwitchPort()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceSwitchRoutingInterface
     *
     * Update a layer 3 interface for a switch.
     *
     */
    public function testUpdateDeviceSwitchRoutingInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceSwitchRoutingInterfaceDhcp
     *
     * Update a layer 3 interface DHCP configuration for a switch.
     *
     */
    public function testUpdateDeviceSwitchRoutingInterfaceDhcp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceSwitchRoutingStaticRoute
     *
     * Update a layer 3 static route for a switch.
     *
     */
    public function testUpdateDeviceSwitchRoutingStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateDeviceSwitchWarmSpare
     *
     * Update warm spare configuration for a switch.
     *
     */
    public function testUpdateDeviceSwitchWarmSpare()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchAccessControlLists
     *
     * Update the access control lists for a MS network.
     *
     */
    public function testUpdateNetworkSwitchAccessControlLists()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchAccessPolicy
     *
     * Update an access policy for a switch network.
     *
     */
    public function testUpdateNetworkSwitchAccessPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchAlternateManagementInterface
     *
     * Update the switch alternate management interface for the network.
     *
     */
    public function testUpdateNetworkSwitchAlternateManagementInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchDhcpServerPolicy
     *
     * Update the DHCP server settings.
     *
     */
    public function testUpdateNetworkSwitchDhcpServerPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer
     *
     * Update a server that is trusted by Dynamic ARP Inspection on this network.
     *
     */
    public function testUpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchDscpToCosMappings
     *
     * Update the DSCP to CoS mappings.
     *
     */
    public function testUpdateNetworkSwitchDscpToCosMappings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchLinkAggregation
     *
     * Update a link aggregation group.
     *
     */
    public function testUpdateNetworkSwitchLinkAggregation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchMtu
     *
     * Update the MTU configuration.
     *
     */
    public function testUpdateNetworkSwitchMtu()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchPortSchedule
     *
     * Update a switch port schedule.
     *
     */
    public function testUpdateNetworkSwitchPortSchedule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchQosRule
     *
     * Update a quality of service rule.
     *
     */
    public function testUpdateNetworkSwitchQosRule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchQosRulesOrder
     *
     * Update the order in which the rules should be processed by the switch.
     *
     */
    public function testUpdateNetworkSwitchQosRulesOrder()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchRoutingMulticast
     *
     * Update multicast settings for a network.
     *
     */
    public function testUpdateNetworkSwitchRoutingMulticast()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchRoutingMulticastRendezvousPoint
     *
     * Update a multicast rendezvous point.
     *
     */
    public function testUpdateNetworkSwitchRoutingMulticastRendezvousPoint()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchRoutingOspf
     *
     * Update layer 3 OSPF routing configuration.
     *
     */
    public function testUpdateNetworkSwitchRoutingOspf()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchSettings
     *
     * Update switch network settings.
     *
     */
    public function testUpdateNetworkSwitchSettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchStackRoutingInterface
     *
     * Update a layer 3 interface for a switch stack.
     *
     */
    public function testUpdateNetworkSwitchStackRoutingInterface()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchStackRoutingInterfaceDhcp
     *
     * Update a layer 3 interface DHCP configuration for a switch stack.
     *
     */
    public function testUpdateNetworkSwitchStackRoutingInterfaceDhcp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchStackRoutingStaticRoute
     *
     * Update a layer 3 static route for a switch stack.
     *
     */
    public function testUpdateNetworkSwitchStackRoutingStaticRoute()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchStormControl
     *
     * Update the storm control configuration for a switch network.
     *
     */
    public function testUpdateNetworkSwitchStormControl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateNetworkSwitchStp
     *
     * Updates STP settings.
     *
     */
    public function testUpdateNetworkSwitchStp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrganizationConfigTemplateSwitchProfilePort
     *
     * Update a switch template port.
     *
     */
    public function testUpdateOrganizationConfigTemplateSwitchProfilePort()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
