<?php
/**
 * StacksApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Meraki\ApiException;
use Meraki\Configuration;
use Meraki\HeaderSelector;
use Meraki\ObjectSerializer;

/**
 * StacksApi Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StacksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addNetworkSwitchStack' => [
            'application/json',
        ],
        'createNetworkSwitchStack' => [
            'application/json',
        ],
        'createNetworkSwitchStackRoutingInterface' => [
            'application/json',
        ],
        'createNetworkSwitchStackRoutingStaticRoute' => [
            'application/json',
        ],
        'deleteNetworkSwitchStack' => [
            'application/json',
        ],
        'deleteNetworkSwitchStackRoutingInterface' => [
            'application/json',
        ],
        'deleteNetworkSwitchStackRoutingStaticRoute' => [
            'application/json',
        ],
        'getNetworkSwitchStack' => [
            'application/json',
        ],
        'getNetworkSwitchStackRoutingInterface' => [
            'application/json',
        ],
        'getNetworkSwitchStackRoutingInterfaceDhcp' => [
            'application/json',
        ],
        'getNetworkSwitchStackRoutingInterfaces' => [
            'application/json',
        ],
        'getNetworkSwitchStackRoutingStaticRoute' => [
            'application/json',
        ],
        'getNetworkSwitchStackRoutingStaticRoutes' => [
            'application/json',
        ],
        'getNetworkSwitchStacks' => [
            'application/json',
        ],
        'removeNetworkSwitchStack' => [
            'application/json',
        ],
        'updateNetworkSwitchStackRoutingInterface' => [
            'application/json',
        ],
        'updateNetworkSwitchStackRoutingInterfaceDhcp' => [
            'application/json',
        ],
        'updateNetworkSwitchStackRoutingStaticRoute' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addNetworkSwitchStack
     *
     * Add a switch to a stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\AddNetworkSwitchStackRequest $add_network_switch_stack_request add_network_switch_stack_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSwitchStacks200ResponseInner
     */
    public function addNetworkSwitchStack($network_id, $switch_stack_id, $add_network_switch_stack_request, string $contentType = self::contentTypes['addNetworkSwitchStack'][0])
    {
        list($response) = $this->addNetworkSwitchStackWithHttpInfo($network_id, $switch_stack_id, $add_network_switch_stack_request, $contentType);
        return $response;
    }

    /**
     * Operation addNetworkSwitchStackWithHttpInfo
     *
     * Add a switch to a stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\AddNetworkSwitchStackRequest $add_network_switch_stack_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSwitchStacks200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function addNetworkSwitchStackWithHttpInfo($network_id, $switch_stack_id, $add_network_switch_stack_request, string $contentType = self::contentTypes['addNetworkSwitchStack'][0])
    {
        $request = $this->addNetworkSwitchStackRequest($network_id, $switch_stack_id, $add_network_switch_stack_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkSwitchStacks200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSwitchStacks200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addNetworkSwitchStackAsync
     *
     * Add a switch to a stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\AddNetworkSwitchStackRequest $add_network_switch_stack_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNetworkSwitchStackAsync($network_id, $switch_stack_id, $add_network_switch_stack_request, string $contentType = self::contentTypes['addNetworkSwitchStack'][0])
    {
        return $this->addNetworkSwitchStackAsyncWithHttpInfo($network_id, $switch_stack_id, $add_network_switch_stack_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addNetworkSwitchStackAsyncWithHttpInfo
     *
     * Add a switch to a stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\AddNetworkSwitchStackRequest $add_network_switch_stack_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNetworkSwitchStackAsyncWithHttpInfo($network_id, $switch_stack_id, $add_network_switch_stack_request, string $contentType = self::contentTypes['addNetworkSwitchStack'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner';
        $request = $this->addNetworkSwitchStackRequest($network_id, $switch_stack_id, $add_network_switch_stack_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addNetworkSwitchStack'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\AddNetworkSwitchStackRequest $add_network_switch_stack_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addNetworkSwitchStackRequest($network_id, $switch_stack_id, $add_network_switch_stack_request, string $contentType = self::contentTypes['addNetworkSwitchStack'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling addNetworkSwitchStack'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling addNetworkSwitchStack'
            );
        }

        // verify the required parameter 'add_network_switch_stack_request' is set
        if ($add_network_switch_stack_request === null || (is_array($add_network_switch_stack_request) && count($add_network_switch_stack_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_network_switch_stack_request when calling addNetworkSwitchStack'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_network_switch_stack_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_network_switch_stack_request));
            } else {
                $httpBody = $add_network_switch_stack_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNetworkSwitchStack
     *
     * Create a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchStackRequest $create_network_switch_stack_request create_network_switch_stack_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSwitchStacks200ResponseInner
     */
    public function createNetworkSwitchStack($network_id, $create_network_switch_stack_request, string $contentType = self::contentTypes['createNetworkSwitchStack'][0])
    {
        list($response) = $this->createNetworkSwitchStackWithHttpInfo($network_id, $create_network_switch_stack_request, $contentType);
        return $response;
    }

    /**
     * Operation createNetworkSwitchStackWithHttpInfo
     *
     * Create a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchStackRequest $create_network_switch_stack_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSwitchStacks200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNetworkSwitchStackWithHttpInfo($network_id, $create_network_switch_stack_request, string $contentType = self::contentTypes['createNetworkSwitchStack'][0])
    {
        $request = $this->createNetworkSwitchStackRequest($network_id, $create_network_switch_stack_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkSwitchStacks200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSwitchStacks200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNetworkSwitchStackAsync
     *
     * Create a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchStackRequest $create_network_switch_stack_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkSwitchStackAsync($network_id, $create_network_switch_stack_request, string $contentType = self::contentTypes['createNetworkSwitchStack'][0])
    {
        return $this->createNetworkSwitchStackAsyncWithHttpInfo($network_id, $create_network_switch_stack_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNetworkSwitchStackAsyncWithHttpInfo
     *
     * Create a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchStackRequest $create_network_switch_stack_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkSwitchStackAsyncWithHttpInfo($network_id, $create_network_switch_stack_request, string $contentType = self::contentTypes['createNetworkSwitchStack'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner';
        $request = $this->createNetworkSwitchStackRequest($network_id, $create_network_switch_stack_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNetworkSwitchStack'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchStackRequest $create_network_switch_stack_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNetworkSwitchStackRequest($network_id, $create_network_switch_stack_request, string $contentType = self::contentTypes['createNetworkSwitchStack'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling createNetworkSwitchStack'
            );
        }

        // verify the required parameter 'create_network_switch_stack_request' is set
        if ($create_network_switch_stack_request === null || (is_array($create_network_switch_stack_request) && count($create_network_switch_stack_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_network_switch_stack_request when calling createNetworkSwitchStack'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_network_switch_stack_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_network_switch_stack_request));
            } else {
                $httpBody = $create_network_switch_stack_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNetworkSwitchStackRoutingInterface
     *
     * Create a layer 3 interface for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequest $create_device_switch_routing_interface_request create_device_switch_routing_interface_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner
     */
    public function createNetworkSwitchStackRoutingInterface($network_id, $switch_stack_id, $create_device_switch_routing_interface_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingInterface'][0])
    {
        list($response) = $this->createNetworkSwitchStackRoutingInterfaceWithHttpInfo($network_id, $switch_stack_id, $create_device_switch_routing_interface_request, $contentType);
        return $response;
    }

    /**
     * Operation createNetworkSwitchStackRoutingInterfaceWithHttpInfo
     *
     * Create a layer 3 interface for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequest $create_device_switch_routing_interface_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNetworkSwitchStackRoutingInterfaceWithHttpInfo($network_id, $switch_stack_id, $create_device_switch_routing_interface_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingInterface'][0])
    {
        $request = $this->createNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $create_device_switch_routing_interface_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNetworkSwitchStackRoutingInterfaceAsync
     *
     * Create a layer 3 interface for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequest $create_device_switch_routing_interface_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkSwitchStackRoutingInterfaceAsync($network_id, $switch_stack_id, $create_device_switch_routing_interface_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingInterface'][0])
    {
        return $this->createNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo($network_id, $switch_stack_id, $create_device_switch_routing_interface_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo
     *
     * Create a layer 3 interface for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequest $create_device_switch_routing_interface_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo($network_id, $switch_stack_id, $create_device_switch_routing_interface_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingInterface'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner';
        $request = $this->createNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $create_device_switch_routing_interface_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNetworkSwitchStackRoutingInterface'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequest $create_device_switch_routing_interface_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $create_device_switch_routing_interface_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingInterface'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling createNetworkSwitchStackRoutingInterface'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling createNetworkSwitchStackRoutingInterface'
            );
        }

        // verify the required parameter 'create_device_switch_routing_interface_request' is set
        if ($create_device_switch_routing_interface_request === null || (is_array($create_device_switch_routing_interface_request) && count($create_device_switch_routing_interface_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_device_switch_routing_interface_request when calling createNetworkSwitchStackRoutingInterface'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_device_switch_routing_interface_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_device_switch_routing_interface_request));
            } else {
                $httpBody = $create_device_switch_routing_interface_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNetworkSwitchStackRoutingStaticRoute
     *
     * Create a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingStaticRouteRequest $create_device_switch_routing_static_route_request create_device_switch_routing_static_route_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner
     */
    public function createNetworkSwitchStackRoutingStaticRoute($network_id, $switch_stack_id, $create_device_switch_routing_static_route_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'][0])
    {
        list($response) = $this->createNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $create_device_switch_routing_static_route_request, $contentType);
        return $response;
    }

    /**
     * Operation createNetworkSwitchStackRoutingStaticRouteWithHttpInfo
     *
     * Create a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingStaticRouteRequest $create_device_switch_routing_static_route_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $create_device_switch_routing_static_route_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'][0])
    {
        $request = $this->createNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $create_device_switch_routing_static_route_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNetworkSwitchStackRoutingStaticRouteAsync
     *
     * Create a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingStaticRouteRequest $create_device_switch_routing_static_route_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkSwitchStackRoutingStaticRouteAsync($network_id, $switch_stack_id, $create_device_switch_routing_static_route_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'][0])
    {
        return $this->createNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $create_device_switch_routing_static_route_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo
     *
     * Create a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingStaticRouteRequest $create_device_switch_routing_static_route_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $create_device_switch_routing_static_route_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner';
        $request = $this->createNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $create_device_switch_routing_static_route_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNetworkSwitchStackRoutingStaticRoute'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingStaticRouteRequest $create_device_switch_routing_static_route_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $create_device_switch_routing_static_route_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling createNetworkSwitchStackRoutingStaticRoute'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling createNetworkSwitchStackRoutingStaticRoute'
            );
        }

        // verify the required parameter 'create_device_switch_routing_static_route_request' is set
        if ($create_device_switch_routing_static_route_request === null || (is_array($create_device_switch_routing_static_route_request) && count($create_device_switch_routing_static_route_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_device_switch_routing_static_route_request when calling createNetworkSwitchStackRoutingStaticRoute'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_device_switch_routing_static_route_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_device_switch_routing_static_route_request));
            } else {
                $httpBody = $create_device_switch_routing_static_route_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNetworkSwitchStack
     *
     * Delete a stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNetworkSwitchStack($network_id, $switch_stack_id, string $contentType = self::contentTypes['deleteNetworkSwitchStack'][0])
    {
        $this->deleteNetworkSwitchStackWithHttpInfo($network_id, $switch_stack_id, $contentType);
    }

    /**
     * Operation deleteNetworkSwitchStackWithHttpInfo
     *
     * Delete a stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNetworkSwitchStackWithHttpInfo($network_id, $switch_stack_id, string $contentType = self::contentTypes['deleteNetworkSwitchStack'][0])
    {
        $request = $this->deleteNetworkSwitchStackRequest($network_id, $switch_stack_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNetworkSwitchStackAsync
     *
     * Delete a stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkSwitchStackAsync($network_id, $switch_stack_id, string $contentType = self::contentTypes['deleteNetworkSwitchStack'][0])
    {
        return $this->deleteNetworkSwitchStackAsyncWithHttpInfo($network_id, $switch_stack_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNetworkSwitchStackAsyncWithHttpInfo
     *
     * Delete a stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkSwitchStackAsyncWithHttpInfo($network_id, $switch_stack_id, string $contentType = self::contentTypes['deleteNetworkSwitchStack'][0])
    {
        $returnType = '';
        $request = $this->deleteNetworkSwitchStackRequest($network_id, $switch_stack_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNetworkSwitchStack'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNetworkSwitchStackRequest($network_id, $switch_stack_id, string $contentType = self::contentTypes['deleteNetworkSwitchStack'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling deleteNetworkSwitchStack'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling deleteNetworkSwitchStack'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingInterface
     *
     * Delete a layer 3 interface from a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNetworkSwitchStackRoutingInterface($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingInterface'][0])
    {
        $this->deleteNetworkSwitchStackRoutingInterfaceWithHttpInfo($network_id, $switch_stack_id, $interface_id, $contentType);
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingInterfaceWithHttpInfo
     *
     * Delete a layer 3 interface from a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNetworkSwitchStackRoutingInterfaceWithHttpInfo($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingInterface'][0])
    {
        $request = $this->deleteNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $interface_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingInterfaceAsync
     *
     * Delete a layer 3 interface from a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkSwitchStackRoutingInterfaceAsync($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingInterface'][0])
    {
        return $this->deleteNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo
     *
     * Delete a layer 3 interface from a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingInterface'][0])
    {
        $returnType = '';
        $request = $this->deleteNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $interface_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNetworkSwitchStackRoutingInterface'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingInterface'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling deleteNetworkSwitchStackRoutingInterface'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling deleteNetworkSwitchStackRoutingInterface'
            );
        }

        // verify the required parameter 'interface_id' is set
        if ($interface_id === null || (is_array($interface_id) && count($interface_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interface_id when calling deleteNetworkSwitchStackRoutingInterface'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }
        // path params
        if ($interface_id !== null) {
            $resourcePath = str_replace(
                '{' . 'interfaceId' . '}',
                ObjectSerializer::toPathValue($interface_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingStaticRoute
     *
     * Delete a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNetworkSwitchStackRoutingStaticRoute($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'][0])
    {
        $this->deleteNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $contentType);
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingStaticRouteWithHttpInfo
     *
     * Delete a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'][0])
    {
        $request = $this->deleteNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingStaticRouteAsync
     *
     * Delete a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkSwitchStackRoutingStaticRouteAsync($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'][0])
    {
        return $this->deleteNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo
     *
     * Delete a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'][0])
    {
        $returnType = '';
        $request = $this->deleteNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNetworkSwitchStackRoutingStaticRoute'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling deleteNetworkSwitchStackRoutingStaticRoute'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling deleteNetworkSwitchStackRoutingStaticRoute'
            );
        }

        // verify the required parameter 'static_route_id' is set
        if ($static_route_id === null || (is_array($static_route_id) && count($static_route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $static_route_id when calling deleteNetworkSwitchStackRoutingStaticRoute'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }
        // path params
        if ($static_route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staticRouteId' . '}',
                ObjectSerializer::toPathValue($static_route_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSwitchStack
     *
     * Show a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSwitchStacks200ResponseInner
     */
    public function getNetworkSwitchStack($network_id, $switch_stack_id, string $contentType = self::contentTypes['getNetworkSwitchStack'][0])
    {
        list($response) = $this->getNetworkSwitchStackWithHttpInfo($network_id, $switch_stack_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSwitchStackWithHttpInfo
     *
     * Show a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSwitchStacks200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSwitchStackWithHttpInfo($network_id, $switch_stack_id, string $contentType = self::contentTypes['getNetworkSwitchStack'][0])
    {
        $request = $this->getNetworkSwitchStackRequest($network_id, $switch_stack_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkSwitchStacks200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSwitchStacks200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSwitchStackAsync
     *
     * Show a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackAsync($network_id, $switch_stack_id, string $contentType = self::contentTypes['getNetworkSwitchStack'][0])
    {
        return $this->getNetworkSwitchStackAsyncWithHttpInfo($network_id, $switch_stack_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSwitchStackAsyncWithHttpInfo
     *
     * Show a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackAsyncWithHttpInfo($network_id, $switch_stack_id, string $contentType = self::contentTypes['getNetworkSwitchStack'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner';
        $request = $this->getNetworkSwitchStackRequest($network_id, $switch_stack_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSwitchStack'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSwitchStackRequest($network_id, $switch_stack_id, string $contentType = self::contentTypes['getNetworkSwitchStack'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSwitchStack'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling getNetworkSwitchStack'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterface
     *
     * Return a layer 3 interface from a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner
     */
    public function getNetworkSwitchStackRoutingInterface($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterface'][0])
    {
        list($response) = $this->getNetworkSwitchStackRoutingInterfaceWithHttpInfo($network_id, $switch_stack_id, $interface_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfaceWithHttpInfo
     *
     * Return a layer 3 interface from a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSwitchStackRoutingInterfaceWithHttpInfo($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterface'][0])
    {
        $request = $this->getNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $interface_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfaceAsync
     *
     * Return a layer 3 interface from a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingInterfaceAsync($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterface'][0])
    {
        return $this->getNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo
     *
     * Return a layer 3 interface from a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterface'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner';
        $request = $this->getNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $interface_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSwitchStackRoutingInterface'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterface'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSwitchStackRoutingInterface'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling getNetworkSwitchStackRoutingInterface'
            );
        }

        // verify the required parameter 'interface_id' is set
        if ($interface_id === null || (is_array($interface_id) && count($interface_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interface_id when calling getNetworkSwitchStackRoutingInterface'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }
        // path params
        if ($interface_id !== null) {
            $resourcePath = str_replace(
                '{' . 'interfaceId' . '}',
                ObjectSerializer::toPathValue($interface_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfaceDhcp
     *
     * Return a layer 3 interface DHCP configuration for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response
     */
    public function getNetworkSwitchStackRoutingInterfaceDhcp($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {
        list($response) = $this->getNetworkSwitchStackRoutingInterfaceDhcpWithHttpInfo($network_id, $switch_stack_id, $interface_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfaceDhcpWithHttpInfo
     *
     * Return a layer 3 interface DHCP configuration for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSwitchStackRoutingInterfaceDhcpWithHttpInfo($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {
        $request = $this->getNetworkSwitchStackRoutingInterfaceDhcpRequest($network_id, $switch_stack_id, $interface_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfaceDhcpAsync
     *
     * Return a layer 3 interface DHCP configuration for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingInterfaceDhcpAsync($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {
        return $this->getNetworkSwitchStackRoutingInterfaceDhcpAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfaceDhcpAsyncWithHttpInfo
     *
     * Return a layer 3 interface DHCP configuration for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingInterfaceDhcpAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response';
        $request = $this->getNetworkSwitchStackRoutingInterfaceDhcpRequest($network_id, $switch_stack_id, $interface_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSwitchStackRoutingInterfaceDhcp'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSwitchStackRoutingInterfaceDhcpRequest($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSwitchStackRoutingInterfaceDhcp'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling getNetworkSwitchStackRoutingInterfaceDhcp'
            );
        }

        // verify the required parameter 'interface_id' is set
        if ($interface_id === null || (is_array($interface_id) && count($interface_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interface_id when calling getNetworkSwitchStackRoutingInterfaceDhcp'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }
        // path params
        if ($interface_id !== null) {
            $resourcePath = str_replace(
                '{' . 'interfaceId' . '}',
                ObjectSerializer::toPathValue($interface_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfaces
     *
     * List layer 3 interfaces for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string|null $protocol Optional parameter to filter L3 interfaces by protocol. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaces'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]
     */
    public function getNetworkSwitchStackRoutingInterfaces($network_id, $switch_stack_id, $protocol = null, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaces'][0])
    {
        list($response) = $this->getNetworkSwitchStackRoutingInterfacesWithHttpInfo($network_id, $switch_stack_id, $protocol, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfacesWithHttpInfo
     *
     * List layer 3 interfaces for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string|null $protocol Optional parameter to filter L3 interfaces by protocol. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaces'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSwitchStackRoutingInterfacesWithHttpInfo($network_id, $switch_stack_id, $protocol = null, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaces'][0])
    {
        $request = $this->getNetworkSwitchStackRoutingInterfacesRequest($network_id, $switch_stack_id, $protocol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfacesAsync
     *
     * List layer 3 interfaces for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string|null $protocol Optional parameter to filter L3 interfaces by protocol. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingInterfacesAsync($network_id, $switch_stack_id, $protocol = null, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaces'][0])
    {
        return $this->getNetworkSwitchStackRoutingInterfacesAsyncWithHttpInfo($network_id, $switch_stack_id, $protocol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfacesAsyncWithHttpInfo
     *
     * List layer 3 interfaces for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string|null $protocol Optional parameter to filter L3 interfaces by protocol. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingInterfacesAsyncWithHttpInfo($network_id, $switch_stack_id, $protocol = null, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaces'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]';
        $request = $this->getNetworkSwitchStackRoutingInterfacesRequest($network_id, $switch_stack_id, $protocol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSwitchStackRoutingInterfaces'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string|null $protocol Optional parameter to filter L3 interfaces by protocol. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSwitchStackRoutingInterfacesRequest($network_id, $switch_stack_id, $protocol = null, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaces'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSwitchStackRoutingInterfaces'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling getNetworkSwitchStackRoutingInterfaces'
            );
        }



        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $protocol,
            'protocol', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRoute
     *
     * Return a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner
     */
    public function getNetworkSwitchStackRoutingStaticRoute($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'][0])
    {
        list($response) = $this->getNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRouteWithHttpInfo
     *
     * Return a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'][0])
    {
        $request = $this->getNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRouteAsync
     *
     * Return a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingStaticRouteAsync($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'][0])
    {
        return $this->getNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo
     *
     * Return a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner';
        $request = $this->getNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSwitchStackRoutingStaticRoute'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSwitchStackRoutingStaticRoute'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling getNetworkSwitchStackRoutingStaticRoute'
            );
        }

        // verify the required parameter 'static_route_id' is set
        if ($static_route_id === null || (is_array($static_route_id) && count($static_route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $static_route_id when calling getNetworkSwitchStackRoutingStaticRoute'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }
        // path params
        if ($static_route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staticRouteId' . '}',
                ObjectSerializer::toPathValue($static_route_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRoutes
     *
     * List layer 3 static routes for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]
     */
    public function getNetworkSwitchStackRoutingStaticRoutes($network_id, $switch_stack_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'][0])
    {
        list($response) = $this->getNetworkSwitchStackRoutingStaticRoutesWithHttpInfo($network_id, $switch_stack_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRoutesWithHttpInfo
     *
     * List layer 3 static routes for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSwitchStackRoutingStaticRoutesWithHttpInfo($network_id, $switch_stack_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'][0])
    {
        $request = $this->getNetworkSwitchStackRoutingStaticRoutesRequest($network_id, $switch_stack_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRoutesAsync
     *
     * List layer 3 static routes for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingStaticRoutesAsync($network_id, $switch_stack_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'][0])
    {
        return $this->getNetworkSwitchStackRoutingStaticRoutesAsyncWithHttpInfo($network_id, $switch_stack_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRoutesAsyncWithHttpInfo
     *
     * List layer 3 static routes for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingStaticRoutesAsyncWithHttpInfo($network_id, $switch_stack_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]';
        $request = $this->getNetworkSwitchStackRoutingStaticRoutesRequest($network_id, $switch_stack_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSwitchStackRoutingStaticRoutes'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSwitchStackRoutingStaticRoutesRequest($network_id, $switch_stack_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSwitchStackRoutingStaticRoutes'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling getNetworkSwitchStackRoutingStaticRoutes'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSwitchStacks
     *
     * List the switch stacks in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStacks'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSwitchStacks200ResponseInner[]
     */
    public function getNetworkSwitchStacks($network_id, string $contentType = self::contentTypes['getNetworkSwitchStacks'][0])
    {
        list($response) = $this->getNetworkSwitchStacksWithHttpInfo($network_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSwitchStacksWithHttpInfo
     *
     * List the switch stacks in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStacks'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSwitchStacks200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSwitchStacksWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkSwitchStacks'][0])
    {
        $request = $this->getNetworkSwitchStacksRequest($network_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkSwitchStacks200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSwitchStacks200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSwitchStacksAsync
     *
     * List the switch stacks in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStacks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStacksAsync($network_id, string $contentType = self::contentTypes['getNetworkSwitchStacks'][0])
    {
        return $this->getNetworkSwitchStacksAsyncWithHttpInfo($network_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSwitchStacksAsyncWithHttpInfo
     *
     * List the switch stacks in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStacks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStacksAsyncWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkSwitchStacks'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner[]';
        $request = $this->getNetworkSwitchStacksRequest($network_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSwitchStacks'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStacks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSwitchStacksRequest($network_id, string $contentType = self::contentTypes['getNetworkSwitchStacks'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSwitchStacks'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeNetworkSwitchStack
     *
     * Remove a switch from a stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\RemoveNetworkSwitchStackRequest $remove_network_switch_stack_request remove_network_switch_stack_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSwitchStacks200ResponseInner
     */
    public function removeNetworkSwitchStack($network_id, $switch_stack_id, $remove_network_switch_stack_request, string $contentType = self::contentTypes['removeNetworkSwitchStack'][0])
    {
        list($response) = $this->removeNetworkSwitchStackWithHttpInfo($network_id, $switch_stack_id, $remove_network_switch_stack_request, $contentType);
        return $response;
    }

    /**
     * Operation removeNetworkSwitchStackWithHttpInfo
     *
     * Remove a switch from a stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\RemoveNetworkSwitchStackRequest $remove_network_switch_stack_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSwitchStacks200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeNetworkSwitchStackWithHttpInfo($network_id, $switch_stack_id, $remove_network_switch_stack_request, string $contentType = self::contentTypes['removeNetworkSwitchStack'][0])
    {
        $request = $this->removeNetworkSwitchStackRequest($network_id, $switch_stack_id, $remove_network_switch_stack_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkSwitchStacks200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSwitchStacks200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeNetworkSwitchStackAsync
     *
     * Remove a switch from a stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\RemoveNetworkSwitchStackRequest $remove_network_switch_stack_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeNetworkSwitchStackAsync($network_id, $switch_stack_id, $remove_network_switch_stack_request, string $contentType = self::contentTypes['removeNetworkSwitchStack'][0])
    {
        return $this->removeNetworkSwitchStackAsyncWithHttpInfo($network_id, $switch_stack_id, $remove_network_switch_stack_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeNetworkSwitchStackAsyncWithHttpInfo
     *
     * Remove a switch from a stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\RemoveNetworkSwitchStackRequest $remove_network_switch_stack_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeNetworkSwitchStackAsyncWithHttpInfo($network_id, $switch_stack_id, $remove_network_switch_stack_request, string $contentType = self::contentTypes['removeNetworkSwitchStack'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSwitchStacks200ResponseInner';
        $request = $this->removeNetworkSwitchStackRequest($network_id, $switch_stack_id, $remove_network_switch_stack_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeNetworkSwitchStack'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\RemoveNetworkSwitchStackRequest $remove_network_switch_stack_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeNetworkSwitchStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeNetworkSwitchStackRequest($network_id, $switch_stack_id, $remove_network_switch_stack_request, string $contentType = self::contentTypes['removeNetworkSwitchStack'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling removeNetworkSwitchStack'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling removeNetworkSwitchStack'
            );
        }

        // verify the required parameter 'remove_network_switch_stack_request' is set
        if ($remove_network_switch_stack_request === null || (is_array($remove_network_switch_stack_request) && count($remove_network_switch_stack_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $remove_network_switch_stack_request when calling removeNetworkSwitchStack'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($remove_network_switch_stack_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($remove_network_switch_stack_request));
            } else {
                $httpBody = $remove_network_switch_stack_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkSwitchStackRoutingInterface
     *
     * Update a layer 3 interface for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceRequest|null $update_device_switch_routing_interface_request update_device_switch_routing_interface_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\UpdateNetworkSwitchStackRoutingInterface200Response
     */
    public function updateNetworkSwitchStackRoutingInterface($network_id, $switch_stack_id, $interface_id, $update_device_switch_routing_interface_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterface'][0])
    {
        list($response) = $this->updateNetworkSwitchStackRoutingInterfaceWithHttpInfo($network_id, $switch_stack_id, $interface_id, $update_device_switch_routing_interface_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkSwitchStackRoutingInterfaceWithHttpInfo
     *
     * Update a layer 3 interface for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceRequest|null $update_device_switch_routing_interface_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\UpdateNetworkSwitchStackRoutingInterface200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkSwitchStackRoutingInterfaceWithHttpInfo($network_id, $switch_stack_id, $interface_id, $update_device_switch_routing_interface_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterface'][0])
    {
        $request = $this->updateNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $interface_id, $update_device_switch_routing_interface_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\UpdateNetworkSwitchStackRoutingInterface200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\UpdateNetworkSwitchStackRoutingInterface200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\UpdateNetworkSwitchStackRoutingInterface200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\UpdateNetworkSwitchStackRoutingInterface200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\UpdateNetworkSwitchStackRoutingInterface200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkSwitchStackRoutingInterfaceAsync
     *
     * Update a layer 3 interface for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceRequest|null $update_device_switch_routing_interface_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchStackRoutingInterfaceAsync($network_id, $switch_stack_id, $interface_id, $update_device_switch_routing_interface_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterface'][0])
    {
        return $this->updateNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, $update_device_switch_routing_interface_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo
     *
     * Update a layer 3 interface for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceRequest|null $update_device_switch_routing_interface_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, $update_device_switch_routing_interface_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterface'][0])
    {
        $returnType = '\Meraki\Model\UpdateNetworkSwitchStackRoutingInterface200Response';
        $request = $this->updateNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $interface_id, $update_device_switch_routing_interface_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkSwitchStackRoutingInterface'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceRequest|null $update_device_switch_routing_interface_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $interface_id, $update_device_switch_routing_interface_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterface'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkSwitchStackRoutingInterface'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling updateNetworkSwitchStackRoutingInterface'
            );
        }

        // verify the required parameter 'interface_id' is set
        if ($interface_id === null || (is_array($interface_id) && count($interface_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interface_id when calling updateNetworkSwitchStackRoutingInterface'
            );
        }



        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }
        // path params
        if ($interface_id !== null) {
            $resourcePath = str_replace(
                '{' . 'interfaceId' . '}',
                ObjectSerializer::toPathValue($interface_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_device_switch_routing_interface_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_device_switch_routing_interface_request));
            } else {
                $httpBody = $update_device_switch_routing_interface_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkSwitchStackRoutingInterfaceDhcp
     *
     * Update a layer 3 interface DHCP configuration for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest|null $update_network_switch_stack_routing_interface_dhcp_request update_network_switch_stack_routing_interface_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response
     */
    public function updateNetworkSwitchStackRoutingInterfaceDhcp($network_id, $switch_stack_id, $interface_id, $update_network_switch_stack_routing_interface_dhcp_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {
        list($response) = $this->updateNetworkSwitchStackRoutingInterfaceDhcpWithHttpInfo($network_id, $switch_stack_id, $interface_id, $update_network_switch_stack_routing_interface_dhcp_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkSwitchStackRoutingInterfaceDhcpWithHttpInfo
     *
     * Update a layer 3 interface DHCP configuration for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest|null $update_network_switch_stack_routing_interface_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkSwitchStackRoutingInterfaceDhcpWithHttpInfo($network_id, $switch_stack_id, $interface_id, $update_network_switch_stack_routing_interface_dhcp_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {
        $request = $this->updateNetworkSwitchStackRoutingInterfaceDhcpRequest($network_id, $switch_stack_id, $interface_id, $update_network_switch_stack_routing_interface_dhcp_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkSwitchStackRoutingInterfaceDhcpAsync
     *
     * Update a layer 3 interface DHCP configuration for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest|null $update_network_switch_stack_routing_interface_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchStackRoutingInterfaceDhcpAsync($network_id, $switch_stack_id, $interface_id, $update_network_switch_stack_routing_interface_dhcp_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {
        return $this->updateNetworkSwitchStackRoutingInterfaceDhcpAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, $update_network_switch_stack_routing_interface_dhcp_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkSwitchStackRoutingInterfaceDhcpAsyncWithHttpInfo
     *
     * Update a layer 3 interface DHCP configuration for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest|null $update_network_switch_stack_routing_interface_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchStackRoutingInterfaceDhcpAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, $update_network_switch_stack_routing_interface_dhcp_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response';
        $request = $this->updateNetworkSwitchStackRoutingInterfaceDhcpRequest($network_id, $switch_stack_id, $interface_id, $update_network_switch_stack_routing_interface_dhcp_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkSwitchStackRoutingInterfaceDhcp'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest|null $update_network_switch_stack_routing_interface_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkSwitchStackRoutingInterfaceDhcpRequest($network_id, $switch_stack_id, $interface_id, $update_network_switch_stack_routing_interface_dhcp_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkSwitchStackRoutingInterfaceDhcp'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling updateNetworkSwitchStackRoutingInterfaceDhcp'
            );
        }

        // verify the required parameter 'interface_id' is set
        if ($interface_id === null || (is_array($interface_id) && count($interface_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interface_id when calling updateNetworkSwitchStackRoutingInterfaceDhcp'
            );
        }



        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }
        // path params
        if ($interface_id !== null) {
            $resourcePath = str_replace(
                '{' . 'interfaceId' . '}',
                ObjectSerializer::toPathValue($interface_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_network_switch_stack_routing_interface_dhcp_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_network_switch_stack_routing_interface_dhcp_request));
            } else {
                $httpBody = $update_network_switch_stack_routing_interface_dhcp_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkSwitchStackRoutingStaticRoute
     *
     * Update a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingStaticRouteRequest|null $update_device_switch_routing_static_route_request update_device_switch_routing_static_route_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner
     */
    public function updateNetworkSwitchStackRoutingStaticRoute($network_id, $switch_stack_id, $static_route_id, $update_device_switch_routing_static_route_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'][0])
    {
        list($response) = $this->updateNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $update_device_switch_routing_static_route_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkSwitchStackRoutingStaticRouteWithHttpInfo
     *
     * Update a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingStaticRouteRequest|null $update_device_switch_routing_static_route_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $update_device_switch_routing_static_route_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'][0])
    {
        $request = $this->updateNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, $update_device_switch_routing_static_route_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkSwitchStackRoutingStaticRouteAsync
     *
     * Update a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingStaticRouteRequest|null $update_device_switch_routing_static_route_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchStackRoutingStaticRouteAsync($network_id, $switch_stack_id, $static_route_id, $update_device_switch_routing_static_route_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'][0])
    {
        return $this->updateNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $update_device_switch_routing_static_route_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo
     *
     * Update a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingStaticRouteRequest|null $update_device_switch_routing_static_route_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $update_device_switch_routing_static_route_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner';
        $request = $this->updateNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, $update_device_switch_routing_static_route_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkSwitchStackRoutingStaticRoute'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingStaticRouteRequest|null $update_device_switch_routing_static_route_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, $update_device_switch_routing_static_route_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkSwitchStackRoutingStaticRoute'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling updateNetworkSwitchStackRoutingStaticRoute'
            );
        }

        // verify the required parameter 'static_route_id' is set
        if ($static_route_id === null || (is_array($static_route_id) && count($static_route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $static_route_id when calling updateNetworkSwitchStackRoutingStaticRoute'
            );
        }



        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }
        // path params
        if ($static_route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staticRouteId' . '}',
                ObjectSerializer::toPathValue($static_route_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_device_switch_routing_static_route_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_device_switch_routing_static_route_request));
            } else {
                $httpBody = $update_device_switch_routing_static_route_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
