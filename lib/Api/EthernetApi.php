<?php
/**
 * EthernetApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Meraki\ApiException;
use Meraki\Configuration;
use Meraki\HeaderSelector;
use Meraki\ObjectSerializer;

/**
 * EthernetApi Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EthernetApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'assignNetworkWirelessEthernetPortsProfiles' => [
            'application/json',
        ],
        'createNetworkWirelessEthernetPortsProfile' => [
            'application/json',
        ],
        'deleteNetworkWirelessEthernetPortsProfile' => [
            'application/json',
        ],
        'getNetworkWirelessEthernetPortsProfile' => [
            'application/json',
        ],
        'getNetworkWirelessEthernetPortsProfiles' => [
            'application/json',
        ],
        'getOrganizationWirelessDevicesEthernetStatuses' => [
            'application/json',
        ],
        'setNetworkWirelessEthernetPortsProfilesDefault' => [
            'application/json',
        ],
        'updateNetworkWirelessEthernetPortsProfile' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation assignNetworkWirelessEthernetPortsProfiles
     *
     * Assign AP port profile to list of APs
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\AssignNetworkWirelessEthernetPortsProfilesRequest $assign_network_wireless_ethernet_ports_profiles_request assign_network_wireless_ethernet_ports_profiles_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\AssignNetworkWirelessEthernetPortsProfiles201Response
     */
    public function assignNetworkWirelessEthernetPortsProfiles($network_id, $assign_network_wireless_ethernet_ports_profiles_request, string $contentType = self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'][0])
    {
        list($response) = $this->assignNetworkWirelessEthernetPortsProfilesWithHttpInfo($network_id, $assign_network_wireless_ethernet_ports_profiles_request, $contentType);
        return $response;
    }

    /**
     * Operation assignNetworkWirelessEthernetPortsProfilesWithHttpInfo
     *
     * Assign AP port profile to list of APs
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\AssignNetworkWirelessEthernetPortsProfilesRequest $assign_network_wireless_ethernet_ports_profiles_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\AssignNetworkWirelessEthernetPortsProfiles201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function assignNetworkWirelessEthernetPortsProfilesWithHttpInfo($network_id, $assign_network_wireless_ethernet_ports_profiles_request, string $contentType = self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'][0])
    {
        $request = $this->assignNetworkWirelessEthernetPortsProfilesRequest($network_id, $assign_network_wireless_ethernet_ports_profiles_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\AssignNetworkWirelessEthernetPortsProfiles201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\AssignNetworkWirelessEthernetPortsProfiles201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\AssignNetworkWirelessEthernetPortsProfiles201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\AssignNetworkWirelessEthernetPortsProfiles201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\AssignNetworkWirelessEthernetPortsProfiles201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assignNetworkWirelessEthernetPortsProfilesAsync
     *
     * Assign AP port profile to list of APs
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\AssignNetworkWirelessEthernetPortsProfilesRequest $assign_network_wireless_ethernet_ports_profiles_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignNetworkWirelessEthernetPortsProfilesAsync($network_id, $assign_network_wireless_ethernet_ports_profiles_request, string $contentType = self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'][0])
    {
        return $this->assignNetworkWirelessEthernetPortsProfilesAsyncWithHttpInfo($network_id, $assign_network_wireless_ethernet_ports_profiles_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assignNetworkWirelessEthernetPortsProfilesAsyncWithHttpInfo
     *
     * Assign AP port profile to list of APs
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\AssignNetworkWirelessEthernetPortsProfilesRequest $assign_network_wireless_ethernet_ports_profiles_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignNetworkWirelessEthernetPortsProfilesAsyncWithHttpInfo($network_id, $assign_network_wireless_ethernet_ports_profiles_request, string $contentType = self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'][0])
    {
        $returnType = '\Meraki\Model\AssignNetworkWirelessEthernetPortsProfiles201Response';
        $request = $this->assignNetworkWirelessEthernetPortsProfilesRequest($network_id, $assign_network_wireless_ethernet_ports_profiles_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assignNetworkWirelessEthernetPortsProfiles'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\AssignNetworkWirelessEthernetPortsProfilesRequest $assign_network_wireless_ethernet_ports_profiles_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assignNetworkWirelessEthernetPortsProfilesRequest($network_id, $assign_network_wireless_ethernet_ports_profiles_request, string $contentType = self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling assignNetworkWirelessEthernetPortsProfiles'
            );
        }

        // verify the required parameter 'assign_network_wireless_ethernet_ports_profiles_request' is set
        if ($assign_network_wireless_ethernet_ports_profiles_request === null || (is_array($assign_network_wireless_ethernet_ports_profiles_request) && count($assign_network_wireless_ethernet_ports_profiles_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assign_network_wireless_ethernet_ports_profiles_request when calling assignNetworkWirelessEthernetPortsProfiles'
            );
        }


        $resourcePath = '/networks/{networkId}/wireless/ethernet/ports/profiles/assign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($assign_network_wireless_ethernet_ports_profiles_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($assign_network_wireless_ethernet_ports_profiles_request));
            } else {
                $httpBody = $assign_network_wireless_ethernet_ports_profiles_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNetworkWirelessEthernetPortsProfile
     *
     * Create an AP port profile
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkWirelessEthernetPortsProfileRequest $create_network_wireless_ethernet_ports_profile_request create_network_wireless_ethernet_ports_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner
     */
    public function createNetworkWirelessEthernetPortsProfile($network_id, $create_network_wireless_ethernet_ports_profile_request, string $contentType = self::contentTypes['createNetworkWirelessEthernetPortsProfile'][0])
    {
        list($response) = $this->createNetworkWirelessEthernetPortsProfileWithHttpInfo($network_id, $create_network_wireless_ethernet_ports_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation createNetworkWirelessEthernetPortsProfileWithHttpInfo
     *
     * Create an AP port profile
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkWirelessEthernetPortsProfileRequest $create_network_wireless_ethernet_ports_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNetworkWirelessEthernetPortsProfileWithHttpInfo($network_id, $create_network_wireless_ethernet_ports_profile_request, string $contentType = self::contentTypes['createNetworkWirelessEthernetPortsProfile'][0])
    {
        $request = $this->createNetworkWirelessEthernetPortsProfileRequest($network_id, $create_network_wireless_ethernet_ports_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNetworkWirelessEthernetPortsProfileAsync
     *
     * Create an AP port profile
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkWirelessEthernetPortsProfileRequest $create_network_wireless_ethernet_ports_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkWirelessEthernetPortsProfileAsync($network_id, $create_network_wireless_ethernet_ports_profile_request, string $contentType = self::contentTypes['createNetworkWirelessEthernetPortsProfile'][0])
    {
        return $this->createNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo($network_id, $create_network_wireless_ethernet_ports_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo
     *
     * Create an AP port profile
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkWirelessEthernetPortsProfileRequest $create_network_wireless_ethernet_ports_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo($network_id, $create_network_wireless_ethernet_ports_profile_request, string $contentType = self::contentTypes['createNetworkWirelessEthernetPortsProfile'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner';
        $request = $this->createNetworkWirelessEthernetPortsProfileRequest($network_id, $create_network_wireless_ethernet_ports_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNetworkWirelessEthernetPortsProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkWirelessEthernetPortsProfileRequest $create_network_wireless_ethernet_ports_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNetworkWirelessEthernetPortsProfileRequest($network_id, $create_network_wireless_ethernet_ports_profile_request, string $contentType = self::contentTypes['createNetworkWirelessEthernetPortsProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling createNetworkWirelessEthernetPortsProfile'
            );
        }

        // verify the required parameter 'create_network_wireless_ethernet_ports_profile_request' is set
        if ($create_network_wireless_ethernet_ports_profile_request === null || (is_array($create_network_wireless_ethernet_ports_profile_request) && count($create_network_wireless_ethernet_ports_profile_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_network_wireless_ethernet_ports_profile_request when calling createNetworkWirelessEthernetPortsProfile'
            );
        }


        $resourcePath = '/networks/{networkId}/wireless/ethernet/ports/profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_network_wireless_ethernet_ports_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_network_wireless_ethernet_ports_profile_request));
            } else {
                $httpBody = $create_network_wireless_ethernet_ports_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNetworkWirelessEthernetPortsProfile
     *
     * Delete an AP port profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNetworkWirelessEthernetPortsProfile($network_id, $profile_id, string $contentType = self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'][0])
    {
        $this->deleteNetworkWirelessEthernetPortsProfileWithHttpInfo($network_id, $profile_id, $contentType);
    }

    /**
     * Operation deleteNetworkWirelessEthernetPortsProfileWithHttpInfo
     *
     * Delete an AP port profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNetworkWirelessEthernetPortsProfileWithHttpInfo($network_id, $profile_id, string $contentType = self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'][0])
    {
        $request = $this->deleteNetworkWirelessEthernetPortsProfileRequest($network_id, $profile_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNetworkWirelessEthernetPortsProfileAsync
     *
     * Delete an AP port profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkWirelessEthernetPortsProfileAsync($network_id, $profile_id, string $contentType = self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'][0])
    {
        return $this->deleteNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo($network_id, $profile_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo
     *
     * Delete an AP port profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo($network_id, $profile_id, string $contentType = self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'][0])
    {
        $returnType = '';
        $request = $this->deleteNetworkWirelessEthernetPortsProfileRequest($network_id, $profile_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNetworkWirelessEthernetPortsProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNetworkWirelessEthernetPortsProfileRequest($network_id, $profile_id, string $contentType = self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling deleteNetworkWirelessEthernetPortsProfile'
            );
        }

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling deleteNetworkWirelessEthernetPortsProfile'
            );
        }


        $resourcePath = '/networks/{networkId}/wireless/ethernet/ports/profiles/{profileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkWirelessEthernetPortsProfile
     *
     * Show the AP port profile by ID for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner
     */
    public function getNetworkWirelessEthernetPortsProfile($network_id, $profile_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfile'][0])
    {
        list($response) = $this->getNetworkWirelessEthernetPortsProfileWithHttpInfo($network_id, $profile_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkWirelessEthernetPortsProfileWithHttpInfo
     *
     * Show the AP port profile by ID for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkWirelessEthernetPortsProfileWithHttpInfo($network_id, $profile_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfile'][0])
    {
        $request = $this->getNetworkWirelessEthernetPortsProfileRequest($network_id, $profile_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkWirelessEthernetPortsProfileAsync
     *
     * Show the AP port profile by ID for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkWirelessEthernetPortsProfileAsync($network_id, $profile_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfile'][0])
    {
        return $this->getNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo($network_id, $profile_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo
     *
     * Show the AP port profile by ID for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo($network_id, $profile_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfile'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner';
        $request = $this->getNetworkWirelessEthernetPortsProfileRequest($network_id, $profile_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkWirelessEthernetPortsProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkWirelessEthernetPortsProfileRequest($network_id, $profile_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkWirelessEthernetPortsProfile'
            );
        }

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling getNetworkWirelessEthernetPortsProfile'
            );
        }


        $resourcePath = '/networks/{networkId}/wireless/ethernet/ports/profiles/{profileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkWirelessEthernetPortsProfiles
     *
     * List the AP port profiles for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner[]
     */
    public function getNetworkWirelessEthernetPortsProfiles($network_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfiles'][0])
    {
        list($response) = $this->getNetworkWirelessEthernetPortsProfilesWithHttpInfo($network_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkWirelessEthernetPortsProfilesWithHttpInfo
     *
     * List the AP port profiles for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkWirelessEthernetPortsProfilesWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfiles'][0])
    {
        $request = $this->getNetworkWirelessEthernetPortsProfilesRequest($network_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkWirelessEthernetPortsProfilesAsync
     *
     * List the AP port profiles for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkWirelessEthernetPortsProfilesAsync($network_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfiles'][0])
    {
        return $this->getNetworkWirelessEthernetPortsProfilesAsyncWithHttpInfo($network_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkWirelessEthernetPortsProfilesAsyncWithHttpInfo
     *
     * List the AP port profiles for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkWirelessEthernetPortsProfilesAsyncWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfiles'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner[]';
        $request = $this->getNetworkWirelessEthernetPortsProfilesRequest($network_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkWirelessEthernetPortsProfiles'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkWirelessEthernetPortsProfilesRequest($network_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfiles'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkWirelessEthernetPortsProfiles'
            );
        }


        $resourcePath = '/networks/{networkId}/wireless/ethernet/ports/profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationWirelessDevicesEthernetStatuses
     *
     * List the most recent Ethernet link speed, duplex, aggregation and power mode and status information for wireless devices.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]&#x3D;N_12345678&amp;networkIds[]&#x3D;L_3456 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessDevicesEthernetStatuses'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner[]
     */
    public function getOrganizationWirelessDevicesEthernetStatuses($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationWirelessDevicesEthernetStatuses'][0])
    {
        list($response) = $this->getOrganizationWirelessDevicesEthernetStatusesWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationWirelessDevicesEthernetStatusesWithHttpInfo
     *
     * List the most recent Ethernet link speed, duplex, aggregation and power mode and status information for wireless devices.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]&#x3D;N_12345678&amp;networkIds[]&#x3D;L_3456 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessDevicesEthernetStatuses'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationWirelessDevicesEthernetStatusesWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationWirelessDevicesEthernetStatuses'][0])
    {
        $request = $this->getOrganizationWirelessDevicesEthernetStatusesRequest($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationWirelessDevicesEthernetStatusesAsync
     *
     * List the most recent Ethernet link speed, duplex, aggregation and power mode and status information for wireless devices.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]&#x3D;N_12345678&amp;networkIds[]&#x3D;L_3456 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessDevicesEthernetStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationWirelessDevicesEthernetStatusesAsync($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationWirelessDevicesEthernetStatuses'][0])
    {
        return $this->getOrganizationWirelessDevicesEthernetStatusesAsyncWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationWirelessDevicesEthernetStatusesAsyncWithHttpInfo
     *
     * List the most recent Ethernet link speed, duplex, aggregation and power mode and status information for wireless devices.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]&#x3D;N_12345678&amp;networkIds[]&#x3D;L_3456 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessDevicesEthernetStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationWirelessDevicesEthernetStatusesAsyncWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationWirelessDevicesEthernetStatuses'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationWirelessDevicesEthernetStatuses200ResponseInner[]';
        $request = $this->getOrganizationWirelessDevicesEthernetStatusesRequest($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationWirelessDevicesEthernetStatuses'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids A list of Meraki network IDs to filter results to contain only specified networks. E.g.: networkIds[]&#x3D;N_12345678&amp;networkIds[]&#x3D;L_3456 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessDevicesEthernetStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationWirelessDevicesEthernetStatusesRequest($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationWirelessDevicesEthernetStatuses'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationWirelessDevicesEthernetStatuses'
            );
        }






        $resourcePath = '/organizations/{organizationId}/wireless/devices/ethernet/statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'perPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starting_after,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ending_before,
            'endingBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network_ids,
            'networkIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setNetworkWirelessEthernetPortsProfilesDefault
     *
     * Set the AP port profile to be default for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefaultRequest $set_network_wireless_ethernet_ports_profiles_default_request set_network_wireless_ethernet_ports_profiles_default_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefault200Response
     */
    public function setNetworkWirelessEthernetPortsProfilesDefault($network_id, $set_network_wireless_ethernet_ports_profiles_default_request, string $contentType = self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'][0])
    {
        list($response) = $this->setNetworkWirelessEthernetPortsProfilesDefaultWithHttpInfo($network_id, $set_network_wireless_ethernet_ports_profiles_default_request, $contentType);
        return $response;
    }

    /**
     * Operation setNetworkWirelessEthernetPortsProfilesDefaultWithHttpInfo
     *
     * Set the AP port profile to be default for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefaultRequest $set_network_wireless_ethernet_ports_profiles_default_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefault200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function setNetworkWirelessEthernetPortsProfilesDefaultWithHttpInfo($network_id, $set_network_wireless_ethernet_ports_profiles_default_request, string $contentType = self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'][0])
    {
        $request = $this->setNetworkWirelessEthernetPortsProfilesDefaultRequest($network_id, $set_network_wireless_ethernet_ports_profiles_default_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefault200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefault200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefault200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefault200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefault200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setNetworkWirelessEthernetPortsProfilesDefaultAsync
     *
     * Set the AP port profile to be default for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefaultRequest $set_network_wireless_ethernet_ports_profiles_default_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setNetworkWirelessEthernetPortsProfilesDefaultAsync($network_id, $set_network_wireless_ethernet_ports_profiles_default_request, string $contentType = self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'][0])
    {
        return $this->setNetworkWirelessEthernetPortsProfilesDefaultAsyncWithHttpInfo($network_id, $set_network_wireless_ethernet_ports_profiles_default_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setNetworkWirelessEthernetPortsProfilesDefaultAsyncWithHttpInfo
     *
     * Set the AP port profile to be default for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefaultRequest $set_network_wireless_ethernet_ports_profiles_default_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setNetworkWirelessEthernetPortsProfilesDefaultAsyncWithHttpInfo($network_id, $set_network_wireless_ethernet_ports_profiles_default_request, string $contentType = self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'][0])
    {
        $returnType = '\Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefault200Response';
        $request = $this->setNetworkWirelessEthernetPortsProfilesDefaultRequest($network_id, $set_network_wireless_ethernet_ports_profiles_default_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setNetworkWirelessEthernetPortsProfilesDefault'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefaultRequest $set_network_wireless_ethernet_ports_profiles_default_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setNetworkWirelessEthernetPortsProfilesDefaultRequest($network_id, $set_network_wireless_ethernet_ports_profiles_default_request, string $contentType = self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling setNetworkWirelessEthernetPortsProfilesDefault'
            );
        }

        // verify the required parameter 'set_network_wireless_ethernet_ports_profiles_default_request' is set
        if ($set_network_wireless_ethernet_ports_profiles_default_request === null || (is_array($set_network_wireless_ethernet_ports_profiles_default_request) && count($set_network_wireless_ethernet_ports_profiles_default_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_network_wireless_ethernet_ports_profiles_default_request when calling setNetworkWirelessEthernetPortsProfilesDefault'
            );
        }


        $resourcePath = '/networks/{networkId}/wireless/ethernet/ports/profiles/setDefault';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($set_network_wireless_ethernet_ports_profiles_default_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($set_network_wireless_ethernet_ports_profiles_default_request));
            } else {
                $httpBody = $set_network_wireless_ethernet_ports_profiles_default_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkWirelessEthernetPortsProfile
     *
     * Update the AP port profile by ID for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkWirelessEthernetPortsProfileRequest|null $update_network_wireless_ethernet_ports_profile_request update_network_wireless_ethernet_ports_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner
     */
    public function updateNetworkWirelessEthernetPortsProfile($network_id, $profile_id, $update_network_wireless_ethernet_ports_profile_request = null, string $contentType = self::contentTypes['updateNetworkWirelessEthernetPortsProfile'][0])
    {
        list($response) = $this->updateNetworkWirelessEthernetPortsProfileWithHttpInfo($network_id, $profile_id, $update_network_wireless_ethernet_ports_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkWirelessEthernetPortsProfileWithHttpInfo
     *
     * Update the AP port profile by ID for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkWirelessEthernetPortsProfileRequest|null $update_network_wireless_ethernet_ports_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkWirelessEthernetPortsProfileWithHttpInfo($network_id, $profile_id, $update_network_wireless_ethernet_ports_profile_request = null, string $contentType = self::contentTypes['updateNetworkWirelessEthernetPortsProfile'][0])
    {
        $request = $this->updateNetworkWirelessEthernetPortsProfileRequest($network_id, $profile_id, $update_network_wireless_ethernet_ports_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkWirelessEthernetPortsProfileAsync
     *
     * Update the AP port profile by ID for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkWirelessEthernetPortsProfileRequest|null $update_network_wireless_ethernet_ports_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkWirelessEthernetPortsProfileAsync($network_id, $profile_id, $update_network_wireless_ethernet_ports_profile_request = null, string $contentType = self::contentTypes['updateNetworkWirelessEthernetPortsProfile'][0])
    {
        return $this->updateNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo($network_id, $profile_id, $update_network_wireless_ethernet_ports_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo
     *
     * Update the AP port profile by ID for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkWirelessEthernetPortsProfileRequest|null $update_network_wireless_ethernet_ports_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo($network_id, $profile_id, $update_network_wireless_ethernet_ports_profile_request = null, string $contentType = self::contentTypes['updateNetworkWirelessEthernetPortsProfile'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner';
        $request = $this->updateNetworkWirelessEthernetPortsProfileRequest($network_id, $profile_id, $update_network_wireless_ethernet_ports_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkWirelessEthernetPortsProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkWirelessEthernetPortsProfileRequest|null $update_network_wireless_ethernet_ports_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkWirelessEthernetPortsProfileRequest($network_id, $profile_id, $update_network_wireless_ethernet_ports_profile_request = null, string $contentType = self::contentTypes['updateNetworkWirelessEthernetPortsProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkWirelessEthernetPortsProfile'
            );
        }

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling updateNetworkWirelessEthernetPortsProfile'
            );
        }



        $resourcePath = '/networks/{networkId}/wireless/ethernet/ports/profiles/{profileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_network_wireless_ethernet_ports_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_network_wireless_ethernet_ports_profile_request));
            } else {
                $httpBody = $update_network_wireless_ethernet_ports_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
