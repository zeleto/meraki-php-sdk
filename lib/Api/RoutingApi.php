<?php
/**
 * RoutingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Meraki\ApiException;
use Meraki\Configuration;
use Meraki\HeaderSelector;
use Meraki\ObjectSerializer;

/**
 * RoutingApi Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RoutingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createDeviceSwitchRoutingInterface' => [
            'application/json',
        ],
        'createDeviceSwitchRoutingStaticRoute' => [
            'application/json',
        ],
        'createNetworkSwitchRoutingMulticastRendezvousPoint' => [
            'application/json',
        ],
        'createNetworkSwitchStackRoutingInterface' => [
            'application/json',
        ],
        'createNetworkSwitchStackRoutingStaticRoute' => [
            'application/json',
        ],
        'deleteDeviceSwitchRoutingInterface' => [
            'application/json',
        ],
        'deleteDeviceSwitchRoutingStaticRoute' => [
            'application/json',
        ],
        'deleteNetworkSwitchRoutingMulticastRendezvousPoint' => [
            'application/json',
        ],
        'deleteNetworkSwitchStackRoutingInterface' => [
            'application/json',
        ],
        'deleteNetworkSwitchStackRoutingStaticRoute' => [
            'application/json',
        ],
        'getDeviceSwitchRoutingInterface' => [
            'application/json',
        ],
        'getDeviceSwitchRoutingInterfaceDhcp' => [
            'application/json',
        ],
        'getDeviceSwitchRoutingInterfaces' => [
            'application/json',
        ],
        'getDeviceSwitchRoutingStaticRoute' => [
            'application/json',
        ],
        'getDeviceSwitchRoutingStaticRoutes' => [
            'application/json',
        ],
        'getNetworkSwitchRoutingMulticast' => [
            'application/json',
        ],
        'getNetworkSwitchRoutingMulticastRendezvousPoint' => [
            'application/json',
        ],
        'getNetworkSwitchRoutingMulticastRendezvousPoints' => [
            'application/json',
        ],
        'getNetworkSwitchRoutingOspf' => [
            'application/json',
        ],
        'getNetworkSwitchStackRoutingInterface' => [
            'application/json',
        ],
        'getNetworkSwitchStackRoutingInterfaceDhcp' => [
            'application/json',
        ],
        'getNetworkSwitchStackRoutingInterfaces' => [
            'application/json',
        ],
        'getNetworkSwitchStackRoutingStaticRoute' => [
            'application/json',
        ],
        'getNetworkSwitchStackRoutingStaticRoutes' => [
            'application/json',
        ],
        'updateDeviceSwitchRoutingInterface' => [
            'application/json',
        ],
        'updateDeviceSwitchRoutingInterfaceDhcp' => [
            'application/json',
        ],
        'updateDeviceSwitchRoutingStaticRoute' => [
            'application/json',
        ],
        'updateNetworkSwitchRoutingMulticast' => [
            'application/json',
        ],
        'updateNetworkSwitchRoutingMulticastRendezvousPoint' => [
            'application/json',
        ],
        'updateNetworkSwitchRoutingOspf' => [
            'application/json',
        ],
        'updateNetworkSwitchStackRoutingInterface' => [
            'application/json',
        ],
        'updateNetworkSwitchStackRoutingInterfaceDhcp' => [
            'application/json',
        ],
        'updateNetworkSwitchStackRoutingStaticRoute' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createDeviceSwitchRoutingInterface
     *
     * Create a layer 3 interface for a switch
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequest $create_device_switch_routing_interface_request create_device_switch_routing_interface_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner
     */
    public function createDeviceSwitchRoutingInterface($serial, $create_device_switch_routing_interface_request, string $contentType = self::contentTypes['createDeviceSwitchRoutingInterface'][0])
    {
        list($response) = $this->createDeviceSwitchRoutingInterfaceWithHttpInfo($serial, $create_device_switch_routing_interface_request, $contentType);
        return $response;
    }

    /**
     * Operation createDeviceSwitchRoutingInterfaceWithHttpInfo
     *
     * Create a layer 3 interface for a switch
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequest $create_device_switch_routing_interface_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDeviceSwitchRoutingInterfaceWithHttpInfo($serial, $create_device_switch_routing_interface_request, string $contentType = self::contentTypes['createDeviceSwitchRoutingInterface'][0])
    {
        $request = $this->createDeviceSwitchRoutingInterfaceRequest($serial, $create_device_switch_routing_interface_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDeviceSwitchRoutingInterfaceAsync
     *
     * Create a layer 3 interface for a switch
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequest $create_device_switch_routing_interface_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceSwitchRoutingInterfaceAsync($serial, $create_device_switch_routing_interface_request, string $contentType = self::contentTypes['createDeviceSwitchRoutingInterface'][0])
    {
        return $this->createDeviceSwitchRoutingInterfaceAsyncWithHttpInfo($serial, $create_device_switch_routing_interface_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDeviceSwitchRoutingInterfaceAsyncWithHttpInfo
     *
     * Create a layer 3 interface for a switch
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequest $create_device_switch_routing_interface_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceSwitchRoutingInterfaceAsyncWithHttpInfo($serial, $create_device_switch_routing_interface_request, string $contentType = self::contentTypes['createDeviceSwitchRoutingInterface'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner';
        $request = $this->createDeviceSwitchRoutingInterfaceRequest($serial, $create_device_switch_routing_interface_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDeviceSwitchRoutingInterface'
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequest $create_device_switch_routing_interface_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDeviceSwitchRoutingInterfaceRequest($serial, $create_device_switch_routing_interface_request, string $contentType = self::contentTypes['createDeviceSwitchRoutingInterface'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling createDeviceSwitchRoutingInterface'
            );
        }

        // verify the required parameter 'create_device_switch_routing_interface_request' is set
        if ($create_device_switch_routing_interface_request === null || (is_array($create_device_switch_routing_interface_request) && count($create_device_switch_routing_interface_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_device_switch_routing_interface_request when calling createDeviceSwitchRoutingInterface'
            );
        }


        $resourcePath = '/devices/{serial}/switch/routing/interfaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_device_switch_routing_interface_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_device_switch_routing_interface_request));
            } else {
                $httpBody = $create_device_switch_routing_interface_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDeviceSwitchRoutingStaticRoute
     *
     * Create a layer 3 static route for a switch
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingStaticRouteRequest $create_device_switch_routing_static_route_request create_device_switch_routing_static_route_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner
     */
    public function createDeviceSwitchRoutingStaticRoute($serial, $create_device_switch_routing_static_route_request, string $contentType = self::contentTypes['createDeviceSwitchRoutingStaticRoute'][0])
    {
        list($response) = $this->createDeviceSwitchRoutingStaticRouteWithHttpInfo($serial, $create_device_switch_routing_static_route_request, $contentType);
        return $response;
    }

    /**
     * Operation createDeviceSwitchRoutingStaticRouteWithHttpInfo
     *
     * Create a layer 3 static route for a switch
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingStaticRouteRequest $create_device_switch_routing_static_route_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDeviceSwitchRoutingStaticRouteWithHttpInfo($serial, $create_device_switch_routing_static_route_request, string $contentType = self::contentTypes['createDeviceSwitchRoutingStaticRoute'][0])
    {
        $request = $this->createDeviceSwitchRoutingStaticRouteRequest($serial, $create_device_switch_routing_static_route_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDeviceSwitchRoutingStaticRouteAsync
     *
     * Create a layer 3 static route for a switch
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingStaticRouteRequest $create_device_switch_routing_static_route_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceSwitchRoutingStaticRouteAsync($serial, $create_device_switch_routing_static_route_request, string $contentType = self::contentTypes['createDeviceSwitchRoutingStaticRoute'][0])
    {
        return $this->createDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo($serial, $create_device_switch_routing_static_route_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo
     *
     * Create a layer 3 static route for a switch
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingStaticRouteRequest $create_device_switch_routing_static_route_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo($serial, $create_device_switch_routing_static_route_request, string $contentType = self::contentTypes['createDeviceSwitchRoutingStaticRoute'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner';
        $request = $this->createDeviceSwitchRoutingStaticRouteRequest($serial, $create_device_switch_routing_static_route_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDeviceSwitchRoutingStaticRoute'
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingStaticRouteRequest $create_device_switch_routing_static_route_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDeviceSwitchRoutingStaticRouteRequest($serial, $create_device_switch_routing_static_route_request, string $contentType = self::contentTypes['createDeviceSwitchRoutingStaticRoute'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling createDeviceSwitchRoutingStaticRoute'
            );
        }

        // verify the required parameter 'create_device_switch_routing_static_route_request' is set
        if ($create_device_switch_routing_static_route_request === null || (is_array($create_device_switch_routing_static_route_request) && count($create_device_switch_routing_static_route_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_device_switch_routing_static_route_request when calling createDeviceSwitchRoutingStaticRoute'
            );
        }


        $resourcePath = '/devices/{serial}/switch/routing/staticRoutes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_device_switch_routing_static_route_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_device_switch_routing_static_route_request));
            } else {
                $httpBody = $create_device_switch_routing_static_route_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNetworkSwitchRoutingMulticastRendezvousPoint
     *
     * Create a multicast rendezvous point
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchRoutingMulticastRendezvousPointRequest $create_network_switch_routing_multicast_rendezvous_point_request create_network_switch_routing_multicast_rendezvous_point_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner
     */
    public function createNetworkSwitchRoutingMulticastRendezvousPoint($network_id, $create_network_switch_routing_multicast_rendezvous_point_request, string $contentType = self::contentTypes['createNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {
        list($response) = $this->createNetworkSwitchRoutingMulticastRendezvousPointWithHttpInfo($network_id, $create_network_switch_routing_multicast_rendezvous_point_request, $contentType);
        return $response;
    }

    /**
     * Operation createNetworkSwitchRoutingMulticastRendezvousPointWithHttpInfo
     *
     * Create a multicast rendezvous point
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchRoutingMulticastRendezvousPointRequest $create_network_switch_routing_multicast_rendezvous_point_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNetworkSwitchRoutingMulticastRendezvousPointWithHttpInfo($network_id, $create_network_switch_routing_multicast_rendezvous_point_request, string $contentType = self::contentTypes['createNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {
        $request = $this->createNetworkSwitchRoutingMulticastRendezvousPointRequest($network_id, $create_network_switch_routing_multicast_rendezvous_point_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNetworkSwitchRoutingMulticastRendezvousPointAsync
     *
     * Create a multicast rendezvous point
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchRoutingMulticastRendezvousPointRequest $create_network_switch_routing_multicast_rendezvous_point_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkSwitchRoutingMulticastRendezvousPointAsync($network_id, $create_network_switch_routing_multicast_rendezvous_point_request, string $contentType = self::contentTypes['createNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {
        return $this->createNetworkSwitchRoutingMulticastRendezvousPointAsyncWithHttpInfo($network_id, $create_network_switch_routing_multicast_rendezvous_point_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNetworkSwitchRoutingMulticastRendezvousPointAsyncWithHttpInfo
     *
     * Create a multicast rendezvous point
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchRoutingMulticastRendezvousPointRequest $create_network_switch_routing_multicast_rendezvous_point_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkSwitchRoutingMulticastRendezvousPointAsyncWithHttpInfo($network_id, $create_network_switch_routing_multicast_rendezvous_point_request, string $contentType = self::contentTypes['createNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner';
        $request = $this->createNetworkSwitchRoutingMulticastRendezvousPointRequest($network_id, $create_network_switch_routing_multicast_rendezvous_point_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNetworkSwitchRoutingMulticastRendezvousPoint'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchRoutingMulticastRendezvousPointRequest $create_network_switch_routing_multicast_rendezvous_point_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNetworkSwitchRoutingMulticastRendezvousPointRequest($network_id, $create_network_switch_routing_multicast_rendezvous_point_request, string $contentType = self::contentTypes['createNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling createNetworkSwitchRoutingMulticastRendezvousPoint'
            );
        }

        // verify the required parameter 'create_network_switch_routing_multicast_rendezvous_point_request' is set
        if ($create_network_switch_routing_multicast_rendezvous_point_request === null || (is_array($create_network_switch_routing_multicast_rendezvous_point_request) && count($create_network_switch_routing_multicast_rendezvous_point_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_network_switch_routing_multicast_rendezvous_point_request when calling createNetworkSwitchRoutingMulticastRendezvousPoint'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/routing/multicast/rendezvousPoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_network_switch_routing_multicast_rendezvous_point_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_network_switch_routing_multicast_rendezvous_point_request));
            } else {
                $httpBody = $create_network_switch_routing_multicast_rendezvous_point_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNetworkSwitchStackRoutingInterface
     *
     * Create a layer 3 interface for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequest $create_device_switch_routing_interface_request create_device_switch_routing_interface_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner
     */
    public function createNetworkSwitchStackRoutingInterface($network_id, $switch_stack_id, $create_device_switch_routing_interface_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingInterface'][0])
    {
        list($response) = $this->createNetworkSwitchStackRoutingInterfaceWithHttpInfo($network_id, $switch_stack_id, $create_device_switch_routing_interface_request, $contentType);
        return $response;
    }

    /**
     * Operation createNetworkSwitchStackRoutingInterfaceWithHttpInfo
     *
     * Create a layer 3 interface for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequest $create_device_switch_routing_interface_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNetworkSwitchStackRoutingInterfaceWithHttpInfo($network_id, $switch_stack_id, $create_device_switch_routing_interface_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingInterface'][0])
    {
        $request = $this->createNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $create_device_switch_routing_interface_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNetworkSwitchStackRoutingInterfaceAsync
     *
     * Create a layer 3 interface for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequest $create_device_switch_routing_interface_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkSwitchStackRoutingInterfaceAsync($network_id, $switch_stack_id, $create_device_switch_routing_interface_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingInterface'][0])
    {
        return $this->createNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo($network_id, $switch_stack_id, $create_device_switch_routing_interface_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo
     *
     * Create a layer 3 interface for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequest $create_device_switch_routing_interface_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo($network_id, $switch_stack_id, $create_device_switch_routing_interface_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingInterface'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner';
        $request = $this->createNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $create_device_switch_routing_interface_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNetworkSwitchStackRoutingInterface'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequest $create_device_switch_routing_interface_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $create_device_switch_routing_interface_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingInterface'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling createNetworkSwitchStackRoutingInterface'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling createNetworkSwitchStackRoutingInterface'
            );
        }

        // verify the required parameter 'create_device_switch_routing_interface_request' is set
        if ($create_device_switch_routing_interface_request === null || (is_array($create_device_switch_routing_interface_request) && count($create_device_switch_routing_interface_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_device_switch_routing_interface_request when calling createNetworkSwitchStackRoutingInterface'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_device_switch_routing_interface_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_device_switch_routing_interface_request));
            } else {
                $httpBody = $create_device_switch_routing_interface_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNetworkSwitchStackRoutingStaticRoute
     *
     * Create a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingStaticRouteRequest $create_device_switch_routing_static_route_request create_device_switch_routing_static_route_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner
     */
    public function createNetworkSwitchStackRoutingStaticRoute($network_id, $switch_stack_id, $create_device_switch_routing_static_route_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'][0])
    {
        list($response) = $this->createNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $create_device_switch_routing_static_route_request, $contentType);
        return $response;
    }

    /**
     * Operation createNetworkSwitchStackRoutingStaticRouteWithHttpInfo
     *
     * Create a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingStaticRouteRequest $create_device_switch_routing_static_route_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $create_device_switch_routing_static_route_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'][0])
    {
        $request = $this->createNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $create_device_switch_routing_static_route_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNetworkSwitchStackRoutingStaticRouteAsync
     *
     * Create a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingStaticRouteRequest $create_device_switch_routing_static_route_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkSwitchStackRoutingStaticRouteAsync($network_id, $switch_stack_id, $create_device_switch_routing_static_route_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'][0])
    {
        return $this->createNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $create_device_switch_routing_static_route_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo
     *
     * Create a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingStaticRouteRequest $create_device_switch_routing_static_route_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $create_device_switch_routing_static_route_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner';
        $request = $this->createNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $create_device_switch_routing_static_route_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNetworkSwitchStackRoutingStaticRoute'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  \Meraki\Model\CreateDeviceSwitchRoutingStaticRouteRequest $create_device_switch_routing_static_route_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $create_device_switch_routing_static_route_request, string $contentType = self::contentTypes['createNetworkSwitchStackRoutingStaticRoute'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling createNetworkSwitchStackRoutingStaticRoute'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling createNetworkSwitchStackRoutingStaticRoute'
            );
        }

        // verify the required parameter 'create_device_switch_routing_static_route_request' is set
        if ($create_device_switch_routing_static_route_request === null || (is_array($create_device_switch_routing_static_route_request) && count($create_device_switch_routing_static_route_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_device_switch_routing_static_route_request when calling createNetworkSwitchStackRoutingStaticRoute'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_device_switch_routing_static_route_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_device_switch_routing_static_route_request));
            } else {
                $httpBody = $create_device_switch_routing_static_route_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDeviceSwitchRoutingInterface
     *
     * Delete a layer 3 interface from the switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDeviceSwitchRoutingInterface($serial, $interface_id, string $contentType = self::contentTypes['deleteDeviceSwitchRoutingInterface'][0])
    {
        $this->deleteDeviceSwitchRoutingInterfaceWithHttpInfo($serial, $interface_id, $contentType);
    }

    /**
     * Operation deleteDeviceSwitchRoutingInterfaceWithHttpInfo
     *
     * Delete a layer 3 interface from the switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDeviceSwitchRoutingInterfaceWithHttpInfo($serial, $interface_id, string $contentType = self::contentTypes['deleteDeviceSwitchRoutingInterface'][0])
    {
        $request = $this->deleteDeviceSwitchRoutingInterfaceRequest($serial, $interface_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDeviceSwitchRoutingInterfaceAsync
     *
     * Delete a layer 3 interface from the switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDeviceSwitchRoutingInterfaceAsync($serial, $interface_id, string $contentType = self::contentTypes['deleteDeviceSwitchRoutingInterface'][0])
    {
        return $this->deleteDeviceSwitchRoutingInterfaceAsyncWithHttpInfo($serial, $interface_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDeviceSwitchRoutingInterfaceAsyncWithHttpInfo
     *
     * Delete a layer 3 interface from the switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDeviceSwitchRoutingInterfaceAsyncWithHttpInfo($serial, $interface_id, string $contentType = self::contentTypes['deleteDeviceSwitchRoutingInterface'][0])
    {
        $returnType = '';
        $request = $this->deleteDeviceSwitchRoutingInterfaceRequest($serial, $interface_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDeviceSwitchRoutingInterface'
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDeviceSwitchRoutingInterfaceRequest($serial, $interface_id, string $contentType = self::contentTypes['deleteDeviceSwitchRoutingInterface'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling deleteDeviceSwitchRoutingInterface'
            );
        }

        // verify the required parameter 'interface_id' is set
        if ($interface_id === null || (is_array($interface_id) && count($interface_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interface_id when calling deleteDeviceSwitchRoutingInterface'
            );
        }


        $resourcePath = '/devices/{serial}/switch/routing/interfaces/{interfaceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }
        // path params
        if ($interface_id !== null) {
            $resourcePath = str_replace(
                '{' . 'interfaceId' . '}',
                ObjectSerializer::toPathValue($interface_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDeviceSwitchRoutingStaticRoute
     *
     * Delete a layer 3 static route for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDeviceSwitchRoutingStaticRoute($serial, $static_route_id, string $contentType = self::contentTypes['deleteDeviceSwitchRoutingStaticRoute'][0])
    {
        $this->deleteDeviceSwitchRoutingStaticRouteWithHttpInfo($serial, $static_route_id, $contentType);
    }

    /**
     * Operation deleteDeviceSwitchRoutingStaticRouteWithHttpInfo
     *
     * Delete a layer 3 static route for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDeviceSwitchRoutingStaticRouteWithHttpInfo($serial, $static_route_id, string $contentType = self::contentTypes['deleteDeviceSwitchRoutingStaticRoute'][0])
    {
        $request = $this->deleteDeviceSwitchRoutingStaticRouteRequest($serial, $static_route_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDeviceSwitchRoutingStaticRouteAsync
     *
     * Delete a layer 3 static route for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDeviceSwitchRoutingStaticRouteAsync($serial, $static_route_id, string $contentType = self::contentTypes['deleteDeviceSwitchRoutingStaticRoute'][0])
    {
        return $this->deleteDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo($serial, $static_route_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo
     *
     * Delete a layer 3 static route for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo($serial, $static_route_id, string $contentType = self::contentTypes['deleteDeviceSwitchRoutingStaticRoute'][0])
    {
        $returnType = '';
        $request = $this->deleteDeviceSwitchRoutingStaticRouteRequest($serial, $static_route_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDeviceSwitchRoutingStaticRoute'
     *
     * @param  string $serial Serial (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDeviceSwitchRoutingStaticRouteRequest($serial, $static_route_id, string $contentType = self::contentTypes['deleteDeviceSwitchRoutingStaticRoute'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling deleteDeviceSwitchRoutingStaticRoute'
            );
        }

        // verify the required parameter 'static_route_id' is set
        if ($static_route_id === null || (is_array($static_route_id) && count($static_route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $static_route_id when calling deleteDeviceSwitchRoutingStaticRoute'
            );
        }


        $resourcePath = '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }
        // path params
        if ($static_route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staticRouteId' . '}',
                ObjectSerializer::toPathValue($static_route_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNetworkSwitchRoutingMulticastRendezvousPoint
     *
     * Delete a multicast rendezvous point
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rendezvous_point_id Rendezvous point ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNetworkSwitchRoutingMulticastRendezvousPoint($network_id, $rendezvous_point_id, string $contentType = self::contentTypes['deleteNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {
        $this->deleteNetworkSwitchRoutingMulticastRendezvousPointWithHttpInfo($network_id, $rendezvous_point_id, $contentType);
    }

    /**
     * Operation deleteNetworkSwitchRoutingMulticastRendezvousPointWithHttpInfo
     *
     * Delete a multicast rendezvous point
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rendezvous_point_id Rendezvous point ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNetworkSwitchRoutingMulticastRendezvousPointWithHttpInfo($network_id, $rendezvous_point_id, string $contentType = self::contentTypes['deleteNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {
        $request = $this->deleteNetworkSwitchRoutingMulticastRendezvousPointRequest($network_id, $rendezvous_point_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNetworkSwitchRoutingMulticastRendezvousPointAsync
     *
     * Delete a multicast rendezvous point
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rendezvous_point_id Rendezvous point ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkSwitchRoutingMulticastRendezvousPointAsync($network_id, $rendezvous_point_id, string $contentType = self::contentTypes['deleteNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {
        return $this->deleteNetworkSwitchRoutingMulticastRendezvousPointAsyncWithHttpInfo($network_id, $rendezvous_point_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNetworkSwitchRoutingMulticastRendezvousPointAsyncWithHttpInfo
     *
     * Delete a multicast rendezvous point
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rendezvous_point_id Rendezvous point ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkSwitchRoutingMulticastRendezvousPointAsyncWithHttpInfo($network_id, $rendezvous_point_id, string $contentType = self::contentTypes['deleteNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {
        $returnType = '';
        $request = $this->deleteNetworkSwitchRoutingMulticastRendezvousPointRequest($network_id, $rendezvous_point_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNetworkSwitchRoutingMulticastRendezvousPoint'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rendezvous_point_id Rendezvous point ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNetworkSwitchRoutingMulticastRendezvousPointRequest($network_id, $rendezvous_point_id, string $contentType = self::contentTypes['deleteNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling deleteNetworkSwitchRoutingMulticastRendezvousPoint'
            );
        }

        // verify the required parameter 'rendezvous_point_id' is set
        if ($rendezvous_point_id === null || (is_array($rendezvous_point_id) && count($rendezvous_point_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rendezvous_point_id when calling deleteNetworkSwitchRoutingMulticastRendezvousPoint'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($rendezvous_point_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rendezvousPointId' . '}',
                ObjectSerializer::toPathValue($rendezvous_point_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingInterface
     *
     * Delete a layer 3 interface from a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNetworkSwitchStackRoutingInterface($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingInterface'][0])
    {
        $this->deleteNetworkSwitchStackRoutingInterfaceWithHttpInfo($network_id, $switch_stack_id, $interface_id, $contentType);
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingInterfaceWithHttpInfo
     *
     * Delete a layer 3 interface from a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNetworkSwitchStackRoutingInterfaceWithHttpInfo($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingInterface'][0])
    {
        $request = $this->deleteNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $interface_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingInterfaceAsync
     *
     * Delete a layer 3 interface from a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkSwitchStackRoutingInterfaceAsync($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingInterface'][0])
    {
        return $this->deleteNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo
     *
     * Delete a layer 3 interface from a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingInterface'][0])
    {
        $returnType = '';
        $request = $this->deleteNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $interface_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNetworkSwitchStackRoutingInterface'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingInterface'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling deleteNetworkSwitchStackRoutingInterface'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling deleteNetworkSwitchStackRoutingInterface'
            );
        }

        // verify the required parameter 'interface_id' is set
        if ($interface_id === null || (is_array($interface_id) && count($interface_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interface_id when calling deleteNetworkSwitchStackRoutingInterface'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }
        // path params
        if ($interface_id !== null) {
            $resourcePath = str_replace(
                '{' . 'interfaceId' . '}',
                ObjectSerializer::toPathValue($interface_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingStaticRoute
     *
     * Delete a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNetworkSwitchStackRoutingStaticRoute($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'][0])
    {
        $this->deleteNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $contentType);
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingStaticRouteWithHttpInfo
     *
     * Delete a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'][0])
    {
        $request = $this->deleteNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingStaticRouteAsync
     *
     * Delete a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkSwitchStackRoutingStaticRouteAsync($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'][0])
    {
        return $this->deleteNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo
     *
     * Delete a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'][0])
    {
        $returnType = '';
        $request = $this->deleteNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNetworkSwitchStackRoutingStaticRoute'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['deleteNetworkSwitchStackRoutingStaticRoute'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling deleteNetworkSwitchStackRoutingStaticRoute'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling deleteNetworkSwitchStackRoutingStaticRoute'
            );
        }

        // verify the required parameter 'static_route_id' is set
        if ($static_route_id === null || (is_array($static_route_id) && count($static_route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $static_route_id when calling deleteNetworkSwitchStackRoutingStaticRoute'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }
        // path params
        if ($static_route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staticRouteId' . '}',
                ObjectSerializer::toPathValue($static_route_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeviceSwitchRoutingInterface
     *
     * Return a layer 3 interface for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner
     */
    public function getDeviceSwitchRoutingInterface($serial, $interface_id, string $contentType = self::contentTypes['getDeviceSwitchRoutingInterface'][0])
    {
        list($response) = $this->getDeviceSwitchRoutingInterfaceWithHttpInfo($serial, $interface_id, $contentType);
        return $response;
    }

    /**
     * Operation getDeviceSwitchRoutingInterfaceWithHttpInfo
     *
     * Return a layer 3 interface for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeviceSwitchRoutingInterfaceWithHttpInfo($serial, $interface_id, string $contentType = self::contentTypes['getDeviceSwitchRoutingInterface'][0])
    {
        $request = $this->getDeviceSwitchRoutingInterfaceRequest($serial, $interface_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeviceSwitchRoutingInterfaceAsync
     *
     * Return a layer 3 interface for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceSwitchRoutingInterfaceAsync($serial, $interface_id, string $contentType = self::contentTypes['getDeviceSwitchRoutingInterface'][0])
    {
        return $this->getDeviceSwitchRoutingInterfaceAsyncWithHttpInfo($serial, $interface_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeviceSwitchRoutingInterfaceAsyncWithHttpInfo
     *
     * Return a layer 3 interface for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceSwitchRoutingInterfaceAsyncWithHttpInfo($serial, $interface_id, string $contentType = self::contentTypes['getDeviceSwitchRoutingInterface'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner';
        $request = $this->getDeviceSwitchRoutingInterfaceRequest($serial, $interface_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeviceSwitchRoutingInterface'
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeviceSwitchRoutingInterfaceRequest($serial, $interface_id, string $contentType = self::contentTypes['getDeviceSwitchRoutingInterface'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling getDeviceSwitchRoutingInterface'
            );
        }

        // verify the required parameter 'interface_id' is set
        if ($interface_id === null || (is_array($interface_id) && count($interface_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interface_id when calling getDeviceSwitchRoutingInterface'
            );
        }


        $resourcePath = '/devices/{serial}/switch/routing/interfaces/{interfaceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }
        // path params
        if ($interface_id !== null) {
            $resourcePath = str_replace(
                '{' . 'interfaceId' . '}',
                ObjectSerializer::toPathValue($interface_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeviceSwitchRoutingInterfaceDhcp
     *
     * Return a layer 3 interface DHCP configuration for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response
     */
    public function getDeviceSwitchRoutingInterfaceDhcp($serial, $interface_id, string $contentType = self::contentTypes['getDeviceSwitchRoutingInterfaceDhcp'][0])
    {
        list($response) = $this->getDeviceSwitchRoutingInterfaceDhcpWithHttpInfo($serial, $interface_id, $contentType);
        return $response;
    }

    /**
     * Operation getDeviceSwitchRoutingInterfaceDhcpWithHttpInfo
     *
     * Return a layer 3 interface DHCP configuration for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeviceSwitchRoutingInterfaceDhcpWithHttpInfo($serial, $interface_id, string $contentType = self::contentTypes['getDeviceSwitchRoutingInterfaceDhcp'][0])
    {
        $request = $this->getDeviceSwitchRoutingInterfaceDhcpRequest($serial, $interface_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeviceSwitchRoutingInterfaceDhcpAsync
     *
     * Return a layer 3 interface DHCP configuration for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceSwitchRoutingInterfaceDhcpAsync($serial, $interface_id, string $contentType = self::contentTypes['getDeviceSwitchRoutingInterfaceDhcp'][0])
    {
        return $this->getDeviceSwitchRoutingInterfaceDhcpAsyncWithHttpInfo($serial, $interface_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeviceSwitchRoutingInterfaceDhcpAsyncWithHttpInfo
     *
     * Return a layer 3 interface DHCP configuration for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceSwitchRoutingInterfaceDhcpAsyncWithHttpInfo($serial, $interface_id, string $contentType = self::contentTypes['getDeviceSwitchRoutingInterfaceDhcp'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response';
        $request = $this->getDeviceSwitchRoutingInterfaceDhcpRequest($serial, $interface_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeviceSwitchRoutingInterfaceDhcp'
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeviceSwitchRoutingInterfaceDhcpRequest($serial, $interface_id, string $contentType = self::contentTypes['getDeviceSwitchRoutingInterfaceDhcp'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling getDeviceSwitchRoutingInterfaceDhcp'
            );
        }

        // verify the required parameter 'interface_id' is set
        if ($interface_id === null || (is_array($interface_id) && count($interface_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interface_id when calling getDeviceSwitchRoutingInterfaceDhcp'
            );
        }


        $resourcePath = '/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }
        // path params
        if ($interface_id !== null) {
            $resourcePath = str_replace(
                '{' . 'interfaceId' . '}',
                ObjectSerializer::toPathValue($interface_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeviceSwitchRoutingInterfaces
     *
     * List layer 3 interfaces for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string|null $protocol Optional parameter to filter L3 interfaces by protocol. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingInterfaces'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]
     */
    public function getDeviceSwitchRoutingInterfaces($serial, $protocol = null, string $contentType = self::contentTypes['getDeviceSwitchRoutingInterfaces'][0])
    {
        list($response) = $this->getDeviceSwitchRoutingInterfacesWithHttpInfo($serial, $protocol, $contentType);
        return $response;
    }

    /**
     * Operation getDeviceSwitchRoutingInterfacesWithHttpInfo
     *
     * List layer 3 interfaces for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string|null $protocol Optional parameter to filter L3 interfaces by protocol. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingInterfaces'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeviceSwitchRoutingInterfacesWithHttpInfo($serial, $protocol = null, string $contentType = self::contentTypes['getDeviceSwitchRoutingInterfaces'][0])
    {
        $request = $this->getDeviceSwitchRoutingInterfacesRequest($serial, $protocol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeviceSwitchRoutingInterfacesAsync
     *
     * List layer 3 interfaces for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string|null $protocol Optional parameter to filter L3 interfaces by protocol. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingInterfaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceSwitchRoutingInterfacesAsync($serial, $protocol = null, string $contentType = self::contentTypes['getDeviceSwitchRoutingInterfaces'][0])
    {
        return $this->getDeviceSwitchRoutingInterfacesAsyncWithHttpInfo($serial, $protocol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeviceSwitchRoutingInterfacesAsyncWithHttpInfo
     *
     * List layer 3 interfaces for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string|null $protocol Optional parameter to filter L3 interfaces by protocol. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingInterfaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceSwitchRoutingInterfacesAsyncWithHttpInfo($serial, $protocol = null, string $contentType = self::contentTypes['getDeviceSwitchRoutingInterfaces'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]';
        $request = $this->getDeviceSwitchRoutingInterfacesRequest($serial, $protocol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeviceSwitchRoutingInterfaces'
     *
     * @param  string $serial Serial (required)
     * @param  string|null $protocol Optional parameter to filter L3 interfaces by protocol. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingInterfaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeviceSwitchRoutingInterfacesRequest($serial, $protocol = null, string $contentType = self::contentTypes['getDeviceSwitchRoutingInterfaces'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling getDeviceSwitchRoutingInterfaces'
            );
        }



        $resourcePath = '/devices/{serial}/switch/routing/interfaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $protocol,
            'protocol', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeviceSwitchRoutingStaticRoute
     *
     * Return a layer 3 static route for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner
     */
    public function getDeviceSwitchRoutingStaticRoute($serial, $static_route_id, string $contentType = self::contentTypes['getDeviceSwitchRoutingStaticRoute'][0])
    {
        list($response) = $this->getDeviceSwitchRoutingStaticRouteWithHttpInfo($serial, $static_route_id, $contentType);
        return $response;
    }

    /**
     * Operation getDeviceSwitchRoutingStaticRouteWithHttpInfo
     *
     * Return a layer 3 static route for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeviceSwitchRoutingStaticRouteWithHttpInfo($serial, $static_route_id, string $contentType = self::contentTypes['getDeviceSwitchRoutingStaticRoute'][0])
    {
        $request = $this->getDeviceSwitchRoutingStaticRouteRequest($serial, $static_route_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeviceSwitchRoutingStaticRouteAsync
     *
     * Return a layer 3 static route for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceSwitchRoutingStaticRouteAsync($serial, $static_route_id, string $contentType = self::contentTypes['getDeviceSwitchRoutingStaticRoute'][0])
    {
        return $this->getDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo($serial, $static_route_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo
     *
     * Return a layer 3 static route for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo($serial, $static_route_id, string $contentType = self::contentTypes['getDeviceSwitchRoutingStaticRoute'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner';
        $request = $this->getDeviceSwitchRoutingStaticRouteRequest($serial, $static_route_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeviceSwitchRoutingStaticRoute'
     *
     * @param  string $serial Serial (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeviceSwitchRoutingStaticRouteRequest($serial, $static_route_id, string $contentType = self::contentTypes['getDeviceSwitchRoutingStaticRoute'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling getDeviceSwitchRoutingStaticRoute'
            );
        }

        // verify the required parameter 'static_route_id' is set
        if ($static_route_id === null || (is_array($static_route_id) && count($static_route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $static_route_id when calling getDeviceSwitchRoutingStaticRoute'
            );
        }


        $resourcePath = '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }
        // path params
        if ($static_route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staticRouteId' . '}',
                ObjectSerializer::toPathValue($static_route_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeviceSwitchRoutingStaticRoutes
     *
     * List layer 3 static routes for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingStaticRoutes'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]
     */
    public function getDeviceSwitchRoutingStaticRoutes($serial, string $contentType = self::contentTypes['getDeviceSwitchRoutingStaticRoutes'][0])
    {
        list($response) = $this->getDeviceSwitchRoutingStaticRoutesWithHttpInfo($serial, $contentType);
        return $response;
    }

    /**
     * Operation getDeviceSwitchRoutingStaticRoutesWithHttpInfo
     *
     * List layer 3 static routes for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingStaticRoutes'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeviceSwitchRoutingStaticRoutesWithHttpInfo($serial, string $contentType = self::contentTypes['getDeviceSwitchRoutingStaticRoutes'][0])
    {
        $request = $this->getDeviceSwitchRoutingStaticRoutesRequest($serial, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeviceSwitchRoutingStaticRoutesAsync
     *
     * List layer 3 static routes for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingStaticRoutes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceSwitchRoutingStaticRoutesAsync($serial, string $contentType = self::contentTypes['getDeviceSwitchRoutingStaticRoutes'][0])
    {
        return $this->getDeviceSwitchRoutingStaticRoutesAsyncWithHttpInfo($serial, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeviceSwitchRoutingStaticRoutesAsyncWithHttpInfo
     *
     * List layer 3 static routes for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingStaticRoutes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceSwitchRoutingStaticRoutesAsyncWithHttpInfo($serial, string $contentType = self::contentTypes['getDeviceSwitchRoutingStaticRoutes'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]';
        $request = $this->getDeviceSwitchRoutingStaticRoutesRequest($serial, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeviceSwitchRoutingStaticRoutes'
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceSwitchRoutingStaticRoutes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeviceSwitchRoutingStaticRoutesRequest($serial, string $contentType = self::contentTypes['getDeviceSwitchRoutingStaticRoutes'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling getDeviceSwitchRoutingStaticRoutes'
            );
        }


        $resourcePath = '/devices/{serial}/switch/routing/staticRoutes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSwitchRoutingMulticast
     *
     * Return multicast settings for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingMulticast'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSwitchRoutingMulticast200Response
     */
    public function getNetworkSwitchRoutingMulticast($network_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingMulticast'][0])
    {
        list($response) = $this->getNetworkSwitchRoutingMulticastWithHttpInfo($network_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSwitchRoutingMulticastWithHttpInfo
     *
     * Return multicast settings for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingMulticast'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSwitchRoutingMulticast200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSwitchRoutingMulticastWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingMulticast'][0])
    {
        $request = $this->getNetworkSwitchRoutingMulticastRequest($network_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkSwitchRoutingMulticast200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSwitchRoutingMulticast200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSwitchRoutingMulticast200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSwitchRoutingMulticast200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSwitchRoutingMulticast200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSwitchRoutingMulticastAsync
     *
     * Return multicast settings for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingMulticast'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchRoutingMulticastAsync($network_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingMulticast'][0])
    {
        return $this->getNetworkSwitchRoutingMulticastAsyncWithHttpInfo($network_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSwitchRoutingMulticastAsyncWithHttpInfo
     *
     * Return multicast settings for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingMulticast'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchRoutingMulticastAsyncWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingMulticast'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSwitchRoutingMulticast200Response';
        $request = $this->getNetworkSwitchRoutingMulticastRequest($network_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSwitchRoutingMulticast'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingMulticast'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSwitchRoutingMulticastRequest($network_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingMulticast'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSwitchRoutingMulticast'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/routing/multicast';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSwitchRoutingMulticastRendezvousPoint
     *
     * Return a multicast rendezvous point
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rendezvous_point_id Rendezvous point ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner
     */
    public function getNetworkSwitchRoutingMulticastRendezvousPoint($network_id, $rendezvous_point_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {
        list($response) = $this->getNetworkSwitchRoutingMulticastRendezvousPointWithHttpInfo($network_id, $rendezvous_point_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSwitchRoutingMulticastRendezvousPointWithHttpInfo
     *
     * Return a multicast rendezvous point
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rendezvous_point_id Rendezvous point ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSwitchRoutingMulticastRendezvousPointWithHttpInfo($network_id, $rendezvous_point_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {
        $request = $this->getNetworkSwitchRoutingMulticastRendezvousPointRequest($network_id, $rendezvous_point_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSwitchRoutingMulticastRendezvousPointAsync
     *
     * Return a multicast rendezvous point
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rendezvous_point_id Rendezvous point ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchRoutingMulticastRendezvousPointAsync($network_id, $rendezvous_point_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {
        return $this->getNetworkSwitchRoutingMulticastRendezvousPointAsyncWithHttpInfo($network_id, $rendezvous_point_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSwitchRoutingMulticastRendezvousPointAsyncWithHttpInfo
     *
     * Return a multicast rendezvous point
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rendezvous_point_id Rendezvous point ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchRoutingMulticastRendezvousPointAsyncWithHttpInfo($network_id, $rendezvous_point_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner';
        $request = $this->getNetworkSwitchRoutingMulticastRendezvousPointRequest($network_id, $rendezvous_point_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSwitchRoutingMulticastRendezvousPoint'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rendezvous_point_id Rendezvous point ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSwitchRoutingMulticastRendezvousPointRequest($network_id, $rendezvous_point_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSwitchRoutingMulticastRendezvousPoint'
            );
        }

        // verify the required parameter 'rendezvous_point_id' is set
        if ($rendezvous_point_id === null || (is_array($rendezvous_point_id) && count($rendezvous_point_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rendezvous_point_id when calling getNetworkSwitchRoutingMulticastRendezvousPoint'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($rendezvous_point_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rendezvousPointId' . '}',
                ObjectSerializer::toPathValue($rendezvous_point_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSwitchRoutingMulticastRendezvousPoints
     *
     * List multicast rendezvous points
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoints'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner[]
     */
    public function getNetworkSwitchRoutingMulticastRendezvousPoints($network_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoints'][0])
    {
        list($response) = $this->getNetworkSwitchRoutingMulticastRendezvousPointsWithHttpInfo($network_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSwitchRoutingMulticastRendezvousPointsWithHttpInfo
     *
     * List multicast rendezvous points
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoints'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSwitchRoutingMulticastRendezvousPointsWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoints'][0])
    {
        $request = $this->getNetworkSwitchRoutingMulticastRendezvousPointsRequest($network_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSwitchRoutingMulticastRendezvousPointsAsync
     *
     * List multicast rendezvous points
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoints'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchRoutingMulticastRendezvousPointsAsync($network_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoints'][0])
    {
        return $this->getNetworkSwitchRoutingMulticastRendezvousPointsAsyncWithHttpInfo($network_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSwitchRoutingMulticastRendezvousPointsAsyncWithHttpInfo
     *
     * List multicast rendezvous points
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoints'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchRoutingMulticastRendezvousPointsAsyncWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoints'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner[]';
        $request = $this->getNetworkSwitchRoutingMulticastRendezvousPointsRequest($network_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSwitchRoutingMulticastRendezvousPoints'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoints'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSwitchRoutingMulticastRendezvousPointsRequest($network_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingMulticastRendezvousPoints'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSwitchRoutingMulticastRendezvousPoints'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/routing/multicast/rendezvousPoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSwitchRoutingOspf
     *
     * Return layer 3 OSPF routing configuration
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingOspf'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSwitchRoutingOspf200Response
     */
    public function getNetworkSwitchRoutingOspf($network_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingOspf'][0])
    {
        list($response) = $this->getNetworkSwitchRoutingOspfWithHttpInfo($network_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSwitchRoutingOspfWithHttpInfo
     *
     * Return layer 3 OSPF routing configuration
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingOspf'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSwitchRoutingOspf200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSwitchRoutingOspfWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingOspf'][0])
    {
        $request = $this->getNetworkSwitchRoutingOspfRequest($network_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkSwitchRoutingOspf200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSwitchRoutingOspf200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSwitchRoutingOspf200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSwitchRoutingOspf200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSwitchRoutingOspf200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSwitchRoutingOspfAsync
     *
     * Return layer 3 OSPF routing configuration
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingOspf'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchRoutingOspfAsync($network_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingOspf'][0])
    {
        return $this->getNetworkSwitchRoutingOspfAsyncWithHttpInfo($network_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSwitchRoutingOspfAsyncWithHttpInfo
     *
     * Return layer 3 OSPF routing configuration
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingOspf'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchRoutingOspfAsyncWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingOspf'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSwitchRoutingOspf200Response';
        $request = $this->getNetworkSwitchRoutingOspfRequest($network_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSwitchRoutingOspf'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchRoutingOspf'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSwitchRoutingOspfRequest($network_id, string $contentType = self::contentTypes['getNetworkSwitchRoutingOspf'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSwitchRoutingOspf'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/routing/ospf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterface
     *
     * Return a layer 3 interface from a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner
     */
    public function getNetworkSwitchStackRoutingInterface($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterface'][0])
    {
        list($response) = $this->getNetworkSwitchStackRoutingInterfaceWithHttpInfo($network_id, $switch_stack_id, $interface_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfaceWithHttpInfo
     *
     * Return a layer 3 interface from a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSwitchStackRoutingInterfaceWithHttpInfo($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterface'][0])
    {
        $request = $this->getNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $interface_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfaceAsync
     *
     * Return a layer 3 interface from a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingInterfaceAsync($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterface'][0])
    {
        return $this->getNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo
     *
     * Return a layer 3 interface from a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterface'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner';
        $request = $this->getNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $interface_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSwitchStackRoutingInterface'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterface'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSwitchStackRoutingInterface'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling getNetworkSwitchStackRoutingInterface'
            );
        }

        // verify the required parameter 'interface_id' is set
        if ($interface_id === null || (is_array($interface_id) && count($interface_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interface_id when calling getNetworkSwitchStackRoutingInterface'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }
        // path params
        if ($interface_id !== null) {
            $resourcePath = str_replace(
                '{' . 'interfaceId' . '}',
                ObjectSerializer::toPathValue($interface_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfaceDhcp
     *
     * Return a layer 3 interface DHCP configuration for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response
     */
    public function getNetworkSwitchStackRoutingInterfaceDhcp($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {
        list($response) = $this->getNetworkSwitchStackRoutingInterfaceDhcpWithHttpInfo($network_id, $switch_stack_id, $interface_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfaceDhcpWithHttpInfo
     *
     * Return a layer 3 interface DHCP configuration for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSwitchStackRoutingInterfaceDhcpWithHttpInfo($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {
        $request = $this->getNetworkSwitchStackRoutingInterfaceDhcpRequest($network_id, $switch_stack_id, $interface_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfaceDhcpAsync
     *
     * Return a layer 3 interface DHCP configuration for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingInterfaceDhcpAsync($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {
        return $this->getNetworkSwitchStackRoutingInterfaceDhcpAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfaceDhcpAsyncWithHttpInfo
     *
     * Return a layer 3 interface DHCP configuration for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingInterfaceDhcpAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response';
        $request = $this->getNetworkSwitchStackRoutingInterfaceDhcpRequest($network_id, $switch_stack_id, $interface_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSwitchStackRoutingInterfaceDhcp'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSwitchStackRoutingInterfaceDhcpRequest($network_id, $switch_stack_id, $interface_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSwitchStackRoutingInterfaceDhcp'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling getNetworkSwitchStackRoutingInterfaceDhcp'
            );
        }

        // verify the required parameter 'interface_id' is set
        if ($interface_id === null || (is_array($interface_id) && count($interface_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interface_id when calling getNetworkSwitchStackRoutingInterfaceDhcp'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }
        // path params
        if ($interface_id !== null) {
            $resourcePath = str_replace(
                '{' . 'interfaceId' . '}',
                ObjectSerializer::toPathValue($interface_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfaces
     *
     * List layer 3 interfaces for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string|null $protocol Optional parameter to filter L3 interfaces by protocol. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaces'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]
     */
    public function getNetworkSwitchStackRoutingInterfaces($network_id, $switch_stack_id, $protocol = null, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaces'][0])
    {
        list($response) = $this->getNetworkSwitchStackRoutingInterfacesWithHttpInfo($network_id, $switch_stack_id, $protocol, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfacesWithHttpInfo
     *
     * List layer 3 interfaces for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string|null $protocol Optional parameter to filter L3 interfaces by protocol. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaces'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSwitchStackRoutingInterfacesWithHttpInfo($network_id, $switch_stack_id, $protocol = null, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaces'][0])
    {
        $request = $this->getNetworkSwitchStackRoutingInterfacesRequest($network_id, $switch_stack_id, $protocol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfacesAsync
     *
     * List layer 3 interfaces for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string|null $protocol Optional parameter to filter L3 interfaces by protocol. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingInterfacesAsync($network_id, $switch_stack_id, $protocol = null, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaces'][0])
    {
        return $this->getNetworkSwitchStackRoutingInterfacesAsyncWithHttpInfo($network_id, $switch_stack_id, $protocol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSwitchStackRoutingInterfacesAsyncWithHttpInfo
     *
     * List layer 3 interfaces for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string|null $protocol Optional parameter to filter L3 interfaces by protocol. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingInterfacesAsyncWithHttpInfo($network_id, $switch_stack_id, $protocol = null, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaces'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner[]';
        $request = $this->getNetworkSwitchStackRoutingInterfacesRequest($network_id, $switch_stack_id, $protocol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSwitchStackRoutingInterfaces'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string|null $protocol Optional parameter to filter L3 interfaces by protocol. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingInterfaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSwitchStackRoutingInterfacesRequest($network_id, $switch_stack_id, $protocol = null, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingInterfaces'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSwitchStackRoutingInterfaces'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling getNetworkSwitchStackRoutingInterfaces'
            );
        }



        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $protocol,
            'protocol', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRoute
     *
     * Return a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner
     */
    public function getNetworkSwitchStackRoutingStaticRoute($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'][0])
    {
        list($response) = $this->getNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRouteWithHttpInfo
     *
     * Return a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'][0])
    {
        $request = $this->getNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRouteAsync
     *
     * Return a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingStaticRouteAsync($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'][0])
    {
        return $this->getNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo
     *
     * Return a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner';
        $request = $this->getNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSwitchStackRoutingStaticRoute'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoute'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSwitchStackRoutingStaticRoute'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling getNetworkSwitchStackRoutingStaticRoute'
            );
        }

        // verify the required parameter 'static_route_id' is set
        if ($static_route_id === null || (is_array($static_route_id) && count($static_route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $static_route_id when calling getNetworkSwitchStackRoutingStaticRoute'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }
        // path params
        if ($static_route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staticRouteId' . '}',
                ObjectSerializer::toPathValue($static_route_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRoutes
     *
     * List layer 3 static routes for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]
     */
    public function getNetworkSwitchStackRoutingStaticRoutes($network_id, $switch_stack_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'][0])
    {
        list($response) = $this->getNetworkSwitchStackRoutingStaticRoutesWithHttpInfo($network_id, $switch_stack_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRoutesWithHttpInfo
     *
     * List layer 3 static routes for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSwitchStackRoutingStaticRoutesWithHttpInfo($network_id, $switch_stack_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'][0])
    {
        $request = $this->getNetworkSwitchStackRoutingStaticRoutesRequest($network_id, $switch_stack_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRoutesAsync
     *
     * List layer 3 static routes for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingStaticRoutesAsync($network_id, $switch_stack_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'][0])
    {
        return $this->getNetworkSwitchStackRoutingStaticRoutesAsyncWithHttpInfo($network_id, $switch_stack_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSwitchStackRoutingStaticRoutesAsyncWithHttpInfo
     *
     * List layer 3 static routes for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchStackRoutingStaticRoutesAsyncWithHttpInfo($network_id, $switch_stack_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner[]';
        $request = $this->getNetworkSwitchStackRoutingStaticRoutesRequest($network_id, $switch_stack_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSwitchStackRoutingStaticRoutes'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSwitchStackRoutingStaticRoutesRequest($network_id, $switch_stack_id, string $contentType = self::contentTypes['getNetworkSwitchStackRoutingStaticRoutes'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSwitchStackRoutingStaticRoutes'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling getNetworkSwitchStackRoutingStaticRoutes'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDeviceSwitchRoutingInterface
     *
     * Update a layer 3 interface for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceRequest|null $update_device_switch_routing_interface_request update_device_switch_routing_interface_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner
     */
    public function updateDeviceSwitchRoutingInterface($serial, $interface_id, $update_device_switch_routing_interface_request = null, string $contentType = self::contentTypes['updateDeviceSwitchRoutingInterface'][0])
    {
        list($response) = $this->updateDeviceSwitchRoutingInterfaceWithHttpInfo($serial, $interface_id, $update_device_switch_routing_interface_request, $contentType);
        return $response;
    }

    /**
     * Operation updateDeviceSwitchRoutingInterfaceWithHttpInfo
     *
     * Update a layer 3 interface for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceRequest|null $update_device_switch_routing_interface_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDeviceSwitchRoutingInterfaceWithHttpInfo($serial, $interface_id, $update_device_switch_routing_interface_request = null, string $contentType = self::contentTypes['updateDeviceSwitchRoutingInterface'][0])
    {
        $request = $this->updateDeviceSwitchRoutingInterfaceRequest($serial, $interface_id, $update_device_switch_routing_interface_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDeviceSwitchRoutingInterfaceAsync
     *
     * Update a layer 3 interface for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceRequest|null $update_device_switch_routing_interface_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeviceSwitchRoutingInterfaceAsync($serial, $interface_id, $update_device_switch_routing_interface_request = null, string $contentType = self::contentTypes['updateDeviceSwitchRoutingInterface'][0])
    {
        return $this->updateDeviceSwitchRoutingInterfaceAsyncWithHttpInfo($serial, $interface_id, $update_device_switch_routing_interface_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDeviceSwitchRoutingInterfaceAsyncWithHttpInfo
     *
     * Update a layer 3 interface for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceRequest|null $update_device_switch_routing_interface_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeviceSwitchRoutingInterfaceAsyncWithHttpInfo($serial, $interface_id, $update_device_switch_routing_interface_request = null, string $contentType = self::contentTypes['updateDeviceSwitchRoutingInterface'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaces200ResponseInner';
        $request = $this->updateDeviceSwitchRoutingInterfaceRequest($serial, $interface_id, $update_device_switch_routing_interface_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDeviceSwitchRoutingInterface'
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceRequest|null $update_device_switch_routing_interface_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceSwitchRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDeviceSwitchRoutingInterfaceRequest($serial, $interface_id, $update_device_switch_routing_interface_request = null, string $contentType = self::contentTypes['updateDeviceSwitchRoutingInterface'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling updateDeviceSwitchRoutingInterface'
            );
        }

        // verify the required parameter 'interface_id' is set
        if ($interface_id === null || (is_array($interface_id) && count($interface_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interface_id when calling updateDeviceSwitchRoutingInterface'
            );
        }



        $resourcePath = '/devices/{serial}/switch/routing/interfaces/{interfaceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }
        // path params
        if ($interface_id !== null) {
            $resourcePath = str_replace(
                '{' . 'interfaceId' . '}',
                ObjectSerializer::toPathValue($interface_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_device_switch_routing_interface_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_device_switch_routing_interface_request));
            } else {
                $httpBody = $update_device_switch_routing_interface_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDeviceSwitchRoutingInterfaceDhcp
     *
     * Update a layer 3 interface DHCP configuration for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceDhcpRequest|null $update_device_switch_routing_interface_dhcp_request update_device_switch_routing_interface_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceSwitchRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response
     */
    public function updateDeviceSwitchRoutingInterfaceDhcp($serial, $interface_id, $update_device_switch_routing_interface_dhcp_request = null, string $contentType = self::contentTypes['updateDeviceSwitchRoutingInterfaceDhcp'][0])
    {
        list($response) = $this->updateDeviceSwitchRoutingInterfaceDhcpWithHttpInfo($serial, $interface_id, $update_device_switch_routing_interface_dhcp_request, $contentType);
        return $response;
    }

    /**
     * Operation updateDeviceSwitchRoutingInterfaceDhcpWithHttpInfo
     *
     * Update a layer 3 interface DHCP configuration for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceDhcpRequest|null $update_device_switch_routing_interface_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceSwitchRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDeviceSwitchRoutingInterfaceDhcpWithHttpInfo($serial, $interface_id, $update_device_switch_routing_interface_dhcp_request = null, string $contentType = self::contentTypes['updateDeviceSwitchRoutingInterfaceDhcp'][0])
    {
        $request = $this->updateDeviceSwitchRoutingInterfaceDhcpRequest($serial, $interface_id, $update_device_switch_routing_interface_dhcp_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDeviceSwitchRoutingInterfaceDhcpAsync
     *
     * Update a layer 3 interface DHCP configuration for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceDhcpRequest|null $update_device_switch_routing_interface_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceSwitchRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeviceSwitchRoutingInterfaceDhcpAsync($serial, $interface_id, $update_device_switch_routing_interface_dhcp_request = null, string $contentType = self::contentTypes['updateDeviceSwitchRoutingInterfaceDhcp'][0])
    {
        return $this->updateDeviceSwitchRoutingInterfaceDhcpAsyncWithHttpInfo($serial, $interface_id, $update_device_switch_routing_interface_dhcp_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDeviceSwitchRoutingInterfaceDhcpAsyncWithHttpInfo
     *
     * Update a layer 3 interface DHCP configuration for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceDhcpRequest|null $update_device_switch_routing_interface_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceSwitchRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeviceSwitchRoutingInterfaceDhcpAsyncWithHttpInfo($serial, $interface_id, $update_device_switch_routing_interface_dhcp_request = null, string $contentType = self::contentTypes['updateDeviceSwitchRoutingInterfaceDhcp'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response';
        $request = $this->updateDeviceSwitchRoutingInterfaceDhcpRequest($serial, $interface_id, $update_device_switch_routing_interface_dhcp_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDeviceSwitchRoutingInterfaceDhcp'
     *
     * @param  string $serial Serial (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceDhcpRequest|null $update_device_switch_routing_interface_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceSwitchRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDeviceSwitchRoutingInterfaceDhcpRequest($serial, $interface_id, $update_device_switch_routing_interface_dhcp_request = null, string $contentType = self::contentTypes['updateDeviceSwitchRoutingInterfaceDhcp'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling updateDeviceSwitchRoutingInterfaceDhcp'
            );
        }

        // verify the required parameter 'interface_id' is set
        if ($interface_id === null || (is_array($interface_id) && count($interface_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interface_id when calling updateDeviceSwitchRoutingInterfaceDhcp'
            );
        }



        $resourcePath = '/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }
        // path params
        if ($interface_id !== null) {
            $resourcePath = str_replace(
                '{' . 'interfaceId' . '}',
                ObjectSerializer::toPathValue($interface_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_device_switch_routing_interface_dhcp_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_device_switch_routing_interface_dhcp_request));
            } else {
                $httpBody = $update_device_switch_routing_interface_dhcp_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDeviceSwitchRoutingStaticRoute
     *
     * Update a layer 3 static route for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingStaticRouteRequest|null $update_device_switch_routing_static_route_request update_device_switch_routing_static_route_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner
     */
    public function updateDeviceSwitchRoutingStaticRoute($serial, $static_route_id, $update_device_switch_routing_static_route_request = null, string $contentType = self::contentTypes['updateDeviceSwitchRoutingStaticRoute'][0])
    {
        list($response) = $this->updateDeviceSwitchRoutingStaticRouteWithHttpInfo($serial, $static_route_id, $update_device_switch_routing_static_route_request, $contentType);
        return $response;
    }

    /**
     * Operation updateDeviceSwitchRoutingStaticRouteWithHttpInfo
     *
     * Update a layer 3 static route for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingStaticRouteRequest|null $update_device_switch_routing_static_route_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDeviceSwitchRoutingStaticRouteWithHttpInfo($serial, $static_route_id, $update_device_switch_routing_static_route_request = null, string $contentType = self::contentTypes['updateDeviceSwitchRoutingStaticRoute'][0])
    {
        $request = $this->updateDeviceSwitchRoutingStaticRouteRequest($serial, $static_route_id, $update_device_switch_routing_static_route_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDeviceSwitchRoutingStaticRouteAsync
     *
     * Update a layer 3 static route for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingStaticRouteRequest|null $update_device_switch_routing_static_route_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeviceSwitchRoutingStaticRouteAsync($serial, $static_route_id, $update_device_switch_routing_static_route_request = null, string $contentType = self::contentTypes['updateDeviceSwitchRoutingStaticRoute'][0])
    {
        return $this->updateDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo($serial, $static_route_id, $update_device_switch_routing_static_route_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo
     *
     * Update a layer 3 static route for a switch
     *
     * @param  string $serial Serial (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingStaticRouteRequest|null $update_device_switch_routing_static_route_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeviceSwitchRoutingStaticRouteAsyncWithHttpInfo($serial, $static_route_id, $update_device_switch_routing_static_route_request = null, string $contentType = self::contentTypes['updateDeviceSwitchRoutingStaticRoute'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner';
        $request = $this->updateDeviceSwitchRoutingStaticRouteRequest($serial, $static_route_id, $update_device_switch_routing_static_route_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDeviceSwitchRoutingStaticRoute'
     *
     * @param  string $serial Serial (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingStaticRouteRequest|null $update_device_switch_routing_static_route_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceSwitchRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDeviceSwitchRoutingStaticRouteRequest($serial, $static_route_id, $update_device_switch_routing_static_route_request = null, string $contentType = self::contentTypes['updateDeviceSwitchRoutingStaticRoute'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling updateDeviceSwitchRoutingStaticRoute'
            );
        }

        // verify the required parameter 'static_route_id' is set
        if ($static_route_id === null || (is_array($static_route_id) && count($static_route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $static_route_id when calling updateDeviceSwitchRoutingStaticRoute'
            );
        }



        $resourcePath = '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }
        // path params
        if ($static_route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staticRouteId' . '}',
                ObjectSerializer::toPathValue($static_route_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_device_switch_routing_static_route_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_device_switch_routing_static_route_request));
            } else {
                $httpBody = $update_device_switch_routing_static_route_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkSwitchRoutingMulticast
     *
     * Update multicast settings for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchRoutingMulticastRequest|null $update_network_switch_routing_multicast_request update_network_switch_routing_multicast_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchRoutingMulticast'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSwitchRoutingMulticast200Response
     */
    public function updateNetworkSwitchRoutingMulticast($network_id, $update_network_switch_routing_multicast_request = null, string $contentType = self::contentTypes['updateNetworkSwitchRoutingMulticast'][0])
    {
        list($response) = $this->updateNetworkSwitchRoutingMulticastWithHttpInfo($network_id, $update_network_switch_routing_multicast_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkSwitchRoutingMulticastWithHttpInfo
     *
     * Update multicast settings for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchRoutingMulticastRequest|null $update_network_switch_routing_multicast_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchRoutingMulticast'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSwitchRoutingMulticast200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkSwitchRoutingMulticastWithHttpInfo($network_id, $update_network_switch_routing_multicast_request = null, string $contentType = self::contentTypes['updateNetworkSwitchRoutingMulticast'][0])
    {
        $request = $this->updateNetworkSwitchRoutingMulticastRequest($network_id, $update_network_switch_routing_multicast_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkSwitchRoutingMulticast200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSwitchRoutingMulticast200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSwitchRoutingMulticast200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSwitchRoutingMulticast200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSwitchRoutingMulticast200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkSwitchRoutingMulticastAsync
     *
     * Update multicast settings for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchRoutingMulticastRequest|null $update_network_switch_routing_multicast_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchRoutingMulticast'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchRoutingMulticastAsync($network_id, $update_network_switch_routing_multicast_request = null, string $contentType = self::contentTypes['updateNetworkSwitchRoutingMulticast'][0])
    {
        return $this->updateNetworkSwitchRoutingMulticastAsyncWithHttpInfo($network_id, $update_network_switch_routing_multicast_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkSwitchRoutingMulticastAsyncWithHttpInfo
     *
     * Update multicast settings for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchRoutingMulticastRequest|null $update_network_switch_routing_multicast_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchRoutingMulticast'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchRoutingMulticastAsyncWithHttpInfo($network_id, $update_network_switch_routing_multicast_request = null, string $contentType = self::contentTypes['updateNetworkSwitchRoutingMulticast'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSwitchRoutingMulticast200Response';
        $request = $this->updateNetworkSwitchRoutingMulticastRequest($network_id, $update_network_switch_routing_multicast_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkSwitchRoutingMulticast'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchRoutingMulticastRequest|null $update_network_switch_routing_multicast_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchRoutingMulticast'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkSwitchRoutingMulticastRequest($network_id, $update_network_switch_routing_multicast_request = null, string $contentType = self::contentTypes['updateNetworkSwitchRoutingMulticast'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkSwitchRoutingMulticast'
            );
        }



        $resourcePath = '/networks/{networkId}/switch/routing/multicast';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_network_switch_routing_multicast_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_network_switch_routing_multicast_request));
            } else {
                $httpBody = $update_network_switch_routing_multicast_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkSwitchRoutingMulticastRendezvousPoint
     *
     * Update a multicast rendezvous point
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rendezvous_point_id Rendezvous point ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchRoutingMulticastRendezvousPointRequest $create_network_switch_routing_multicast_rendezvous_point_request create_network_switch_routing_multicast_rendezvous_point_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner
     */
    public function updateNetworkSwitchRoutingMulticastRendezvousPoint($network_id, $rendezvous_point_id, $create_network_switch_routing_multicast_rendezvous_point_request, string $contentType = self::contentTypes['updateNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {
        list($response) = $this->updateNetworkSwitchRoutingMulticastRendezvousPointWithHttpInfo($network_id, $rendezvous_point_id, $create_network_switch_routing_multicast_rendezvous_point_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkSwitchRoutingMulticastRendezvousPointWithHttpInfo
     *
     * Update a multicast rendezvous point
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rendezvous_point_id Rendezvous point ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchRoutingMulticastRendezvousPointRequest $create_network_switch_routing_multicast_rendezvous_point_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkSwitchRoutingMulticastRendezvousPointWithHttpInfo($network_id, $rendezvous_point_id, $create_network_switch_routing_multicast_rendezvous_point_request, string $contentType = self::contentTypes['updateNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {
        $request = $this->updateNetworkSwitchRoutingMulticastRendezvousPointRequest($network_id, $rendezvous_point_id, $create_network_switch_routing_multicast_rendezvous_point_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkSwitchRoutingMulticastRendezvousPointAsync
     *
     * Update a multicast rendezvous point
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rendezvous_point_id Rendezvous point ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchRoutingMulticastRendezvousPointRequest $create_network_switch_routing_multicast_rendezvous_point_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchRoutingMulticastRendezvousPointAsync($network_id, $rendezvous_point_id, $create_network_switch_routing_multicast_rendezvous_point_request, string $contentType = self::contentTypes['updateNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {
        return $this->updateNetworkSwitchRoutingMulticastRendezvousPointAsyncWithHttpInfo($network_id, $rendezvous_point_id, $create_network_switch_routing_multicast_rendezvous_point_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkSwitchRoutingMulticastRendezvousPointAsyncWithHttpInfo
     *
     * Update a multicast rendezvous point
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rendezvous_point_id Rendezvous point ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchRoutingMulticastRendezvousPointRequest $create_network_switch_routing_multicast_rendezvous_point_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchRoutingMulticastRendezvousPointAsyncWithHttpInfo($network_id, $rendezvous_point_id, $create_network_switch_routing_multicast_rendezvous_point_request, string $contentType = self::contentTypes['updateNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSwitchRoutingMulticastRendezvousPoints200ResponseInner';
        $request = $this->updateNetworkSwitchRoutingMulticastRendezvousPointRequest($network_id, $rendezvous_point_id, $create_network_switch_routing_multicast_rendezvous_point_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkSwitchRoutingMulticastRendezvousPoint'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rendezvous_point_id Rendezvous point ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchRoutingMulticastRendezvousPointRequest $create_network_switch_routing_multicast_rendezvous_point_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchRoutingMulticastRendezvousPoint'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkSwitchRoutingMulticastRendezvousPointRequest($network_id, $rendezvous_point_id, $create_network_switch_routing_multicast_rendezvous_point_request, string $contentType = self::contentTypes['updateNetworkSwitchRoutingMulticastRendezvousPoint'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkSwitchRoutingMulticastRendezvousPoint'
            );
        }

        // verify the required parameter 'rendezvous_point_id' is set
        if ($rendezvous_point_id === null || (is_array($rendezvous_point_id) && count($rendezvous_point_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rendezvous_point_id when calling updateNetworkSwitchRoutingMulticastRendezvousPoint'
            );
        }

        // verify the required parameter 'create_network_switch_routing_multicast_rendezvous_point_request' is set
        if ($create_network_switch_routing_multicast_rendezvous_point_request === null || (is_array($create_network_switch_routing_multicast_rendezvous_point_request) && count($create_network_switch_routing_multicast_rendezvous_point_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_network_switch_routing_multicast_rendezvous_point_request when calling updateNetworkSwitchRoutingMulticastRendezvousPoint'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($rendezvous_point_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rendezvousPointId' . '}',
                ObjectSerializer::toPathValue($rendezvous_point_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_network_switch_routing_multicast_rendezvous_point_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_network_switch_routing_multicast_rendezvous_point_request));
            } else {
                $httpBody = $create_network_switch_routing_multicast_rendezvous_point_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkSwitchRoutingOspf
     *
     * Update layer 3 OSPF routing configuration
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchRoutingOspfRequest|null $update_network_switch_routing_ospf_request update_network_switch_routing_ospf_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchRoutingOspf'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSwitchRoutingOspf200Response
     */
    public function updateNetworkSwitchRoutingOspf($network_id, $update_network_switch_routing_ospf_request = null, string $contentType = self::contentTypes['updateNetworkSwitchRoutingOspf'][0])
    {
        list($response) = $this->updateNetworkSwitchRoutingOspfWithHttpInfo($network_id, $update_network_switch_routing_ospf_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkSwitchRoutingOspfWithHttpInfo
     *
     * Update layer 3 OSPF routing configuration
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchRoutingOspfRequest|null $update_network_switch_routing_ospf_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchRoutingOspf'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSwitchRoutingOspf200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkSwitchRoutingOspfWithHttpInfo($network_id, $update_network_switch_routing_ospf_request = null, string $contentType = self::contentTypes['updateNetworkSwitchRoutingOspf'][0])
    {
        $request = $this->updateNetworkSwitchRoutingOspfRequest($network_id, $update_network_switch_routing_ospf_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkSwitchRoutingOspf200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSwitchRoutingOspf200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSwitchRoutingOspf200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSwitchRoutingOspf200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSwitchRoutingOspf200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkSwitchRoutingOspfAsync
     *
     * Update layer 3 OSPF routing configuration
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchRoutingOspfRequest|null $update_network_switch_routing_ospf_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchRoutingOspf'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchRoutingOspfAsync($network_id, $update_network_switch_routing_ospf_request = null, string $contentType = self::contentTypes['updateNetworkSwitchRoutingOspf'][0])
    {
        return $this->updateNetworkSwitchRoutingOspfAsyncWithHttpInfo($network_id, $update_network_switch_routing_ospf_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkSwitchRoutingOspfAsyncWithHttpInfo
     *
     * Update layer 3 OSPF routing configuration
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchRoutingOspfRequest|null $update_network_switch_routing_ospf_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchRoutingOspf'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchRoutingOspfAsyncWithHttpInfo($network_id, $update_network_switch_routing_ospf_request = null, string $contentType = self::contentTypes['updateNetworkSwitchRoutingOspf'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSwitchRoutingOspf200Response';
        $request = $this->updateNetworkSwitchRoutingOspfRequest($network_id, $update_network_switch_routing_ospf_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkSwitchRoutingOspf'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchRoutingOspfRequest|null $update_network_switch_routing_ospf_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchRoutingOspf'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkSwitchRoutingOspfRequest($network_id, $update_network_switch_routing_ospf_request = null, string $contentType = self::contentTypes['updateNetworkSwitchRoutingOspf'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkSwitchRoutingOspf'
            );
        }



        $resourcePath = '/networks/{networkId}/switch/routing/ospf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_network_switch_routing_ospf_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_network_switch_routing_ospf_request));
            } else {
                $httpBody = $update_network_switch_routing_ospf_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkSwitchStackRoutingInterface
     *
     * Update a layer 3 interface for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceRequest|null $update_device_switch_routing_interface_request update_device_switch_routing_interface_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\UpdateNetworkSwitchStackRoutingInterface200Response
     */
    public function updateNetworkSwitchStackRoutingInterface($network_id, $switch_stack_id, $interface_id, $update_device_switch_routing_interface_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterface'][0])
    {
        list($response) = $this->updateNetworkSwitchStackRoutingInterfaceWithHttpInfo($network_id, $switch_stack_id, $interface_id, $update_device_switch_routing_interface_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkSwitchStackRoutingInterfaceWithHttpInfo
     *
     * Update a layer 3 interface for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceRequest|null $update_device_switch_routing_interface_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\UpdateNetworkSwitchStackRoutingInterface200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkSwitchStackRoutingInterfaceWithHttpInfo($network_id, $switch_stack_id, $interface_id, $update_device_switch_routing_interface_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterface'][0])
    {
        $request = $this->updateNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $interface_id, $update_device_switch_routing_interface_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\UpdateNetworkSwitchStackRoutingInterface200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\UpdateNetworkSwitchStackRoutingInterface200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\UpdateNetworkSwitchStackRoutingInterface200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\UpdateNetworkSwitchStackRoutingInterface200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\UpdateNetworkSwitchStackRoutingInterface200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkSwitchStackRoutingInterfaceAsync
     *
     * Update a layer 3 interface for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceRequest|null $update_device_switch_routing_interface_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchStackRoutingInterfaceAsync($network_id, $switch_stack_id, $interface_id, $update_device_switch_routing_interface_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterface'][0])
    {
        return $this->updateNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, $update_device_switch_routing_interface_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo
     *
     * Update a layer 3 interface for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceRequest|null $update_device_switch_routing_interface_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchStackRoutingInterfaceAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, $update_device_switch_routing_interface_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterface'][0])
    {
        $returnType = '\Meraki\Model\UpdateNetworkSwitchStackRoutingInterface200Response';
        $request = $this->updateNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $interface_id, $update_device_switch_routing_interface_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkSwitchStackRoutingInterface'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingInterfaceRequest|null $update_device_switch_routing_interface_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterface'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkSwitchStackRoutingInterfaceRequest($network_id, $switch_stack_id, $interface_id, $update_device_switch_routing_interface_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterface'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkSwitchStackRoutingInterface'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling updateNetworkSwitchStackRoutingInterface'
            );
        }

        // verify the required parameter 'interface_id' is set
        if ($interface_id === null || (is_array($interface_id) && count($interface_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interface_id when calling updateNetworkSwitchStackRoutingInterface'
            );
        }



        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }
        // path params
        if ($interface_id !== null) {
            $resourcePath = str_replace(
                '{' . 'interfaceId' . '}',
                ObjectSerializer::toPathValue($interface_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_device_switch_routing_interface_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_device_switch_routing_interface_request));
            } else {
                $httpBody = $update_device_switch_routing_interface_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkSwitchStackRoutingInterfaceDhcp
     *
     * Update a layer 3 interface DHCP configuration for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest|null $update_network_switch_stack_routing_interface_dhcp_request update_network_switch_stack_routing_interface_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response
     */
    public function updateNetworkSwitchStackRoutingInterfaceDhcp($network_id, $switch_stack_id, $interface_id, $update_network_switch_stack_routing_interface_dhcp_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {
        list($response) = $this->updateNetworkSwitchStackRoutingInterfaceDhcpWithHttpInfo($network_id, $switch_stack_id, $interface_id, $update_network_switch_stack_routing_interface_dhcp_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkSwitchStackRoutingInterfaceDhcpWithHttpInfo
     *
     * Update a layer 3 interface DHCP configuration for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest|null $update_network_switch_stack_routing_interface_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkSwitchStackRoutingInterfaceDhcpWithHttpInfo($network_id, $switch_stack_id, $interface_id, $update_network_switch_stack_routing_interface_dhcp_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {
        $request = $this->updateNetworkSwitchStackRoutingInterfaceDhcpRequest($network_id, $switch_stack_id, $interface_id, $update_network_switch_stack_routing_interface_dhcp_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkSwitchStackRoutingInterfaceDhcpAsync
     *
     * Update a layer 3 interface DHCP configuration for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest|null $update_network_switch_stack_routing_interface_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchStackRoutingInterfaceDhcpAsync($network_id, $switch_stack_id, $interface_id, $update_network_switch_stack_routing_interface_dhcp_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {
        return $this->updateNetworkSwitchStackRoutingInterfaceDhcpAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, $update_network_switch_stack_routing_interface_dhcp_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkSwitchStackRoutingInterfaceDhcpAsyncWithHttpInfo
     *
     * Update a layer 3 interface DHCP configuration for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest|null $update_network_switch_stack_routing_interface_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchStackRoutingInterfaceDhcpAsyncWithHttpInfo($network_id, $switch_stack_id, $interface_id, $update_network_switch_stack_routing_interface_dhcp_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingInterfaceDhcp200Response';
        $request = $this->updateNetworkSwitchStackRoutingInterfaceDhcpRequest($network_id, $switch_stack_id, $interface_id, $update_network_switch_stack_routing_interface_dhcp_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkSwitchStackRoutingInterfaceDhcp'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $interface_id Interface ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest|null $update_network_switch_stack_routing_interface_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkSwitchStackRoutingInterfaceDhcpRequest($network_id, $switch_stack_id, $interface_id, $update_network_switch_stack_routing_interface_dhcp_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingInterfaceDhcp'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkSwitchStackRoutingInterfaceDhcp'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling updateNetworkSwitchStackRoutingInterfaceDhcp'
            );
        }

        // verify the required parameter 'interface_id' is set
        if ($interface_id === null || (is_array($interface_id) && count($interface_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interface_id when calling updateNetworkSwitchStackRoutingInterfaceDhcp'
            );
        }



        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }
        // path params
        if ($interface_id !== null) {
            $resourcePath = str_replace(
                '{' . 'interfaceId' . '}',
                ObjectSerializer::toPathValue($interface_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_network_switch_stack_routing_interface_dhcp_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_network_switch_stack_routing_interface_dhcp_request));
            } else {
                $httpBody = $update_network_switch_stack_routing_interface_dhcp_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkSwitchStackRoutingStaticRoute
     *
     * Update a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingStaticRouteRequest|null $update_device_switch_routing_static_route_request update_device_switch_routing_static_route_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner
     */
    public function updateNetworkSwitchStackRoutingStaticRoute($network_id, $switch_stack_id, $static_route_id, $update_device_switch_routing_static_route_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'][0])
    {
        list($response) = $this->updateNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $update_device_switch_routing_static_route_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkSwitchStackRoutingStaticRouteWithHttpInfo
     *
     * Update a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingStaticRouteRequest|null $update_device_switch_routing_static_route_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkSwitchStackRoutingStaticRouteWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $update_device_switch_routing_static_route_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'][0])
    {
        $request = $this->updateNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, $update_device_switch_routing_static_route_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkSwitchStackRoutingStaticRouteAsync
     *
     * Update a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingStaticRouteRequest|null $update_device_switch_routing_static_route_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchStackRoutingStaticRouteAsync($network_id, $switch_stack_id, $static_route_id, $update_device_switch_routing_static_route_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'][0])
    {
        return $this->updateNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $update_device_switch_routing_static_route_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo
     *
     * Update a layer 3 static route for a switch stack
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingStaticRouteRequest|null $update_device_switch_routing_static_route_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchStackRoutingStaticRouteAsyncWithHttpInfo($network_id, $switch_stack_id, $static_route_id, $update_device_switch_routing_static_route_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceSwitchRoutingStaticRoutes200ResponseInner';
        $request = $this->updateNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, $update_device_switch_routing_static_route_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkSwitchStackRoutingStaticRoute'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $switch_stack_id Switch stack ID (required)
     * @param  string $static_route_id Static route ID (required)
     * @param  \Meraki\Model\UpdateDeviceSwitchRoutingStaticRouteRequest|null $update_device_switch_routing_static_route_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkSwitchStackRoutingStaticRouteRequest($network_id, $switch_stack_id, $static_route_id, $update_device_switch_routing_static_route_request = null, string $contentType = self::contentTypes['updateNetworkSwitchStackRoutingStaticRoute'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkSwitchStackRoutingStaticRoute'
            );
        }

        // verify the required parameter 'switch_stack_id' is set
        if ($switch_stack_id === null || (is_array($switch_stack_id) && count($switch_stack_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $switch_stack_id when calling updateNetworkSwitchStackRoutingStaticRoute'
            );
        }

        // verify the required parameter 'static_route_id' is set
        if ($static_route_id === null || (is_array($static_route_id) && count($static_route_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $static_route_id when calling updateNetworkSwitchStackRoutingStaticRoute'
            );
        }



        $resourcePath = '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($switch_stack_id !== null) {
            $resourcePath = str_replace(
                '{' . 'switchStackId' . '}',
                ObjectSerializer::toPathValue($switch_stack_id),
                $resourcePath
            );
        }
        // path params
        if ($static_route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staticRouteId' . '}',
                ObjectSerializer::toPathValue($static_route_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_device_switch_routing_static_route_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_device_switch_routing_static_route_request));
            } else {
                $httpBody = $update_device_switch_routing_static_route_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
