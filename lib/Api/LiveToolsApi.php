<?php
/**
 * LiveToolsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Meraki\ApiException;
use Meraki\Configuration;
use Meraki\HeaderSelector;
use Meraki\ObjectSerializer;

/**
 * LiveToolsApi Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LiveToolsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'blinkDeviceLeds' => [
            'application/json',
        ],
        'createDeviceLiveToolsArpTable' => [
            'application/json',
        ],
        'createDeviceLiveToolsCableTest' => [
            'application/json',
        ],
        'createDeviceLiveToolsLedsBlink' => [
            'application/json',
        ],
        'createDeviceLiveToolsPing' => [
            'application/json',
        ],
        'createDeviceLiveToolsPingDevice' => [
            'application/json',
        ],
        'createDeviceLiveToolsThroughputTest' => [
            'application/json',
        ],
        'createDeviceLiveToolsWakeOnLan' => [
            'application/json',
        ],
        'cycleDeviceSwitchPorts' => [
            'application/json',
        ],
        'getDeviceLiveToolsArpTable' => [
            'application/json',
        ],
        'getDeviceLiveToolsCableTest' => [
            'application/json',
        ],
        'getDeviceLiveToolsLedsBlink' => [
            'application/json',
        ],
        'getDeviceLiveToolsPing' => [
            'application/json',
        ],
        'getDeviceLiveToolsPingDevice' => [
            'application/json',
        ],
        'getDeviceLiveToolsThroughputTest' => [
            'application/json',
        ],
        'getDeviceLiveToolsWakeOnLan' => [
            'application/json',
        ],
        'rebootDevice' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation blinkDeviceLeds
     *
     * Blink the LEDs on a device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\BlinkDeviceLedsRequest|null $blink_device_leds_request blink_device_leds_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blinkDeviceLeds'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\BlinkDeviceLeds202Response
     * @deprecated
     */
    public function blinkDeviceLeds($serial, $blink_device_leds_request = null, string $contentType = self::contentTypes['blinkDeviceLeds'][0])
    {
        list($response) = $this->blinkDeviceLedsWithHttpInfo($serial, $blink_device_leds_request, $contentType);
        return $response;
    }

    /**
     * Operation blinkDeviceLedsWithHttpInfo
     *
     * Blink the LEDs on a device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\BlinkDeviceLedsRequest|null $blink_device_leds_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blinkDeviceLeds'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\BlinkDeviceLeds202Response, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function blinkDeviceLedsWithHttpInfo($serial, $blink_device_leds_request = null, string $contentType = self::contentTypes['blinkDeviceLeds'][0])
    {
        $request = $this->blinkDeviceLedsRequest($serial, $blink_device_leds_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('\Meraki\Model\BlinkDeviceLeds202Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\BlinkDeviceLeds202Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\BlinkDeviceLeds202Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\BlinkDeviceLeds202Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\BlinkDeviceLeds202Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blinkDeviceLedsAsync
     *
     * Blink the LEDs on a device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\BlinkDeviceLedsRequest|null $blink_device_leds_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blinkDeviceLeds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function blinkDeviceLedsAsync($serial, $blink_device_leds_request = null, string $contentType = self::contentTypes['blinkDeviceLeds'][0])
    {
        return $this->blinkDeviceLedsAsyncWithHttpInfo($serial, $blink_device_leds_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blinkDeviceLedsAsyncWithHttpInfo
     *
     * Blink the LEDs on a device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\BlinkDeviceLedsRequest|null $blink_device_leds_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blinkDeviceLeds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function blinkDeviceLedsAsyncWithHttpInfo($serial, $blink_device_leds_request = null, string $contentType = self::contentTypes['blinkDeviceLeds'][0])
    {
        $returnType = '\Meraki\Model\BlinkDeviceLeds202Response';
        $request = $this->blinkDeviceLedsRequest($serial, $blink_device_leds_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blinkDeviceLeds'
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\BlinkDeviceLedsRequest|null $blink_device_leds_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blinkDeviceLeds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function blinkDeviceLedsRequest($serial, $blink_device_leds_request = null, string $contentType = self::contentTypes['blinkDeviceLeds'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling blinkDeviceLeds'
            );
        }



        $resourcePath = '/devices/{serial}/blinkLeds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($blink_device_leds_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($blink_device_leds_request));
            } else {
                $httpBody = $blink_device_leds_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDeviceLiveToolsArpTable
     *
     * Enqueue a job to perform a ARP table request for the device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsArpTableRequest|null $create_device_live_tools_arp_table_request create_device_live_tools_arp_table_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsArpTable'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CreateDeviceLiveToolsArpTable201Response
     */
    public function createDeviceLiveToolsArpTable($serial, $create_device_live_tools_arp_table_request = null, string $contentType = self::contentTypes['createDeviceLiveToolsArpTable'][0])
    {
        list($response) = $this->createDeviceLiveToolsArpTableWithHttpInfo($serial, $create_device_live_tools_arp_table_request, $contentType);
        return $response;
    }

    /**
     * Operation createDeviceLiveToolsArpTableWithHttpInfo
     *
     * Enqueue a job to perform a ARP table request for the device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsArpTableRequest|null $create_device_live_tools_arp_table_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsArpTable'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CreateDeviceLiveToolsArpTable201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDeviceLiveToolsArpTableWithHttpInfo($serial, $create_device_live_tools_arp_table_request = null, string $contentType = self::contentTypes['createDeviceLiveToolsArpTable'][0])
    {
        $request = $this->createDeviceLiveToolsArpTableRequest($serial, $create_device_live_tools_arp_table_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\CreateDeviceLiveToolsArpTable201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CreateDeviceLiveToolsArpTable201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CreateDeviceLiveToolsArpTable201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CreateDeviceLiveToolsArpTable201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CreateDeviceLiveToolsArpTable201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDeviceLiveToolsArpTableAsync
     *
     * Enqueue a job to perform a ARP table request for the device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsArpTableRequest|null $create_device_live_tools_arp_table_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsArpTable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceLiveToolsArpTableAsync($serial, $create_device_live_tools_arp_table_request = null, string $contentType = self::contentTypes['createDeviceLiveToolsArpTable'][0])
    {
        return $this->createDeviceLiveToolsArpTableAsyncWithHttpInfo($serial, $create_device_live_tools_arp_table_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDeviceLiveToolsArpTableAsyncWithHttpInfo
     *
     * Enqueue a job to perform a ARP table request for the device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsArpTableRequest|null $create_device_live_tools_arp_table_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsArpTable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceLiveToolsArpTableAsyncWithHttpInfo($serial, $create_device_live_tools_arp_table_request = null, string $contentType = self::contentTypes['createDeviceLiveToolsArpTable'][0])
    {
        $returnType = '\Meraki\Model\CreateDeviceLiveToolsArpTable201Response';
        $request = $this->createDeviceLiveToolsArpTableRequest($serial, $create_device_live_tools_arp_table_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDeviceLiveToolsArpTable'
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsArpTableRequest|null $create_device_live_tools_arp_table_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsArpTable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDeviceLiveToolsArpTableRequest($serial, $create_device_live_tools_arp_table_request = null, string $contentType = self::contentTypes['createDeviceLiveToolsArpTable'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling createDeviceLiveToolsArpTable'
            );
        }



        $resourcePath = '/devices/{serial}/liveTools/arpTable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_device_live_tools_arp_table_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_device_live_tools_arp_table_request));
            } else {
                $httpBody = $create_device_live_tools_arp_table_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDeviceLiveToolsCableTest
     *
     * Enqueue a job to perform a cable test for the device on the specified ports
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsCableTestRequest $create_device_live_tools_cable_test_request create_device_live_tools_cable_test_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsCableTest'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CreateDeviceLiveToolsCableTest201Response
     */
    public function createDeviceLiveToolsCableTest($serial, $create_device_live_tools_cable_test_request, string $contentType = self::contentTypes['createDeviceLiveToolsCableTest'][0])
    {
        list($response) = $this->createDeviceLiveToolsCableTestWithHttpInfo($serial, $create_device_live_tools_cable_test_request, $contentType);
        return $response;
    }

    /**
     * Operation createDeviceLiveToolsCableTestWithHttpInfo
     *
     * Enqueue a job to perform a cable test for the device on the specified ports
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsCableTestRequest $create_device_live_tools_cable_test_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsCableTest'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CreateDeviceLiveToolsCableTest201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDeviceLiveToolsCableTestWithHttpInfo($serial, $create_device_live_tools_cable_test_request, string $contentType = self::contentTypes['createDeviceLiveToolsCableTest'][0])
    {
        $request = $this->createDeviceLiveToolsCableTestRequest($serial, $create_device_live_tools_cable_test_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\CreateDeviceLiveToolsCableTest201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CreateDeviceLiveToolsCableTest201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CreateDeviceLiveToolsCableTest201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CreateDeviceLiveToolsCableTest201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CreateDeviceLiveToolsCableTest201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDeviceLiveToolsCableTestAsync
     *
     * Enqueue a job to perform a cable test for the device on the specified ports
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsCableTestRequest $create_device_live_tools_cable_test_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsCableTest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceLiveToolsCableTestAsync($serial, $create_device_live_tools_cable_test_request, string $contentType = self::contentTypes['createDeviceLiveToolsCableTest'][0])
    {
        return $this->createDeviceLiveToolsCableTestAsyncWithHttpInfo($serial, $create_device_live_tools_cable_test_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDeviceLiveToolsCableTestAsyncWithHttpInfo
     *
     * Enqueue a job to perform a cable test for the device on the specified ports
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsCableTestRequest $create_device_live_tools_cable_test_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsCableTest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceLiveToolsCableTestAsyncWithHttpInfo($serial, $create_device_live_tools_cable_test_request, string $contentType = self::contentTypes['createDeviceLiveToolsCableTest'][0])
    {
        $returnType = '\Meraki\Model\CreateDeviceLiveToolsCableTest201Response';
        $request = $this->createDeviceLiveToolsCableTestRequest($serial, $create_device_live_tools_cable_test_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDeviceLiveToolsCableTest'
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsCableTestRequest $create_device_live_tools_cable_test_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsCableTest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDeviceLiveToolsCableTestRequest($serial, $create_device_live_tools_cable_test_request, string $contentType = self::contentTypes['createDeviceLiveToolsCableTest'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling createDeviceLiveToolsCableTest'
            );
        }

        // verify the required parameter 'create_device_live_tools_cable_test_request' is set
        if ($create_device_live_tools_cable_test_request === null || (is_array($create_device_live_tools_cable_test_request) && count($create_device_live_tools_cable_test_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_device_live_tools_cable_test_request when calling createDeviceLiveToolsCableTest'
            );
        }


        $resourcePath = '/devices/{serial}/liveTools/cableTest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_device_live_tools_cable_test_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_device_live_tools_cable_test_request));
            } else {
                $httpBody = $create_device_live_tools_cable_test_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDeviceLiveToolsLedsBlink
     *
     * Enqueue a job to blink LEDs on a device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsLedsBlinkRequest $create_device_live_tools_leds_blink_request create_device_live_tools_leds_blink_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsLedsBlink'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CreateDeviceLiveToolsLedsBlink201Response
     */
    public function createDeviceLiveToolsLedsBlink($serial, $create_device_live_tools_leds_blink_request, string $contentType = self::contentTypes['createDeviceLiveToolsLedsBlink'][0])
    {
        list($response) = $this->createDeviceLiveToolsLedsBlinkWithHttpInfo($serial, $create_device_live_tools_leds_blink_request, $contentType);
        return $response;
    }

    /**
     * Operation createDeviceLiveToolsLedsBlinkWithHttpInfo
     *
     * Enqueue a job to blink LEDs on a device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsLedsBlinkRequest $create_device_live_tools_leds_blink_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsLedsBlink'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CreateDeviceLiveToolsLedsBlink201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDeviceLiveToolsLedsBlinkWithHttpInfo($serial, $create_device_live_tools_leds_blink_request, string $contentType = self::contentTypes['createDeviceLiveToolsLedsBlink'][0])
    {
        $request = $this->createDeviceLiveToolsLedsBlinkRequest($serial, $create_device_live_tools_leds_blink_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\CreateDeviceLiveToolsLedsBlink201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CreateDeviceLiveToolsLedsBlink201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CreateDeviceLiveToolsLedsBlink201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CreateDeviceLiveToolsLedsBlink201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CreateDeviceLiveToolsLedsBlink201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDeviceLiveToolsLedsBlinkAsync
     *
     * Enqueue a job to blink LEDs on a device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsLedsBlinkRequest $create_device_live_tools_leds_blink_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsLedsBlink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceLiveToolsLedsBlinkAsync($serial, $create_device_live_tools_leds_blink_request, string $contentType = self::contentTypes['createDeviceLiveToolsLedsBlink'][0])
    {
        return $this->createDeviceLiveToolsLedsBlinkAsyncWithHttpInfo($serial, $create_device_live_tools_leds_blink_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDeviceLiveToolsLedsBlinkAsyncWithHttpInfo
     *
     * Enqueue a job to blink LEDs on a device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsLedsBlinkRequest $create_device_live_tools_leds_blink_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsLedsBlink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceLiveToolsLedsBlinkAsyncWithHttpInfo($serial, $create_device_live_tools_leds_blink_request, string $contentType = self::contentTypes['createDeviceLiveToolsLedsBlink'][0])
    {
        $returnType = '\Meraki\Model\CreateDeviceLiveToolsLedsBlink201Response';
        $request = $this->createDeviceLiveToolsLedsBlinkRequest($serial, $create_device_live_tools_leds_blink_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDeviceLiveToolsLedsBlink'
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsLedsBlinkRequest $create_device_live_tools_leds_blink_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsLedsBlink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDeviceLiveToolsLedsBlinkRequest($serial, $create_device_live_tools_leds_blink_request, string $contentType = self::contentTypes['createDeviceLiveToolsLedsBlink'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling createDeviceLiveToolsLedsBlink'
            );
        }

        // verify the required parameter 'create_device_live_tools_leds_blink_request' is set
        if ($create_device_live_tools_leds_blink_request === null || (is_array($create_device_live_tools_leds_blink_request) && count($create_device_live_tools_leds_blink_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_device_live_tools_leds_blink_request when calling createDeviceLiveToolsLedsBlink'
            );
        }


        $resourcePath = '/devices/{serial}/liveTools/leds/blink';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_device_live_tools_leds_blink_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_device_live_tools_leds_blink_request));
            } else {
                $httpBody = $create_device_live_tools_leds_blink_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDeviceLiveToolsPing
     *
     * Enqueue a job to ping a target host from the device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsPingRequest $create_device_live_tools_ping_request create_device_live_tools_ping_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsPing'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CreateDeviceLiveToolsPing201Response
     */
    public function createDeviceLiveToolsPing($serial, $create_device_live_tools_ping_request, string $contentType = self::contentTypes['createDeviceLiveToolsPing'][0])
    {
        list($response) = $this->createDeviceLiveToolsPingWithHttpInfo($serial, $create_device_live_tools_ping_request, $contentType);
        return $response;
    }

    /**
     * Operation createDeviceLiveToolsPingWithHttpInfo
     *
     * Enqueue a job to ping a target host from the device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsPingRequest $create_device_live_tools_ping_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsPing'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CreateDeviceLiveToolsPing201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDeviceLiveToolsPingWithHttpInfo($serial, $create_device_live_tools_ping_request, string $contentType = self::contentTypes['createDeviceLiveToolsPing'][0])
    {
        $request = $this->createDeviceLiveToolsPingRequest($serial, $create_device_live_tools_ping_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\CreateDeviceLiveToolsPing201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CreateDeviceLiveToolsPing201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CreateDeviceLiveToolsPing201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CreateDeviceLiveToolsPing201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CreateDeviceLiveToolsPing201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDeviceLiveToolsPingAsync
     *
     * Enqueue a job to ping a target host from the device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsPingRequest $create_device_live_tools_ping_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsPing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceLiveToolsPingAsync($serial, $create_device_live_tools_ping_request, string $contentType = self::contentTypes['createDeviceLiveToolsPing'][0])
    {
        return $this->createDeviceLiveToolsPingAsyncWithHttpInfo($serial, $create_device_live_tools_ping_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDeviceLiveToolsPingAsyncWithHttpInfo
     *
     * Enqueue a job to ping a target host from the device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsPingRequest $create_device_live_tools_ping_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsPing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceLiveToolsPingAsyncWithHttpInfo($serial, $create_device_live_tools_ping_request, string $contentType = self::contentTypes['createDeviceLiveToolsPing'][0])
    {
        $returnType = '\Meraki\Model\CreateDeviceLiveToolsPing201Response';
        $request = $this->createDeviceLiveToolsPingRequest($serial, $create_device_live_tools_ping_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDeviceLiveToolsPing'
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsPingRequest $create_device_live_tools_ping_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsPing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDeviceLiveToolsPingRequest($serial, $create_device_live_tools_ping_request, string $contentType = self::contentTypes['createDeviceLiveToolsPing'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling createDeviceLiveToolsPing'
            );
        }

        // verify the required parameter 'create_device_live_tools_ping_request' is set
        if ($create_device_live_tools_ping_request === null || (is_array($create_device_live_tools_ping_request) && count($create_device_live_tools_ping_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_device_live_tools_ping_request when calling createDeviceLiveToolsPing'
            );
        }


        $resourcePath = '/devices/{serial}/liveTools/ping';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_device_live_tools_ping_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_device_live_tools_ping_request));
            } else {
                $httpBody = $create_device_live_tools_ping_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDeviceLiveToolsPingDevice
     *
     * Enqueue a job to check connectivity status to the device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsPingDeviceRequest|null $create_device_live_tools_ping_device_request create_device_live_tools_ping_device_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsPingDevice'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CreateDeviceLiveToolsPingDevice201Response
     */
    public function createDeviceLiveToolsPingDevice($serial, $create_device_live_tools_ping_device_request = null, string $contentType = self::contentTypes['createDeviceLiveToolsPingDevice'][0])
    {
        list($response) = $this->createDeviceLiveToolsPingDeviceWithHttpInfo($serial, $create_device_live_tools_ping_device_request, $contentType);
        return $response;
    }

    /**
     * Operation createDeviceLiveToolsPingDeviceWithHttpInfo
     *
     * Enqueue a job to check connectivity status to the device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsPingDeviceRequest|null $create_device_live_tools_ping_device_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsPingDevice'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CreateDeviceLiveToolsPingDevice201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDeviceLiveToolsPingDeviceWithHttpInfo($serial, $create_device_live_tools_ping_device_request = null, string $contentType = self::contentTypes['createDeviceLiveToolsPingDevice'][0])
    {
        $request = $this->createDeviceLiveToolsPingDeviceRequest($serial, $create_device_live_tools_ping_device_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\CreateDeviceLiveToolsPingDevice201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CreateDeviceLiveToolsPingDevice201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CreateDeviceLiveToolsPingDevice201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CreateDeviceLiveToolsPingDevice201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CreateDeviceLiveToolsPingDevice201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDeviceLiveToolsPingDeviceAsync
     *
     * Enqueue a job to check connectivity status to the device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsPingDeviceRequest|null $create_device_live_tools_ping_device_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsPingDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceLiveToolsPingDeviceAsync($serial, $create_device_live_tools_ping_device_request = null, string $contentType = self::contentTypes['createDeviceLiveToolsPingDevice'][0])
    {
        return $this->createDeviceLiveToolsPingDeviceAsyncWithHttpInfo($serial, $create_device_live_tools_ping_device_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDeviceLiveToolsPingDeviceAsyncWithHttpInfo
     *
     * Enqueue a job to check connectivity status to the device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsPingDeviceRequest|null $create_device_live_tools_ping_device_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsPingDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceLiveToolsPingDeviceAsyncWithHttpInfo($serial, $create_device_live_tools_ping_device_request = null, string $contentType = self::contentTypes['createDeviceLiveToolsPingDevice'][0])
    {
        $returnType = '\Meraki\Model\CreateDeviceLiveToolsPingDevice201Response';
        $request = $this->createDeviceLiveToolsPingDeviceRequest($serial, $create_device_live_tools_ping_device_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDeviceLiveToolsPingDevice'
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsPingDeviceRequest|null $create_device_live_tools_ping_device_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsPingDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDeviceLiveToolsPingDeviceRequest($serial, $create_device_live_tools_ping_device_request = null, string $contentType = self::contentTypes['createDeviceLiveToolsPingDevice'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling createDeviceLiveToolsPingDevice'
            );
        }



        $resourcePath = '/devices/{serial}/liveTools/pingDevice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_device_live_tools_ping_device_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_device_live_tools_ping_device_request));
            } else {
                $httpBody = $create_device_live_tools_ping_device_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDeviceLiveToolsThroughputTest
     *
     * Enqueue a job to test a device throughput, the test will run for 10 secs to test throughput
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsArpTableRequest|null $create_device_live_tools_arp_table_request create_device_live_tools_arp_table_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsThroughputTest'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CreateDeviceLiveToolsThroughputTest201Response
     */
    public function createDeviceLiveToolsThroughputTest($serial, $create_device_live_tools_arp_table_request = null, string $contentType = self::contentTypes['createDeviceLiveToolsThroughputTest'][0])
    {
        list($response) = $this->createDeviceLiveToolsThroughputTestWithHttpInfo($serial, $create_device_live_tools_arp_table_request, $contentType);
        return $response;
    }

    /**
     * Operation createDeviceLiveToolsThroughputTestWithHttpInfo
     *
     * Enqueue a job to test a device throughput, the test will run for 10 secs to test throughput
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsArpTableRequest|null $create_device_live_tools_arp_table_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsThroughputTest'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CreateDeviceLiveToolsThroughputTest201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDeviceLiveToolsThroughputTestWithHttpInfo($serial, $create_device_live_tools_arp_table_request = null, string $contentType = self::contentTypes['createDeviceLiveToolsThroughputTest'][0])
    {
        $request = $this->createDeviceLiveToolsThroughputTestRequest($serial, $create_device_live_tools_arp_table_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\CreateDeviceLiveToolsThroughputTest201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CreateDeviceLiveToolsThroughputTest201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CreateDeviceLiveToolsThroughputTest201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CreateDeviceLiveToolsThroughputTest201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CreateDeviceLiveToolsThroughputTest201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDeviceLiveToolsThroughputTestAsync
     *
     * Enqueue a job to test a device throughput, the test will run for 10 secs to test throughput
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsArpTableRequest|null $create_device_live_tools_arp_table_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsThroughputTest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceLiveToolsThroughputTestAsync($serial, $create_device_live_tools_arp_table_request = null, string $contentType = self::contentTypes['createDeviceLiveToolsThroughputTest'][0])
    {
        return $this->createDeviceLiveToolsThroughputTestAsyncWithHttpInfo($serial, $create_device_live_tools_arp_table_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDeviceLiveToolsThroughputTestAsyncWithHttpInfo
     *
     * Enqueue a job to test a device throughput, the test will run for 10 secs to test throughput
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsArpTableRequest|null $create_device_live_tools_arp_table_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsThroughputTest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceLiveToolsThroughputTestAsyncWithHttpInfo($serial, $create_device_live_tools_arp_table_request = null, string $contentType = self::contentTypes['createDeviceLiveToolsThroughputTest'][0])
    {
        $returnType = '\Meraki\Model\CreateDeviceLiveToolsThroughputTest201Response';
        $request = $this->createDeviceLiveToolsThroughputTestRequest($serial, $create_device_live_tools_arp_table_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDeviceLiveToolsThroughputTest'
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsArpTableRequest|null $create_device_live_tools_arp_table_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsThroughputTest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDeviceLiveToolsThroughputTestRequest($serial, $create_device_live_tools_arp_table_request = null, string $contentType = self::contentTypes['createDeviceLiveToolsThroughputTest'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling createDeviceLiveToolsThroughputTest'
            );
        }



        $resourcePath = '/devices/{serial}/liveTools/throughputTest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_device_live_tools_arp_table_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_device_live_tools_arp_table_request));
            } else {
                $httpBody = $create_device_live_tools_arp_table_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDeviceLiveToolsWakeOnLan
     *
     * Enqueue a job to send a Wake-on-LAN packet from the device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsWakeOnLanRequest $create_device_live_tools_wake_on_lan_request create_device_live_tools_wake_on_lan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsWakeOnLan'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CreateDeviceLiveToolsWakeOnLan201Response
     */
    public function createDeviceLiveToolsWakeOnLan($serial, $create_device_live_tools_wake_on_lan_request, string $contentType = self::contentTypes['createDeviceLiveToolsWakeOnLan'][0])
    {
        list($response) = $this->createDeviceLiveToolsWakeOnLanWithHttpInfo($serial, $create_device_live_tools_wake_on_lan_request, $contentType);
        return $response;
    }

    /**
     * Operation createDeviceLiveToolsWakeOnLanWithHttpInfo
     *
     * Enqueue a job to send a Wake-on-LAN packet from the device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsWakeOnLanRequest $create_device_live_tools_wake_on_lan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsWakeOnLan'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CreateDeviceLiveToolsWakeOnLan201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDeviceLiveToolsWakeOnLanWithHttpInfo($serial, $create_device_live_tools_wake_on_lan_request, string $contentType = self::contentTypes['createDeviceLiveToolsWakeOnLan'][0])
    {
        $request = $this->createDeviceLiveToolsWakeOnLanRequest($serial, $create_device_live_tools_wake_on_lan_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\CreateDeviceLiveToolsWakeOnLan201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CreateDeviceLiveToolsWakeOnLan201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CreateDeviceLiveToolsWakeOnLan201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CreateDeviceLiveToolsWakeOnLan201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CreateDeviceLiveToolsWakeOnLan201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDeviceLiveToolsWakeOnLanAsync
     *
     * Enqueue a job to send a Wake-on-LAN packet from the device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsWakeOnLanRequest $create_device_live_tools_wake_on_lan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsWakeOnLan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceLiveToolsWakeOnLanAsync($serial, $create_device_live_tools_wake_on_lan_request, string $contentType = self::contentTypes['createDeviceLiveToolsWakeOnLan'][0])
    {
        return $this->createDeviceLiveToolsWakeOnLanAsyncWithHttpInfo($serial, $create_device_live_tools_wake_on_lan_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDeviceLiveToolsWakeOnLanAsyncWithHttpInfo
     *
     * Enqueue a job to send a Wake-on-LAN packet from the device
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsWakeOnLanRequest $create_device_live_tools_wake_on_lan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsWakeOnLan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDeviceLiveToolsWakeOnLanAsyncWithHttpInfo($serial, $create_device_live_tools_wake_on_lan_request, string $contentType = self::contentTypes['createDeviceLiveToolsWakeOnLan'][0])
    {
        $returnType = '\Meraki\Model\CreateDeviceLiveToolsWakeOnLan201Response';
        $request = $this->createDeviceLiveToolsWakeOnLanRequest($serial, $create_device_live_tools_wake_on_lan_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDeviceLiveToolsWakeOnLan'
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CreateDeviceLiveToolsWakeOnLanRequest $create_device_live_tools_wake_on_lan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeviceLiveToolsWakeOnLan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDeviceLiveToolsWakeOnLanRequest($serial, $create_device_live_tools_wake_on_lan_request, string $contentType = self::contentTypes['createDeviceLiveToolsWakeOnLan'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling createDeviceLiveToolsWakeOnLan'
            );
        }

        // verify the required parameter 'create_device_live_tools_wake_on_lan_request' is set
        if ($create_device_live_tools_wake_on_lan_request === null || (is_array($create_device_live_tools_wake_on_lan_request) && count($create_device_live_tools_wake_on_lan_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_device_live_tools_wake_on_lan_request when calling createDeviceLiveToolsWakeOnLan'
            );
        }


        $resourcePath = '/devices/{serial}/liveTools/wakeOnLan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_device_live_tools_wake_on_lan_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_device_live_tools_wake_on_lan_request));
            } else {
                $httpBody = $create_device_live_tools_wake_on_lan_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cycleDeviceSwitchPorts
     *
     * Cycle a set of switch ports
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CycleDeviceSwitchPortsRequest $cycle_device_switch_ports_request cycle_device_switch_ports_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cycleDeviceSwitchPorts'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CycleDeviceSwitchPorts200Response
     */
    public function cycleDeviceSwitchPorts($serial, $cycle_device_switch_ports_request, string $contentType = self::contentTypes['cycleDeviceSwitchPorts'][0])
    {
        list($response) = $this->cycleDeviceSwitchPortsWithHttpInfo($serial, $cycle_device_switch_ports_request, $contentType);
        return $response;
    }

    /**
     * Operation cycleDeviceSwitchPortsWithHttpInfo
     *
     * Cycle a set of switch ports
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CycleDeviceSwitchPortsRequest $cycle_device_switch_ports_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cycleDeviceSwitchPorts'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CycleDeviceSwitchPorts200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function cycleDeviceSwitchPortsWithHttpInfo($serial, $cycle_device_switch_ports_request, string $contentType = self::contentTypes['cycleDeviceSwitchPorts'][0])
    {
        $request = $this->cycleDeviceSwitchPortsRequest($serial, $cycle_device_switch_ports_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\CycleDeviceSwitchPorts200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CycleDeviceSwitchPorts200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CycleDeviceSwitchPorts200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CycleDeviceSwitchPorts200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CycleDeviceSwitchPorts200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cycleDeviceSwitchPortsAsync
     *
     * Cycle a set of switch ports
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CycleDeviceSwitchPortsRequest $cycle_device_switch_ports_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cycleDeviceSwitchPorts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cycleDeviceSwitchPortsAsync($serial, $cycle_device_switch_ports_request, string $contentType = self::contentTypes['cycleDeviceSwitchPorts'][0])
    {
        return $this->cycleDeviceSwitchPortsAsyncWithHttpInfo($serial, $cycle_device_switch_ports_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cycleDeviceSwitchPortsAsyncWithHttpInfo
     *
     * Cycle a set of switch ports
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CycleDeviceSwitchPortsRequest $cycle_device_switch_ports_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cycleDeviceSwitchPorts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cycleDeviceSwitchPortsAsyncWithHttpInfo($serial, $cycle_device_switch_ports_request, string $contentType = self::contentTypes['cycleDeviceSwitchPorts'][0])
    {
        $returnType = '\Meraki\Model\CycleDeviceSwitchPorts200Response';
        $request = $this->cycleDeviceSwitchPortsRequest($serial, $cycle_device_switch_ports_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cycleDeviceSwitchPorts'
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\CycleDeviceSwitchPortsRequest $cycle_device_switch_ports_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cycleDeviceSwitchPorts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cycleDeviceSwitchPortsRequest($serial, $cycle_device_switch_ports_request, string $contentType = self::contentTypes['cycleDeviceSwitchPorts'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling cycleDeviceSwitchPorts'
            );
        }

        // verify the required parameter 'cycle_device_switch_ports_request' is set
        if ($cycle_device_switch_ports_request === null || (is_array($cycle_device_switch_ports_request) && count($cycle_device_switch_ports_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cycle_device_switch_ports_request when calling cycleDeviceSwitchPorts'
            );
        }


        $resourcePath = '/devices/{serial}/switch/ports/cycle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cycle_device_switch_ports_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cycle_device_switch_ports_request));
            } else {
                $httpBody = $cycle_device_switch_ports_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeviceLiveToolsArpTable
     *
     * Return an ARP table live tool job.
     *
     * @param  string $serial Serial (required)
     * @param  string $arp_table_id Arp table ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsArpTable'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\DevicesSerialLiveToolsArpTablePostRequestMessage
     */
    public function getDeviceLiveToolsArpTable($serial, $arp_table_id, string $contentType = self::contentTypes['getDeviceLiveToolsArpTable'][0])
    {
        list($response) = $this->getDeviceLiveToolsArpTableWithHttpInfo($serial, $arp_table_id, $contentType);
        return $response;
    }

    /**
     * Operation getDeviceLiveToolsArpTableWithHttpInfo
     *
     * Return an ARP table live tool job.
     *
     * @param  string $serial Serial (required)
     * @param  string $arp_table_id Arp table ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsArpTable'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\DevicesSerialLiveToolsArpTablePostRequestMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeviceLiveToolsArpTableWithHttpInfo($serial, $arp_table_id, string $contentType = self::contentTypes['getDeviceLiveToolsArpTable'][0])
    {
        $request = $this->getDeviceLiveToolsArpTableRequest($serial, $arp_table_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\DevicesSerialLiveToolsArpTablePostRequestMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\DevicesSerialLiveToolsArpTablePostRequestMessage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\DevicesSerialLiveToolsArpTablePostRequestMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\DevicesSerialLiveToolsArpTablePostRequestMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\DevicesSerialLiveToolsArpTablePostRequestMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeviceLiveToolsArpTableAsync
     *
     * Return an ARP table live tool job.
     *
     * @param  string $serial Serial (required)
     * @param  string $arp_table_id Arp table ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsArpTable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceLiveToolsArpTableAsync($serial, $arp_table_id, string $contentType = self::contentTypes['getDeviceLiveToolsArpTable'][0])
    {
        return $this->getDeviceLiveToolsArpTableAsyncWithHttpInfo($serial, $arp_table_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeviceLiveToolsArpTableAsyncWithHttpInfo
     *
     * Return an ARP table live tool job.
     *
     * @param  string $serial Serial (required)
     * @param  string $arp_table_id Arp table ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsArpTable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceLiveToolsArpTableAsyncWithHttpInfo($serial, $arp_table_id, string $contentType = self::contentTypes['getDeviceLiveToolsArpTable'][0])
    {
        $returnType = '\Meraki\Model\DevicesSerialLiveToolsArpTablePostRequestMessage';
        $request = $this->getDeviceLiveToolsArpTableRequest($serial, $arp_table_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeviceLiveToolsArpTable'
     *
     * @param  string $serial Serial (required)
     * @param  string $arp_table_id Arp table ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsArpTable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeviceLiveToolsArpTableRequest($serial, $arp_table_id, string $contentType = self::contentTypes['getDeviceLiveToolsArpTable'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling getDeviceLiveToolsArpTable'
            );
        }

        // verify the required parameter 'arp_table_id' is set
        if ($arp_table_id === null || (is_array($arp_table_id) && count($arp_table_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $arp_table_id when calling getDeviceLiveToolsArpTable'
            );
        }


        $resourcePath = '/devices/{serial}/liveTools/arpTable/{arpTableId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }
        // path params
        if ($arp_table_id !== null) {
            $resourcePath = str_replace(
                '{' . 'arpTableId' . '}',
                ObjectSerializer::toPathValue($arp_table_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeviceLiveToolsCableTest
     *
     * Return a cable test live tool job.
     *
     * @param  string $serial Serial (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsCableTest'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\DevicesSerialLiveToolsCableTestPostRequestMessage
     */
    public function getDeviceLiveToolsCableTest($serial, $id, string $contentType = self::contentTypes['getDeviceLiveToolsCableTest'][0])
    {
        list($response) = $this->getDeviceLiveToolsCableTestWithHttpInfo($serial, $id, $contentType);
        return $response;
    }

    /**
     * Operation getDeviceLiveToolsCableTestWithHttpInfo
     *
     * Return a cable test live tool job.
     *
     * @param  string $serial Serial (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsCableTest'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\DevicesSerialLiveToolsCableTestPostRequestMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeviceLiveToolsCableTestWithHttpInfo($serial, $id, string $contentType = self::contentTypes['getDeviceLiveToolsCableTest'][0])
    {
        $request = $this->getDeviceLiveToolsCableTestRequest($serial, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\DevicesSerialLiveToolsCableTestPostRequestMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\DevicesSerialLiveToolsCableTestPostRequestMessage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\DevicesSerialLiveToolsCableTestPostRequestMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\DevicesSerialLiveToolsCableTestPostRequestMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\DevicesSerialLiveToolsCableTestPostRequestMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeviceLiveToolsCableTestAsync
     *
     * Return a cable test live tool job.
     *
     * @param  string $serial Serial (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsCableTest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceLiveToolsCableTestAsync($serial, $id, string $contentType = self::contentTypes['getDeviceLiveToolsCableTest'][0])
    {
        return $this->getDeviceLiveToolsCableTestAsyncWithHttpInfo($serial, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeviceLiveToolsCableTestAsyncWithHttpInfo
     *
     * Return a cable test live tool job.
     *
     * @param  string $serial Serial (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsCableTest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceLiveToolsCableTestAsyncWithHttpInfo($serial, $id, string $contentType = self::contentTypes['getDeviceLiveToolsCableTest'][0])
    {
        $returnType = '\Meraki\Model\DevicesSerialLiveToolsCableTestPostRequestMessage';
        $request = $this->getDeviceLiveToolsCableTestRequest($serial, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeviceLiveToolsCableTest'
     *
     * @param  string $serial Serial (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsCableTest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeviceLiveToolsCableTestRequest($serial, $id, string $contentType = self::contentTypes['getDeviceLiveToolsCableTest'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling getDeviceLiveToolsCableTest'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDeviceLiveToolsCableTest'
            );
        }


        $resourcePath = '/devices/{serial}/liveTools/cableTest/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeviceLiveToolsLedsBlink
     *
     * Return a blink LEDs job
     *
     * @param  string $serial Serial (required)
     * @param  string $leds_blink_id Leds blink ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsLedsBlink'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\DevicesSerialLiveToolsLedsBlinkPostRequestMessage
     */
    public function getDeviceLiveToolsLedsBlink($serial, $leds_blink_id, string $contentType = self::contentTypes['getDeviceLiveToolsLedsBlink'][0])
    {
        list($response) = $this->getDeviceLiveToolsLedsBlinkWithHttpInfo($serial, $leds_blink_id, $contentType);
        return $response;
    }

    /**
     * Operation getDeviceLiveToolsLedsBlinkWithHttpInfo
     *
     * Return a blink LEDs job
     *
     * @param  string $serial Serial (required)
     * @param  string $leds_blink_id Leds blink ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsLedsBlink'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\DevicesSerialLiveToolsLedsBlinkPostRequestMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeviceLiveToolsLedsBlinkWithHttpInfo($serial, $leds_blink_id, string $contentType = self::contentTypes['getDeviceLiveToolsLedsBlink'][0])
    {
        $request = $this->getDeviceLiveToolsLedsBlinkRequest($serial, $leds_blink_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\DevicesSerialLiveToolsLedsBlinkPostRequestMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\DevicesSerialLiveToolsLedsBlinkPostRequestMessage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\DevicesSerialLiveToolsLedsBlinkPostRequestMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\DevicesSerialLiveToolsLedsBlinkPostRequestMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\DevicesSerialLiveToolsLedsBlinkPostRequestMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeviceLiveToolsLedsBlinkAsync
     *
     * Return a blink LEDs job
     *
     * @param  string $serial Serial (required)
     * @param  string $leds_blink_id Leds blink ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsLedsBlink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceLiveToolsLedsBlinkAsync($serial, $leds_blink_id, string $contentType = self::contentTypes['getDeviceLiveToolsLedsBlink'][0])
    {
        return $this->getDeviceLiveToolsLedsBlinkAsyncWithHttpInfo($serial, $leds_blink_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeviceLiveToolsLedsBlinkAsyncWithHttpInfo
     *
     * Return a blink LEDs job
     *
     * @param  string $serial Serial (required)
     * @param  string $leds_blink_id Leds blink ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsLedsBlink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceLiveToolsLedsBlinkAsyncWithHttpInfo($serial, $leds_blink_id, string $contentType = self::contentTypes['getDeviceLiveToolsLedsBlink'][0])
    {
        $returnType = '\Meraki\Model\DevicesSerialLiveToolsLedsBlinkPostRequestMessage';
        $request = $this->getDeviceLiveToolsLedsBlinkRequest($serial, $leds_blink_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeviceLiveToolsLedsBlink'
     *
     * @param  string $serial Serial (required)
     * @param  string $leds_blink_id Leds blink ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsLedsBlink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeviceLiveToolsLedsBlinkRequest($serial, $leds_blink_id, string $contentType = self::contentTypes['getDeviceLiveToolsLedsBlink'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling getDeviceLiveToolsLedsBlink'
            );
        }

        // verify the required parameter 'leds_blink_id' is set
        if ($leds_blink_id === null || (is_array($leds_blink_id) && count($leds_blink_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $leds_blink_id when calling getDeviceLiveToolsLedsBlink'
            );
        }


        $resourcePath = '/devices/{serial}/liveTools/leds/blink/{ledsBlinkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }
        // path params
        if ($leds_blink_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ledsBlinkId' . '}',
                ObjectSerializer::toPathValue($leds_blink_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeviceLiveToolsPing
     *
     * Return a ping job
     *
     * @param  string $serial Serial (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsPing'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\DevicesSerialLiveToolsPingPostRequestMessage
     */
    public function getDeviceLiveToolsPing($serial, $id, string $contentType = self::contentTypes['getDeviceLiveToolsPing'][0])
    {
        list($response) = $this->getDeviceLiveToolsPingWithHttpInfo($serial, $id, $contentType);
        return $response;
    }

    /**
     * Operation getDeviceLiveToolsPingWithHttpInfo
     *
     * Return a ping job
     *
     * @param  string $serial Serial (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsPing'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\DevicesSerialLiveToolsPingPostRequestMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeviceLiveToolsPingWithHttpInfo($serial, $id, string $contentType = self::contentTypes['getDeviceLiveToolsPing'][0])
    {
        $request = $this->getDeviceLiveToolsPingRequest($serial, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\DevicesSerialLiveToolsPingPostRequestMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\DevicesSerialLiveToolsPingPostRequestMessage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\DevicesSerialLiveToolsPingPostRequestMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\DevicesSerialLiveToolsPingPostRequestMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\DevicesSerialLiveToolsPingPostRequestMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeviceLiveToolsPingAsync
     *
     * Return a ping job
     *
     * @param  string $serial Serial (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsPing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceLiveToolsPingAsync($serial, $id, string $contentType = self::contentTypes['getDeviceLiveToolsPing'][0])
    {
        return $this->getDeviceLiveToolsPingAsyncWithHttpInfo($serial, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeviceLiveToolsPingAsyncWithHttpInfo
     *
     * Return a ping job
     *
     * @param  string $serial Serial (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsPing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceLiveToolsPingAsyncWithHttpInfo($serial, $id, string $contentType = self::contentTypes['getDeviceLiveToolsPing'][0])
    {
        $returnType = '\Meraki\Model\DevicesSerialLiveToolsPingPostRequestMessage';
        $request = $this->getDeviceLiveToolsPingRequest($serial, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeviceLiveToolsPing'
     *
     * @param  string $serial Serial (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsPing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeviceLiveToolsPingRequest($serial, $id, string $contentType = self::contentTypes['getDeviceLiveToolsPing'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling getDeviceLiveToolsPing'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDeviceLiveToolsPing'
            );
        }


        $resourcePath = '/devices/{serial}/liveTools/ping/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeviceLiveToolsPingDevice
     *
     * Return a ping device job
     *
     * @param  string $serial Serial (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsPingDevice'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceLiveToolsPingDevice200Response
     */
    public function getDeviceLiveToolsPingDevice($serial, $id, string $contentType = self::contentTypes['getDeviceLiveToolsPingDevice'][0])
    {
        list($response) = $this->getDeviceLiveToolsPingDeviceWithHttpInfo($serial, $id, $contentType);
        return $response;
    }

    /**
     * Operation getDeviceLiveToolsPingDeviceWithHttpInfo
     *
     * Return a ping device job
     *
     * @param  string $serial Serial (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsPingDevice'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceLiveToolsPingDevice200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeviceLiveToolsPingDeviceWithHttpInfo($serial, $id, string $contentType = self::contentTypes['getDeviceLiveToolsPingDevice'][0])
    {
        $request = $this->getDeviceLiveToolsPingDeviceRequest($serial, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceLiveToolsPingDevice200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceLiveToolsPingDevice200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceLiveToolsPingDevice200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceLiveToolsPingDevice200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceLiveToolsPingDevice200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeviceLiveToolsPingDeviceAsync
     *
     * Return a ping device job
     *
     * @param  string $serial Serial (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsPingDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceLiveToolsPingDeviceAsync($serial, $id, string $contentType = self::contentTypes['getDeviceLiveToolsPingDevice'][0])
    {
        return $this->getDeviceLiveToolsPingDeviceAsyncWithHttpInfo($serial, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeviceLiveToolsPingDeviceAsyncWithHttpInfo
     *
     * Return a ping device job
     *
     * @param  string $serial Serial (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsPingDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceLiveToolsPingDeviceAsyncWithHttpInfo($serial, $id, string $contentType = self::contentTypes['getDeviceLiveToolsPingDevice'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceLiveToolsPingDevice200Response';
        $request = $this->getDeviceLiveToolsPingDeviceRequest($serial, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeviceLiveToolsPingDevice'
     *
     * @param  string $serial Serial (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsPingDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeviceLiveToolsPingDeviceRequest($serial, $id, string $contentType = self::contentTypes['getDeviceLiveToolsPingDevice'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling getDeviceLiveToolsPingDevice'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDeviceLiveToolsPingDevice'
            );
        }


        $resourcePath = '/devices/{serial}/liveTools/pingDevice/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeviceLiveToolsThroughputTest
     *
     * Return a throughput test job
     *
     * @param  string $serial Serial (required)
     * @param  string $throughput_test_id Throughput test ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsThroughputTest'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\DevicesSerialLiveToolsThroughputTestPostRequestMessage
     */
    public function getDeviceLiveToolsThroughputTest($serial, $throughput_test_id, string $contentType = self::contentTypes['getDeviceLiveToolsThroughputTest'][0])
    {
        list($response) = $this->getDeviceLiveToolsThroughputTestWithHttpInfo($serial, $throughput_test_id, $contentType);
        return $response;
    }

    /**
     * Operation getDeviceLiveToolsThroughputTestWithHttpInfo
     *
     * Return a throughput test job
     *
     * @param  string $serial Serial (required)
     * @param  string $throughput_test_id Throughput test ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsThroughputTest'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\DevicesSerialLiveToolsThroughputTestPostRequestMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeviceLiveToolsThroughputTestWithHttpInfo($serial, $throughput_test_id, string $contentType = self::contentTypes['getDeviceLiveToolsThroughputTest'][0])
    {
        $request = $this->getDeviceLiveToolsThroughputTestRequest($serial, $throughput_test_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\DevicesSerialLiveToolsThroughputTestPostRequestMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\DevicesSerialLiveToolsThroughputTestPostRequestMessage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\DevicesSerialLiveToolsThroughputTestPostRequestMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\DevicesSerialLiveToolsThroughputTestPostRequestMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\DevicesSerialLiveToolsThroughputTestPostRequestMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeviceLiveToolsThroughputTestAsync
     *
     * Return a throughput test job
     *
     * @param  string $serial Serial (required)
     * @param  string $throughput_test_id Throughput test ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsThroughputTest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceLiveToolsThroughputTestAsync($serial, $throughput_test_id, string $contentType = self::contentTypes['getDeviceLiveToolsThroughputTest'][0])
    {
        return $this->getDeviceLiveToolsThroughputTestAsyncWithHttpInfo($serial, $throughput_test_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeviceLiveToolsThroughputTestAsyncWithHttpInfo
     *
     * Return a throughput test job
     *
     * @param  string $serial Serial (required)
     * @param  string $throughput_test_id Throughput test ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsThroughputTest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceLiveToolsThroughputTestAsyncWithHttpInfo($serial, $throughput_test_id, string $contentType = self::contentTypes['getDeviceLiveToolsThroughputTest'][0])
    {
        $returnType = '\Meraki\Model\DevicesSerialLiveToolsThroughputTestPostRequestMessage';
        $request = $this->getDeviceLiveToolsThroughputTestRequest($serial, $throughput_test_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeviceLiveToolsThroughputTest'
     *
     * @param  string $serial Serial (required)
     * @param  string $throughput_test_id Throughput test ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsThroughputTest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeviceLiveToolsThroughputTestRequest($serial, $throughput_test_id, string $contentType = self::contentTypes['getDeviceLiveToolsThroughputTest'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling getDeviceLiveToolsThroughputTest'
            );
        }

        // verify the required parameter 'throughput_test_id' is set
        if ($throughput_test_id === null || (is_array($throughput_test_id) && count($throughput_test_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $throughput_test_id when calling getDeviceLiveToolsThroughputTest'
            );
        }


        $resourcePath = '/devices/{serial}/liveTools/throughputTest/{throughputTestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }
        // path params
        if ($throughput_test_id !== null) {
            $resourcePath = str_replace(
                '{' . 'throughputTestId' . '}',
                ObjectSerializer::toPathValue($throughput_test_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeviceLiveToolsWakeOnLan
     *
     * Return a Wake-on-LAN job
     *
     * @param  string $serial Serial (required)
     * @param  string $wake_on_lan_id Wake on lan ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsWakeOnLan'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\DevicesSerialLiveToolsWakeOnLanPostRequestMessage
     */
    public function getDeviceLiveToolsWakeOnLan($serial, $wake_on_lan_id, string $contentType = self::contentTypes['getDeviceLiveToolsWakeOnLan'][0])
    {
        list($response) = $this->getDeviceLiveToolsWakeOnLanWithHttpInfo($serial, $wake_on_lan_id, $contentType);
        return $response;
    }

    /**
     * Operation getDeviceLiveToolsWakeOnLanWithHttpInfo
     *
     * Return a Wake-on-LAN job
     *
     * @param  string $serial Serial (required)
     * @param  string $wake_on_lan_id Wake on lan ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsWakeOnLan'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\DevicesSerialLiveToolsWakeOnLanPostRequestMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeviceLiveToolsWakeOnLanWithHttpInfo($serial, $wake_on_lan_id, string $contentType = self::contentTypes['getDeviceLiveToolsWakeOnLan'][0])
    {
        $request = $this->getDeviceLiveToolsWakeOnLanRequest($serial, $wake_on_lan_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\DevicesSerialLiveToolsWakeOnLanPostRequestMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\DevicesSerialLiveToolsWakeOnLanPostRequestMessage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\DevicesSerialLiveToolsWakeOnLanPostRequestMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\DevicesSerialLiveToolsWakeOnLanPostRequestMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\DevicesSerialLiveToolsWakeOnLanPostRequestMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeviceLiveToolsWakeOnLanAsync
     *
     * Return a Wake-on-LAN job
     *
     * @param  string $serial Serial (required)
     * @param  string $wake_on_lan_id Wake on lan ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsWakeOnLan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceLiveToolsWakeOnLanAsync($serial, $wake_on_lan_id, string $contentType = self::contentTypes['getDeviceLiveToolsWakeOnLan'][0])
    {
        return $this->getDeviceLiveToolsWakeOnLanAsyncWithHttpInfo($serial, $wake_on_lan_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeviceLiveToolsWakeOnLanAsyncWithHttpInfo
     *
     * Return a Wake-on-LAN job
     *
     * @param  string $serial Serial (required)
     * @param  string $wake_on_lan_id Wake on lan ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsWakeOnLan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceLiveToolsWakeOnLanAsyncWithHttpInfo($serial, $wake_on_lan_id, string $contentType = self::contentTypes['getDeviceLiveToolsWakeOnLan'][0])
    {
        $returnType = '\Meraki\Model\DevicesSerialLiveToolsWakeOnLanPostRequestMessage';
        $request = $this->getDeviceLiveToolsWakeOnLanRequest($serial, $wake_on_lan_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeviceLiveToolsWakeOnLan'
     *
     * @param  string $serial Serial (required)
     * @param  string $wake_on_lan_id Wake on lan ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceLiveToolsWakeOnLan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeviceLiveToolsWakeOnLanRequest($serial, $wake_on_lan_id, string $contentType = self::contentTypes['getDeviceLiveToolsWakeOnLan'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling getDeviceLiveToolsWakeOnLan'
            );
        }

        // verify the required parameter 'wake_on_lan_id' is set
        if ($wake_on_lan_id === null || (is_array($wake_on_lan_id) && count($wake_on_lan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wake_on_lan_id when calling getDeviceLiveToolsWakeOnLan'
            );
        }


        $resourcePath = '/devices/{serial}/liveTools/wakeOnLan/{wakeOnLanId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }
        // path params
        if ($wake_on_lan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wakeOnLanId' . '}',
                ObjectSerializer::toPathValue($wake_on_lan_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rebootDevice
     *
     * Reboot a device
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rebootDevice'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\RebootDevice202Response
     */
    public function rebootDevice($serial, string $contentType = self::contentTypes['rebootDevice'][0])
    {
        list($response) = $this->rebootDeviceWithHttpInfo($serial, $contentType);
        return $response;
    }

    /**
     * Operation rebootDeviceWithHttpInfo
     *
     * Reboot a device
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rebootDevice'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\RebootDevice202Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function rebootDeviceWithHttpInfo($serial, string $contentType = self::contentTypes['rebootDevice'][0])
    {
        $request = $this->rebootDeviceRequest($serial, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('\Meraki\Model\RebootDevice202Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\RebootDevice202Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\RebootDevice202Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\RebootDevice202Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\RebootDevice202Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rebootDeviceAsync
     *
     * Reboot a device
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rebootDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rebootDeviceAsync($serial, string $contentType = self::contentTypes['rebootDevice'][0])
    {
        return $this->rebootDeviceAsyncWithHttpInfo($serial, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rebootDeviceAsyncWithHttpInfo
     *
     * Reboot a device
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rebootDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rebootDeviceAsyncWithHttpInfo($serial, string $contentType = self::contentTypes['rebootDevice'][0])
    {
        $returnType = '\Meraki\Model\RebootDevice202Response';
        $request = $this->rebootDeviceRequest($serial, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rebootDevice'
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rebootDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rebootDeviceRequest($serial, string $contentType = self::contentTypes['rebootDevice'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling rebootDevice'
            );
        }


        $resourcePath = '/devices/{serial}/reboot';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
