<?php
/**
 * TrustedServersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Meraki\ApiException;
use Meraki\Configuration;
use Meraki\HeaderSelector;
use Meraki\ObjectSerializer;

/**
 * TrustedServersApi Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TrustedServersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer' => [
            'application/json',
        ],
        'deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer' => [
            'application/json',
        ],
        'getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers' => [
            'application/json',
        ],
        'updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer
     *
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest $create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner
     */
    public function createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer($network_id, $create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request, string $contentType = self::contentTypes['createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'][0])
    {
        list($response) = $this->createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerWithHttpInfo($network_id, $create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request, $contentType);
        return $response;
    }

    /**
     * Operation createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerWithHttpInfo
     *
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest $create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerWithHttpInfo($network_id, $create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request, string $contentType = self::contentTypes['createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'][0])
    {
        $request = $this->createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest($network_id, $create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerAsync
     *
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest $create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerAsync($network_id, $create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request, string $contentType = self::contentTypes['createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'][0])
    {
        return $this->createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerAsyncWithHttpInfo($network_id, $create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerAsyncWithHttpInfo
     *
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest $create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerAsyncWithHttpInfo($network_id, $create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request, string $contentType = self::contentTypes['createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner';
        $request = $this->createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest($network_id, $create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest $create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest($network_id, $create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request, string $contentType = self::contentTypes['createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'
            );
        }

        // verify the required parameter 'create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request' is set
        if ($create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request === null || (is_array($create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request) && count($create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request when calling createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request));
            } else {
                $httpBody = $create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer
     *
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $trusted_server_id Trusted server ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer($network_id, $trusted_server_id, string $contentType = self::contentTypes['deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'][0])
    {
        $this->deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerWithHttpInfo($network_id, $trusted_server_id, $contentType);
    }

    /**
     * Operation deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerWithHttpInfo
     *
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $trusted_server_id Trusted server ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerWithHttpInfo($network_id, $trusted_server_id, string $contentType = self::contentTypes['deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'][0])
    {
        $request = $this->deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest($network_id, $trusted_server_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerAsync
     *
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $trusted_server_id Trusted server ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerAsync($network_id, $trusted_server_id, string $contentType = self::contentTypes['deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'][0])
    {
        return $this->deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerAsyncWithHttpInfo($network_id, $trusted_server_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerAsyncWithHttpInfo
     *
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $trusted_server_id Trusted server ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerAsyncWithHttpInfo($network_id, $trusted_server_id, string $contentType = self::contentTypes['deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'][0])
    {
        $returnType = '';
        $request = $this->deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest($network_id, $trusted_server_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $trusted_server_id Trusted server ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest($network_id, $trusted_server_id, string $contentType = self::contentTypes['deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'
            );
        }

        // verify the required parameter 'trusted_server_id' is set
        if ($trusted_server_id === null || (is_array($trusted_server_id) && count($trusted_server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusted_server_id when calling deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'
            );
        }


        $resourcePath = '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($trusted_server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'trustedServerId' . '}',
                ObjectSerializer::toPathValue($trusted_server_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers
     *
     * Return the list of servers trusted by Dynamic ARP Inspection on this network
     *
     * @param  string $network_id Network ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner[]
     */
    public function getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers($network_id, $per_page = null, $starting_after = null, $ending_before = null, string $contentType = self::contentTypes['getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers'][0])
    {
        list($response) = $this->getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersWithHttpInfo($network_id, $per_page, $starting_after, $ending_before, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersWithHttpInfo
     *
     * Return the list of servers trusted by Dynamic ARP Inspection on this network
     *
     * @param  string $network_id Network ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersWithHttpInfo($network_id, $per_page = null, $starting_after = null, $ending_before = null, string $contentType = self::contentTypes['getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers'][0])
    {
        $request = $this->getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest($network_id, $per_page, $starting_after, $ending_before, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersAsync
     *
     * Return the list of servers trusted by Dynamic ARP Inspection on this network
     *
     * @param  string $network_id Network ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersAsync($network_id, $per_page = null, $starting_after = null, $ending_before = null, string $contentType = self::contentTypes['getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers'][0])
    {
        return $this->getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersAsyncWithHttpInfo($network_id, $per_page, $starting_after, $ending_before, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersAsyncWithHttpInfo
     *
     * Return the list of servers trusted by Dynamic ARP Inspection on this network
     *
     * @param  string $network_id Network ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersAsyncWithHttpInfo($network_id, $per_page = null, $starting_after = null, $ending_before = null, string $contentType = self::contentTypes['getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner[]';
        $request = $this->getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest($network_id, $per_page, $starting_after, $ending_before, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers'
     *
     * @param  string $network_id Network ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest($network_id, $per_page = null, $starting_after = null, $ending_before = null, string $contentType = self::contentTypes['getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers'
            );
        }





        $resourcePath = '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'perPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starting_after,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ending_before,
            'endingBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer
     *
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $trusted_server_id Trusted server ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest|null $update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner
     */
    public function updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer($network_id, $trusted_server_id, $update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request = null, string $contentType = self::contentTypes['updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'][0])
    {
        list($response) = $this->updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerWithHttpInfo($network_id, $trusted_server_id, $update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerWithHttpInfo
     *
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $trusted_server_id Trusted server ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest|null $update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerWithHttpInfo($network_id, $trusted_server_id, $update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request = null, string $contentType = self::contentTypes['updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'][0])
    {
        $request = $this->updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest($network_id, $trusted_server_id, $update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerAsync
     *
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $trusted_server_id Trusted server ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest|null $update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerAsync($network_id, $trusted_server_id, $update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request = null, string $contentType = self::contentTypes['updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'][0])
    {
        return $this->updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerAsyncWithHttpInfo($network_id, $trusted_server_id, $update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerAsyncWithHttpInfo
     *
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $trusted_server_id Trusted server ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest|null $update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerAsyncWithHttpInfo($network_id, $trusted_server_id, $update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request = null, string $contentType = self::contentTypes['updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ResponseInner';
        $request = $this->updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest($network_id, $trusted_server_id, $update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $trusted_server_id Trusted server ID (required)
     * @param  \Meraki\Model\UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest|null $update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest($network_id, $trusted_server_id, $update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request = null, string $contentType = self::contentTypes['updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'
            );
        }

        // verify the required parameter 'trusted_server_id' is set
        if ($trusted_server_id === null || (is_array($trusted_server_id) && count($trusted_server_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusted_server_id when calling updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer'
            );
        }



        $resourcePath = '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($trusted_server_id !== null) {
            $resourcePath = str_replace(
                '{' . 'trustedServerId' . '}',
                ObjectSerializer::toPathValue($trusted_server_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request));
            } else {
                $httpBody = $update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
