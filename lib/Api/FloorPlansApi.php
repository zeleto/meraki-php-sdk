<?php
/**
 * FloorPlansApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Meraki\ApiException;
use Meraki\Configuration;
use Meraki\HeaderSelector;
use Meraki\ObjectSerializer;

/**
 * FloorPlansApi Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FloorPlansApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'batchNetworkFloorPlansAutoLocateJobs' => [
            'application/json',
        ],
        'batchNetworkFloorPlansDevicesUpdate' => [
            'application/json',
        ],
        'cancelNetworkFloorPlansAutoLocateJob' => [
            'application/json',
        ],
        'createNetworkFloorPlan' => [
            'application/json',
        ],
        'deleteNetworkFloorPlan' => [
            'application/json',
        ],
        'getNetworkFloorPlan' => [
            'application/json',
        ],
        'getNetworkFloorPlans' => [
            'application/json',
        ],
        'getOrganizationFloorPlansAutoLocateDevices' => [
            'application/json',
        ],
        'getOrganizationFloorPlansAutoLocateStatuses' => [
            'application/json',
        ],
        'publishNetworkFloorPlansAutoLocateJob' => [
            'application/json',
        ],
        'recalculateNetworkFloorPlansAutoLocateJob' => [
            'application/json',
        ],
        'updateNetworkFloorPlan' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation batchNetworkFloorPlansAutoLocateJobs
     *
     * Schedule auto locate jobs for one or more floor plans in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\BatchNetworkFloorPlansAutoLocateJobsRequest $batch_network_floor_plans_auto_locate_jobs_request batch_network_floor_plans_auto_locate_jobs_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['batchNetworkFloorPlansAutoLocateJobs'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\BatchNetworkFloorPlansAutoLocateJobs200Response
     */
    public function batchNetworkFloorPlansAutoLocateJobs($network_id, $batch_network_floor_plans_auto_locate_jobs_request, string $contentType = self::contentTypes['batchNetworkFloorPlansAutoLocateJobs'][0])
    {
        list($response) = $this->batchNetworkFloorPlansAutoLocateJobsWithHttpInfo($network_id, $batch_network_floor_plans_auto_locate_jobs_request, $contentType);
        return $response;
    }

    /**
     * Operation batchNetworkFloorPlansAutoLocateJobsWithHttpInfo
     *
     * Schedule auto locate jobs for one or more floor plans in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\BatchNetworkFloorPlansAutoLocateJobsRequest $batch_network_floor_plans_auto_locate_jobs_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['batchNetworkFloorPlansAutoLocateJobs'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\BatchNetworkFloorPlansAutoLocateJobs200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchNetworkFloorPlansAutoLocateJobsWithHttpInfo($network_id, $batch_network_floor_plans_auto_locate_jobs_request, string $contentType = self::contentTypes['batchNetworkFloorPlansAutoLocateJobs'][0])
    {
        $request = $this->batchNetworkFloorPlansAutoLocateJobsRequest($network_id, $batch_network_floor_plans_auto_locate_jobs_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\BatchNetworkFloorPlansAutoLocateJobs200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\BatchNetworkFloorPlansAutoLocateJobs200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\BatchNetworkFloorPlansAutoLocateJobs200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\BatchNetworkFloorPlansAutoLocateJobs200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\BatchNetworkFloorPlansAutoLocateJobs200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation batchNetworkFloorPlansAutoLocateJobsAsync
     *
     * Schedule auto locate jobs for one or more floor plans in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\BatchNetworkFloorPlansAutoLocateJobsRequest $batch_network_floor_plans_auto_locate_jobs_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['batchNetworkFloorPlansAutoLocateJobs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchNetworkFloorPlansAutoLocateJobsAsync($network_id, $batch_network_floor_plans_auto_locate_jobs_request, string $contentType = self::contentTypes['batchNetworkFloorPlansAutoLocateJobs'][0])
    {
        return $this->batchNetworkFloorPlansAutoLocateJobsAsyncWithHttpInfo($network_id, $batch_network_floor_plans_auto_locate_jobs_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchNetworkFloorPlansAutoLocateJobsAsyncWithHttpInfo
     *
     * Schedule auto locate jobs for one or more floor plans in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\BatchNetworkFloorPlansAutoLocateJobsRequest $batch_network_floor_plans_auto_locate_jobs_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['batchNetworkFloorPlansAutoLocateJobs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchNetworkFloorPlansAutoLocateJobsAsyncWithHttpInfo($network_id, $batch_network_floor_plans_auto_locate_jobs_request, string $contentType = self::contentTypes['batchNetworkFloorPlansAutoLocateJobs'][0])
    {
        $returnType = '\Meraki\Model\BatchNetworkFloorPlansAutoLocateJobs200Response';
        $request = $this->batchNetworkFloorPlansAutoLocateJobsRequest($network_id, $batch_network_floor_plans_auto_locate_jobs_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchNetworkFloorPlansAutoLocateJobs'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\BatchNetworkFloorPlansAutoLocateJobsRequest $batch_network_floor_plans_auto_locate_jobs_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['batchNetworkFloorPlansAutoLocateJobs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function batchNetworkFloorPlansAutoLocateJobsRequest($network_id, $batch_network_floor_plans_auto_locate_jobs_request, string $contentType = self::contentTypes['batchNetworkFloorPlansAutoLocateJobs'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling batchNetworkFloorPlansAutoLocateJobs'
            );
        }

        // verify the required parameter 'batch_network_floor_plans_auto_locate_jobs_request' is set
        if ($batch_network_floor_plans_auto_locate_jobs_request === null || (is_array($batch_network_floor_plans_auto_locate_jobs_request) && count($batch_network_floor_plans_auto_locate_jobs_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_network_floor_plans_auto_locate_jobs_request when calling batchNetworkFloorPlansAutoLocateJobs'
            );
        }


        $resourcePath = '/networks/{networkId}/floorPlans/autoLocate/jobs/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($batch_network_floor_plans_auto_locate_jobs_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($batch_network_floor_plans_auto_locate_jobs_request));
            } else {
                $httpBody = $batch_network_floor_plans_auto_locate_jobs_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation batchNetworkFloorPlansDevicesUpdate
     *
     * Update floorplan assignments for a batch of devices
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\BatchNetworkFloorPlansDevicesUpdateRequest $batch_network_floor_plans_devices_update_request batch_network_floor_plans_devices_update_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['batchNetworkFloorPlansDevicesUpdate'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\BatchNetworkFloorPlansDevicesUpdate200Response
     */
    public function batchNetworkFloorPlansDevicesUpdate($network_id, $batch_network_floor_plans_devices_update_request, string $contentType = self::contentTypes['batchNetworkFloorPlansDevicesUpdate'][0])
    {
        list($response) = $this->batchNetworkFloorPlansDevicesUpdateWithHttpInfo($network_id, $batch_network_floor_plans_devices_update_request, $contentType);
        return $response;
    }

    /**
     * Operation batchNetworkFloorPlansDevicesUpdateWithHttpInfo
     *
     * Update floorplan assignments for a batch of devices
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\BatchNetworkFloorPlansDevicesUpdateRequest $batch_network_floor_plans_devices_update_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['batchNetworkFloorPlansDevicesUpdate'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\BatchNetworkFloorPlansDevicesUpdate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchNetworkFloorPlansDevicesUpdateWithHttpInfo($network_id, $batch_network_floor_plans_devices_update_request, string $contentType = self::contentTypes['batchNetworkFloorPlansDevicesUpdate'][0])
    {
        $request = $this->batchNetworkFloorPlansDevicesUpdateRequest($network_id, $batch_network_floor_plans_devices_update_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\BatchNetworkFloorPlansDevicesUpdate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\BatchNetworkFloorPlansDevicesUpdate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\BatchNetworkFloorPlansDevicesUpdate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\BatchNetworkFloorPlansDevicesUpdate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\BatchNetworkFloorPlansDevicesUpdate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation batchNetworkFloorPlansDevicesUpdateAsync
     *
     * Update floorplan assignments for a batch of devices
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\BatchNetworkFloorPlansDevicesUpdateRequest $batch_network_floor_plans_devices_update_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['batchNetworkFloorPlansDevicesUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchNetworkFloorPlansDevicesUpdateAsync($network_id, $batch_network_floor_plans_devices_update_request, string $contentType = self::contentTypes['batchNetworkFloorPlansDevicesUpdate'][0])
    {
        return $this->batchNetworkFloorPlansDevicesUpdateAsyncWithHttpInfo($network_id, $batch_network_floor_plans_devices_update_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchNetworkFloorPlansDevicesUpdateAsyncWithHttpInfo
     *
     * Update floorplan assignments for a batch of devices
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\BatchNetworkFloorPlansDevicesUpdateRequest $batch_network_floor_plans_devices_update_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['batchNetworkFloorPlansDevicesUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchNetworkFloorPlansDevicesUpdateAsyncWithHttpInfo($network_id, $batch_network_floor_plans_devices_update_request, string $contentType = self::contentTypes['batchNetworkFloorPlansDevicesUpdate'][0])
    {
        $returnType = '\Meraki\Model\BatchNetworkFloorPlansDevicesUpdate200Response';
        $request = $this->batchNetworkFloorPlansDevicesUpdateRequest($network_id, $batch_network_floor_plans_devices_update_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchNetworkFloorPlansDevicesUpdate'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\BatchNetworkFloorPlansDevicesUpdateRequest $batch_network_floor_plans_devices_update_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['batchNetworkFloorPlansDevicesUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function batchNetworkFloorPlansDevicesUpdateRequest($network_id, $batch_network_floor_plans_devices_update_request, string $contentType = self::contentTypes['batchNetworkFloorPlansDevicesUpdate'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling batchNetworkFloorPlansDevicesUpdate'
            );
        }

        // verify the required parameter 'batch_network_floor_plans_devices_update_request' is set
        if ($batch_network_floor_plans_devices_update_request === null || (is_array($batch_network_floor_plans_devices_update_request) && count($batch_network_floor_plans_devices_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_network_floor_plans_devices_update_request when calling batchNetworkFloorPlansDevicesUpdate'
            );
        }


        $resourcePath = '/networks/{networkId}/floorPlans/devices/batchUpdate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($batch_network_floor_plans_devices_update_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($batch_network_floor_plans_devices_update_request));
            } else {
                $httpBody = $batch_network_floor_plans_devices_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelNetworkFloorPlansAutoLocateJob
     *
     * Cancel a scheduled or running auto locate job
     *
     * @param  string $network_id Network ID (required)
     * @param  string $job_id Job ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelNetworkFloorPlansAutoLocateJob'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelNetworkFloorPlansAutoLocateJob($network_id, $job_id, string $contentType = self::contentTypes['cancelNetworkFloorPlansAutoLocateJob'][0])
    {
        $this->cancelNetworkFloorPlansAutoLocateJobWithHttpInfo($network_id, $job_id, $contentType);
    }

    /**
     * Operation cancelNetworkFloorPlansAutoLocateJobWithHttpInfo
     *
     * Cancel a scheduled or running auto locate job
     *
     * @param  string $network_id Network ID (required)
     * @param  string $job_id Job ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelNetworkFloorPlansAutoLocateJob'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelNetworkFloorPlansAutoLocateJobWithHttpInfo($network_id, $job_id, string $contentType = self::contentTypes['cancelNetworkFloorPlansAutoLocateJob'][0])
    {
        $request = $this->cancelNetworkFloorPlansAutoLocateJobRequest($network_id, $job_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation cancelNetworkFloorPlansAutoLocateJobAsync
     *
     * Cancel a scheduled or running auto locate job
     *
     * @param  string $network_id Network ID (required)
     * @param  string $job_id Job ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelNetworkFloorPlansAutoLocateJob'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelNetworkFloorPlansAutoLocateJobAsync($network_id, $job_id, string $contentType = self::contentTypes['cancelNetworkFloorPlansAutoLocateJob'][0])
    {
        return $this->cancelNetworkFloorPlansAutoLocateJobAsyncWithHttpInfo($network_id, $job_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelNetworkFloorPlansAutoLocateJobAsyncWithHttpInfo
     *
     * Cancel a scheduled or running auto locate job
     *
     * @param  string $network_id Network ID (required)
     * @param  string $job_id Job ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelNetworkFloorPlansAutoLocateJob'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelNetworkFloorPlansAutoLocateJobAsyncWithHttpInfo($network_id, $job_id, string $contentType = self::contentTypes['cancelNetworkFloorPlansAutoLocateJob'][0])
    {
        $returnType = '';
        $request = $this->cancelNetworkFloorPlansAutoLocateJobRequest($network_id, $job_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelNetworkFloorPlansAutoLocateJob'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $job_id Job ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelNetworkFloorPlansAutoLocateJob'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelNetworkFloorPlansAutoLocateJobRequest($network_id, $job_id, string $contentType = self::contentTypes['cancelNetworkFloorPlansAutoLocateJob'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling cancelNetworkFloorPlansAutoLocateJob'
            );
        }

        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling cancelNetworkFloorPlansAutoLocateJob'
            );
        }


        $resourcePath = '/networks/{networkId}/floorPlans/autoLocate/jobs/{jobId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobId' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNetworkFloorPlan
     *
     * Upload a floor plan
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkFloorPlanRequest $create_network_floor_plan_request create_network_floor_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkFloorPlans200ResponseInner
     */
    public function createNetworkFloorPlan($network_id, $create_network_floor_plan_request, string $contentType = self::contentTypes['createNetworkFloorPlan'][0])
    {
        list($response) = $this->createNetworkFloorPlanWithHttpInfo($network_id, $create_network_floor_plan_request, $contentType);
        return $response;
    }

    /**
     * Operation createNetworkFloorPlanWithHttpInfo
     *
     * Upload a floor plan
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkFloorPlanRequest $create_network_floor_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkFloorPlans200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNetworkFloorPlanWithHttpInfo($network_id, $create_network_floor_plan_request, string $contentType = self::contentTypes['createNetworkFloorPlan'][0])
    {
        $request = $this->createNetworkFloorPlanRequest($network_id, $create_network_floor_plan_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\GetNetworkFloorPlans200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkFloorPlans200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkFloorPlans200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkFloorPlans200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkFloorPlans200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNetworkFloorPlanAsync
     *
     * Upload a floor plan
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkFloorPlanRequest $create_network_floor_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkFloorPlanAsync($network_id, $create_network_floor_plan_request, string $contentType = self::contentTypes['createNetworkFloorPlan'][0])
    {
        return $this->createNetworkFloorPlanAsyncWithHttpInfo($network_id, $create_network_floor_plan_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNetworkFloorPlanAsyncWithHttpInfo
     *
     * Upload a floor plan
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkFloorPlanRequest $create_network_floor_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkFloorPlanAsyncWithHttpInfo($network_id, $create_network_floor_plan_request, string $contentType = self::contentTypes['createNetworkFloorPlan'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkFloorPlans200ResponseInner';
        $request = $this->createNetworkFloorPlanRequest($network_id, $create_network_floor_plan_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNetworkFloorPlan'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkFloorPlanRequest $create_network_floor_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNetworkFloorPlanRequest($network_id, $create_network_floor_plan_request, string $contentType = self::contentTypes['createNetworkFloorPlan'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling createNetworkFloorPlan'
            );
        }

        // verify the required parameter 'create_network_floor_plan_request' is set
        if ($create_network_floor_plan_request === null || (is_array($create_network_floor_plan_request) && count($create_network_floor_plan_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_network_floor_plan_request when calling createNetworkFloorPlan'
            );
        }


        $resourcePath = '/networks/{networkId}/floorPlans';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_network_floor_plan_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_network_floor_plan_request));
            } else {
                $httpBody = $create_network_floor_plan_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNetworkFloorPlan
     *
     * Destroy a floor plan
     *
     * @param  string $network_id Network ID (required)
     * @param  string $floor_plan_id Floor plan ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkFloorPlans200ResponseInner
     */
    public function deleteNetworkFloorPlan($network_id, $floor_plan_id, string $contentType = self::contentTypes['deleteNetworkFloorPlan'][0])
    {
        list($response) = $this->deleteNetworkFloorPlanWithHttpInfo($network_id, $floor_plan_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteNetworkFloorPlanWithHttpInfo
     *
     * Destroy a floor plan
     *
     * @param  string $network_id Network ID (required)
     * @param  string $floor_plan_id Floor plan ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkFloorPlans200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNetworkFloorPlanWithHttpInfo($network_id, $floor_plan_id, string $contentType = self::contentTypes['deleteNetworkFloorPlan'][0])
    {
        $request = $this->deleteNetworkFloorPlanRequest($network_id, $floor_plan_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 204:
                    if ('\Meraki\Model\GetNetworkFloorPlans200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkFloorPlans200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkFloorPlans200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkFloorPlans200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkFloorPlans200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNetworkFloorPlanAsync
     *
     * Destroy a floor plan
     *
     * @param  string $network_id Network ID (required)
     * @param  string $floor_plan_id Floor plan ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkFloorPlanAsync($network_id, $floor_plan_id, string $contentType = self::contentTypes['deleteNetworkFloorPlan'][0])
    {
        return $this->deleteNetworkFloorPlanAsyncWithHttpInfo($network_id, $floor_plan_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNetworkFloorPlanAsyncWithHttpInfo
     *
     * Destroy a floor plan
     *
     * @param  string $network_id Network ID (required)
     * @param  string $floor_plan_id Floor plan ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkFloorPlanAsyncWithHttpInfo($network_id, $floor_plan_id, string $contentType = self::contentTypes['deleteNetworkFloorPlan'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkFloorPlans200ResponseInner';
        $request = $this->deleteNetworkFloorPlanRequest($network_id, $floor_plan_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNetworkFloorPlan'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $floor_plan_id Floor plan ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNetworkFloorPlanRequest($network_id, $floor_plan_id, string $contentType = self::contentTypes['deleteNetworkFloorPlan'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling deleteNetworkFloorPlan'
            );
        }

        // verify the required parameter 'floor_plan_id' is set
        if ($floor_plan_id === null || (is_array($floor_plan_id) && count($floor_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $floor_plan_id when calling deleteNetworkFloorPlan'
            );
        }


        $resourcePath = '/networks/{networkId}/floorPlans/{floorPlanId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($floor_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'floorPlanId' . '}',
                ObjectSerializer::toPathValue($floor_plan_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkFloorPlan
     *
     * Find a floor plan by ID
     *
     * @param  string $network_id Network ID (required)
     * @param  string $floor_plan_id Floor plan ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkFloorPlans200ResponseInner
     */
    public function getNetworkFloorPlan($network_id, $floor_plan_id, string $contentType = self::contentTypes['getNetworkFloorPlan'][0])
    {
        list($response) = $this->getNetworkFloorPlanWithHttpInfo($network_id, $floor_plan_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkFloorPlanWithHttpInfo
     *
     * Find a floor plan by ID
     *
     * @param  string $network_id Network ID (required)
     * @param  string $floor_plan_id Floor plan ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkFloorPlans200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkFloorPlanWithHttpInfo($network_id, $floor_plan_id, string $contentType = self::contentTypes['getNetworkFloorPlan'][0])
    {
        $request = $this->getNetworkFloorPlanRequest($network_id, $floor_plan_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkFloorPlans200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkFloorPlans200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkFloorPlans200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkFloorPlans200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkFloorPlans200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkFloorPlanAsync
     *
     * Find a floor plan by ID
     *
     * @param  string $network_id Network ID (required)
     * @param  string $floor_plan_id Floor plan ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkFloorPlanAsync($network_id, $floor_plan_id, string $contentType = self::contentTypes['getNetworkFloorPlan'][0])
    {
        return $this->getNetworkFloorPlanAsyncWithHttpInfo($network_id, $floor_plan_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkFloorPlanAsyncWithHttpInfo
     *
     * Find a floor plan by ID
     *
     * @param  string $network_id Network ID (required)
     * @param  string $floor_plan_id Floor plan ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkFloorPlanAsyncWithHttpInfo($network_id, $floor_plan_id, string $contentType = self::contentTypes['getNetworkFloorPlan'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkFloorPlans200ResponseInner';
        $request = $this->getNetworkFloorPlanRequest($network_id, $floor_plan_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkFloorPlan'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $floor_plan_id Floor plan ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkFloorPlanRequest($network_id, $floor_plan_id, string $contentType = self::contentTypes['getNetworkFloorPlan'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkFloorPlan'
            );
        }

        // verify the required parameter 'floor_plan_id' is set
        if ($floor_plan_id === null || (is_array($floor_plan_id) && count($floor_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $floor_plan_id when calling getNetworkFloorPlan'
            );
        }


        $resourcePath = '/networks/{networkId}/floorPlans/{floorPlanId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($floor_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'floorPlanId' . '}',
                ObjectSerializer::toPathValue($floor_plan_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkFloorPlans
     *
     * List the floor plans that belong to your network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFloorPlans'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkFloorPlans200ResponseInner[]
     */
    public function getNetworkFloorPlans($network_id, string $contentType = self::contentTypes['getNetworkFloorPlans'][0])
    {
        list($response) = $this->getNetworkFloorPlansWithHttpInfo($network_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkFloorPlansWithHttpInfo
     *
     * List the floor plans that belong to your network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFloorPlans'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkFloorPlans200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkFloorPlansWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkFloorPlans'][0])
    {
        $request = $this->getNetworkFloorPlansRequest($network_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkFloorPlans200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkFloorPlans200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkFloorPlans200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkFloorPlans200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkFloorPlans200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkFloorPlansAsync
     *
     * List the floor plans that belong to your network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFloorPlans'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkFloorPlansAsync($network_id, string $contentType = self::contentTypes['getNetworkFloorPlans'][0])
    {
        return $this->getNetworkFloorPlansAsyncWithHttpInfo($network_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkFloorPlansAsyncWithHttpInfo
     *
     * List the floor plans that belong to your network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFloorPlans'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkFloorPlansAsyncWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkFloorPlans'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkFloorPlans200ResponseInner[]';
        $request = $this->getNetworkFloorPlansRequest($network_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkFloorPlans'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFloorPlans'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkFloorPlansRequest($network_id, string $contentType = self::contentTypes['getNetworkFloorPlans'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkFloorPlans'
            );
        }


        $resourcePath = '/networks/{networkId}/floorPlans';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationFloorPlansAutoLocateDevices
     *
     * List auto locate details for each device in your organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 10000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter devices by one or more network IDs (optional)
     * @param  string[]|null $floor_plan_ids Optional parameter to filter devices by one or more floorplan IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFloorPlansAutoLocateDevices'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationFloorPlansAutoLocateDevices200ResponseInner[]
     */
    public function getOrganizationFloorPlansAutoLocateDevices($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $floor_plan_ids = null, string $contentType = self::contentTypes['getOrganizationFloorPlansAutoLocateDevices'][0])
    {
        list($response) = $this->getOrganizationFloorPlansAutoLocateDevicesWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $floor_plan_ids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationFloorPlansAutoLocateDevicesWithHttpInfo
     *
     * List auto locate details for each device in your organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 10000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter devices by one or more network IDs (optional)
     * @param  string[]|null $floor_plan_ids Optional parameter to filter devices by one or more floorplan IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFloorPlansAutoLocateDevices'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationFloorPlansAutoLocateDevices200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationFloorPlansAutoLocateDevicesWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $floor_plan_ids = null, string $contentType = self::contentTypes['getOrganizationFloorPlansAutoLocateDevices'][0])
    {
        $request = $this->getOrganizationFloorPlansAutoLocateDevicesRequest($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $floor_plan_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationFloorPlansAutoLocateDevices200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationFloorPlansAutoLocateDevices200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationFloorPlansAutoLocateDevices200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationFloorPlansAutoLocateDevices200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationFloorPlansAutoLocateDevices200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationFloorPlansAutoLocateDevicesAsync
     *
     * List auto locate details for each device in your organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 10000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter devices by one or more network IDs (optional)
     * @param  string[]|null $floor_plan_ids Optional parameter to filter devices by one or more floorplan IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFloorPlansAutoLocateDevices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationFloorPlansAutoLocateDevicesAsync($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $floor_plan_ids = null, string $contentType = self::contentTypes['getOrganizationFloorPlansAutoLocateDevices'][0])
    {
        return $this->getOrganizationFloorPlansAutoLocateDevicesAsyncWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $floor_plan_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationFloorPlansAutoLocateDevicesAsyncWithHttpInfo
     *
     * List auto locate details for each device in your organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 10000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter devices by one or more network IDs (optional)
     * @param  string[]|null $floor_plan_ids Optional parameter to filter devices by one or more floorplan IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFloorPlansAutoLocateDevices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationFloorPlansAutoLocateDevicesAsyncWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $floor_plan_ids = null, string $contentType = self::contentTypes['getOrganizationFloorPlansAutoLocateDevices'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationFloorPlansAutoLocateDevices200ResponseInner[]';
        $request = $this->getOrganizationFloorPlansAutoLocateDevicesRequest($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $floor_plan_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationFloorPlansAutoLocateDevices'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 10000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter devices by one or more network IDs (optional)
     * @param  string[]|null $floor_plan_ids Optional parameter to filter devices by one or more floorplan IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFloorPlansAutoLocateDevices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationFloorPlansAutoLocateDevicesRequest($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $floor_plan_ids = null, string $contentType = self::contentTypes['getOrganizationFloorPlansAutoLocateDevices'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationFloorPlansAutoLocateDevices'
            );
        }







        $resourcePath = '/organizations/{organizationId}/floorPlans/autoLocate/devices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'perPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starting_after,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ending_before,
            'endingBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network_ids,
            'networkIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $floor_plan_ids,
            'floorPlanIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationFloorPlansAutoLocateStatuses
     *
     * List the status of auto locate for each floorplan in your organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 10000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter floorplans by one or more network IDs (optional)
     * @param  string[]|null $floor_plan_ids Optional parameter to filter floorplans by one or more floorplan IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFloorPlansAutoLocateStatuses'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationFloorPlansAutoLocateStatuses200ResponseInner[]
     */
    public function getOrganizationFloorPlansAutoLocateStatuses($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $floor_plan_ids = null, string $contentType = self::contentTypes['getOrganizationFloorPlansAutoLocateStatuses'][0])
    {
        list($response) = $this->getOrganizationFloorPlansAutoLocateStatusesWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $floor_plan_ids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationFloorPlansAutoLocateStatusesWithHttpInfo
     *
     * List the status of auto locate for each floorplan in your organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 10000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter floorplans by one or more network IDs (optional)
     * @param  string[]|null $floor_plan_ids Optional parameter to filter floorplans by one or more floorplan IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFloorPlansAutoLocateStatuses'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationFloorPlansAutoLocateStatuses200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationFloorPlansAutoLocateStatusesWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $floor_plan_ids = null, string $contentType = self::contentTypes['getOrganizationFloorPlansAutoLocateStatuses'][0])
    {
        $request = $this->getOrganizationFloorPlansAutoLocateStatusesRequest($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $floor_plan_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationFloorPlansAutoLocateStatuses200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationFloorPlansAutoLocateStatuses200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationFloorPlansAutoLocateStatuses200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationFloorPlansAutoLocateStatuses200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationFloorPlansAutoLocateStatuses200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationFloorPlansAutoLocateStatusesAsync
     *
     * List the status of auto locate for each floorplan in your organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 10000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter floorplans by one or more network IDs (optional)
     * @param  string[]|null $floor_plan_ids Optional parameter to filter floorplans by one or more floorplan IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFloorPlansAutoLocateStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationFloorPlansAutoLocateStatusesAsync($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $floor_plan_ids = null, string $contentType = self::contentTypes['getOrganizationFloorPlansAutoLocateStatuses'][0])
    {
        return $this->getOrganizationFloorPlansAutoLocateStatusesAsyncWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $floor_plan_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationFloorPlansAutoLocateStatusesAsyncWithHttpInfo
     *
     * List the status of auto locate for each floorplan in your organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 10000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter floorplans by one or more network IDs (optional)
     * @param  string[]|null $floor_plan_ids Optional parameter to filter floorplans by one or more floorplan IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFloorPlansAutoLocateStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationFloorPlansAutoLocateStatusesAsyncWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $floor_plan_ids = null, string $contentType = self::contentTypes['getOrganizationFloorPlansAutoLocateStatuses'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationFloorPlansAutoLocateStatuses200ResponseInner[]';
        $request = $this->getOrganizationFloorPlansAutoLocateStatusesRequest($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $floor_plan_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationFloorPlansAutoLocateStatuses'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 10000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter floorplans by one or more network IDs (optional)
     * @param  string[]|null $floor_plan_ids Optional parameter to filter floorplans by one or more floorplan IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFloorPlansAutoLocateStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationFloorPlansAutoLocateStatusesRequest($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $floor_plan_ids = null, string $contentType = self::contentTypes['getOrganizationFloorPlansAutoLocateStatuses'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationFloorPlansAutoLocateStatuses'
            );
        }







        $resourcePath = '/organizations/{organizationId}/floorPlans/autoLocate/statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'perPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starting_after,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ending_before,
            'endingBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network_ids,
            'networkIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $floor_plan_ids,
            'floorPlanIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publishNetworkFloorPlansAutoLocateJob
     *
     * Update the status of a finished auto locate job to be published, and update device locations
     *
     * @param  string $network_id Network ID (required)
     * @param  string $job_id Job ID (required)
     * @param  \Meraki\Model\PublishNetworkFloorPlansAutoLocateJobRequest|null $publish_network_floor_plans_auto_locate_job_request publish_network_floor_plans_auto_locate_job_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publishNetworkFloorPlansAutoLocateJob'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\PublishNetworkFloorPlansAutoLocateJob200Response
     */
    public function publishNetworkFloorPlansAutoLocateJob($network_id, $job_id, $publish_network_floor_plans_auto_locate_job_request = null, string $contentType = self::contentTypes['publishNetworkFloorPlansAutoLocateJob'][0])
    {
        list($response) = $this->publishNetworkFloorPlansAutoLocateJobWithHttpInfo($network_id, $job_id, $publish_network_floor_plans_auto_locate_job_request, $contentType);
        return $response;
    }

    /**
     * Operation publishNetworkFloorPlansAutoLocateJobWithHttpInfo
     *
     * Update the status of a finished auto locate job to be published, and update device locations
     *
     * @param  string $network_id Network ID (required)
     * @param  string $job_id Job ID (required)
     * @param  \Meraki\Model\PublishNetworkFloorPlansAutoLocateJobRequest|null $publish_network_floor_plans_auto_locate_job_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publishNetworkFloorPlansAutoLocateJob'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\PublishNetworkFloorPlansAutoLocateJob200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function publishNetworkFloorPlansAutoLocateJobWithHttpInfo($network_id, $job_id, $publish_network_floor_plans_auto_locate_job_request = null, string $contentType = self::contentTypes['publishNetworkFloorPlansAutoLocateJob'][0])
    {
        $request = $this->publishNetworkFloorPlansAutoLocateJobRequest($network_id, $job_id, $publish_network_floor_plans_auto_locate_job_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\PublishNetworkFloorPlansAutoLocateJob200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\PublishNetworkFloorPlansAutoLocateJob200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\PublishNetworkFloorPlansAutoLocateJob200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\PublishNetworkFloorPlansAutoLocateJob200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\PublishNetworkFloorPlansAutoLocateJob200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publishNetworkFloorPlansAutoLocateJobAsync
     *
     * Update the status of a finished auto locate job to be published, and update device locations
     *
     * @param  string $network_id Network ID (required)
     * @param  string $job_id Job ID (required)
     * @param  \Meraki\Model\PublishNetworkFloorPlansAutoLocateJobRequest|null $publish_network_floor_plans_auto_locate_job_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publishNetworkFloorPlansAutoLocateJob'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publishNetworkFloorPlansAutoLocateJobAsync($network_id, $job_id, $publish_network_floor_plans_auto_locate_job_request = null, string $contentType = self::contentTypes['publishNetworkFloorPlansAutoLocateJob'][0])
    {
        return $this->publishNetworkFloorPlansAutoLocateJobAsyncWithHttpInfo($network_id, $job_id, $publish_network_floor_plans_auto_locate_job_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation publishNetworkFloorPlansAutoLocateJobAsyncWithHttpInfo
     *
     * Update the status of a finished auto locate job to be published, and update device locations
     *
     * @param  string $network_id Network ID (required)
     * @param  string $job_id Job ID (required)
     * @param  \Meraki\Model\PublishNetworkFloorPlansAutoLocateJobRequest|null $publish_network_floor_plans_auto_locate_job_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publishNetworkFloorPlansAutoLocateJob'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publishNetworkFloorPlansAutoLocateJobAsyncWithHttpInfo($network_id, $job_id, $publish_network_floor_plans_auto_locate_job_request = null, string $contentType = self::contentTypes['publishNetworkFloorPlansAutoLocateJob'][0])
    {
        $returnType = '\Meraki\Model\PublishNetworkFloorPlansAutoLocateJob200Response';
        $request = $this->publishNetworkFloorPlansAutoLocateJobRequest($network_id, $job_id, $publish_network_floor_plans_auto_locate_job_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'publishNetworkFloorPlansAutoLocateJob'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $job_id Job ID (required)
     * @param  \Meraki\Model\PublishNetworkFloorPlansAutoLocateJobRequest|null $publish_network_floor_plans_auto_locate_job_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publishNetworkFloorPlansAutoLocateJob'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function publishNetworkFloorPlansAutoLocateJobRequest($network_id, $job_id, $publish_network_floor_plans_auto_locate_job_request = null, string $contentType = self::contentTypes['publishNetworkFloorPlansAutoLocateJob'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling publishNetworkFloorPlansAutoLocateJob'
            );
        }

        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling publishNetworkFloorPlansAutoLocateJob'
            );
        }



        $resourcePath = '/networks/{networkId}/floorPlans/autoLocate/jobs/{jobId}/publish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobId' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($publish_network_floor_plans_auto_locate_job_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($publish_network_floor_plans_auto_locate_job_request));
            } else {
                $httpBody = $publish_network_floor_plans_auto_locate_job_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recalculateNetworkFloorPlansAutoLocateJob
     *
     * Trigger auto locate recalculation for a job, and optionally set anchors
     *
     * @param  string $network_id Network ID (required)
     * @param  string $job_id Job ID (required)
     * @param  \Meraki\Model\RecalculateNetworkFloorPlansAutoLocateJobRequest|null $recalculate_network_floor_plans_auto_locate_job_request recalculate_network_floor_plans_auto_locate_job_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recalculateNetworkFloorPlansAutoLocateJob'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\RecalculateNetworkFloorPlansAutoLocateJob200Response
     */
    public function recalculateNetworkFloorPlansAutoLocateJob($network_id, $job_id, $recalculate_network_floor_plans_auto_locate_job_request = null, string $contentType = self::contentTypes['recalculateNetworkFloorPlansAutoLocateJob'][0])
    {
        list($response) = $this->recalculateNetworkFloorPlansAutoLocateJobWithHttpInfo($network_id, $job_id, $recalculate_network_floor_plans_auto_locate_job_request, $contentType);
        return $response;
    }

    /**
     * Operation recalculateNetworkFloorPlansAutoLocateJobWithHttpInfo
     *
     * Trigger auto locate recalculation for a job, and optionally set anchors
     *
     * @param  string $network_id Network ID (required)
     * @param  string $job_id Job ID (required)
     * @param  \Meraki\Model\RecalculateNetworkFloorPlansAutoLocateJobRequest|null $recalculate_network_floor_plans_auto_locate_job_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recalculateNetworkFloorPlansAutoLocateJob'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\RecalculateNetworkFloorPlansAutoLocateJob200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function recalculateNetworkFloorPlansAutoLocateJobWithHttpInfo($network_id, $job_id, $recalculate_network_floor_plans_auto_locate_job_request = null, string $contentType = self::contentTypes['recalculateNetworkFloorPlansAutoLocateJob'][0])
    {
        $request = $this->recalculateNetworkFloorPlansAutoLocateJobRequest($network_id, $job_id, $recalculate_network_floor_plans_auto_locate_job_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\RecalculateNetworkFloorPlansAutoLocateJob200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\RecalculateNetworkFloorPlansAutoLocateJob200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\RecalculateNetworkFloorPlansAutoLocateJob200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\RecalculateNetworkFloorPlansAutoLocateJob200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\RecalculateNetworkFloorPlansAutoLocateJob200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recalculateNetworkFloorPlansAutoLocateJobAsync
     *
     * Trigger auto locate recalculation for a job, and optionally set anchors
     *
     * @param  string $network_id Network ID (required)
     * @param  string $job_id Job ID (required)
     * @param  \Meraki\Model\RecalculateNetworkFloorPlansAutoLocateJobRequest|null $recalculate_network_floor_plans_auto_locate_job_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recalculateNetworkFloorPlansAutoLocateJob'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recalculateNetworkFloorPlansAutoLocateJobAsync($network_id, $job_id, $recalculate_network_floor_plans_auto_locate_job_request = null, string $contentType = self::contentTypes['recalculateNetworkFloorPlansAutoLocateJob'][0])
    {
        return $this->recalculateNetworkFloorPlansAutoLocateJobAsyncWithHttpInfo($network_id, $job_id, $recalculate_network_floor_plans_auto_locate_job_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recalculateNetworkFloorPlansAutoLocateJobAsyncWithHttpInfo
     *
     * Trigger auto locate recalculation for a job, and optionally set anchors
     *
     * @param  string $network_id Network ID (required)
     * @param  string $job_id Job ID (required)
     * @param  \Meraki\Model\RecalculateNetworkFloorPlansAutoLocateJobRequest|null $recalculate_network_floor_plans_auto_locate_job_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recalculateNetworkFloorPlansAutoLocateJob'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recalculateNetworkFloorPlansAutoLocateJobAsyncWithHttpInfo($network_id, $job_id, $recalculate_network_floor_plans_auto_locate_job_request = null, string $contentType = self::contentTypes['recalculateNetworkFloorPlansAutoLocateJob'][0])
    {
        $returnType = '\Meraki\Model\RecalculateNetworkFloorPlansAutoLocateJob200Response';
        $request = $this->recalculateNetworkFloorPlansAutoLocateJobRequest($network_id, $job_id, $recalculate_network_floor_plans_auto_locate_job_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recalculateNetworkFloorPlansAutoLocateJob'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $job_id Job ID (required)
     * @param  \Meraki\Model\RecalculateNetworkFloorPlansAutoLocateJobRequest|null $recalculate_network_floor_plans_auto_locate_job_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recalculateNetworkFloorPlansAutoLocateJob'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recalculateNetworkFloorPlansAutoLocateJobRequest($network_id, $job_id, $recalculate_network_floor_plans_auto_locate_job_request = null, string $contentType = self::contentTypes['recalculateNetworkFloorPlansAutoLocateJob'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling recalculateNetworkFloorPlansAutoLocateJob'
            );
        }

        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling recalculateNetworkFloorPlansAutoLocateJob'
            );
        }



        $resourcePath = '/networks/{networkId}/floorPlans/autoLocate/jobs/{jobId}/recalculate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobId' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($recalculate_network_floor_plans_auto_locate_job_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($recalculate_network_floor_plans_auto_locate_job_request));
            } else {
                $httpBody = $recalculate_network_floor_plans_auto_locate_job_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkFloorPlan
     *
     * Update a floor plan&#39;s geolocation and other meta data
     *
     * @param  string $network_id Network ID (required)
     * @param  string $floor_plan_id Floor plan ID (required)
     * @param  \Meraki\Model\UpdateNetworkFloorPlanRequest|null $update_network_floor_plan_request update_network_floor_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkFloorPlans200ResponseInner
     */
    public function updateNetworkFloorPlan($network_id, $floor_plan_id, $update_network_floor_plan_request = null, string $contentType = self::contentTypes['updateNetworkFloorPlan'][0])
    {
        list($response) = $this->updateNetworkFloorPlanWithHttpInfo($network_id, $floor_plan_id, $update_network_floor_plan_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkFloorPlanWithHttpInfo
     *
     * Update a floor plan&#39;s geolocation and other meta data
     *
     * @param  string $network_id Network ID (required)
     * @param  string $floor_plan_id Floor plan ID (required)
     * @param  \Meraki\Model\UpdateNetworkFloorPlanRequest|null $update_network_floor_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkFloorPlans200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkFloorPlanWithHttpInfo($network_id, $floor_plan_id, $update_network_floor_plan_request = null, string $contentType = self::contentTypes['updateNetworkFloorPlan'][0])
    {
        $request = $this->updateNetworkFloorPlanRequest($network_id, $floor_plan_id, $update_network_floor_plan_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkFloorPlans200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkFloorPlans200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkFloorPlans200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkFloorPlans200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkFloorPlans200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkFloorPlanAsync
     *
     * Update a floor plan&#39;s geolocation and other meta data
     *
     * @param  string $network_id Network ID (required)
     * @param  string $floor_plan_id Floor plan ID (required)
     * @param  \Meraki\Model\UpdateNetworkFloorPlanRequest|null $update_network_floor_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkFloorPlanAsync($network_id, $floor_plan_id, $update_network_floor_plan_request = null, string $contentType = self::contentTypes['updateNetworkFloorPlan'][0])
    {
        return $this->updateNetworkFloorPlanAsyncWithHttpInfo($network_id, $floor_plan_id, $update_network_floor_plan_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkFloorPlanAsyncWithHttpInfo
     *
     * Update a floor plan&#39;s geolocation and other meta data
     *
     * @param  string $network_id Network ID (required)
     * @param  string $floor_plan_id Floor plan ID (required)
     * @param  \Meraki\Model\UpdateNetworkFloorPlanRequest|null $update_network_floor_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkFloorPlanAsyncWithHttpInfo($network_id, $floor_plan_id, $update_network_floor_plan_request = null, string $contentType = self::contentTypes['updateNetworkFloorPlan'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkFloorPlans200ResponseInner';
        $request = $this->updateNetworkFloorPlanRequest($network_id, $floor_plan_id, $update_network_floor_plan_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkFloorPlan'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $floor_plan_id Floor plan ID (required)
     * @param  \Meraki\Model\UpdateNetworkFloorPlanRequest|null $update_network_floor_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFloorPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkFloorPlanRequest($network_id, $floor_plan_id, $update_network_floor_plan_request = null, string $contentType = self::contentTypes['updateNetworkFloorPlan'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkFloorPlan'
            );
        }

        // verify the required parameter 'floor_plan_id' is set
        if ($floor_plan_id === null || (is_array($floor_plan_id) && count($floor_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $floor_plan_id when calling updateNetworkFloorPlan'
            );
        }



        $resourcePath = '/networks/{networkId}/floorPlans/{floorPlanId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($floor_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'floorPlanId' . '}',
                ObjectSerializer::toPathValue($floor_plan_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_network_floor_plan_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_network_floor_plan_request));
            } else {
                $httpBody = $update_network_floor_plan_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
