<?php
/**
 * CellularGatewayApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Meraki\ApiException;
use Meraki\Configuration;
use Meraki\HeaderSelector;
use Meraki\ObjectSerializer;

/**
 * CellularGatewayApi Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CellularGatewayApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createOrganizationCellularGatewayEsimsServiceProvidersAccount' => [
            'application/json',
        ],
        'createOrganizationCellularGatewayEsimsSwap' => [
            'application/json',
        ],
        'deleteOrganizationCellularGatewayEsimsServiceProvidersAccount' => [
            'application/json',
        ],
        'getDeviceCellularGatewayLan' => [
            'application/json',
        ],
        'getDeviceCellularGatewayPortForwardingRules' => [
            'application/json',
        ],
        'getNetworkCellularGatewayConnectivityMonitoringDestinations' => [
            'application/json',
        ],
        'getNetworkCellularGatewayDhcp' => [
            'application/json',
        ],
        'getNetworkCellularGatewaySubnetPool' => [
            'application/json',
        ],
        'getNetworkCellularGatewayUplink' => [
            'application/json',
        ],
        'getOrganizationCellularGatewayEsimsInventory' => [
            'application/json',
        ],
        'getOrganizationCellularGatewayEsimsServiceProviders' => [
            'application/json',
        ],
        'getOrganizationCellularGatewayEsimsServiceProvidersAccounts' => [
            'application/json',
        ],
        'getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans' => [
            'application/json',
        ],
        'getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans' => [
            'application/json',
        ],
        'getOrganizationCellularGatewayUplinkStatuses' => [
            'application/json',
        ],
        'updateDeviceCellularGatewayLan' => [
            'application/json',
        ],
        'updateDeviceCellularGatewayPortForwardingRules' => [
            'application/json',
        ],
        'updateNetworkCellularGatewayConnectivityMonitoringDestinations' => [
            'application/json',
        ],
        'updateNetworkCellularGatewayDhcp' => [
            'application/json',
        ],
        'updateNetworkCellularGatewaySubnetPool' => [
            'application/json',
        ],
        'updateNetworkCellularGatewayUplink' => [
            'application/json',
        ],
        'updateOrganizationCellularGatewayEsimsInventory' => [
            'application/json',
        ],
        'updateOrganizationCellularGatewayEsimsServiceProvidersAccount' => [
            'application/json',
        ],
        'updateOrganizationCellularGatewayEsimsSwap' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createOrganizationCellularGatewayEsimsServiceProvidersAccount
     *
     * Add a service provider account.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest $create_organization_cellular_gateway_esims_service_providers_account_request create_organization_cellular_gateway_esims_service_providers_account_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationCellularGatewayEsimsServiceProvidersAccount'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInnerItemsInner
     */
    public function createOrganizationCellularGatewayEsimsServiceProvidersAccount($organization_id, $create_organization_cellular_gateway_esims_service_providers_account_request, string $contentType = self::contentTypes['createOrganizationCellularGatewayEsimsServiceProvidersAccount'][0])
    {
        list($response) = $this->createOrganizationCellularGatewayEsimsServiceProvidersAccountWithHttpInfo($organization_id, $create_organization_cellular_gateway_esims_service_providers_account_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationCellularGatewayEsimsServiceProvidersAccountWithHttpInfo
     *
     * Add a service provider account.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest $create_organization_cellular_gateway_esims_service_providers_account_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationCellularGatewayEsimsServiceProvidersAccount'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInnerItemsInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationCellularGatewayEsimsServiceProvidersAccountWithHttpInfo($organization_id, $create_organization_cellular_gateway_esims_service_providers_account_request, string $contentType = self::contentTypes['createOrganizationCellularGatewayEsimsServiceProvidersAccount'][0])
    {
        $request = $this->createOrganizationCellularGatewayEsimsServiceProvidersAccountRequest($organization_id, $create_organization_cellular_gateway_esims_service_providers_account_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInnerItemsInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInnerItemsInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInnerItemsInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInnerItemsInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInnerItemsInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationCellularGatewayEsimsServiceProvidersAccountAsync
     *
     * Add a service provider account.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest $create_organization_cellular_gateway_esims_service_providers_account_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationCellularGatewayEsimsServiceProvidersAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationCellularGatewayEsimsServiceProvidersAccountAsync($organization_id, $create_organization_cellular_gateway_esims_service_providers_account_request, string $contentType = self::contentTypes['createOrganizationCellularGatewayEsimsServiceProvidersAccount'][0])
    {
        return $this->createOrganizationCellularGatewayEsimsServiceProvidersAccountAsyncWithHttpInfo($organization_id, $create_organization_cellular_gateway_esims_service_providers_account_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationCellularGatewayEsimsServiceProvidersAccountAsyncWithHttpInfo
     *
     * Add a service provider account.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest $create_organization_cellular_gateway_esims_service_providers_account_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationCellularGatewayEsimsServiceProvidersAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationCellularGatewayEsimsServiceProvidersAccountAsyncWithHttpInfo($organization_id, $create_organization_cellular_gateway_esims_service_providers_account_request, string $contentType = self::contentTypes['createOrganizationCellularGatewayEsimsServiceProvidersAccount'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInnerItemsInner';
        $request = $this->createOrganizationCellularGatewayEsimsServiceProvidersAccountRequest($organization_id, $create_organization_cellular_gateway_esims_service_providers_account_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationCellularGatewayEsimsServiceProvidersAccount'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest $create_organization_cellular_gateway_esims_service_providers_account_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationCellularGatewayEsimsServiceProvidersAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationCellularGatewayEsimsServiceProvidersAccountRequest($organization_id, $create_organization_cellular_gateway_esims_service_providers_account_request, string $contentType = self::contentTypes['createOrganizationCellularGatewayEsimsServiceProvidersAccount'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationCellularGatewayEsimsServiceProvidersAccount'
            );
        }

        // verify the required parameter 'create_organization_cellular_gateway_esims_service_providers_account_request' is set
        if ($create_organization_cellular_gateway_esims_service_providers_account_request === null || (is_array($create_organization_cellular_gateway_esims_service_providers_account_request) && count($create_organization_cellular_gateway_esims_service_providers_account_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_cellular_gateway_esims_service_providers_account_request when calling createOrganizationCellularGatewayEsimsServiceProvidersAccount'
            );
        }


        $resourcePath = '/organizations/{organizationId}/cellularGateway/esims/serviceProviders/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_cellular_gateway_esims_service_providers_account_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_cellular_gateway_esims_service_providers_account_request));
            } else {
                $httpBody = $create_organization_cellular_gateway_esims_service_providers_account_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganizationCellularGatewayEsimsSwap
     *
     * Swap which profile an eSIM uses.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationCellularGatewayEsimsSwapRequest $create_organization_cellular_gateway_esims_swap_request create_organization_cellular_gateway_esims_swap_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationCellularGatewayEsimsSwap'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CreateOrganizationCellularGatewayEsimsSwap200Response
     */
    public function createOrganizationCellularGatewayEsimsSwap($organization_id, $create_organization_cellular_gateway_esims_swap_request, string $contentType = self::contentTypes['createOrganizationCellularGatewayEsimsSwap'][0])
    {
        list($response) = $this->createOrganizationCellularGatewayEsimsSwapWithHttpInfo($organization_id, $create_organization_cellular_gateway_esims_swap_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationCellularGatewayEsimsSwapWithHttpInfo
     *
     * Swap which profile an eSIM uses.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationCellularGatewayEsimsSwapRequest $create_organization_cellular_gateway_esims_swap_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationCellularGatewayEsimsSwap'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CreateOrganizationCellularGatewayEsimsSwap200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationCellularGatewayEsimsSwapWithHttpInfo($organization_id, $create_organization_cellular_gateway_esims_swap_request, string $contentType = self::contentTypes['createOrganizationCellularGatewayEsimsSwap'][0])
    {
        $request = $this->createOrganizationCellularGatewayEsimsSwapRequest($organization_id, $create_organization_cellular_gateway_esims_swap_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\CreateOrganizationCellularGatewayEsimsSwap200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CreateOrganizationCellularGatewayEsimsSwap200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CreateOrganizationCellularGatewayEsimsSwap200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CreateOrganizationCellularGatewayEsimsSwap200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CreateOrganizationCellularGatewayEsimsSwap200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationCellularGatewayEsimsSwapAsync
     *
     * Swap which profile an eSIM uses.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationCellularGatewayEsimsSwapRequest $create_organization_cellular_gateway_esims_swap_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationCellularGatewayEsimsSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationCellularGatewayEsimsSwapAsync($organization_id, $create_organization_cellular_gateway_esims_swap_request, string $contentType = self::contentTypes['createOrganizationCellularGatewayEsimsSwap'][0])
    {
        return $this->createOrganizationCellularGatewayEsimsSwapAsyncWithHttpInfo($organization_id, $create_organization_cellular_gateway_esims_swap_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationCellularGatewayEsimsSwapAsyncWithHttpInfo
     *
     * Swap which profile an eSIM uses.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationCellularGatewayEsimsSwapRequest $create_organization_cellular_gateway_esims_swap_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationCellularGatewayEsimsSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationCellularGatewayEsimsSwapAsyncWithHttpInfo($organization_id, $create_organization_cellular_gateway_esims_swap_request, string $contentType = self::contentTypes['createOrganizationCellularGatewayEsimsSwap'][0])
    {
        $returnType = '\Meraki\Model\CreateOrganizationCellularGatewayEsimsSwap200Response';
        $request = $this->createOrganizationCellularGatewayEsimsSwapRequest($organization_id, $create_organization_cellular_gateway_esims_swap_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationCellularGatewayEsimsSwap'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationCellularGatewayEsimsSwapRequest $create_organization_cellular_gateway_esims_swap_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationCellularGatewayEsimsSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationCellularGatewayEsimsSwapRequest($organization_id, $create_organization_cellular_gateway_esims_swap_request, string $contentType = self::contentTypes['createOrganizationCellularGatewayEsimsSwap'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationCellularGatewayEsimsSwap'
            );
        }

        // verify the required parameter 'create_organization_cellular_gateway_esims_swap_request' is set
        if ($create_organization_cellular_gateway_esims_swap_request === null || (is_array($create_organization_cellular_gateway_esims_swap_request) && count($create_organization_cellular_gateway_esims_swap_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_cellular_gateway_esims_swap_request when calling createOrganizationCellularGatewayEsimsSwap'
            );
        }


        $resourcePath = '/organizations/{organizationId}/cellularGateway/esims/swap';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_cellular_gateway_esims_swap_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_cellular_gateway_esims_swap_request));
            } else {
                $httpBody = $create_organization_cellular_gateway_esims_swap_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrganizationCellularGatewayEsimsServiceProvidersAccount
     *
     * Remove a service provider account&#39;s integration with the Dashboard.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $account_id Account ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationCellularGatewayEsimsServiceProvidersAccount'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOrganizationCellularGatewayEsimsServiceProvidersAccount($organization_id, $account_id, string $contentType = self::contentTypes['deleteOrganizationCellularGatewayEsimsServiceProvidersAccount'][0])
    {
        $this->deleteOrganizationCellularGatewayEsimsServiceProvidersAccountWithHttpInfo($organization_id, $account_id, $contentType);
    }

    /**
     * Operation deleteOrganizationCellularGatewayEsimsServiceProvidersAccountWithHttpInfo
     *
     * Remove a service provider account&#39;s integration with the Dashboard.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $account_id Account ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationCellularGatewayEsimsServiceProvidersAccount'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrganizationCellularGatewayEsimsServiceProvidersAccountWithHttpInfo($organization_id, $account_id, string $contentType = self::contentTypes['deleteOrganizationCellularGatewayEsimsServiceProvidersAccount'][0])
    {
        $request = $this->deleteOrganizationCellularGatewayEsimsServiceProvidersAccountRequest($organization_id, $account_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrganizationCellularGatewayEsimsServiceProvidersAccountAsync
     *
     * Remove a service provider account&#39;s integration with the Dashboard.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $account_id Account ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationCellularGatewayEsimsServiceProvidersAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationCellularGatewayEsimsServiceProvidersAccountAsync($organization_id, $account_id, string $contentType = self::contentTypes['deleteOrganizationCellularGatewayEsimsServiceProvidersAccount'][0])
    {
        return $this->deleteOrganizationCellularGatewayEsimsServiceProvidersAccountAsyncWithHttpInfo($organization_id, $account_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrganizationCellularGatewayEsimsServiceProvidersAccountAsyncWithHttpInfo
     *
     * Remove a service provider account&#39;s integration with the Dashboard.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $account_id Account ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationCellularGatewayEsimsServiceProvidersAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationCellularGatewayEsimsServiceProvidersAccountAsyncWithHttpInfo($organization_id, $account_id, string $contentType = self::contentTypes['deleteOrganizationCellularGatewayEsimsServiceProvidersAccount'][0])
    {
        $returnType = '';
        $request = $this->deleteOrganizationCellularGatewayEsimsServiceProvidersAccountRequest($organization_id, $account_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrganizationCellularGatewayEsimsServiceProvidersAccount'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $account_id Account ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationCellularGatewayEsimsServiceProvidersAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteOrganizationCellularGatewayEsimsServiceProvidersAccountRequest($organization_id, $account_id, string $contentType = self::contentTypes['deleteOrganizationCellularGatewayEsimsServiceProvidersAccount'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling deleteOrganizationCellularGatewayEsimsServiceProvidersAccount'
            );
        }

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling deleteOrganizationCellularGatewayEsimsServiceProvidersAccount'
            );
        }


        $resourcePath = '/organizations/{organizationId}/cellularGateway/esims/serviceProviders/accounts/{accountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeviceCellularGatewayLan
     *
     * Show the LAN Settings of a MG
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceCellularGatewayLan'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceCellularGatewayLan200Response
     */
    public function getDeviceCellularGatewayLan($serial, string $contentType = self::contentTypes['getDeviceCellularGatewayLan'][0])
    {
        list($response) = $this->getDeviceCellularGatewayLanWithHttpInfo($serial, $contentType);
        return $response;
    }

    /**
     * Operation getDeviceCellularGatewayLanWithHttpInfo
     *
     * Show the LAN Settings of a MG
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceCellularGatewayLan'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceCellularGatewayLan200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeviceCellularGatewayLanWithHttpInfo($serial, string $contentType = self::contentTypes['getDeviceCellularGatewayLan'][0])
    {
        $request = $this->getDeviceCellularGatewayLanRequest($serial, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceCellularGatewayLan200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceCellularGatewayLan200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceCellularGatewayLan200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceCellularGatewayLan200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceCellularGatewayLan200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeviceCellularGatewayLanAsync
     *
     * Show the LAN Settings of a MG
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceCellularGatewayLan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceCellularGatewayLanAsync($serial, string $contentType = self::contentTypes['getDeviceCellularGatewayLan'][0])
    {
        return $this->getDeviceCellularGatewayLanAsyncWithHttpInfo($serial, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeviceCellularGatewayLanAsyncWithHttpInfo
     *
     * Show the LAN Settings of a MG
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceCellularGatewayLan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceCellularGatewayLanAsyncWithHttpInfo($serial, string $contentType = self::contentTypes['getDeviceCellularGatewayLan'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceCellularGatewayLan200Response';
        $request = $this->getDeviceCellularGatewayLanRequest($serial, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeviceCellularGatewayLan'
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceCellularGatewayLan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeviceCellularGatewayLanRequest($serial, string $contentType = self::contentTypes['getDeviceCellularGatewayLan'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling getDeviceCellularGatewayLan'
            );
        }


        $resourcePath = '/devices/{serial}/cellularGateway/lan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeviceCellularGatewayPortForwardingRules
     *
     * Returns the port forwarding rules for a single MG.
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceCellularGatewayPortForwardingRules'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceCellularGatewayPortForwardingRules200Response
     */
    public function getDeviceCellularGatewayPortForwardingRules($serial, string $contentType = self::contentTypes['getDeviceCellularGatewayPortForwardingRules'][0])
    {
        list($response) = $this->getDeviceCellularGatewayPortForwardingRulesWithHttpInfo($serial, $contentType);
        return $response;
    }

    /**
     * Operation getDeviceCellularGatewayPortForwardingRulesWithHttpInfo
     *
     * Returns the port forwarding rules for a single MG.
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceCellularGatewayPortForwardingRules'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceCellularGatewayPortForwardingRules200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeviceCellularGatewayPortForwardingRulesWithHttpInfo($serial, string $contentType = self::contentTypes['getDeviceCellularGatewayPortForwardingRules'][0])
    {
        $request = $this->getDeviceCellularGatewayPortForwardingRulesRequest($serial, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceCellularGatewayPortForwardingRules200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceCellularGatewayPortForwardingRules200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceCellularGatewayPortForwardingRules200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceCellularGatewayPortForwardingRules200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceCellularGatewayPortForwardingRules200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeviceCellularGatewayPortForwardingRulesAsync
     *
     * Returns the port forwarding rules for a single MG.
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceCellularGatewayPortForwardingRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceCellularGatewayPortForwardingRulesAsync($serial, string $contentType = self::contentTypes['getDeviceCellularGatewayPortForwardingRules'][0])
    {
        return $this->getDeviceCellularGatewayPortForwardingRulesAsyncWithHttpInfo($serial, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeviceCellularGatewayPortForwardingRulesAsyncWithHttpInfo
     *
     * Returns the port forwarding rules for a single MG.
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceCellularGatewayPortForwardingRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeviceCellularGatewayPortForwardingRulesAsyncWithHttpInfo($serial, string $contentType = self::contentTypes['getDeviceCellularGatewayPortForwardingRules'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceCellularGatewayPortForwardingRules200Response';
        $request = $this->getDeviceCellularGatewayPortForwardingRulesRequest($serial, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeviceCellularGatewayPortForwardingRules'
     *
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeviceCellularGatewayPortForwardingRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeviceCellularGatewayPortForwardingRulesRequest($serial, string $contentType = self::contentTypes['getDeviceCellularGatewayPortForwardingRules'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling getDeviceCellularGatewayPortForwardingRules'
            );
        }


        $resourcePath = '/devices/{serial}/cellularGateway/portForwardingRules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkCellularGatewayConnectivityMonitoringDestinations
     *
     * Return the connectivity testing destinations for an MG network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewayConnectivityMonitoringDestinations'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkApplianceConnectivityMonitoringDestinations200Response
     */
    public function getNetworkCellularGatewayConnectivityMonitoringDestinations($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewayConnectivityMonitoringDestinations'][0])
    {
        list($response) = $this->getNetworkCellularGatewayConnectivityMonitoringDestinationsWithHttpInfo($network_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkCellularGatewayConnectivityMonitoringDestinationsWithHttpInfo
     *
     * Return the connectivity testing destinations for an MG network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewayConnectivityMonitoringDestinations'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkApplianceConnectivityMonitoringDestinations200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkCellularGatewayConnectivityMonitoringDestinationsWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewayConnectivityMonitoringDestinations'][0])
    {
        $request = $this->getNetworkCellularGatewayConnectivityMonitoringDestinationsRequest($network_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkApplianceConnectivityMonitoringDestinations200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkApplianceConnectivityMonitoringDestinations200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkApplianceConnectivityMonitoringDestinations200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkApplianceConnectivityMonitoringDestinations200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkApplianceConnectivityMonitoringDestinations200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkCellularGatewayConnectivityMonitoringDestinationsAsync
     *
     * Return the connectivity testing destinations for an MG network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewayConnectivityMonitoringDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkCellularGatewayConnectivityMonitoringDestinationsAsync($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewayConnectivityMonitoringDestinations'][0])
    {
        return $this->getNetworkCellularGatewayConnectivityMonitoringDestinationsAsyncWithHttpInfo($network_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkCellularGatewayConnectivityMonitoringDestinationsAsyncWithHttpInfo
     *
     * Return the connectivity testing destinations for an MG network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewayConnectivityMonitoringDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkCellularGatewayConnectivityMonitoringDestinationsAsyncWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewayConnectivityMonitoringDestinations'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkApplianceConnectivityMonitoringDestinations200Response';
        $request = $this->getNetworkCellularGatewayConnectivityMonitoringDestinationsRequest($network_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkCellularGatewayConnectivityMonitoringDestinations'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewayConnectivityMonitoringDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkCellularGatewayConnectivityMonitoringDestinationsRequest($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewayConnectivityMonitoringDestinations'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkCellularGatewayConnectivityMonitoringDestinations'
            );
        }


        $resourcePath = '/networks/{networkId}/cellularGateway/connectivityMonitoringDestinations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkCellularGatewayDhcp
     *
     * List common DHCP settings of MGs
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewayDhcp'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkCellularGatewayDhcp200Response
     */
    public function getNetworkCellularGatewayDhcp($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewayDhcp'][0])
    {
        list($response) = $this->getNetworkCellularGatewayDhcpWithHttpInfo($network_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkCellularGatewayDhcpWithHttpInfo
     *
     * List common DHCP settings of MGs
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewayDhcp'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkCellularGatewayDhcp200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkCellularGatewayDhcpWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewayDhcp'][0])
    {
        $request = $this->getNetworkCellularGatewayDhcpRequest($network_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkCellularGatewayDhcp200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkCellularGatewayDhcp200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkCellularGatewayDhcp200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkCellularGatewayDhcp200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkCellularGatewayDhcp200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkCellularGatewayDhcpAsync
     *
     * List common DHCP settings of MGs
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewayDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkCellularGatewayDhcpAsync($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewayDhcp'][0])
    {
        return $this->getNetworkCellularGatewayDhcpAsyncWithHttpInfo($network_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkCellularGatewayDhcpAsyncWithHttpInfo
     *
     * List common DHCP settings of MGs
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewayDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkCellularGatewayDhcpAsyncWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewayDhcp'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkCellularGatewayDhcp200Response';
        $request = $this->getNetworkCellularGatewayDhcpRequest($network_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkCellularGatewayDhcp'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewayDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkCellularGatewayDhcpRequest($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewayDhcp'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkCellularGatewayDhcp'
            );
        }


        $resourcePath = '/networks/{networkId}/cellularGateway/dhcp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkCellularGatewaySubnetPool
     *
     * Return the subnet pool and mask configured for MGs in the network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewaySubnetPool'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkCellularGatewaySubnetPool200Response
     */
    public function getNetworkCellularGatewaySubnetPool($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewaySubnetPool'][0])
    {
        list($response) = $this->getNetworkCellularGatewaySubnetPoolWithHttpInfo($network_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkCellularGatewaySubnetPoolWithHttpInfo
     *
     * Return the subnet pool and mask configured for MGs in the network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewaySubnetPool'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkCellularGatewaySubnetPool200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkCellularGatewaySubnetPoolWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewaySubnetPool'][0])
    {
        $request = $this->getNetworkCellularGatewaySubnetPoolRequest($network_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkCellularGatewaySubnetPool200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkCellularGatewaySubnetPool200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkCellularGatewaySubnetPool200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkCellularGatewaySubnetPool200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkCellularGatewaySubnetPool200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkCellularGatewaySubnetPoolAsync
     *
     * Return the subnet pool and mask configured for MGs in the network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewaySubnetPool'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkCellularGatewaySubnetPoolAsync($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewaySubnetPool'][0])
    {
        return $this->getNetworkCellularGatewaySubnetPoolAsyncWithHttpInfo($network_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkCellularGatewaySubnetPoolAsyncWithHttpInfo
     *
     * Return the subnet pool and mask configured for MGs in the network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewaySubnetPool'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkCellularGatewaySubnetPoolAsyncWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewaySubnetPool'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkCellularGatewaySubnetPool200Response';
        $request = $this->getNetworkCellularGatewaySubnetPoolRequest($network_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkCellularGatewaySubnetPool'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewaySubnetPool'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkCellularGatewaySubnetPoolRequest($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewaySubnetPool'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkCellularGatewaySubnetPool'
            );
        }


        $resourcePath = '/networks/{networkId}/cellularGateway/subnetPool';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkCellularGatewayUplink
     *
     * Returns the uplink settings for your MG network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewayUplink'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkCellularGatewayUplink200Response
     */
    public function getNetworkCellularGatewayUplink($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewayUplink'][0])
    {
        list($response) = $this->getNetworkCellularGatewayUplinkWithHttpInfo($network_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkCellularGatewayUplinkWithHttpInfo
     *
     * Returns the uplink settings for your MG network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewayUplink'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkCellularGatewayUplink200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkCellularGatewayUplinkWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewayUplink'][0])
    {
        $request = $this->getNetworkCellularGatewayUplinkRequest($network_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkCellularGatewayUplink200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkCellularGatewayUplink200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkCellularGatewayUplink200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkCellularGatewayUplink200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkCellularGatewayUplink200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkCellularGatewayUplinkAsync
     *
     * Returns the uplink settings for your MG network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewayUplink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkCellularGatewayUplinkAsync($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewayUplink'][0])
    {
        return $this->getNetworkCellularGatewayUplinkAsyncWithHttpInfo($network_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkCellularGatewayUplinkAsyncWithHttpInfo
     *
     * Returns the uplink settings for your MG network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewayUplink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkCellularGatewayUplinkAsyncWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewayUplink'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkCellularGatewayUplink200Response';
        $request = $this->getNetworkCellularGatewayUplinkRequest($network_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkCellularGatewayUplink'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkCellularGatewayUplink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkCellularGatewayUplinkRequest($network_id, string $contentType = self::contentTypes['getNetworkCellularGatewayUplink'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkCellularGatewayUplink'
            );
        }


        $resourcePath = '/networks/{networkId}/cellularGateway/uplink';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsInventory
     *
     * The eSIM inventory of a given organization.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $eids Optional parameter to filter the results by EID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200Response
     */
    public function getOrganizationCellularGatewayEsimsInventory($organization_id, $eids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsInventory'][0])
    {
        list($response) = $this->getOrganizationCellularGatewayEsimsInventoryWithHttpInfo($organization_id, $eids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsInventoryWithHttpInfo
     *
     * The eSIM inventory of a given organization.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $eids Optional parameter to filter the results by EID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationCellularGatewayEsimsInventoryWithHttpInfo($organization_id, $eids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsInventory'][0])
    {
        $request = $this->getOrganizationCellularGatewayEsimsInventoryRequest($organization_id, $eids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsInventoryAsync
     *
     * The eSIM inventory of a given organization.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $eids Optional parameter to filter the results by EID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCellularGatewayEsimsInventoryAsync($organization_id, $eids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsInventory'][0])
    {
        return $this->getOrganizationCellularGatewayEsimsInventoryAsyncWithHttpInfo($organization_id, $eids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsInventoryAsyncWithHttpInfo
     *
     * The eSIM inventory of a given organization.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $eids Optional parameter to filter the results by EID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCellularGatewayEsimsInventoryAsyncWithHttpInfo($organization_id, $eids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsInventory'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200Response';
        $request = $this->getOrganizationCellularGatewayEsimsInventoryRequest($organization_id, $eids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationCellularGatewayEsimsInventory'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $eids Optional parameter to filter the results by EID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationCellularGatewayEsimsInventoryRequest($organization_id, $eids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsInventory'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationCellularGatewayEsimsInventory'
            );
        }



        $resourcePath = '/organizations/{organizationId}/cellularGateway/esims/inventory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $eids,
            'eids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsServiceProviders
     *
     * Service providers customers can add accounts for.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProviders'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProviders200Response
     */
    public function getOrganizationCellularGatewayEsimsServiceProviders($organization_id, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProviders'][0])
    {
        list($response) = $this->getOrganizationCellularGatewayEsimsServiceProvidersWithHttpInfo($organization_id, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsServiceProvidersWithHttpInfo
     *
     * Service providers customers can add accounts for.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProviders'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProviders200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationCellularGatewayEsimsServiceProvidersWithHttpInfo($organization_id, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProviders'][0])
    {
        $request = $this->getOrganizationCellularGatewayEsimsServiceProvidersRequest($organization_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProviders200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProviders200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProviders200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProviders200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProviders200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsServiceProvidersAsync
     *
     * Service providers customers can add accounts for.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCellularGatewayEsimsServiceProvidersAsync($organization_id, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProviders'][0])
    {
        return $this->getOrganizationCellularGatewayEsimsServiceProvidersAsyncWithHttpInfo($organization_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsServiceProvidersAsyncWithHttpInfo
     *
     * Service providers customers can add accounts for.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCellularGatewayEsimsServiceProvidersAsyncWithHttpInfo($organization_id, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProviders'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProviders200Response';
        $request = $this->getOrganizationCellularGatewayEsimsServiceProvidersRequest($organization_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationCellularGatewayEsimsServiceProviders'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationCellularGatewayEsimsServiceProvidersRequest($organization_id, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProviders'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationCellularGatewayEsimsServiceProviders'
            );
        }


        $resourcePath = '/organizations/{organizationId}/cellularGateway/esims/serviceProviders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsServiceProvidersAccounts
     *
     * Inventory of service provider accounts tied to the organization.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int[]|null $account_ids Optional parameter to filter the results by service provider account IDs. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccounts'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInner[]
     */
    public function getOrganizationCellularGatewayEsimsServiceProvidersAccounts($organization_id, $account_ids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccounts'][0])
    {
        list($response) = $this->getOrganizationCellularGatewayEsimsServiceProvidersAccountsWithHttpInfo($organization_id, $account_ids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsServiceProvidersAccountsWithHttpInfo
     *
     * Inventory of service provider accounts tied to the organization.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int[]|null $account_ids Optional parameter to filter the results by service provider account IDs. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccounts'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationCellularGatewayEsimsServiceProvidersAccountsWithHttpInfo($organization_id, $account_ids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccounts'][0])
    {
        $request = $this->getOrganizationCellularGatewayEsimsServiceProvidersAccountsRequest($organization_id, $account_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsServiceProvidersAccountsAsync
     *
     * Inventory of service provider accounts tied to the organization.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int[]|null $account_ids Optional parameter to filter the results by service provider account IDs. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCellularGatewayEsimsServiceProvidersAccountsAsync($organization_id, $account_ids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccounts'][0])
    {
        return $this->getOrganizationCellularGatewayEsimsServiceProvidersAccountsAsyncWithHttpInfo($organization_id, $account_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsServiceProvidersAccountsAsyncWithHttpInfo
     *
     * Inventory of service provider accounts tied to the organization.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int[]|null $account_ids Optional parameter to filter the results by service provider account IDs. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCellularGatewayEsimsServiceProvidersAccountsAsyncWithHttpInfo($organization_id, $account_ids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccounts'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInner[]';
        $request = $this->getOrganizationCellularGatewayEsimsServiceProvidersAccountsRequest($organization_id, $account_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationCellularGatewayEsimsServiceProvidersAccounts'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int[]|null $account_ids Optional parameter to filter the results by service provider account IDs. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationCellularGatewayEsimsServiceProvidersAccountsRequest($organization_id, $account_ids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccounts'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationCellularGatewayEsimsServiceProvidersAccounts'
            );
        }



        $resourcePath = '/organizations/{organizationId}/cellularGateway/esims/serviceProviders/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_ids,
            'accountIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans
     *
     * The communication plans available for a given provider.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $account_ids Account IDs that communication plans will be fetched for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans200Response
     */
    public function getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans($organization_id, $account_ids, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans'][0])
    {
        list($response) = $this->getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansWithHttpInfo($organization_id, $account_ids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansWithHttpInfo
     *
     * The communication plans available for a given provider.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $account_ids Account IDs that communication plans will be fetched for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansWithHttpInfo($organization_id, $account_ids, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans'][0])
    {
        $request = $this->getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansRequest($organization_id, $account_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansAsync
     *
     * The communication plans available for a given provider.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $account_ids Account IDs that communication plans will be fetched for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansAsync($organization_id, $account_ids, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans'][0])
    {
        return $this->getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansAsyncWithHttpInfo($organization_id, $account_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansAsyncWithHttpInfo
     *
     * The communication plans available for a given provider.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $account_ids Account IDs that communication plans will be fetched for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansAsyncWithHttpInfo($organization_id, $account_ids, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans200Response';
        $request = $this->getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansRequest($organization_id, $account_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $account_ids Account IDs that communication plans will be fetched for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlansRequest($organization_id, $account_ids, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans'
            );
        }

        // verify the required parameter 'account_ids' is set
        if ($account_ids === null || (is_array($account_ids) && count($account_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_ids when calling getOrganizationCellularGatewayEsimsServiceProvidersAccountsCommunicationPlans'
            );
        }


        $resourcePath = '/organizations/{organizationId}/cellularGateway/esims/serviceProviders/accounts/communicationPlans';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_ids,
            'accountIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans
     *
     * The rate plans available for a given provider.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $account_ids Account IDs that rate plans will be fetched for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans200Response
     */
    public function getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans($organization_id, $account_ids, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans'][0])
    {
        list($response) = $this->getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansWithHttpInfo($organization_id, $account_ids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansWithHttpInfo
     *
     * The rate plans available for a given provider.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $account_ids Account IDs that rate plans will be fetched for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansWithHttpInfo($organization_id, $account_ids, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans'][0])
    {
        $request = $this->getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansRequest($organization_id, $account_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansAsync
     *
     * The rate plans available for a given provider.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $account_ids Account IDs that rate plans will be fetched for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansAsync($organization_id, $account_ids, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans'][0])
    {
        return $this->getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansAsyncWithHttpInfo($organization_id, $account_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansAsyncWithHttpInfo
     *
     * The rate plans available for a given provider.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $account_ids Account IDs that rate plans will be fetched for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansAsyncWithHttpInfo($organization_id, $account_ids, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans200Response';
        $request = $this->getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansRequest($organization_id, $account_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $account_ids Account IDs that rate plans will be fetched for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlansRequest($organization_id, $account_ids, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans'
            );
        }

        // verify the required parameter 'account_ids' is set
        if ($account_ids === null || (is_array($account_ids) && count($account_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_ids when calling getOrganizationCellularGatewayEsimsServiceProvidersAccountsRatePlans'
            );
        }


        $resourcePath = '/organizations/{organizationId}/cellularGateway/esims/serviceProviders/accounts/ratePlans';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_ids,
            'accountIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationCellularGatewayUplinkStatuses
     *
     * List the uplink status of every Meraki MG cellular gateway in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids A list of network IDs. The returned devices will be filtered to only include these networks. (optional)
     * @param  string[]|null $serials A list of serial numbers. The returned devices will be filtered to only include these serials. (optional)
     * @param  string[]|null $iccids A list of ICCIDs. The returned devices will be filtered to only include these ICCIDs. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayUplinkStatuses'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationCellularGatewayUplinkStatuses200ResponseInner[]
     */
    public function getOrganizationCellularGatewayUplinkStatuses($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $serials = null, $iccids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayUplinkStatuses'][0])
    {
        list($response) = $this->getOrganizationCellularGatewayUplinkStatusesWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $serials, $iccids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationCellularGatewayUplinkStatusesWithHttpInfo
     *
     * List the uplink status of every Meraki MG cellular gateway in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids A list of network IDs. The returned devices will be filtered to only include these networks. (optional)
     * @param  string[]|null $serials A list of serial numbers. The returned devices will be filtered to only include these serials. (optional)
     * @param  string[]|null $iccids A list of ICCIDs. The returned devices will be filtered to only include these ICCIDs. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayUplinkStatuses'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationCellularGatewayUplinkStatuses200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationCellularGatewayUplinkStatusesWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $serials = null, $iccids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayUplinkStatuses'][0])
    {
        $request = $this->getOrganizationCellularGatewayUplinkStatusesRequest($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $serials, $iccids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationCellularGatewayUplinkStatuses200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationCellularGatewayUplinkStatuses200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationCellularGatewayUplinkStatuses200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationCellularGatewayUplinkStatuses200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationCellularGatewayUplinkStatuses200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationCellularGatewayUplinkStatusesAsync
     *
     * List the uplink status of every Meraki MG cellular gateway in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids A list of network IDs. The returned devices will be filtered to only include these networks. (optional)
     * @param  string[]|null $serials A list of serial numbers. The returned devices will be filtered to only include these serials. (optional)
     * @param  string[]|null $iccids A list of ICCIDs. The returned devices will be filtered to only include these ICCIDs. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayUplinkStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCellularGatewayUplinkStatusesAsync($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $serials = null, $iccids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayUplinkStatuses'][0])
    {
        return $this->getOrganizationCellularGatewayUplinkStatusesAsyncWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $serials, $iccids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationCellularGatewayUplinkStatusesAsyncWithHttpInfo
     *
     * List the uplink status of every Meraki MG cellular gateway in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids A list of network IDs. The returned devices will be filtered to only include these networks. (optional)
     * @param  string[]|null $serials A list of serial numbers. The returned devices will be filtered to only include these serials. (optional)
     * @param  string[]|null $iccids A list of ICCIDs. The returned devices will be filtered to only include these ICCIDs. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayUplinkStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCellularGatewayUplinkStatusesAsyncWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $serials = null, $iccids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayUplinkStatuses'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationCellularGatewayUplinkStatuses200ResponseInner[]';
        $request = $this->getOrganizationCellularGatewayUplinkStatusesRequest($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $serials, $iccids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationCellularGatewayUplinkStatuses'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids A list of network IDs. The returned devices will be filtered to only include these networks. (optional)
     * @param  string[]|null $serials A list of serial numbers. The returned devices will be filtered to only include these serials. (optional)
     * @param  string[]|null $iccids A list of ICCIDs. The returned devices will be filtered to only include these ICCIDs. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayUplinkStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationCellularGatewayUplinkStatusesRequest($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $serials = null, $iccids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayUplinkStatuses'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationCellularGatewayUplinkStatuses'
            );
        }








        $resourcePath = '/organizations/{organizationId}/cellularGateway/uplink/statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'perPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starting_after,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ending_before,
            'endingBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network_ids,
            'networkIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serials,
            'serials', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iccids,
            'iccids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDeviceCellularGatewayLan
     *
     * Update the LAN Settings for a single MG.
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\UpdateDeviceCellularGatewayLanRequest|null $update_device_cellular_gateway_lan_request update_device_cellular_gateway_lan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceCellularGatewayLan'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceCellularGatewayLan200Response
     */
    public function updateDeviceCellularGatewayLan($serial, $update_device_cellular_gateway_lan_request = null, string $contentType = self::contentTypes['updateDeviceCellularGatewayLan'][0])
    {
        list($response) = $this->updateDeviceCellularGatewayLanWithHttpInfo($serial, $update_device_cellular_gateway_lan_request, $contentType);
        return $response;
    }

    /**
     * Operation updateDeviceCellularGatewayLanWithHttpInfo
     *
     * Update the LAN Settings for a single MG.
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\UpdateDeviceCellularGatewayLanRequest|null $update_device_cellular_gateway_lan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceCellularGatewayLan'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceCellularGatewayLan200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDeviceCellularGatewayLanWithHttpInfo($serial, $update_device_cellular_gateway_lan_request = null, string $contentType = self::contentTypes['updateDeviceCellularGatewayLan'][0])
    {
        $request = $this->updateDeviceCellularGatewayLanRequest($serial, $update_device_cellular_gateway_lan_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceCellularGatewayLan200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceCellularGatewayLan200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceCellularGatewayLan200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceCellularGatewayLan200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceCellularGatewayLan200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDeviceCellularGatewayLanAsync
     *
     * Update the LAN Settings for a single MG.
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\UpdateDeviceCellularGatewayLanRequest|null $update_device_cellular_gateway_lan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceCellularGatewayLan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeviceCellularGatewayLanAsync($serial, $update_device_cellular_gateway_lan_request = null, string $contentType = self::contentTypes['updateDeviceCellularGatewayLan'][0])
    {
        return $this->updateDeviceCellularGatewayLanAsyncWithHttpInfo($serial, $update_device_cellular_gateway_lan_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDeviceCellularGatewayLanAsyncWithHttpInfo
     *
     * Update the LAN Settings for a single MG.
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\UpdateDeviceCellularGatewayLanRequest|null $update_device_cellular_gateway_lan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceCellularGatewayLan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeviceCellularGatewayLanAsyncWithHttpInfo($serial, $update_device_cellular_gateway_lan_request = null, string $contentType = self::contentTypes['updateDeviceCellularGatewayLan'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceCellularGatewayLan200Response';
        $request = $this->updateDeviceCellularGatewayLanRequest($serial, $update_device_cellular_gateway_lan_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDeviceCellularGatewayLan'
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\UpdateDeviceCellularGatewayLanRequest|null $update_device_cellular_gateway_lan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceCellularGatewayLan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDeviceCellularGatewayLanRequest($serial, $update_device_cellular_gateway_lan_request = null, string $contentType = self::contentTypes['updateDeviceCellularGatewayLan'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling updateDeviceCellularGatewayLan'
            );
        }



        $resourcePath = '/devices/{serial}/cellularGateway/lan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_device_cellular_gateway_lan_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_device_cellular_gateway_lan_request));
            } else {
                $httpBody = $update_device_cellular_gateway_lan_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDeviceCellularGatewayPortForwardingRules
     *
     * Updates the port forwarding rules for a single MG.
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\UpdateDeviceCellularGatewayPortForwardingRulesRequest|null $update_device_cellular_gateway_port_forwarding_rules_request update_device_cellular_gateway_port_forwarding_rules_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceCellularGatewayPortForwardingRules'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetDeviceCellularGatewayPortForwardingRules200Response
     */
    public function updateDeviceCellularGatewayPortForwardingRules($serial, $update_device_cellular_gateway_port_forwarding_rules_request = null, string $contentType = self::contentTypes['updateDeviceCellularGatewayPortForwardingRules'][0])
    {
        list($response) = $this->updateDeviceCellularGatewayPortForwardingRulesWithHttpInfo($serial, $update_device_cellular_gateway_port_forwarding_rules_request, $contentType);
        return $response;
    }

    /**
     * Operation updateDeviceCellularGatewayPortForwardingRulesWithHttpInfo
     *
     * Updates the port forwarding rules for a single MG.
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\UpdateDeviceCellularGatewayPortForwardingRulesRequest|null $update_device_cellular_gateway_port_forwarding_rules_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceCellularGatewayPortForwardingRules'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetDeviceCellularGatewayPortForwardingRules200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDeviceCellularGatewayPortForwardingRulesWithHttpInfo($serial, $update_device_cellular_gateway_port_forwarding_rules_request = null, string $contentType = self::contentTypes['updateDeviceCellularGatewayPortForwardingRules'][0])
    {
        $request = $this->updateDeviceCellularGatewayPortForwardingRulesRequest($serial, $update_device_cellular_gateway_port_forwarding_rules_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetDeviceCellularGatewayPortForwardingRules200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetDeviceCellularGatewayPortForwardingRules200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetDeviceCellularGatewayPortForwardingRules200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetDeviceCellularGatewayPortForwardingRules200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetDeviceCellularGatewayPortForwardingRules200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDeviceCellularGatewayPortForwardingRulesAsync
     *
     * Updates the port forwarding rules for a single MG.
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\UpdateDeviceCellularGatewayPortForwardingRulesRequest|null $update_device_cellular_gateway_port_forwarding_rules_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceCellularGatewayPortForwardingRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeviceCellularGatewayPortForwardingRulesAsync($serial, $update_device_cellular_gateway_port_forwarding_rules_request = null, string $contentType = self::contentTypes['updateDeviceCellularGatewayPortForwardingRules'][0])
    {
        return $this->updateDeviceCellularGatewayPortForwardingRulesAsyncWithHttpInfo($serial, $update_device_cellular_gateway_port_forwarding_rules_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDeviceCellularGatewayPortForwardingRulesAsyncWithHttpInfo
     *
     * Updates the port forwarding rules for a single MG.
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\UpdateDeviceCellularGatewayPortForwardingRulesRequest|null $update_device_cellular_gateway_port_forwarding_rules_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceCellularGatewayPortForwardingRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDeviceCellularGatewayPortForwardingRulesAsyncWithHttpInfo($serial, $update_device_cellular_gateway_port_forwarding_rules_request = null, string $contentType = self::contentTypes['updateDeviceCellularGatewayPortForwardingRules'][0])
    {
        $returnType = '\Meraki\Model\GetDeviceCellularGatewayPortForwardingRules200Response';
        $request = $this->updateDeviceCellularGatewayPortForwardingRulesRequest($serial, $update_device_cellular_gateway_port_forwarding_rules_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDeviceCellularGatewayPortForwardingRules'
     *
     * @param  string $serial Serial (required)
     * @param  \Meraki\Model\UpdateDeviceCellularGatewayPortForwardingRulesRequest|null $update_device_cellular_gateway_port_forwarding_rules_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDeviceCellularGatewayPortForwardingRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDeviceCellularGatewayPortForwardingRulesRequest($serial, $update_device_cellular_gateway_port_forwarding_rules_request = null, string $contentType = self::contentTypes['updateDeviceCellularGatewayPortForwardingRules'][0])
    {

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling updateDeviceCellularGatewayPortForwardingRules'
            );
        }



        $resourcePath = '/devices/{serial}/cellularGateway/portForwardingRules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_device_cellular_gateway_port_forwarding_rules_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_device_cellular_gateway_port_forwarding_rules_request));
            } else {
                $httpBody = $update_device_cellular_gateway_port_forwarding_rules_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkCellularGatewayConnectivityMonitoringDestinations
     *
     * Update the connectivity testing destinations for an MG network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest|null $update_network_cellular_gateway_connectivity_monitoring_destinations_request update_network_cellular_gateway_connectivity_monitoring_destinations_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewayConnectivityMonitoringDestinations'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkApplianceConnectivityMonitoringDestinations200Response
     */
    public function updateNetworkCellularGatewayConnectivityMonitoringDestinations($network_id, $update_network_cellular_gateway_connectivity_monitoring_destinations_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewayConnectivityMonitoringDestinations'][0])
    {
        list($response) = $this->updateNetworkCellularGatewayConnectivityMonitoringDestinationsWithHttpInfo($network_id, $update_network_cellular_gateway_connectivity_monitoring_destinations_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkCellularGatewayConnectivityMonitoringDestinationsWithHttpInfo
     *
     * Update the connectivity testing destinations for an MG network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest|null $update_network_cellular_gateway_connectivity_monitoring_destinations_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewayConnectivityMonitoringDestinations'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkApplianceConnectivityMonitoringDestinations200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkCellularGatewayConnectivityMonitoringDestinationsWithHttpInfo($network_id, $update_network_cellular_gateway_connectivity_monitoring_destinations_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewayConnectivityMonitoringDestinations'][0])
    {
        $request = $this->updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest($network_id, $update_network_cellular_gateway_connectivity_monitoring_destinations_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkApplianceConnectivityMonitoringDestinations200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkApplianceConnectivityMonitoringDestinations200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkApplianceConnectivityMonitoringDestinations200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkApplianceConnectivityMonitoringDestinations200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkApplianceConnectivityMonitoringDestinations200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkCellularGatewayConnectivityMonitoringDestinationsAsync
     *
     * Update the connectivity testing destinations for an MG network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest|null $update_network_cellular_gateway_connectivity_monitoring_destinations_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewayConnectivityMonitoringDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkCellularGatewayConnectivityMonitoringDestinationsAsync($network_id, $update_network_cellular_gateway_connectivity_monitoring_destinations_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewayConnectivityMonitoringDestinations'][0])
    {
        return $this->updateNetworkCellularGatewayConnectivityMonitoringDestinationsAsyncWithHttpInfo($network_id, $update_network_cellular_gateway_connectivity_monitoring_destinations_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkCellularGatewayConnectivityMonitoringDestinationsAsyncWithHttpInfo
     *
     * Update the connectivity testing destinations for an MG network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest|null $update_network_cellular_gateway_connectivity_monitoring_destinations_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewayConnectivityMonitoringDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkCellularGatewayConnectivityMonitoringDestinationsAsyncWithHttpInfo($network_id, $update_network_cellular_gateway_connectivity_monitoring_destinations_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewayConnectivityMonitoringDestinations'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkApplianceConnectivityMonitoringDestinations200Response';
        $request = $this->updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest($network_id, $update_network_cellular_gateway_connectivity_monitoring_destinations_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkCellularGatewayConnectivityMonitoringDestinations'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest|null $update_network_cellular_gateway_connectivity_monitoring_destinations_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewayConnectivityMonitoringDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkCellularGatewayConnectivityMonitoringDestinationsRequest($network_id, $update_network_cellular_gateway_connectivity_monitoring_destinations_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewayConnectivityMonitoringDestinations'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkCellularGatewayConnectivityMonitoringDestinations'
            );
        }



        $resourcePath = '/networks/{networkId}/cellularGateway/connectivityMonitoringDestinations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_network_cellular_gateway_connectivity_monitoring_destinations_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_network_cellular_gateway_connectivity_monitoring_destinations_request));
            } else {
                $httpBody = $update_network_cellular_gateway_connectivity_monitoring_destinations_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkCellularGatewayDhcp
     *
     * Update common DHCP settings of MGs
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewayDhcpRequest|null $update_network_cellular_gateway_dhcp_request update_network_cellular_gateway_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewayDhcp'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkCellularGatewayDhcp200Response
     */
    public function updateNetworkCellularGatewayDhcp($network_id, $update_network_cellular_gateway_dhcp_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewayDhcp'][0])
    {
        list($response) = $this->updateNetworkCellularGatewayDhcpWithHttpInfo($network_id, $update_network_cellular_gateway_dhcp_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkCellularGatewayDhcpWithHttpInfo
     *
     * Update common DHCP settings of MGs
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewayDhcpRequest|null $update_network_cellular_gateway_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewayDhcp'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkCellularGatewayDhcp200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkCellularGatewayDhcpWithHttpInfo($network_id, $update_network_cellular_gateway_dhcp_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewayDhcp'][0])
    {
        $request = $this->updateNetworkCellularGatewayDhcpRequest($network_id, $update_network_cellular_gateway_dhcp_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkCellularGatewayDhcp200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkCellularGatewayDhcp200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkCellularGatewayDhcp200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkCellularGatewayDhcp200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkCellularGatewayDhcp200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkCellularGatewayDhcpAsync
     *
     * Update common DHCP settings of MGs
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewayDhcpRequest|null $update_network_cellular_gateway_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewayDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkCellularGatewayDhcpAsync($network_id, $update_network_cellular_gateway_dhcp_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewayDhcp'][0])
    {
        return $this->updateNetworkCellularGatewayDhcpAsyncWithHttpInfo($network_id, $update_network_cellular_gateway_dhcp_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkCellularGatewayDhcpAsyncWithHttpInfo
     *
     * Update common DHCP settings of MGs
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewayDhcpRequest|null $update_network_cellular_gateway_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewayDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkCellularGatewayDhcpAsyncWithHttpInfo($network_id, $update_network_cellular_gateway_dhcp_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewayDhcp'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkCellularGatewayDhcp200Response';
        $request = $this->updateNetworkCellularGatewayDhcpRequest($network_id, $update_network_cellular_gateway_dhcp_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkCellularGatewayDhcp'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewayDhcpRequest|null $update_network_cellular_gateway_dhcp_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewayDhcp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkCellularGatewayDhcpRequest($network_id, $update_network_cellular_gateway_dhcp_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewayDhcp'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkCellularGatewayDhcp'
            );
        }



        $resourcePath = '/networks/{networkId}/cellularGateway/dhcp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_network_cellular_gateway_dhcp_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_network_cellular_gateway_dhcp_request));
            } else {
                $httpBody = $update_network_cellular_gateway_dhcp_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkCellularGatewaySubnetPool
     *
     * Update the subnet pool and mask configuration for MGs in the network.
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewaySubnetPoolRequest|null $update_network_cellular_gateway_subnet_pool_request update_network_cellular_gateway_subnet_pool_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewaySubnetPool'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkCellularGatewaySubnetPool200Response
     */
    public function updateNetworkCellularGatewaySubnetPool($network_id, $update_network_cellular_gateway_subnet_pool_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewaySubnetPool'][0])
    {
        list($response) = $this->updateNetworkCellularGatewaySubnetPoolWithHttpInfo($network_id, $update_network_cellular_gateway_subnet_pool_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkCellularGatewaySubnetPoolWithHttpInfo
     *
     * Update the subnet pool and mask configuration for MGs in the network.
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewaySubnetPoolRequest|null $update_network_cellular_gateway_subnet_pool_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewaySubnetPool'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkCellularGatewaySubnetPool200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkCellularGatewaySubnetPoolWithHttpInfo($network_id, $update_network_cellular_gateway_subnet_pool_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewaySubnetPool'][0])
    {
        $request = $this->updateNetworkCellularGatewaySubnetPoolRequest($network_id, $update_network_cellular_gateway_subnet_pool_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkCellularGatewaySubnetPool200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkCellularGatewaySubnetPool200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkCellularGatewaySubnetPool200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkCellularGatewaySubnetPool200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkCellularGatewaySubnetPool200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkCellularGatewaySubnetPoolAsync
     *
     * Update the subnet pool and mask configuration for MGs in the network.
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewaySubnetPoolRequest|null $update_network_cellular_gateway_subnet_pool_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewaySubnetPool'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkCellularGatewaySubnetPoolAsync($network_id, $update_network_cellular_gateway_subnet_pool_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewaySubnetPool'][0])
    {
        return $this->updateNetworkCellularGatewaySubnetPoolAsyncWithHttpInfo($network_id, $update_network_cellular_gateway_subnet_pool_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkCellularGatewaySubnetPoolAsyncWithHttpInfo
     *
     * Update the subnet pool and mask configuration for MGs in the network.
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewaySubnetPoolRequest|null $update_network_cellular_gateway_subnet_pool_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewaySubnetPool'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkCellularGatewaySubnetPoolAsyncWithHttpInfo($network_id, $update_network_cellular_gateway_subnet_pool_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewaySubnetPool'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkCellularGatewaySubnetPool200Response';
        $request = $this->updateNetworkCellularGatewaySubnetPoolRequest($network_id, $update_network_cellular_gateway_subnet_pool_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkCellularGatewaySubnetPool'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewaySubnetPoolRequest|null $update_network_cellular_gateway_subnet_pool_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewaySubnetPool'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkCellularGatewaySubnetPoolRequest($network_id, $update_network_cellular_gateway_subnet_pool_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewaySubnetPool'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkCellularGatewaySubnetPool'
            );
        }



        $resourcePath = '/networks/{networkId}/cellularGateway/subnetPool';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_network_cellular_gateway_subnet_pool_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_network_cellular_gateway_subnet_pool_request));
            } else {
                $httpBody = $update_network_cellular_gateway_subnet_pool_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkCellularGatewayUplink
     *
     * Updates the uplink settings for your MG network.
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewayUplinkRequest|null $update_network_cellular_gateway_uplink_request update_network_cellular_gateway_uplink_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewayUplink'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkCellularGatewayUplink200Response
     */
    public function updateNetworkCellularGatewayUplink($network_id, $update_network_cellular_gateway_uplink_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewayUplink'][0])
    {
        list($response) = $this->updateNetworkCellularGatewayUplinkWithHttpInfo($network_id, $update_network_cellular_gateway_uplink_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkCellularGatewayUplinkWithHttpInfo
     *
     * Updates the uplink settings for your MG network.
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewayUplinkRequest|null $update_network_cellular_gateway_uplink_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewayUplink'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkCellularGatewayUplink200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkCellularGatewayUplinkWithHttpInfo($network_id, $update_network_cellular_gateway_uplink_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewayUplink'][0])
    {
        $request = $this->updateNetworkCellularGatewayUplinkRequest($network_id, $update_network_cellular_gateway_uplink_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkCellularGatewayUplink200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkCellularGatewayUplink200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkCellularGatewayUplink200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkCellularGatewayUplink200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkCellularGatewayUplink200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkCellularGatewayUplinkAsync
     *
     * Updates the uplink settings for your MG network.
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewayUplinkRequest|null $update_network_cellular_gateway_uplink_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewayUplink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkCellularGatewayUplinkAsync($network_id, $update_network_cellular_gateway_uplink_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewayUplink'][0])
    {
        return $this->updateNetworkCellularGatewayUplinkAsyncWithHttpInfo($network_id, $update_network_cellular_gateway_uplink_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkCellularGatewayUplinkAsyncWithHttpInfo
     *
     * Updates the uplink settings for your MG network.
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewayUplinkRequest|null $update_network_cellular_gateway_uplink_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewayUplink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkCellularGatewayUplinkAsyncWithHttpInfo($network_id, $update_network_cellular_gateway_uplink_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewayUplink'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkCellularGatewayUplink200Response';
        $request = $this->updateNetworkCellularGatewayUplinkRequest($network_id, $update_network_cellular_gateway_uplink_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkCellularGatewayUplink'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkCellularGatewayUplinkRequest|null $update_network_cellular_gateway_uplink_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkCellularGatewayUplink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkCellularGatewayUplinkRequest($network_id, $update_network_cellular_gateway_uplink_request = null, string $contentType = self::contentTypes['updateNetworkCellularGatewayUplink'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkCellularGatewayUplink'
            );
        }



        $resourcePath = '/networks/{networkId}/cellularGateway/uplink';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_network_cellular_gateway_uplink_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_network_cellular_gateway_uplink_request));
            } else {
                $httpBody = $update_network_cellular_gateway_uplink_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrganizationCellularGatewayEsimsInventory
     *
     * Toggle the status of an eSIM
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $id ID (required)
     * @param  \Meraki\Model\UpdateOrganizationCellularGatewayEsimsInventoryRequest|null $update_organization_cellular_gateway_esims_inventory_request update_organization_cellular_gateway_esims_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200ResponseItemsInner
     */
    public function updateOrganizationCellularGatewayEsimsInventory($organization_id, $id, $update_organization_cellular_gateway_esims_inventory_request = null, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'][0])
    {
        list($response) = $this->updateOrganizationCellularGatewayEsimsInventoryWithHttpInfo($organization_id, $id, $update_organization_cellular_gateway_esims_inventory_request, $contentType);
        return $response;
    }

    /**
     * Operation updateOrganizationCellularGatewayEsimsInventoryWithHttpInfo
     *
     * Toggle the status of an eSIM
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $id ID (required)
     * @param  \Meraki\Model\UpdateOrganizationCellularGatewayEsimsInventoryRequest|null $update_organization_cellular_gateway_esims_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200ResponseItemsInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrganizationCellularGatewayEsimsInventoryWithHttpInfo($organization_id, $id, $update_organization_cellular_gateway_esims_inventory_request = null, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'][0])
    {
        $request = $this->updateOrganizationCellularGatewayEsimsInventoryRequest($organization_id, $id, $update_organization_cellular_gateway_esims_inventory_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200ResponseItemsInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200ResponseItemsInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200ResponseItemsInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200ResponseItemsInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200ResponseItemsInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrganizationCellularGatewayEsimsInventoryAsync
     *
     * Toggle the status of an eSIM
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $id ID (required)
     * @param  \Meraki\Model\UpdateOrganizationCellularGatewayEsimsInventoryRequest|null $update_organization_cellular_gateway_esims_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationCellularGatewayEsimsInventoryAsync($organization_id, $id, $update_organization_cellular_gateway_esims_inventory_request = null, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'][0])
    {
        return $this->updateOrganizationCellularGatewayEsimsInventoryAsyncWithHttpInfo($organization_id, $id, $update_organization_cellular_gateway_esims_inventory_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateOrganizationCellularGatewayEsimsInventoryAsyncWithHttpInfo
     *
     * Toggle the status of an eSIM
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $id ID (required)
     * @param  \Meraki\Model\UpdateOrganizationCellularGatewayEsimsInventoryRequest|null $update_organization_cellular_gateway_esims_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationCellularGatewayEsimsInventoryAsyncWithHttpInfo($organization_id, $id, $update_organization_cellular_gateway_esims_inventory_request = null, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200ResponseItemsInner';
        $request = $this->updateOrganizationCellularGatewayEsimsInventoryRequest($organization_id, $id, $update_organization_cellular_gateway_esims_inventory_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrganizationCellularGatewayEsimsInventory'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $id ID (required)
     * @param  \Meraki\Model\UpdateOrganizationCellularGatewayEsimsInventoryRequest|null $update_organization_cellular_gateway_esims_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateOrganizationCellularGatewayEsimsInventoryRequest($organization_id, $id, $update_organization_cellular_gateway_esims_inventory_request = null, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling updateOrganizationCellularGatewayEsimsInventory'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateOrganizationCellularGatewayEsimsInventory'
            );
        }



        $resourcePath = '/organizations/{organizationId}/cellularGateway/esims/inventory/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_organization_cellular_gateway_esims_inventory_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_organization_cellular_gateway_esims_inventory_request));
            } else {
                $httpBody = $update_organization_cellular_gateway_esims_inventory_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrganizationCellularGatewayEsimsServiceProvidersAccount
     *
     * Edit service provider account info stored in Meraki&#39;s database.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $account_id Account ID (required)
     * @param  \Meraki\Model\UpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest|null $update_organization_cellular_gateway_esims_service_providers_account_request update_organization_cellular_gateway_esims_service_providers_account_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsServiceProvidersAccount'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInnerItemsInner
     */
    public function updateOrganizationCellularGatewayEsimsServiceProvidersAccount($organization_id, $account_id, $update_organization_cellular_gateway_esims_service_providers_account_request = null, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsServiceProvidersAccount'][0])
    {
        list($response) = $this->updateOrganizationCellularGatewayEsimsServiceProvidersAccountWithHttpInfo($organization_id, $account_id, $update_organization_cellular_gateway_esims_service_providers_account_request, $contentType);
        return $response;
    }

    /**
     * Operation updateOrganizationCellularGatewayEsimsServiceProvidersAccountWithHttpInfo
     *
     * Edit service provider account info stored in Meraki&#39;s database.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $account_id Account ID (required)
     * @param  \Meraki\Model\UpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest|null $update_organization_cellular_gateway_esims_service_providers_account_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsServiceProvidersAccount'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInnerItemsInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrganizationCellularGatewayEsimsServiceProvidersAccountWithHttpInfo($organization_id, $account_id, $update_organization_cellular_gateway_esims_service_providers_account_request = null, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsServiceProvidersAccount'][0])
    {
        $request = $this->updateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest($organization_id, $account_id, $update_organization_cellular_gateway_esims_service_providers_account_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInnerItemsInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInnerItemsInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInnerItemsInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInnerItemsInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInnerItemsInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrganizationCellularGatewayEsimsServiceProvidersAccountAsync
     *
     * Edit service provider account info stored in Meraki&#39;s database.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $account_id Account ID (required)
     * @param  \Meraki\Model\UpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest|null $update_organization_cellular_gateway_esims_service_providers_account_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsServiceProvidersAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationCellularGatewayEsimsServiceProvidersAccountAsync($organization_id, $account_id, $update_organization_cellular_gateway_esims_service_providers_account_request = null, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsServiceProvidersAccount'][0])
    {
        return $this->updateOrganizationCellularGatewayEsimsServiceProvidersAccountAsyncWithHttpInfo($organization_id, $account_id, $update_organization_cellular_gateway_esims_service_providers_account_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateOrganizationCellularGatewayEsimsServiceProvidersAccountAsyncWithHttpInfo
     *
     * Edit service provider account info stored in Meraki&#39;s database.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $account_id Account ID (required)
     * @param  \Meraki\Model\UpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest|null $update_organization_cellular_gateway_esims_service_providers_account_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsServiceProvidersAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationCellularGatewayEsimsServiceProvidersAccountAsyncWithHttpInfo($organization_id, $account_id, $update_organization_cellular_gateway_esims_service_providers_account_request = null, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsServiceProvidersAccount'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsServiceProvidersAccounts200ResponseInnerItemsInner';
        $request = $this->updateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest($organization_id, $account_id, $update_organization_cellular_gateway_esims_service_providers_account_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrganizationCellularGatewayEsimsServiceProvidersAccount'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $account_id Account ID (required)
     * @param  \Meraki\Model\UpdateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest|null $update_organization_cellular_gateway_esims_service_providers_account_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsServiceProvidersAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateOrganizationCellularGatewayEsimsServiceProvidersAccountRequest($organization_id, $account_id, $update_organization_cellular_gateway_esims_service_providers_account_request = null, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsServiceProvidersAccount'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling updateOrganizationCellularGatewayEsimsServiceProvidersAccount'
            );
        }

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling updateOrganizationCellularGatewayEsimsServiceProvidersAccount'
            );
        }



        $resourcePath = '/organizations/{organizationId}/cellularGateway/esims/serviceProviders/accounts/{accountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_organization_cellular_gateway_esims_service_providers_account_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_organization_cellular_gateway_esims_service_providers_account_request));
            } else {
                $httpBody = $update_organization_cellular_gateway_esims_service_providers_account_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrganizationCellularGatewayEsimsSwap
     *
     * Get the status of a profile swap.
     *
     * @param  string $id eSIM EID (required)
     * @param  string $organization_id Organization ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsSwap'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CreateOrganizationCellularGatewayEsimsSwap200Response
     */
    public function updateOrganizationCellularGatewayEsimsSwap($id, $organization_id, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsSwap'][0])
    {
        list($response) = $this->updateOrganizationCellularGatewayEsimsSwapWithHttpInfo($id, $organization_id, $contentType);
        return $response;
    }

    /**
     * Operation updateOrganizationCellularGatewayEsimsSwapWithHttpInfo
     *
     * Get the status of a profile swap.
     *
     * @param  string $id eSIM EID (required)
     * @param  string $organization_id Organization ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsSwap'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CreateOrganizationCellularGatewayEsimsSwap200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrganizationCellularGatewayEsimsSwapWithHttpInfo($id, $organization_id, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsSwap'][0])
    {
        $request = $this->updateOrganizationCellularGatewayEsimsSwapRequest($id, $organization_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\CreateOrganizationCellularGatewayEsimsSwap200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CreateOrganizationCellularGatewayEsimsSwap200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CreateOrganizationCellularGatewayEsimsSwap200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CreateOrganizationCellularGatewayEsimsSwap200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CreateOrganizationCellularGatewayEsimsSwap200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrganizationCellularGatewayEsimsSwapAsync
     *
     * Get the status of a profile swap.
     *
     * @param  string $id eSIM EID (required)
     * @param  string $organization_id Organization ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationCellularGatewayEsimsSwapAsync($id, $organization_id, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsSwap'][0])
    {
        return $this->updateOrganizationCellularGatewayEsimsSwapAsyncWithHttpInfo($id, $organization_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateOrganizationCellularGatewayEsimsSwapAsyncWithHttpInfo
     *
     * Get the status of a profile swap.
     *
     * @param  string $id eSIM EID (required)
     * @param  string $organization_id Organization ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationCellularGatewayEsimsSwapAsyncWithHttpInfo($id, $organization_id, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsSwap'][0])
    {
        $returnType = '\Meraki\Model\CreateOrganizationCellularGatewayEsimsSwap200Response';
        $request = $this->updateOrganizationCellularGatewayEsimsSwapRequest($id, $organization_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrganizationCellularGatewayEsimsSwap'
     *
     * @param  string $id eSIM EID (required)
     * @param  string $organization_id Organization ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsSwap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateOrganizationCellularGatewayEsimsSwapRequest($id, $organization_id, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsSwap'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateOrganizationCellularGatewayEsimsSwap'
            );
        }

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling updateOrganizationCellularGatewayEsimsSwap'
            );
        }


        $resourcePath = '/organizations/{organizationId}/cellularGateway/esims/swap/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
