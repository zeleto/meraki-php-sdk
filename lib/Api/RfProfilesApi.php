<?php
/**
 * RfProfilesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Meraki\ApiException;
use Meraki\Configuration;
use Meraki\HeaderSelector;
use Meraki\ObjectSerializer;

/**
 * RfProfilesApi Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RfProfilesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createNetworkApplianceRfProfile' => [
            'application/json',
        ],
        'createNetworkWirelessRfProfile' => [
            'application/json',
        ],
        'deleteNetworkApplianceRfProfile' => [
            'application/json',
        ],
        'deleteNetworkWirelessRfProfile' => [
            'application/json',
        ],
        'getNetworkApplianceRfProfile' => [
            'application/json',
        ],
        'getNetworkApplianceRfProfiles' => [
            'application/json',
        ],
        'getNetworkWirelessRfProfile' => [
            'application/json',
        ],
        'getNetworkWirelessRfProfiles' => [
            'application/json',
        ],
        'getOrganizationWirelessRfProfilesAssignmentsByDevice' => [
            'application/json',
        ],
        'updateNetworkApplianceRfProfile' => [
            'application/json',
        ],
        'updateNetworkWirelessRfProfile' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createNetworkApplianceRfProfile
     *
     * Creates new RF profile for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkApplianceRfProfileRequest $create_network_appliance_rf_profile_request create_network_appliance_rf_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner
     */
    public function createNetworkApplianceRfProfile($network_id, $create_network_appliance_rf_profile_request, string $contentType = self::contentTypes['createNetworkApplianceRfProfile'][0])
    {
        list($response) = $this->createNetworkApplianceRfProfileWithHttpInfo($network_id, $create_network_appliance_rf_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation createNetworkApplianceRfProfileWithHttpInfo
     *
     * Creates new RF profile for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkApplianceRfProfileRequest $create_network_appliance_rf_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNetworkApplianceRfProfileWithHttpInfo($network_id, $create_network_appliance_rf_profile_request, string $contentType = self::contentTypes['createNetworkApplianceRfProfile'][0])
    {
        $request = $this->createNetworkApplianceRfProfileRequest($network_id, $create_network_appliance_rf_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNetworkApplianceRfProfileAsync
     *
     * Creates new RF profile for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkApplianceRfProfileRequest $create_network_appliance_rf_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkApplianceRfProfileAsync($network_id, $create_network_appliance_rf_profile_request, string $contentType = self::contentTypes['createNetworkApplianceRfProfile'][0])
    {
        return $this->createNetworkApplianceRfProfileAsyncWithHttpInfo($network_id, $create_network_appliance_rf_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNetworkApplianceRfProfileAsyncWithHttpInfo
     *
     * Creates new RF profile for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkApplianceRfProfileRequest $create_network_appliance_rf_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkApplianceRfProfileAsyncWithHttpInfo($network_id, $create_network_appliance_rf_profile_request, string $contentType = self::contentTypes['createNetworkApplianceRfProfile'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner';
        $request = $this->createNetworkApplianceRfProfileRequest($network_id, $create_network_appliance_rf_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNetworkApplianceRfProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkApplianceRfProfileRequest $create_network_appliance_rf_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNetworkApplianceRfProfileRequest($network_id, $create_network_appliance_rf_profile_request, string $contentType = self::contentTypes['createNetworkApplianceRfProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling createNetworkApplianceRfProfile'
            );
        }

        // verify the required parameter 'create_network_appliance_rf_profile_request' is set
        if ($create_network_appliance_rf_profile_request === null || (is_array($create_network_appliance_rf_profile_request) && count($create_network_appliance_rf_profile_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_network_appliance_rf_profile_request when calling createNetworkApplianceRfProfile'
            );
        }


        $resourcePath = '/networks/{networkId}/appliance/rfProfiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_network_appliance_rf_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_network_appliance_rf_profile_request));
            } else {
                $httpBody = $create_network_appliance_rf_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNetworkWirelessRfProfile
     *
     * Creates new RF profile for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkWirelessRfProfileRequest $create_network_wireless_rf_profile_request create_network_wireless_rf_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkWirelessRfProfiles200Response
     */
    public function createNetworkWirelessRfProfile($network_id, $create_network_wireless_rf_profile_request, string $contentType = self::contentTypes['createNetworkWirelessRfProfile'][0])
    {
        list($response) = $this->createNetworkWirelessRfProfileWithHttpInfo($network_id, $create_network_wireless_rf_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation createNetworkWirelessRfProfileWithHttpInfo
     *
     * Creates new RF profile for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkWirelessRfProfileRequest $create_network_wireless_rf_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkWirelessRfProfiles200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNetworkWirelessRfProfileWithHttpInfo($network_id, $create_network_wireless_rf_profile_request, string $contentType = self::contentTypes['createNetworkWirelessRfProfile'][0])
    {
        $request = $this->createNetworkWirelessRfProfileRequest($network_id, $create_network_wireless_rf_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\GetNetworkWirelessRfProfiles200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkWirelessRfProfiles200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkWirelessRfProfiles200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkWirelessRfProfiles200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkWirelessRfProfiles200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNetworkWirelessRfProfileAsync
     *
     * Creates new RF profile for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkWirelessRfProfileRequest $create_network_wireless_rf_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkWirelessRfProfileAsync($network_id, $create_network_wireless_rf_profile_request, string $contentType = self::contentTypes['createNetworkWirelessRfProfile'][0])
    {
        return $this->createNetworkWirelessRfProfileAsyncWithHttpInfo($network_id, $create_network_wireless_rf_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNetworkWirelessRfProfileAsyncWithHttpInfo
     *
     * Creates new RF profile for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkWirelessRfProfileRequest $create_network_wireless_rf_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkWirelessRfProfileAsyncWithHttpInfo($network_id, $create_network_wireless_rf_profile_request, string $contentType = self::contentTypes['createNetworkWirelessRfProfile'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkWirelessRfProfiles200Response';
        $request = $this->createNetworkWirelessRfProfileRequest($network_id, $create_network_wireless_rf_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNetworkWirelessRfProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkWirelessRfProfileRequest $create_network_wireless_rf_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNetworkWirelessRfProfileRequest($network_id, $create_network_wireless_rf_profile_request, string $contentType = self::contentTypes['createNetworkWirelessRfProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling createNetworkWirelessRfProfile'
            );
        }

        // verify the required parameter 'create_network_wireless_rf_profile_request' is set
        if ($create_network_wireless_rf_profile_request === null || (is_array($create_network_wireless_rf_profile_request) && count($create_network_wireless_rf_profile_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_network_wireless_rf_profile_request when calling createNetworkWirelessRfProfile'
            );
        }


        $resourcePath = '/networks/{networkId}/wireless/rfProfiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_network_wireless_rf_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_network_wireless_rf_profile_request));
            } else {
                $httpBody = $create_network_wireless_rf_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNetworkApplianceRfProfile
     *
     * Delete a RF Profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNetworkApplianceRfProfile($network_id, $rf_profile_id, string $contentType = self::contentTypes['deleteNetworkApplianceRfProfile'][0])
    {
        $this->deleteNetworkApplianceRfProfileWithHttpInfo($network_id, $rf_profile_id, $contentType);
    }

    /**
     * Operation deleteNetworkApplianceRfProfileWithHttpInfo
     *
     * Delete a RF Profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNetworkApplianceRfProfileWithHttpInfo($network_id, $rf_profile_id, string $contentType = self::contentTypes['deleteNetworkApplianceRfProfile'][0])
    {
        $request = $this->deleteNetworkApplianceRfProfileRequest($network_id, $rf_profile_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNetworkApplianceRfProfileAsync
     *
     * Delete a RF Profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkApplianceRfProfileAsync($network_id, $rf_profile_id, string $contentType = self::contentTypes['deleteNetworkApplianceRfProfile'][0])
    {
        return $this->deleteNetworkApplianceRfProfileAsyncWithHttpInfo($network_id, $rf_profile_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNetworkApplianceRfProfileAsyncWithHttpInfo
     *
     * Delete a RF Profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkApplianceRfProfileAsyncWithHttpInfo($network_id, $rf_profile_id, string $contentType = self::contentTypes['deleteNetworkApplianceRfProfile'][0])
    {
        $returnType = '';
        $request = $this->deleteNetworkApplianceRfProfileRequest($network_id, $rf_profile_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNetworkApplianceRfProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNetworkApplianceRfProfileRequest($network_id, $rf_profile_id, string $contentType = self::contentTypes['deleteNetworkApplianceRfProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling deleteNetworkApplianceRfProfile'
            );
        }

        // verify the required parameter 'rf_profile_id' is set
        if ($rf_profile_id === null || (is_array($rf_profile_id) && count($rf_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rf_profile_id when calling deleteNetworkApplianceRfProfile'
            );
        }


        $resourcePath = '/networks/{networkId}/appliance/rfProfiles/{rfProfileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($rf_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rfProfileId' . '}',
                ObjectSerializer::toPathValue($rf_profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNetworkWirelessRfProfile
     *
     * Delete a RF Profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNetworkWirelessRfProfile($network_id, $rf_profile_id, string $contentType = self::contentTypes['deleteNetworkWirelessRfProfile'][0])
    {
        $this->deleteNetworkWirelessRfProfileWithHttpInfo($network_id, $rf_profile_id, $contentType);
    }

    /**
     * Operation deleteNetworkWirelessRfProfileWithHttpInfo
     *
     * Delete a RF Profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNetworkWirelessRfProfileWithHttpInfo($network_id, $rf_profile_id, string $contentType = self::contentTypes['deleteNetworkWirelessRfProfile'][0])
    {
        $request = $this->deleteNetworkWirelessRfProfileRequest($network_id, $rf_profile_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNetworkWirelessRfProfileAsync
     *
     * Delete a RF Profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkWirelessRfProfileAsync($network_id, $rf_profile_id, string $contentType = self::contentTypes['deleteNetworkWirelessRfProfile'][0])
    {
        return $this->deleteNetworkWirelessRfProfileAsyncWithHttpInfo($network_id, $rf_profile_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNetworkWirelessRfProfileAsyncWithHttpInfo
     *
     * Delete a RF Profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkWirelessRfProfileAsyncWithHttpInfo($network_id, $rf_profile_id, string $contentType = self::contentTypes['deleteNetworkWirelessRfProfile'][0])
    {
        $returnType = '';
        $request = $this->deleteNetworkWirelessRfProfileRequest($network_id, $rf_profile_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNetworkWirelessRfProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNetworkWirelessRfProfileRequest($network_id, $rf_profile_id, string $contentType = self::contentTypes['deleteNetworkWirelessRfProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling deleteNetworkWirelessRfProfile'
            );
        }

        // verify the required parameter 'rf_profile_id' is set
        if ($rf_profile_id === null || (is_array($rf_profile_id) && count($rf_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rf_profile_id when calling deleteNetworkWirelessRfProfile'
            );
        }


        $resourcePath = '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($rf_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rfProfileId' . '}',
                ObjectSerializer::toPathValue($rf_profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkApplianceRfProfile
     *
     * Return a RF profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner
     */
    public function getNetworkApplianceRfProfile($network_id, $rf_profile_id, string $contentType = self::contentTypes['getNetworkApplianceRfProfile'][0])
    {
        list($response) = $this->getNetworkApplianceRfProfileWithHttpInfo($network_id, $rf_profile_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkApplianceRfProfileWithHttpInfo
     *
     * Return a RF profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkApplianceRfProfileWithHttpInfo($network_id, $rf_profile_id, string $contentType = self::contentTypes['getNetworkApplianceRfProfile'][0])
    {
        $request = $this->getNetworkApplianceRfProfileRequest($network_id, $rf_profile_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkApplianceRfProfileAsync
     *
     * Return a RF profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkApplianceRfProfileAsync($network_id, $rf_profile_id, string $contentType = self::contentTypes['getNetworkApplianceRfProfile'][0])
    {
        return $this->getNetworkApplianceRfProfileAsyncWithHttpInfo($network_id, $rf_profile_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkApplianceRfProfileAsyncWithHttpInfo
     *
     * Return a RF profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkApplianceRfProfileAsyncWithHttpInfo($network_id, $rf_profile_id, string $contentType = self::contentTypes['getNetworkApplianceRfProfile'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner';
        $request = $this->getNetworkApplianceRfProfileRequest($network_id, $rf_profile_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkApplianceRfProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkApplianceRfProfileRequest($network_id, $rf_profile_id, string $contentType = self::contentTypes['getNetworkApplianceRfProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkApplianceRfProfile'
            );
        }

        // verify the required parameter 'rf_profile_id' is set
        if ($rf_profile_id === null || (is_array($rf_profile_id) && count($rf_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rf_profile_id when calling getNetworkApplianceRfProfile'
            );
        }


        $resourcePath = '/networks/{networkId}/appliance/rfProfiles/{rfProfileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($rf_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rfProfileId' . '}',
                ObjectSerializer::toPathValue($rf_profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkApplianceRfProfiles
     *
     * List the RF profiles for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkApplianceRfProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkApplianceRfProfiles200Response
     */
    public function getNetworkApplianceRfProfiles($network_id, string $contentType = self::contentTypes['getNetworkApplianceRfProfiles'][0])
    {
        list($response) = $this->getNetworkApplianceRfProfilesWithHttpInfo($network_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkApplianceRfProfilesWithHttpInfo
     *
     * List the RF profiles for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkApplianceRfProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkApplianceRfProfiles200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkApplianceRfProfilesWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkApplianceRfProfiles'][0])
    {
        $request = $this->getNetworkApplianceRfProfilesRequest($network_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkApplianceRfProfiles200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkApplianceRfProfiles200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkApplianceRfProfiles200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkApplianceRfProfiles200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkApplianceRfProfiles200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkApplianceRfProfilesAsync
     *
     * List the RF profiles for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkApplianceRfProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkApplianceRfProfilesAsync($network_id, string $contentType = self::contentTypes['getNetworkApplianceRfProfiles'][0])
    {
        return $this->getNetworkApplianceRfProfilesAsyncWithHttpInfo($network_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkApplianceRfProfilesAsyncWithHttpInfo
     *
     * List the RF profiles for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkApplianceRfProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkApplianceRfProfilesAsyncWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkApplianceRfProfiles'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkApplianceRfProfiles200Response';
        $request = $this->getNetworkApplianceRfProfilesRequest($network_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkApplianceRfProfiles'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkApplianceRfProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkApplianceRfProfilesRequest($network_id, string $contentType = self::contentTypes['getNetworkApplianceRfProfiles'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkApplianceRfProfiles'
            );
        }


        $resourcePath = '/networks/{networkId}/appliance/rfProfiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkWirelessRfProfile
     *
     * Return a RF profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkWirelessRfProfiles200Response
     */
    public function getNetworkWirelessRfProfile($network_id, $rf_profile_id, string $contentType = self::contentTypes['getNetworkWirelessRfProfile'][0])
    {
        list($response) = $this->getNetworkWirelessRfProfileWithHttpInfo($network_id, $rf_profile_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkWirelessRfProfileWithHttpInfo
     *
     * Return a RF profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkWirelessRfProfiles200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkWirelessRfProfileWithHttpInfo($network_id, $rf_profile_id, string $contentType = self::contentTypes['getNetworkWirelessRfProfile'][0])
    {
        $request = $this->getNetworkWirelessRfProfileRequest($network_id, $rf_profile_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkWirelessRfProfiles200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkWirelessRfProfiles200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkWirelessRfProfiles200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkWirelessRfProfiles200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkWirelessRfProfiles200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkWirelessRfProfileAsync
     *
     * Return a RF profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkWirelessRfProfileAsync($network_id, $rf_profile_id, string $contentType = self::contentTypes['getNetworkWirelessRfProfile'][0])
    {
        return $this->getNetworkWirelessRfProfileAsyncWithHttpInfo($network_id, $rf_profile_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkWirelessRfProfileAsyncWithHttpInfo
     *
     * Return a RF profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkWirelessRfProfileAsyncWithHttpInfo($network_id, $rf_profile_id, string $contentType = self::contentTypes['getNetworkWirelessRfProfile'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkWirelessRfProfiles200Response';
        $request = $this->getNetworkWirelessRfProfileRequest($network_id, $rf_profile_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkWirelessRfProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkWirelessRfProfileRequest($network_id, $rf_profile_id, string $contentType = self::contentTypes['getNetworkWirelessRfProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkWirelessRfProfile'
            );
        }

        // verify the required parameter 'rf_profile_id' is set
        if ($rf_profile_id === null || (is_array($rf_profile_id) && count($rf_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rf_profile_id when calling getNetworkWirelessRfProfile'
            );
        }


        $resourcePath = '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($rf_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rfProfileId' . '}',
                ObjectSerializer::toPathValue($rf_profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkWirelessRfProfiles
     *
     * List RF profiles for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  bool|null $include_template_profiles If the network is bound to a template, this parameter controls whether or not the non-basic RF profiles defined on the template should be included in the response alongside the non-basic profiles defined on the bound network. Defaults to false. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessRfProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkWirelessRfProfiles200Response
     */
    public function getNetworkWirelessRfProfiles($network_id, $include_template_profiles = null, string $contentType = self::contentTypes['getNetworkWirelessRfProfiles'][0])
    {
        list($response) = $this->getNetworkWirelessRfProfilesWithHttpInfo($network_id, $include_template_profiles, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkWirelessRfProfilesWithHttpInfo
     *
     * List RF profiles for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  bool|null $include_template_profiles If the network is bound to a template, this parameter controls whether or not the non-basic RF profiles defined on the template should be included in the response alongside the non-basic profiles defined on the bound network. Defaults to false. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessRfProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkWirelessRfProfiles200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkWirelessRfProfilesWithHttpInfo($network_id, $include_template_profiles = null, string $contentType = self::contentTypes['getNetworkWirelessRfProfiles'][0])
    {
        $request = $this->getNetworkWirelessRfProfilesRequest($network_id, $include_template_profiles, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkWirelessRfProfiles200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkWirelessRfProfiles200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkWirelessRfProfiles200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkWirelessRfProfiles200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkWirelessRfProfiles200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkWirelessRfProfilesAsync
     *
     * List RF profiles for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  bool|null $include_template_profiles If the network is bound to a template, this parameter controls whether or not the non-basic RF profiles defined on the template should be included in the response alongside the non-basic profiles defined on the bound network. Defaults to false. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessRfProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkWirelessRfProfilesAsync($network_id, $include_template_profiles = null, string $contentType = self::contentTypes['getNetworkWirelessRfProfiles'][0])
    {
        return $this->getNetworkWirelessRfProfilesAsyncWithHttpInfo($network_id, $include_template_profiles, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkWirelessRfProfilesAsyncWithHttpInfo
     *
     * List RF profiles for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  bool|null $include_template_profiles If the network is bound to a template, this parameter controls whether or not the non-basic RF profiles defined on the template should be included in the response alongside the non-basic profiles defined on the bound network. Defaults to false. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessRfProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkWirelessRfProfilesAsyncWithHttpInfo($network_id, $include_template_profiles = null, string $contentType = self::contentTypes['getNetworkWirelessRfProfiles'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkWirelessRfProfiles200Response';
        $request = $this->getNetworkWirelessRfProfilesRequest($network_id, $include_template_profiles, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkWirelessRfProfiles'
     *
     * @param  string $network_id Network ID (required)
     * @param  bool|null $include_template_profiles If the network is bound to a template, this parameter controls whether or not the non-basic RF profiles defined on the template should be included in the response alongside the non-basic profiles defined on the bound network. Defaults to false. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessRfProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkWirelessRfProfilesRequest($network_id, $include_template_profiles = null, string $contentType = self::contentTypes['getNetworkWirelessRfProfiles'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkWirelessRfProfiles'
            );
        }



        $resourcePath = '/networks/{networkId}/wireless/rfProfiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_template_profiles,
            'includeTemplateProfiles', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationWirelessRfProfilesAssignmentsByDevice
     *
     * List the RF profiles of an organization by device
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter devices by network. (optional)
     * @param  string[]|null $product_types Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, sensor, wirelessController, and secureConnect. (optional)
     * @param  string|null $name Optional parameter to filter RF profiles by device name. All returned devices will have a name that contains the search term or is an exact match. (optional)
     * @param  string|null $mac Optional parameter to filter RF profiles by device MAC address. All returned devices will have a MAC address that contains the search term or is an exact match. (optional)
     * @param  string|null $serial Optional parameter to filter RF profiles by device serial number. All returned devices will have a serial number that contains the search term or is an exact match. (optional)
     * @param  string|null $model Optional parameter to filter RF profiles by device model. All returned devices will have a model that contains the search term or is an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter RF profiles by one or more device MAC addresses. All returned devices will have a MAC address that is an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter RF profiles by one or more device serial numbers. All returned devices will have a serial number that is an exact match. (optional)
     * @param  string[]|null $models Optional parameter to filter RF profiles by one or more device models. All returned devices will have a model that is an exact match. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationWirelessRfProfilesAssignmentsByDevice200ResponseInner[]
     */
    public function getOrganizationWirelessRfProfilesAssignmentsByDevice($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $product_types = null, $name = null, $mac = null, $serial = null, $model = null, $macs = null, $serials = null, $models = null, string $contentType = self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'][0])
    {
        list($response) = $this->getOrganizationWirelessRfProfilesAssignmentsByDeviceWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $product_types, $name, $mac, $serial, $model, $macs, $serials, $models, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationWirelessRfProfilesAssignmentsByDeviceWithHttpInfo
     *
     * List the RF profiles of an organization by device
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter devices by network. (optional)
     * @param  string[]|null $product_types Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, sensor, wirelessController, and secureConnect. (optional)
     * @param  string|null $name Optional parameter to filter RF profiles by device name. All returned devices will have a name that contains the search term or is an exact match. (optional)
     * @param  string|null $mac Optional parameter to filter RF profiles by device MAC address. All returned devices will have a MAC address that contains the search term or is an exact match. (optional)
     * @param  string|null $serial Optional parameter to filter RF profiles by device serial number. All returned devices will have a serial number that contains the search term or is an exact match. (optional)
     * @param  string|null $model Optional parameter to filter RF profiles by device model. All returned devices will have a model that contains the search term or is an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter RF profiles by one or more device MAC addresses. All returned devices will have a MAC address that is an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter RF profiles by one or more device serial numbers. All returned devices will have a serial number that is an exact match. (optional)
     * @param  string[]|null $models Optional parameter to filter RF profiles by one or more device models. All returned devices will have a model that is an exact match. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationWirelessRfProfilesAssignmentsByDevice200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationWirelessRfProfilesAssignmentsByDeviceWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $product_types = null, $name = null, $mac = null, $serial = null, $model = null, $macs = null, $serials = null, $models = null, string $contentType = self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'][0])
    {
        $request = $this->getOrganizationWirelessRfProfilesAssignmentsByDeviceRequest($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $product_types, $name, $mac, $serial, $model, $macs, $serials, $models, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationWirelessRfProfilesAssignmentsByDevice200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationWirelessRfProfilesAssignmentsByDevice200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationWirelessRfProfilesAssignmentsByDevice200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationWirelessRfProfilesAssignmentsByDevice200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationWirelessRfProfilesAssignmentsByDevice200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationWirelessRfProfilesAssignmentsByDeviceAsync
     *
     * List the RF profiles of an organization by device
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter devices by network. (optional)
     * @param  string[]|null $product_types Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, sensor, wirelessController, and secureConnect. (optional)
     * @param  string|null $name Optional parameter to filter RF profiles by device name. All returned devices will have a name that contains the search term or is an exact match. (optional)
     * @param  string|null $mac Optional parameter to filter RF profiles by device MAC address. All returned devices will have a MAC address that contains the search term or is an exact match. (optional)
     * @param  string|null $serial Optional parameter to filter RF profiles by device serial number. All returned devices will have a serial number that contains the search term or is an exact match. (optional)
     * @param  string|null $model Optional parameter to filter RF profiles by device model. All returned devices will have a model that contains the search term or is an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter RF profiles by one or more device MAC addresses. All returned devices will have a MAC address that is an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter RF profiles by one or more device serial numbers. All returned devices will have a serial number that is an exact match. (optional)
     * @param  string[]|null $models Optional parameter to filter RF profiles by one or more device models. All returned devices will have a model that is an exact match. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationWirelessRfProfilesAssignmentsByDeviceAsync($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $product_types = null, $name = null, $mac = null, $serial = null, $model = null, $macs = null, $serials = null, $models = null, string $contentType = self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'][0])
    {
        return $this->getOrganizationWirelessRfProfilesAssignmentsByDeviceAsyncWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $product_types, $name, $mac, $serial, $model, $macs, $serials, $models, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationWirelessRfProfilesAssignmentsByDeviceAsyncWithHttpInfo
     *
     * List the RF profiles of an organization by device
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter devices by network. (optional)
     * @param  string[]|null $product_types Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, sensor, wirelessController, and secureConnect. (optional)
     * @param  string|null $name Optional parameter to filter RF profiles by device name. All returned devices will have a name that contains the search term or is an exact match. (optional)
     * @param  string|null $mac Optional parameter to filter RF profiles by device MAC address. All returned devices will have a MAC address that contains the search term or is an exact match. (optional)
     * @param  string|null $serial Optional parameter to filter RF profiles by device serial number. All returned devices will have a serial number that contains the search term or is an exact match. (optional)
     * @param  string|null $model Optional parameter to filter RF profiles by device model. All returned devices will have a model that contains the search term or is an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter RF profiles by one or more device MAC addresses. All returned devices will have a MAC address that is an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter RF profiles by one or more device serial numbers. All returned devices will have a serial number that is an exact match. (optional)
     * @param  string[]|null $models Optional parameter to filter RF profiles by one or more device models. All returned devices will have a model that is an exact match. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationWirelessRfProfilesAssignmentsByDeviceAsyncWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $product_types = null, $name = null, $mac = null, $serial = null, $model = null, $macs = null, $serials = null, $models = null, string $contentType = self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationWirelessRfProfilesAssignmentsByDevice200ResponseInner[]';
        $request = $this->getOrganizationWirelessRfProfilesAssignmentsByDeviceRequest($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $product_types, $name, $mac, $serial, $model, $macs, $serials, $models, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationWirelessRfProfilesAssignmentsByDevice'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter devices by network. (optional)
     * @param  string[]|null $product_types Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, sensor, wirelessController, and secureConnect. (optional)
     * @param  string|null $name Optional parameter to filter RF profiles by device name. All returned devices will have a name that contains the search term or is an exact match. (optional)
     * @param  string|null $mac Optional parameter to filter RF profiles by device MAC address. All returned devices will have a MAC address that contains the search term or is an exact match. (optional)
     * @param  string|null $serial Optional parameter to filter RF profiles by device serial number. All returned devices will have a serial number that contains the search term or is an exact match. (optional)
     * @param  string|null $model Optional parameter to filter RF profiles by device model. All returned devices will have a model that contains the search term or is an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter RF profiles by one or more device MAC addresses. All returned devices will have a MAC address that is an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter RF profiles by one or more device serial numbers. All returned devices will have a serial number that is an exact match. (optional)
     * @param  string[]|null $models Optional parameter to filter RF profiles by one or more device models. All returned devices will have a model that is an exact match. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationWirelessRfProfilesAssignmentsByDeviceRequest($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $product_types = null, $name = null, $mac = null, $serial = null, $model = null, $macs = null, $serials = null, $models = null, string $contentType = self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationWirelessRfProfilesAssignmentsByDevice'
            );
        }














        $resourcePath = '/organizations/{organizationId}/wireless/rfProfiles/assignments/byDevice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'perPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starting_after,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ending_before,
            'endingBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network_ids,
            'networkIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_types,
            'productTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mac,
            'mac', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serial,
            'serial', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model,
            'model', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $macs,
            'macs', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serials,
            'serials', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $models,
            'models', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkApplianceRfProfile
     *
     * Updates specified RF profile for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkApplianceRfProfileRequest|null $update_network_appliance_rf_profile_request update_network_appliance_rf_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner
     */
    public function updateNetworkApplianceRfProfile($network_id, $rf_profile_id, $update_network_appliance_rf_profile_request = null, string $contentType = self::contentTypes['updateNetworkApplianceRfProfile'][0])
    {
        list($response) = $this->updateNetworkApplianceRfProfileWithHttpInfo($network_id, $rf_profile_id, $update_network_appliance_rf_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkApplianceRfProfileWithHttpInfo
     *
     * Updates specified RF profile for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkApplianceRfProfileRequest|null $update_network_appliance_rf_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkApplianceRfProfileWithHttpInfo($network_id, $rf_profile_id, $update_network_appliance_rf_profile_request = null, string $contentType = self::contentTypes['updateNetworkApplianceRfProfile'][0])
    {
        $request = $this->updateNetworkApplianceRfProfileRequest($network_id, $rf_profile_id, $update_network_appliance_rf_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkApplianceRfProfileAsync
     *
     * Updates specified RF profile for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkApplianceRfProfileRequest|null $update_network_appliance_rf_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkApplianceRfProfileAsync($network_id, $rf_profile_id, $update_network_appliance_rf_profile_request = null, string $contentType = self::contentTypes['updateNetworkApplianceRfProfile'][0])
    {
        return $this->updateNetworkApplianceRfProfileAsyncWithHttpInfo($network_id, $rf_profile_id, $update_network_appliance_rf_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkApplianceRfProfileAsyncWithHttpInfo
     *
     * Updates specified RF profile for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkApplianceRfProfileRequest|null $update_network_appliance_rf_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkApplianceRfProfileAsyncWithHttpInfo($network_id, $rf_profile_id, $update_network_appliance_rf_profile_request = null, string $contentType = self::contentTypes['updateNetworkApplianceRfProfile'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkApplianceRfProfiles200ResponseAssignedInner';
        $request = $this->updateNetworkApplianceRfProfileRequest($network_id, $rf_profile_id, $update_network_appliance_rf_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkApplianceRfProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkApplianceRfProfileRequest|null $update_network_appliance_rf_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkApplianceRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkApplianceRfProfileRequest($network_id, $rf_profile_id, $update_network_appliance_rf_profile_request = null, string $contentType = self::contentTypes['updateNetworkApplianceRfProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkApplianceRfProfile'
            );
        }

        // verify the required parameter 'rf_profile_id' is set
        if ($rf_profile_id === null || (is_array($rf_profile_id) && count($rf_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rf_profile_id when calling updateNetworkApplianceRfProfile'
            );
        }



        $resourcePath = '/networks/{networkId}/appliance/rfProfiles/{rfProfileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($rf_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rfProfileId' . '}',
                ObjectSerializer::toPathValue($rf_profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_network_appliance_rf_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_network_appliance_rf_profile_request));
            } else {
                $httpBody = $update_network_appliance_rf_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkWirelessRfProfile
     *
     * Updates specified RF profile for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkWirelessRfProfileRequest|null $update_network_wireless_rf_profile_request update_network_wireless_rf_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkWirelessRfProfiles200Response
     */
    public function updateNetworkWirelessRfProfile($network_id, $rf_profile_id, $update_network_wireless_rf_profile_request = null, string $contentType = self::contentTypes['updateNetworkWirelessRfProfile'][0])
    {
        list($response) = $this->updateNetworkWirelessRfProfileWithHttpInfo($network_id, $rf_profile_id, $update_network_wireless_rf_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkWirelessRfProfileWithHttpInfo
     *
     * Updates specified RF profile for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkWirelessRfProfileRequest|null $update_network_wireless_rf_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkWirelessRfProfiles200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkWirelessRfProfileWithHttpInfo($network_id, $rf_profile_id, $update_network_wireless_rf_profile_request = null, string $contentType = self::contentTypes['updateNetworkWirelessRfProfile'][0])
    {
        $request = $this->updateNetworkWirelessRfProfileRequest($network_id, $rf_profile_id, $update_network_wireless_rf_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkWirelessRfProfiles200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkWirelessRfProfiles200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkWirelessRfProfiles200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkWirelessRfProfiles200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkWirelessRfProfiles200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkWirelessRfProfileAsync
     *
     * Updates specified RF profile for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkWirelessRfProfileRequest|null $update_network_wireless_rf_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkWirelessRfProfileAsync($network_id, $rf_profile_id, $update_network_wireless_rf_profile_request = null, string $contentType = self::contentTypes['updateNetworkWirelessRfProfile'][0])
    {
        return $this->updateNetworkWirelessRfProfileAsyncWithHttpInfo($network_id, $rf_profile_id, $update_network_wireless_rf_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkWirelessRfProfileAsyncWithHttpInfo
     *
     * Updates specified RF profile for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkWirelessRfProfileRequest|null $update_network_wireless_rf_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkWirelessRfProfileAsyncWithHttpInfo($network_id, $rf_profile_id, $update_network_wireless_rf_profile_request = null, string $contentType = self::contentTypes['updateNetworkWirelessRfProfile'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkWirelessRfProfiles200Response';
        $request = $this->updateNetworkWirelessRfProfileRequest($network_id, $rf_profile_id, $update_network_wireless_rf_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkWirelessRfProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $rf_profile_id Rf profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkWirelessRfProfileRequest|null $update_network_wireless_rf_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkWirelessRfProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkWirelessRfProfileRequest($network_id, $rf_profile_id, $update_network_wireless_rf_profile_request = null, string $contentType = self::contentTypes['updateNetworkWirelessRfProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkWirelessRfProfile'
            );
        }

        // verify the required parameter 'rf_profile_id' is set
        if ($rf_profile_id === null || (is_array($rf_profile_id) && count($rf_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rf_profile_id when calling updateNetworkWirelessRfProfile'
            );
        }



        $resourcePath = '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($rf_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rfProfileId' . '}',
                ObjectSerializer::toPathValue($rf_profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_network_wireless_rf_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_network_wireless_rf_profile_request));
            } else {
                $httpBody = $update_network_wireless_rf_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
