<?php
/**
 * ProfilesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Meraki\ApiException;
use Meraki\Configuration;
use Meraki\HeaderSelector;
use Meraki\ObjectSerializer;

/**
 * ProfilesApi Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProfilesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'assignNetworkWirelessEthernetPortsProfiles' => [
            'application/json',
        ],
        'bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate' => [
            'application/json',
        ],
        'createNetworkSensorAlertsProfile' => [
            'application/json',
        ],
        'createNetworkWirelessEthernetPortsProfile' => [
            'application/json',
        ],
        'createOrganizationAlertsProfile' => [
            'application/json',
        ],
        'createOrganizationApplianceDnsLocalProfile' => [
            'application/json',
        ],
        'createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete' => [
            'application/json',
        ],
        'createOrganizationApplianceDnsSplitProfile' => [
            'application/json',
        ],
        'createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate' => [
            'application/json',
        ],
        'createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete' => [
            'application/json',
        ],
        'deleteNetworkSensorAlertsProfile' => [
            'application/json',
        ],
        'deleteNetworkWirelessEthernetPortsProfile' => [
            'application/json',
        ],
        'deleteOrganizationAlertsProfile' => [
            'application/json',
        ],
        'deleteOrganizationApplianceDnsLocalProfile' => [
            'application/json',
        ],
        'deleteOrganizationApplianceDnsSplitProfile' => [
            'application/json',
        ],
        'getNetworkSensorAlertsProfile' => [
            'application/json',
        ],
        'getNetworkSensorAlertsProfiles' => [
            'application/json',
        ],
        'getNetworkSmProfiles' => [
            'application/json',
        ],
        'getNetworkWirelessEthernetPortsProfile' => [
            'application/json',
        ],
        'getNetworkWirelessEthernetPortsProfiles' => [
            'application/json',
        ],
        'getOrganizationAlertsProfiles' => [
            'application/json',
        ],
        'getOrganizationApplianceDnsLocalProfiles' => [
            'application/json',
        ],
        'getOrganizationApplianceDnsLocalProfilesAssignments' => [
            'application/json',
        ],
        'getOrganizationApplianceDnsSplitProfiles' => [
            'application/json',
        ],
        'getOrganizationApplianceDnsSplitProfilesAssignments' => [
            'application/json',
        ],
        'getOrganizationConfigTemplateSwitchProfilePort' => [
            'application/json',
        ],
        'getOrganizationConfigTemplateSwitchProfilePorts' => [
            'application/json',
        ],
        'getOrganizationConfigTemplateSwitchProfiles' => [
            'application/json',
        ],
        'setNetworkWirelessEthernetPortsProfilesDefault' => [
            'application/json',
        ],
        'updateNetworkSensorAlertsProfile' => [
            'application/json',
        ],
        'updateNetworkWirelessEthernetPortsProfile' => [
            'application/json',
        ],
        'updateOrganizationAlertsProfile' => [
            'application/json',
        ],
        'updateOrganizationApplianceDnsLocalProfile' => [
            'application/json',
        ],
        'updateOrganizationApplianceDnsSplitProfile' => [
            'application/json',
        ],
        'updateOrganizationConfigTemplateSwitchProfilePort' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation assignNetworkWirelessEthernetPortsProfiles
     *
     * Assign AP port profile to list of APs
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\AssignNetworkWirelessEthernetPortsProfilesRequest $assign_network_wireless_ethernet_ports_profiles_request assign_network_wireless_ethernet_ports_profiles_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\AssignNetworkWirelessEthernetPortsProfiles201Response
     */
    public function assignNetworkWirelessEthernetPortsProfiles($network_id, $assign_network_wireless_ethernet_ports_profiles_request, string $contentType = self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'][0])
    {
        list($response) = $this->assignNetworkWirelessEthernetPortsProfilesWithHttpInfo($network_id, $assign_network_wireless_ethernet_ports_profiles_request, $contentType);
        return $response;
    }

    /**
     * Operation assignNetworkWirelessEthernetPortsProfilesWithHttpInfo
     *
     * Assign AP port profile to list of APs
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\AssignNetworkWirelessEthernetPortsProfilesRequest $assign_network_wireless_ethernet_ports_profiles_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\AssignNetworkWirelessEthernetPortsProfiles201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function assignNetworkWirelessEthernetPortsProfilesWithHttpInfo($network_id, $assign_network_wireless_ethernet_ports_profiles_request, string $contentType = self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'][0])
    {
        $request = $this->assignNetworkWirelessEthernetPortsProfilesRequest($network_id, $assign_network_wireless_ethernet_ports_profiles_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\AssignNetworkWirelessEthernetPortsProfiles201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\AssignNetworkWirelessEthernetPortsProfiles201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\AssignNetworkWirelessEthernetPortsProfiles201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\AssignNetworkWirelessEthernetPortsProfiles201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\AssignNetworkWirelessEthernetPortsProfiles201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assignNetworkWirelessEthernetPortsProfilesAsync
     *
     * Assign AP port profile to list of APs
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\AssignNetworkWirelessEthernetPortsProfilesRequest $assign_network_wireless_ethernet_ports_profiles_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignNetworkWirelessEthernetPortsProfilesAsync($network_id, $assign_network_wireless_ethernet_ports_profiles_request, string $contentType = self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'][0])
    {
        return $this->assignNetworkWirelessEthernetPortsProfilesAsyncWithHttpInfo($network_id, $assign_network_wireless_ethernet_ports_profiles_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assignNetworkWirelessEthernetPortsProfilesAsyncWithHttpInfo
     *
     * Assign AP port profile to list of APs
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\AssignNetworkWirelessEthernetPortsProfilesRequest $assign_network_wireless_ethernet_ports_profiles_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignNetworkWirelessEthernetPortsProfilesAsyncWithHttpInfo($network_id, $assign_network_wireless_ethernet_ports_profiles_request, string $contentType = self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'][0])
    {
        $returnType = '\Meraki\Model\AssignNetworkWirelessEthernetPortsProfiles201Response';
        $request = $this->assignNetworkWirelessEthernetPortsProfilesRequest($network_id, $assign_network_wireless_ethernet_ports_profiles_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assignNetworkWirelessEthernetPortsProfiles'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\AssignNetworkWirelessEthernetPortsProfilesRequest $assign_network_wireless_ethernet_ports_profiles_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assignNetworkWirelessEthernetPortsProfilesRequest($network_id, $assign_network_wireless_ethernet_ports_profiles_request, string $contentType = self::contentTypes['assignNetworkWirelessEthernetPortsProfiles'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling assignNetworkWirelessEthernetPortsProfiles'
            );
        }

        // verify the required parameter 'assign_network_wireless_ethernet_ports_profiles_request' is set
        if ($assign_network_wireless_ethernet_ports_profiles_request === null || (is_array($assign_network_wireless_ethernet_ports_profiles_request) && count($assign_network_wireless_ethernet_ports_profiles_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assign_network_wireless_ethernet_ports_profiles_request when calling assignNetworkWirelessEthernetPortsProfiles'
            );
        }


        $resourcePath = '/networks/{networkId}/wireless/ethernet/ports/profiles/assign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($assign_network_wireless_ethernet_ports_profiles_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($assign_network_wireless_ethernet_ports_profiles_request));
            } else {
                $httpBody = $assign_network_wireless_ethernet_ports_profiles_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate
     *
     * Assign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response
     */
    public function bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'][0])
    {
        list($response) = $this->bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType);
        return $response;
    }

    /**
     * Operation bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateWithHttpInfo
     *
     * Assign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'][0])
    {
        $request = $this->bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateAsync
     *
     * Assign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateAsync($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'][0])
    {
        return $this->bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateAsyncWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateAsyncWithHttpInfo
     *
     * Assign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateAsyncWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'][0])
    {
        $returnType = '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response';
        $request = $this->bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'
            );
        }

        // verify the required parameter 'bulk_organization_appliance_dns_local_profiles_assignments_create_request' is set
        if ($bulk_organization_appliance_dns_local_profiles_assignments_create_request === null || (is_array($bulk_organization_appliance_dns_local_profiles_assignments_create_request) && count($bulk_organization_appliance_dns_local_profiles_assignments_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_organization_appliance_dns_local_profiles_assignments_create_request when calling bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/profiles/assignments/bulkCreate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulk_organization_appliance_dns_local_profiles_assignments_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulk_organization_appliance_dns_local_profiles_assignments_create_request));
            } else {
                $httpBody = $bulk_organization_appliance_dns_local_profiles_assignments_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNetworkSensorAlertsProfile
     *
     * Creates a sensor alert profile for a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSensorAlertsProfileRequest $create_network_sensor_alerts_profile_request create_network_sensor_alerts_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner
     */
    public function createNetworkSensorAlertsProfile($network_id, $create_network_sensor_alerts_profile_request, string $contentType = self::contentTypes['createNetworkSensorAlertsProfile'][0])
    {
        list($response) = $this->createNetworkSensorAlertsProfileWithHttpInfo($network_id, $create_network_sensor_alerts_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation createNetworkSensorAlertsProfileWithHttpInfo
     *
     * Creates a sensor alert profile for a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSensorAlertsProfileRequest $create_network_sensor_alerts_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNetworkSensorAlertsProfileWithHttpInfo($network_id, $create_network_sensor_alerts_profile_request, string $contentType = self::contentTypes['createNetworkSensorAlertsProfile'][0])
    {
        $request = $this->createNetworkSensorAlertsProfileRequest($network_id, $create_network_sensor_alerts_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNetworkSensorAlertsProfileAsync
     *
     * Creates a sensor alert profile for a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSensorAlertsProfileRequest $create_network_sensor_alerts_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkSensorAlertsProfileAsync($network_id, $create_network_sensor_alerts_profile_request, string $contentType = self::contentTypes['createNetworkSensorAlertsProfile'][0])
    {
        return $this->createNetworkSensorAlertsProfileAsyncWithHttpInfo($network_id, $create_network_sensor_alerts_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNetworkSensorAlertsProfileAsyncWithHttpInfo
     *
     * Creates a sensor alert profile for a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSensorAlertsProfileRequest $create_network_sensor_alerts_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkSensorAlertsProfileAsyncWithHttpInfo($network_id, $create_network_sensor_alerts_profile_request, string $contentType = self::contentTypes['createNetworkSensorAlertsProfile'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner';
        $request = $this->createNetworkSensorAlertsProfileRequest($network_id, $create_network_sensor_alerts_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNetworkSensorAlertsProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkSensorAlertsProfileRequest $create_network_sensor_alerts_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNetworkSensorAlertsProfileRequest($network_id, $create_network_sensor_alerts_profile_request, string $contentType = self::contentTypes['createNetworkSensorAlertsProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling createNetworkSensorAlertsProfile'
            );
        }

        // verify the required parameter 'create_network_sensor_alerts_profile_request' is set
        if ($create_network_sensor_alerts_profile_request === null || (is_array($create_network_sensor_alerts_profile_request) && count($create_network_sensor_alerts_profile_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_network_sensor_alerts_profile_request when calling createNetworkSensorAlertsProfile'
            );
        }


        $resourcePath = '/networks/{networkId}/sensor/alerts/profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_network_sensor_alerts_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_network_sensor_alerts_profile_request));
            } else {
                $httpBody = $create_network_sensor_alerts_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNetworkWirelessEthernetPortsProfile
     *
     * Create an AP port profile
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkWirelessEthernetPortsProfileRequest $create_network_wireless_ethernet_ports_profile_request create_network_wireless_ethernet_ports_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner
     */
    public function createNetworkWirelessEthernetPortsProfile($network_id, $create_network_wireless_ethernet_ports_profile_request, string $contentType = self::contentTypes['createNetworkWirelessEthernetPortsProfile'][0])
    {
        list($response) = $this->createNetworkWirelessEthernetPortsProfileWithHttpInfo($network_id, $create_network_wireless_ethernet_ports_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation createNetworkWirelessEthernetPortsProfileWithHttpInfo
     *
     * Create an AP port profile
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkWirelessEthernetPortsProfileRequest $create_network_wireless_ethernet_ports_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNetworkWirelessEthernetPortsProfileWithHttpInfo($network_id, $create_network_wireless_ethernet_ports_profile_request, string $contentType = self::contentTypes['createNetworkWirelessEthernetPortsProfile'][0])
    {
        $request = $this->createNetworkWirelessEthernetPortsProfileRequest($network_id, $create_network_wireless_ethernet_ports_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNetworkWirelessEthernetPortsProfileAsync
     *
     * Create an AP port profile
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkWirelessEthernetPortsProfileRequest $create_network_wireless_ethernet_ports_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkWirelessEthernetPortsProfileAsync($network_id, $create_network_wireless_ethernet_ports_profile_request, string $contentType = self::contentTypes['createNetworkWirelessEthernetPortsProfile'][0])
    {
        return $this->createNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo($network_id, $create_network_wireless_ethernet_ports_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo
     *
     * Create an AP port profile
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkWirelessEthernetPortsProfileRequest $create_network_wireless_ethernet_ports_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo($network_id, $create_network_wireless_ethernet_ports_profile_request, string $contentType = self::contentTypes['createNetworkWirelessEthernetPortsProfile'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner';
        $request = $this->createNetworkWirelessEthernetPortsProfileRequest($network_id, $create_network_wireless_ethernet_ports_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNetworkWirelessEthernetPortsProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkWirelessEthernetPortsProfileRequest $create_network_wireless_ethernet_ports_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNetworkWirelessEthernetPortsProfileRequest($network_id, $create_network_wireless_ethernet_ports_profile_request, string $contentType = self::contentTypes['createNetworkWirelessEthernetPortsProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling createNetworkWirelessEthernetPortsProfile'
            );
        }

        // verify the required parameter 'create_network_wireless_ethernet_ports_profile_request' is set
        if ($create_network_wireless_ethernet_ports_profile_request === null || (is_array($create_network_wireless_ethernet_ports_profile_request) && count($create_network_wireless_ethernet_ports_profile_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_network_wireless_ethernet_ports_profile_request when calling createNetworkWirelessEthernetPortsProfile'
            );
        }


        $resourcePath = '/networks/{networkId}/wireless/ethernet/ports/profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_network_wireless_ethernet_ports_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_network_wireless_ethernet_ports_profile_request));
            } else {
                $httpBody = $create_network_wireless_ethernet_ports_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganizationAlertsProfile
     *
     * Create an organization-wide alert configuration
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationAlertsProfileRequest $create_organization_alerts_profile_request create_organization_alerts_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationAlertsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner
     */
    public function createOrganizationAlertsProfile($organization_id, $create_organization_alerts_profile_request, string $contentType = self::contentTypes['createOrganizationAlertsProfile'][0])
    {
        list($response) = $this->createOrganizationAlertsProfileWithHttpInfo($organization_id, $create_organization_alerts_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationAlertsProfileWithHttpInfo
     *
     * Create an organization-wide alert configuration
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationAlertsProfileRequest $create_organization_alerts_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationAlertsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationAlertsProfileWithHttpInfo($organization_id, $create_organization_alerts_profile_request, string $contentType = self::contentTypes['createOrganizationAlertsProfile'][0])
    {
        $request = $this->createOrganizationAlertsProfileRequest($organization_id, $create_organization_alerts_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationAlertsProfileAsync
     *
     * Create an organization-wide alert configuration
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationAlertsProfileRequest $create_organization_alerts_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationAlertsProfileAsync($organization_id, $create_organization_alerts_profile_request, string $contentType = self::contentTypes['createOrganizationAlertsProfile'][0])
    {
        return $this->createOrganizationAlertsProfileAsyncWithHttpInfo($organization_id, $create_organization_alerts_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationAlertsProfileAsyncWithHttpInfo
     *
     * Create an organization-wide alert configuration
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationAlertsProfileRequest $create_organization_alerts_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationAlertsProfileAsyncWithHttpInfo($organization_id, $create_organization_alerts_profile_request, string $contentType = self::contentTypes['createOrganizationAlertsProfile'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner';
        $request = $this->createOrganizationAlertsProfileRequest($organization_id, $create_organization_alerts_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationAlertsProfile'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationAlertsProfileRequest $create_organization_alerts_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationAlertsProfileRequest($organization_id, $create_organization_alerts_profile_request, string $contentType = self::contentTypes['createOrganizationAlertsProfile'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationAlertsProfile'
            );
        }

        // verify the required parameter 'create_organization_alerts_profile_request' is set
        if ($create_organization_alerts_profile_request === null || (is_array($create_organization_alerts_profile_request) && count($create_organization_alerts_profile_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_alerts_profile_request when calling createOrganizationAlertsProfile'
            );
        }


        $resourcePath = '/organizations/{organizationId}/alerts/profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_alerts_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_alerts_profile_request));
            } else {
                $httpBody = $create_organization_alerts_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfile
     *
     * Create a new local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner
     */
    public function createOrganizationApplianceDnsLocalProfile($organization_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfile'][0])
    {
        list($response) = $this->createOrganizationApplianceDnsLocalProfileWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfileWithHttpInfo
     *
     * Create a new local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationApplianceDnsLocalProfileWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfile'][0])
    {
        $request = $this->createOrganizationApplianceDnsLocalProfileRequest($organization_id, $create_organization_appliance_dns_local_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfileAsync
     *
     * Create a new local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsLocalProfileAsync($organization_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfile'][0])
    {
        return $this->createOrganizationApplianceDnsLocalProfileAsyncWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfileAsyncWithHttpInfo
     *
     * Create a new local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsLocalProfileAsyncWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfile'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner';
        $request = $this->createOrganizationApplianceDnsLocalProfileRequest($organization_id, $create_organization_appliance_dns_local_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationApplianceDnsLocalProfile'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationApplianceDnsLocalProfileRequest($organization_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfile'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationApplianceDnsLocalProfile'
            );
        }

        // verify the required parameter 'create_organization_appliance_dns_local_profile_request' is set
        if ($create_organization_appliance_dns_local_profile_request === null || (is_array($create_organization_appliance_dns_local_profile_request) && count($create_organization_appliance_dns_local_profile_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_appliance_dns_local_profile_request when calling createOrganizationApplianceDnsLocalProfile'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_appliance_dns_local_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_appliance_dns_local_profile_request));
            } else {
                $httpBody = $create_organization_appliance_dns_local_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete
     *
     * Unassign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response
     */
    public function createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'][0])
    {
        list($response) = $this->createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteWithHttpInfo
     *
     * Unassign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'][0])
    {
        $request = $this->createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteAsync
     *
     * Unassign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteAsync($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'][0])
    {
        return $this->createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteAsyncWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteAsyncWithHttpInfo
     *
     * Unassign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteAsyncWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'][0])
    {
        $returnType = '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response';
        $request = $this->createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'
            );
        }

        // verify the required parameter 'create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request' is set
        if ($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request === null || (is_array($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request) && count($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request when calling createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/profiles/assignments/bulkDelete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request));
            } else {
                $httpBody = $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfile
     *
     * Create a new split DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsSplitProfileRequest $create_organization_appliance_dns_split_profile_request create_organization_appliance_dns_split_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner
     */
    public function createOrganizationApplianceDnsSplitProfile($organization_id, $create_organization_appliance_dns_split_profile_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfile'][0])
    {
        list($response) = $this->createOrganizationApplianceDnsSplitProfileWithHttpInfo($organization_id, $create_organization_appliance_dns_split_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfileWithHttpInfo
     *
     * Create a new split DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsSplitProfileRequest $create_organization_appliance_dns_split_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationApplianceDnsSplitProfileWithHttpInfo($organization_id, $create_organization_appliance_dns_split_profile_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfile'][0])
    {
        $request = $this->createOrganizationApplianceDnsSplitProfileRequest($organization_id, $create_organization_appliance_dns_split_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfileAsync
     *
     * Create a new split DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsSplitProfileRequest $create_organization_appliance_dns_split_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsSplitProfileAsync($organization_id, $create_organization_appliance_dns_split_profile_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfile'][0])
    {
        return $this->createOrganizationApplianceDnsSplitProfileAsyncWithHttpInfo($organization_id, $create_organization_appliance_dns_split_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfileAsyncWithHttpInfo
     *
     * Create a new split DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsSplitProfileRequest $create_organization_appliance_dns_split_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsSplitProfileAsyncWithHttpInfo($organization_id, $create_organization_appliance_dns_split_profile_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfile'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner';
        $request = $this->createOrganizationApplianceDnsSplitProfileRequest($organization_id, $create_organization_appliance_dns_split_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationApplianceDnsSplitProfile'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsSplitProfileRequest $create_organization_appliance_dns_split_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationApplianceDnsSplitProfileRequest($organization_id, $create_organization_appliance_dns_split_profile_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfile'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationApplianceDnsSplitProfile'
            );
        }

        // verify the required parameter 'create_organization_appliance_dns_split_profile_request' is set
        if ($create_organization_appliance_dns_split_profile_request === null || (is_array($create_organization_appliance_dns_split_profile_request) && count($create_organization_appliance_dns_split_profile_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_appliance_dns_split_profile_request when calling createOrganizationApplianceDnsSplitProfile'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/split/profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_appliance_dns_split_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_appliance_dns_split_profile_request));
            } else {
                $httpBody = $create_organization_appliance_dns_split_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate
     *
     * Assign the split DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'][0])
    {
        list($response) = $this->createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateWithHttpInfo
     *
     * Assign the split DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'][0])
    {
        $request = $this->createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateRequest($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateAsync
     *
     * Assign the split DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateAsync($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'][0])
    {
        return $this->createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateAsyncWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateAsyncWithHttpInfo
     *
     * Assign the split DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateAsyncWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'][0])
    {
        $returnType = '\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response';
        $request = $this->createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateRequest($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateRequest($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'
            );
        }

        // verify the required parameter 'bulk_organization_appliance_dns_local_profiles_assignments_create_request' is set
        if ($bulk_organization_appliance_dns_local_profiles_assignments_create_request === null || (is_array($bulk_organization_appliance_dns_local_profiles_assignments_create_request) && count($bulk_organization_appliance_dns_local_profiles_assignments_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_organization_appliance_dns_local_profiles_assignments_create_request when calling createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/split/profiles/assignments/bulkCreate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulk_organization_appliance_dns_local_profiles_assignments_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulk_organization_appliance_dns_local_profiles_assignments_create_request));
            } else {
                $httpBody = $bulk_organization_appliance_dns_local_profiles_assignments_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete
     *
     * Unassign the split DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'][0])
    {
        list($response) = $this->createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteWithHttpInfo
     *
     * Unassign the split DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'][0])
    {
        $request = $this->createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteRequest($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteAsync
     *
     * Unassign the split DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteAsync($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'][0])
    {
        return $this->createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteAsyncWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteAsyncWithHttpInfo
     *
     * Unassign the split DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteAsyncWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'][0])
    {
        $returnType = '\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response';
        $request = $this->createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteRequest($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteRequest($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'
            );
        }

        // verify the required parameter 'create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request' is set
        if ($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request === null || (is_array($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request) && count($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request when calling createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/split/profiles/assignments/bulkDelete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request));
            } else {
                $httpBody = $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNetworkSensorAlertsProfile
     *
     * Deletes a sensor alert profile from a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNetworkSensorAlertsProfile($network_id, $id, string $contentType = self::contentTypes['deleteNetworkSensorAlertsProfile'][0])
    {
        $this->deleteNetworkSensorAlertsProfileWithHttpInfo($network_id, $id, $contentType);
    }

    /**
     * Operation deleteNetworkSensorAlertsProfileWithHttpInfo
     *
     * Deletes a sensor alert profile from a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNetworkSensorAlertsProfileWithHttpInfo($network_id, $id, string $contentType = self::contentTypes['deleteNetworkSensorAlertsProfile'][0])
    {
        $request = $this->deleteNetworkSensorAlertsProfileRequest($network_id, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNetworkSensorAlertsProfileAsync
     *
     * Deletes a sensor alert profile from a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkSensorAlertsProfileAsync($network_id, $id, string $contentType = self::contentTypes['deleteNetworkSensorAlertsProfile'][0])
    {
        return $this->deleteNetworkSensorAlertsProfileAsyncWithHttpInfo($network_id, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNetworkSensorAlertsProfileAsyncWithHttpInfo
     *
     * Deletes a sensor alert profile from a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkSensorAlertsProfileAsyncWithHttpInfo($network_id, $id, string $contentType = self::contentTypes['deleteNetworkSensorAlertsProfile'][0])
    {
        $returnType = '';
        $request = $this->deleteNetworkSensorAlertsProfileRequest($network_id, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNetworkSensorAlertsProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNetworkSensorAlertsProfileRequest($network_id, $id, string $contentType = self::contentTypes['deleteNetworkSensorAlertsProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling deleteNetworkSensorAlertsProfile'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteNetworkSensorAlertsProfile'
            );
        }


        $resourcePath = '/networks/{networkId}/sensor/alerts/profiles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNetworkWirelessEthernetPortsProfile
     *
     * Delete an AP port profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNetworkWirelessEthernetPortsProfile($network_id, $profile_id, string $contentType = self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'][0])
    {
        $this->deleteNetworkWirelessEthernetPortsProfileWithHttpInfo($network_id, $profile_id, $contentType);
    }

    /**
     * Operation deleteNetworkWirelessEthernetPortsProfileWithHttpInfo
     *
     * Delete an AP port profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNetworkWirelessEthernetPortsProfileWithHttpInfo($network_id, $profile_id, string $contentType = self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'][0])
    {
        $request = $this->deleteNetworkWirelessEthernetPortsProfileRequest($network_id, $profile_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNetworkWirelessEthernetPortsProfileAsync
     *
     * Delete an AP port profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkWirelessEthernetPortsProfileAsync($network_id, $profile_id, string $contentType = self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'][0])
    {
        return $this->deleteNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo($network_id, $profile_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo
     *
     * Delete an AP port profile
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo($network_id, $profile_id, string $contentType = self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'][0])
    {
        $returnType = '';
        $request = $this->deleteNetworkWirelessEthernetPortsProfileRequest($network_id, $profile_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNetworkWirelessEthernetPortsProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNetworkWirelessEthernetPortsProfileRequest($network_id, $profile_id, string $contentType = self::contentTypes['deleteNetworkWirelessEthernetPortsProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling deleteNetworkWirelessEthernetPortsProfile'
            );
        }

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling deleteNetworkWirelessEthernetPortsProfile'
            );
        }


        $resourcePath = '/networks/{networkId}/wireless/ethernet/ports/profiles/{profileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrganizationAlertsProfile
     *
     * Removes an organization-wide alert config
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $alert_config_id Alert config ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationAlertsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOrganizationAlertsProfile($organization_id, $alert_config_id, string $contentType = self::contentTypes['deleteOrganizationAlertsProfile'][0])
    {
        $this->deleteOrganizationAlertsProfileWithHttpInfo($organization_id, $alert_config_id, $contentType);
    }

    /**
     * Operation deleteOrganizationAlertsProfileWithHttpInfo
     *
     * Removes an organization-wide alert config
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $alert_config_id Alert config ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationAlertsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrganizationAlertsProfileWithHttpInfo($organization_id, $alert_config_id, string $contentType = self::contentTypes['deleteOrganizationAlertsProfile'][0])
    {
        $request = $this->deleteOrganizationAlertsProfileRequest($organization_id, $alert_config_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrganizationAlertsProfileAsync
     *
     * Removes an organization-wide alert config
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $alert_config_id Alert config ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationAlertsProfileAsync($organization_id, $alert_config_id, string $contentType = self::contentTypes['deleteOrganizationAlertsProfile'][0])
    {
        return $this->deleteOrganizationAlertsProfileAsyncWithHttpInfo($organization_id, $alert_config_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrganizationAlertsProfileAsyncWithHttpInfo
     *
     * Removes an organization-wide alert config
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $alert_config_id Alert config ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationAlertsProfileAsyncWithHttpInfo($organization_id, $alert_config_id, string $contentType = self::contentTypes['deleteOrganizationAlertsProfile'][0])
    {
        $returnType = '';
        $request = $this->deleteOrganizationAlertsProfileRequest($organization_id, $alert_config_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrganizationAlertsProfile'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $alert_config_id Alert config ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteOrganizationAlertsProfileRequest($organization_id, $alert_config_id, string $contentType = self::contentTypes['deleteOrganizationAlertsProfile'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling deleteOrganizationAlertsProfile'
            );
        }

        // verify the required parameter 'alert_config_id' is set
        if ($alert_config_id === null || (is_array($alert_config_id) && count($alert_config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alert_config_id when calling deleteOrganizationAlertsProfile'
            );
        }


        $resourcePath = '/organizations/{organizationId}/alerts/profiles/{alertConfigId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($alert_config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'alertConfigId' . '}',
                ObjectSerializer::toPathValue($alert_config_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrganizationApplianceDnsLocalProfile
     *
     * Deletes a local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOrganizationApplianceDnsLocalProfile($organization_id, $profile_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'][0])
    {
        $this->deleteOrganizationApplianceDnsLocalProfileWithHttpInfo($organization_id, $profile_id, $contentType);
    }

    /**
     * Operation deleteOrganizationApplianceDnsLocalProfileWithHttpInfo
     *
     * Deletes a local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrganizationApplianceDnsLocalProfileWithHttpInfo($organization_id, $profile_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'][0])
    {
        $request = $this->deleteOrganizationApplianceDnsLocalProfileRequest($organization_id, $profile_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrganizationApplianceDnsLocalProfileAsync
     *
     * Deletes a local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationApplianceDnsLocalProfileAsync($organization_id, $profile_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'][0])
    {
        return $this->deleteOrganizationApplianceDnsLocalProfileAsyncWithHttpInfo($organization_id, $profile_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrganizationApplianceDnsLocalProfileAsyncWithHttpInfo
     *
     * Deletes a local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationApplianceDnsLocalProfileAsyncWithHttpInfo($organization_id, $profile_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'][0])
    {
        $returnType = '';
        $request = $this->deleteOrganizationApplianceDnsLocalProfileRequest($organization_id, $profile_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrganizationApplianceDnsLocalProfile'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteOrganizationApplianceDnsLocalProfileRequest($organization_id, $profile_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling deleteOrganizationApplianceDnsLocalProfile'
            );
        }

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling deleteOrganizationApplianceDnsLocalProfile'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/profiles/{profileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrganizationApplianceDnsSplitProfile
     *
     * Deletes a split DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsSplitProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOrganizationApplianceDnsSplitProfile($organization_id, $profile_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsSplitProfile'][0])
    {
        $this->deleteOrganizationApplianceDnsSplitProfileWithHttpInfo($organization_id, $profile_id, $contentType);
    }

    /**
     * Operation deleteOrganizationApplianceDnsSplitProfileWithHttpInfo
     *
     * Deletes a split DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsSplitProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrganizationApplianceDnsSplitProfileWithHttpInfo($organization_id, $profile_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsSplitProfile'][0])
    {
        $request = $this->deleteOrganizationApplianceDnsSplitProfileRequest($organization_id, $profile_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrganizationApplianceDnsSplitProfileAsync
     *
     * Deletes a split DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsSplitProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationApplianceDnsSplitProfileAsync($organization_id, $profile_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsSplitProfile'][0])
    {
        return $this->deleteOrganizationApplianceDnsSplitProfileAsyncWithHttpInfo($organization_id, $profile_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrganizationApplianceDnsSplitProfileAsyncWithHttpInfo
     *
     * Deletes a split DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsSplitProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationApplianceDnsSplitProfileAsyncWithHttpInfo($organization_id, $profile_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsSplitProfile'][0])
    {
        $returnType = '';
        $request = $this->deleteOrganizationApplianceDnsSplitProfileRequest($organization_id, $profile_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrganizationApplianceDnsSplitProfile'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsSplitProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteOrganizationApplianceDnsSplitProfileRequest($organization_id, $profile_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsSplitProfile'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling deleteOrganizationApplianceDnsSplitProfile'
            );
        }

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling deleteOrganizationApplianceDnsSplitProfile'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/split/profiles/{profileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSensorAlertsProfile
     *
     * Show details of a sensor alert profile for a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner
     */
    public function getNetworkSensorAlertsProfile($network_id, $id, string $contentType = self::contentTypes['getNetworkSensorAlertsProfile'][0])
    {
        list($response) = $this->getNetworkSensorAlertsProfileWithHttpInfo($network_id, $id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSensorAlertsProfileWithHttpInfo
     *
     * Show details of a sensor alert profile for a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSensorAlertsProfileWithHttpInfo($network_id, $id, string $contentType = self::contentTypes['getNetworkSensorAlertsProfile'][0])
    {
        $request = $this->getNetworkSensorAlertsProfileRequest($network_id, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSensorAlertsProfileAsync
     *
     * Show details of a sensor alert profile for a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSensorAlertsProfileAsync($network_id, $id, string $contentType = self::contentTypes['getNetworkSensorAlertsProfile'][0])
    {
        return $this->getNetworkSensorAlertsProfileAsyncWithHttpInfo($network_id, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSensorAlertsProfileAsyncWithHttpInfo
     *
     * Show details of a sensor alert profile for a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSensorAlertsProfileAsyncWithHttpInfo($network_id, $id, string $contentType = self::contentTypes['getNetworkSensorAlertsProfile'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner';
        $request = $this->getNetworkSensorAlertsProfileRequest($network_id, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSensorAlertsProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSensorAlertsProfileRequest($network_id, $id, string $contentType = self::contentTypes['getNetworkSensorAlertsProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSensorAlertsProfile'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getNetworkSensorAlertsProfile'
            );
        }


        $resourcePath = '/networks/{networkId}/sensor/alerts/profiles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSensorAlertsProfiles
     *
     * Lists all sensor alert profiles for a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSensorAlertsProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner[]
     */
    public function getNetworkSensorAlertsProfiles($network_id, string $contentType = self::contentTypes['getNetworkSensorAlertsProfiles'][0])
    {
        list($response) = $this->getNetworkSensorAlertsProfilesWithHttpInfo($network_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSensorAlertsProfilesWithHttpInfo
     *
     * Lists all sensor alert profiles for a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSensorAlertsProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSensorAlertsProfilesWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkSensorAlertsProfiles'][0])
    {
        $request = $this->getNetworkSensorAlertsProfilesRequest($network_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSensorAlertsProfilesAsync
     *
     * Lists all sensor alert profiles for a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSensorAlertsProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSensorAlertsProfilesAsync($network_id, string $contentType = self::contentTypes['getNetworkSensorAlertsProfiles'][0])
    {
        return $this->getNetworkSensorAlertsProfilesAsyncWithHttpInfo($network_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSensorAlertsProfilesAsyncWithHttpInfo
     *
     * Lists all sensor alert profiles for a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSensorAlertsProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSensorAlertsProfilesAsyncWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkSensorAlertsProfiles'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner[]';
        $request = $this->getNetworkSensorAlertsProfilesRequest($network_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSensorAlertsProfiles'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSensorAlertsProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSensorAlertsProfilesRequest($network_id, string $contentType = self::contentTypes['getNetworkSensorAlertsProfiles'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSensorAlertsProfiles'
            );
        }


        $resourcePath = '/networks/{networkId}/sensor/alerts/profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkSmProfiles
     *
     * List all profiles in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string[]|null $payload_types Filter by payload types (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSmProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSmProfiles200ResponseInner[]
     */
    public function getNetworkSmProfiles($network_id, $payload_types = null, string $contentType = self::contentTypes['getNetworkSmProfiles'][0])
    {
        list($response) = $this->getNetworkSmProfilesWithHttpInfo($network_id, $payload_types, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkSmProfilesWithHttpInfo
     *
     * List all profiles in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string[]|null $payload_types Filter by payload types (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSmProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSmProfiles200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkSmProfilesWithHttpInfo($network_id, $payload_types = null, string $contentType = self::contentTypes['getNetworkSmProfiles'][0])
    {
        $request = $this->getNetworkSmProfilesRequest($network_id, $payload_types, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkSmProfiles200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSmProfiles200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSmProfiles200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSmProfiles200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSmProfiles200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkSmProfilesAsync
     *
     * List all profiles in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string[]|null $payload_types Filter by payload types (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSmProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSmProfilesAsync($network_id, $payload_types = null, string $contentType = self::contentTypes['getNetworkSmProfiles'][0])
    {
        return $this->getNetworkSmProfilesAsyncWithHttpInfo($network_id, $payload_types, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkSmProfilesAsyncWithHttpInfo
     *
     * List all profiles in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string[]|null $payload_types Filter by payload types (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSmProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkSmProfilesAsyncWithHttpInfo($network_id, $payload_types = null, string $contentType = self::contentTypes['getNetworkSmProfiles'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSmProfiles200ResponseInner[]';
        $request = $this->getNetworkSmProfilesRequest($network_id, $payload_types, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkSmProfiles'
     *
     * @param  string $network_id Network ID (required)
     * @param  string[]|null $payload_types Filter by payload types (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkSmProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkSmProfilesRequest($network_id, $payload_types = null, string $contentType = self::contentTypes['getNetworkSmProfiles'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkSmProfiles'
            );
        }



        $resourcePath = '/networks/{networkId}/sm/profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payload_types,
            'payloadTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkWirelessEthernetPortsProfile
     *
     * Show the AP port profile by ID for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner
     */
    public function getNetworkWirelessEthernetPortsProfile($network_id, $profile_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfile'][0])
    {
        list($response) = $this->getNetworkWirelessEthernetPortsProfileWithHttpInfo($network_id, $profile_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkWirelessEthernetPortsProfileWithHttpInfo
     *
     * Show the AP port profile by ID for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkWirelessEthernetPortsProfileWithHttpInfo($network_id, $profile_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfile'][0])
    {
        $request = $this->getNetworkWirelessEthernetPortsProfileRequest($network_id, $profile_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkWirelessEthernetPortsProfileAsync
     *
     * Show the AP port profile by ID for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkWirelessEthernetPortsProfileAsync($network_id, $profile_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfile'][0])
    {
        return $this->getNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo($network_id, $profile_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo
     *
     * Show the AP port profile by ID for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo($network_id, $profile_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfile'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner';
        $request = $this->getNetworkWirelessEthernetPortsProfileRequest($network_id, $profile_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkWirelessEthernetPortsProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkWirelessEthernetPortsProfileRequest($network_id, $profile_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkWirelessEthernetPortsProfile'
            );
        }

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling getNetworkWirelessEthernetPortsProfile'
            );
        }


        $resourcePath = '/networks/{networkId}/wireless/ethernet/ports/profiles/{profileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkWirelessEthernetPortsProfiles
     *
     * List the AP port profiles for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner[]
     */
    public function getNetworkWirelessEthernetPortsProfiles($network_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfiles'][0])
    {
        list($response) = $this->getNetworkWirelessEthernetPortsProfilesWithHttpInfo($network_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkWirelessEthernetPortsProfilesWithHttpInfo
     *
     * List the AP port profiles for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkWirelessEthernetPortsProfilesWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfiles'][0])
    {
        $request = $this->getNetworkWirelessEthernetPortsProfilesRequest($network_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkWirelessEthernetPortsProfilesAsync
     *
     * List the AP port profiles for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkWirelessEthernetPortsProfilesAsync($network_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfiles'][0])
    {
        return $this->getNetworkWirelessEthernetPortsProfilesAsyncWithHttpInfo($network_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkWirelessEthernetPortsProfilesAsyncWithHttpInfo
     *
     * List the AP port profiles for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkWirelessEthernetPortsProfilesAsyncWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfiles'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner[]';
        $request = $this->getNetworkWirelessEthernetPortsProfilesRequest($network_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkWirelessEthernetPortsProfiles'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkWirelessEthernetPortsProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkWirelessEthernetPortsProfilesRequest($network_id, string $contentType = self::contentTypes['getNetworkWirelessEthernetPortsProfiles'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkWirelessEthernetPortsProfiles'
            );
        }


        $resourcePath = '/networks/{networkId}/wireless/ethernet/ports/profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationAlertsProfiles
     *
     * List all organization-wide alert configurations
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationAlertsProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner[]
     */
    public function getOrganizationAlertsProfiles($organization_id, string $contentType = self::contentTypes['getOrganizationAlertsProfiles'][0])
    {
        list($response) = $this->getOrganizationAlertsProfilesWithHttpInfo($organization_id, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationAlertsProfilesWithHttpInfo
     *
     * List all organization-wide alert configurations
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationAlertsProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationAlertsProfilesWithHttpInfo($organization_id, string $contentType = self::contentTypes['getOrganizationAlertsProfiles'][0])
    {
        $request = $this->getOrganizationAlertsProfilesRequest($organization_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationAlertsProfilesAsync
     *
     * List all organization-wide alert configurations
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationAlertsProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationAlertsProfilesAsync($organization_id, string $contentType = self::contentTypes['getOrganizationAlertsProfiles'][0])
    {
        return $this->getOrganizationAlertsProfilesAsyncWithHttpInfo($organization_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationAlertsProfilesAsyncWithHttpInfo
     *
     * List all organization-wide alert configurations
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationAlertsProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationAlertsProfilesAsyncWithHttpInfo($organization_id, string $contentType = self::contentTypes['getOrganizationAlertsProfiles'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner[]';
        $request = $this->getOrganizationAlertsProfilesRequest($organization_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationAlertsProfiles'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationAlertsProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationAlertsProfilesRequest($organization_id, string $contentType = self::contentTypes['getOrganizationAlertsProfiles'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationAlertsProfiles'
            );
        }


        $resourcePath = '/organizations/{organizationId}/alerts/profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfiles
     *
     * Fetch the local DNS profiles used in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner[]
     */
    public function getOrganizationApplianceDnsLocalProfiles($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfiles'][0])
    {
        list($response) = $this->getOrganizationApplianceDnsLocalProfilesWithHttpInfo($organization_id, $profile_ids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfilesWithHttpInfo
     *
     * Fetch the local DNS profiles used in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationApplianceDnsLocalProfilesWithHttpInfo($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfiles'][0])
    {
        $request = $this->getOrganizationApplianceDnsLocalProfilesRequest($organization_id, $profile_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfilesAsync
     *
     * Fetch the local DNS profiles used in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationApplianceDnsLocalProfilesAsync($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfiles'][0])
    {
        return $this->getOrganizationApplianceDnsLocalProfilesAsyncWithHttpInfo($organization_id, $profile_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfilesAsyncWithHttpInfo
     *
     * Fetch the local DNS profiles used in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationApplianceDnsLocalProfilesAsyncWithHttpInfo($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfiles'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner[]';
        $request = $this->getOrganizationApplianceDnsLocalProfilesRequest($organization_id, $profile_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationApplianceDnsLocalProfiles'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationApplianceDnsLocalProfilesRequest($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfiles'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationApplianceDnsLocalProfiles'
            );
        }



        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $profile_ids,
            'profileIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfilesAssignments
     *
     * Fetch the local DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response
     */
    public function getOrganizationApplianceDnsLocalProfilesAssignments($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'][0])
    {
        list($response) = $this->getOrganizationApplianceDnsLocalProfilesAssignmentsWithHttpInfo($organization_id, $profile_ids, $network_ids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfilesAssignmentsWithHttpInfo
     *
     * Fetch the local DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationApplianceDnsLocalProfilesAssignmentsWithHttpInfo($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'][0])
    {
        $request = $this->getOrganizationApplianceDnsLocalProfilesAssignmentsRequest($organization_id, $profile_ids, $network_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfilesAssignmentsAsync
     *
     * Fetch the local DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationApplianceDnsLocalProfilesAssignmentsAsync($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'][0])
    {
        return $this->getOrganizationApplianceDnsLocalProfilesAssignmentsAsyncWithHttpInfo($organization_id, $profile_ids, $network_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfilesAssignmentsAsyncWithHttpInfo
     *
     * Fetch the local DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationApplianceDnsLocalProfilesAssignmentsAsyncWithHttpInfo($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response';
        $request = $this->getOrganizationApplianceDnsLocalProfilesAssignmentsRequest($organization_id, $profile_ids, $network_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationApplianceDnsLocalProfilesAssignments'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationApplianceDnsLocalProfilesAssignmentsRequest($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationApplianceDnsLocalProfilesAssignments'
            );
        }




        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/profiles/assignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $profile_ids,
            'profileIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network_ids,
            'networkIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationApplianceDnsSplitProfiles
     *
     * Fetch the split DNS profiles used in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsSplitProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner[]
     */
    public function getOrganizationApplianceDnsSplitProfiles($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsSplitProfiles'][0])
    {
        list($response) = $this->getOrganizationApplianceDnsSplitProfilesWithHttpInfo($organization_id, $profile_ids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationApplianceDnsSplitProfilesWithHttpInfo
     *
     * Fetch the split DNS profiles used in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsSplitProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationApplianceDnsSplitProfilesWithHttpInfo($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsSplitProfiles'][0])
    {
        $request = $this->getOrganizationApplianceDnsSplitProfilesRequest($organization_id, $profile_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationApplianceDnsSplitProfilesAsync
     *
     * Fetch the split DNS profiles used in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsSplitProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationApplianceDnsSplitProfilesAsync($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsSplitProfiles'][0])
    {
        return $this->getOrganizationApplianceDnsSplitProfilesAsyncWithHttpInfo($organization_id, $profile_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationApplianceDnsSplitProfilesAsyncWithHttpInfo
     *
     * Fetch the split DNS profiles used in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsSplitProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationApplianceDnsSplitProfilesAsyncWithHttpInfo($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsSplitProfiles'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner[]';
        $request = $this->getOrganizationApplianceDnsSplitProfilesRequest($organization_id, $profile_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationApplianceDnsSplitProfiles'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsSplitProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationApplianceDnsSplitProfilesRequest($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsSplitProfiles'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationApplianceDnsSplitProfiles'
            );
        }



        $resourcePath = '/organizations/{organizationId}/appliance/dns/split/profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $profile_ids,
            'profileIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationApplianceDnsSplitProfilesAssignments
     *
     * Fetch the split DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationApplianceDnsSplitProfilesAssignments200Response
     */
    public function getOrganizationApplianceDnsSplitProfilesAssignments($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'][0])
    {
        list($response) = $this->getOrganizationApplianceDnsSplitProfilesAssignmentsWithHttpInfo($organization_id, $profile_ids, $network_ids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationApplianceDnsSplitProfilesAssignmentsWithHttpInfo
     *
     * Fetch the split DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationApplianceDnsSplitProfilesAssignments200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationApplianceDnsSplitProfilesAssignmentsWithHttpInfo($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'][0])
    {
        $request = $this->getOrganizationApplianceDnsSplitProfilesAssignmentsRequest($organization_id, $profile_ids, $network_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationApplianceDnsSplitProfilesAssignments200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationApplianceDnsSplitProfilesAssignments200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationApplianceDnsSplitProfilesAssignments200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationApplianceDnsSplitProfilesAssignments200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationApplianceDnsSplitProfilesAssignments200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationApplianceDnsSplitProfilesAssignmentsAsync
     *
     * Fetch the split DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationApplianceDnsSplitProfilesAssignmentsAsync($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'][0])
    {
        return $this->getOrganizationApplianceDnsSplitProfilesAssignmentsAsyncWithHttpInfo($organization_id, $profile_ids, $network_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationApplianceDnsSplitProfilesAssignmentsAsyncWithHttpInfo
     *
     * Fetch the split DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationApplianceDnsSplitProfilesAssignmentsAsyncWithHttpInfo($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationApplianceDnsSplitProfilesAssignments200Response';
        $request = $this->getOrganizationApplianceDnsSplitProfilesAssignmentsRequest($organization_id, $profile_ids, $network_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationApplianceDnsSplitProfilesAssignments'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationApplianceDnsSplitProfilesAssignmentsRequest($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationApplianceDnsSplitProfilesAssignments'
            );
        }




        $resourcePath = '/organizations/{organizationId}/appliance/dns/split/profiles/assignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $profile_ids,
            'profileIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network_ids,
            'networkIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationConfigTemplateSwitchProfilePort
     *
     * Return a switch template port
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $port_id Port ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationConfigTemplateSwitchProfilePort'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner
     */
    public function getOrganizationConfigTemplateSwitchProfilePort($organization_id, $config_template_id, $profile_id, $port_id, string $contentType = self::contentTypes['getOrganizationConfigTemplateSwitchProfilePort'][0])
    {
        list($response) = $this->getOrganizationConfigTemplateSwitchProfilePortWithHttpInfo($organization_id, $config_template_id, $profile_id, $port_id, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationConfigTemplateSwitchProfilePortWithHttpInfo
     *
     * Return a switch template port
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $port_id Port ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationConfigTemplateSwitchProfilePort'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationConfigTemplateSwitchProfilePortWithHttpInfo($organization_id, $config_template_id, $profile_id, $port_id, string $contentType = self::contentTypes['getOrganizationConfigTemplateSwitchProfilePort'][0])
    {
        $request = $this->getOrganizationConfigTemplateSwitchProfilePortRequest($organization_id, $config_template_id, $profile_id, $port_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationConfigTemplateSwitchProfilePortAsync
     *
     * Return a switch template port
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $port_id Port ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationConfigTemplateSwitchProfilePort'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationConfigTemplateSwitchProfilePortAsync($organization_id, $config_template_id, $profile_id, $port_id, string $contentType = self::contentTypes['getOrganizationConfigTemplateSwitchProfilePort'][0])
    {
        return $this->getOrganizationConfigTemplateSwitchProfilePortAsyncWithHttpInfo($organization_id, $config_template_id, $profile_id, $port_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationConfigTemplateSwitchProfilePortAsyncWithHttpInfo
     *
     * Return a switch template port
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $port_id Port ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationConfigTemplateSwitchProfilePort'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationConfigTemplateSwitchProfilePortAsyncWithHttpInfo($organization_id, $config_template_id, $profile_id, $port_id, string $contentType = self::contentTypes['getOrganizationConfigTemplateSwitchProfilePort'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner';
        $request = $this->getOrganizationConfigTemplateSwitchProfilePortRequest($organization_id, $config_template_id, $profile_id, $port_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationConfigTemplateSwitchProfilePort'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $port_id Port ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationConfigTemplateSwitchProfilePort'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationConfigTemplateSwitchProfilePortRequest($organization_id, $config_template_id, $profile_id, $port_id, string $contentType = self::contentTypes['getOrganizationConfigTemplateSwitchProfilePort'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationConfigTemplateSwitchProfilePort'
            );
        }

        // verify the required parameter 'config_template_id' is set
        if ($config_template_id === null || (is_array($config_template_id) && count($config_template_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $config_template_id when calling getOrganizationConfigTemplateSwitchProfilePort'
            );
        }

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling getOrganizationConfigTemplateSwitchProfilePort'
            );
        }

        // verify the required parameter 'port_id' is set
        if ($port_id === null || (is_array($port_id) && count($port_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $port_id when calling getOrganizationConfigTemplateSwitchProfilePort'
            );
        }


        $resourcePath = '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($config_template_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configTemplateId' . '}',
                ObjectSerializer::toPathValue($config_template_id),
                $resourcePath
            );
        }
        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }
        // path params
        if ($port_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portId' . '}',
                ObjectSerializer::toPathValue($port_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationConfigTemplateSwitchProfilePorts
     *
     * Return all the ports of a switch template
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationConfigTemplateSwitchProfilePorts'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner[]
     */
    public function getOrganizationConfigTemplateSwitchProfilePorts($organization_id, $config_template_id, $profile_id, string $contentType = self::contentTypes['getOrganizationConfigTemplateSwitchProfilePorts'][0])
    {
        list($response) = $this->getOrganizationConfigTemplateSwitchProfilePortsWithHttpInfo($organization_id, $config_template_id, $profile_id, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationConfigTemplateSwitchProfilePortsWithHttpInfo
     *
     * Return all the ports of a switch template
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationConfigTemplateSwitchProfilePorts'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationConfigTemplateSwitchProfilePortsWithHttpInfo($organization_id, $config_template_id, $profile_id, string $contentType = self::contentTypes['getOrganizationConfigTemplateSwitchProfilePorts'][0])
    {
        $request = $this->getOrganizationConfigTemplateSwitchProfilePortsRequest($organization_id, $config_template_id, $profile_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationConfigTemplateSwitchProfilePortsAsync
     *
     * Return all the ports of a switch template
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationConfigTemplateSwitchProfilePorts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationConfigTemplateSwitchProfilePortsAsync($organization_id, $config_template_id, $profile_id, string $contentType = self::contentTypes['getOrganizationConfigTemplateSwitchProfilePorts'][0])
    {
        return $this->getOrganizationConfigTemplateSwitchProfilePortsAsyncWithHttpInfo($organization_id, $config_template_id, $profile_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationConfigTemplateSwitchProfilePortsAsyncWithHttpInfo
     *
     * Return all the ports of a switch template
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationConfigTemplateSwitchProfilePorts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationConfigTemplateSwitchProfilePortsAsyncWithHttpInfo($organization_id, $config_template_id, $profile_id, string $contentType = self::contentTypes['getOrganizationConfigTemplateSwitchProfilePorts'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner[]';
        $request = $this->getOrganizationConfigTemplateSwitchProfilePortsRequest($organization_id, $config_template_id, $profile_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationConfigTemplateSwitchProfilePorts'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationConfigTemplateSwitchProfilePorts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationConfigTemplateSwitchProfilePortsRequest($organization_id, $config_template_id, $profile_id, string $contentType = self::contentTypes['getOrganizationConfigTemplateSwitchProfilePorts'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationConfigTemplateSwitchProfilePorts'
            );
        }

        // verify the required parameter 'config_template_id' is set
        if ($config_template_id === null || (is_array($config_template_id) && count($config_template_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $config_template_id when calling getOrganizationConfigTemplateSwitchProfilePorts'
            );
        }

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling getOrganizationConfigTemplateSwitchProfilePorts'
            );
        }


        $resourcePath = '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($config_template_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configTemplateId' . '}',
                ObjectSerializer::toPathValue($config_template_id),
                $resourcePath
            );
        }
        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationConfigTemplateSwitchProfiles
     *
     * List the switch templates for your switch template configuration
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationConfigTemplateSwitchProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationConfigTemplateSwitchProfiles200ResponseInner[]
     */
    public function getOrganizationConfigTemplateSwitchProfiles($organization_id, $config_template_id, string $contentType = self::contentTypes['getOrganizationConfigTemplateSwitchProfiles'][0])
    {
        list($response) = $this->getOrganizationConfigTemplateSwitchProfilesWithHttpInfo($organization_id, $config_template_id, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationConfigTemplateSwitchProfilesWithHttpInfo
     *
     * List the switch templates for your switch template configuration
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationConfigTemplateSwitchProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationConfigTemplateSwitchProfiles200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationConfigTemplateSwitchProfilesWithHttpInfo($organization_id, $config_template_id, string $contentType = self::contentTypes['getOrganizationConfigTemplateSwitchProfiles'][0])
    {
        $request = $this->getOrganizationConfigTemplateSwitchProfilesRequest($organization_id, $config_template_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationConfigTemplateSwitchProfiles200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationConfigTemplateSwitchProfiles200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationConfigTemplateSwitchProfiles200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationConfigTemplateSwitchProfiles200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationConfigTemplateSwitchProfiles200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationConfigTemplateSwitchProfilesAsync
     *
     * List the switch templates for your switch template configuration
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationConfigTemplateSwitchProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationConfigTemplateSwitchProfilesAsync($organization_id, $config_template_id, string $contentType = self::contentTypes['getOrganizationConfigTemplateSwitchProfiles'][0])
    {
        return $this->getOrganizationConfigTemplateSwitchProfilesAsyncWithHttpInfo($organization_id, $config_template_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationConfigTemplateSwitchProfilesAsyncWithHttpInfo
     *
     * List the switch templates for your switch template configuration
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationConfigTemplateSwitchProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationConfigTemplateSwitchProfilesAsyncWithHttpInfo($organization_id, $config_template_id, string $contentType = self::contentTypes['getOrganizationConfigTemplateSwitchProfiles'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationConfigTemplateSwitchProfiles200ResponseInner[]';
        $request = $this->getOrganizationConfigTemplateSwitchProfilesRequest($organization_id, $config_template_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationConfigTemplateSwitchProfiles'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationConfigTemplateSwitchProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationConfigTemplateSwitchProfilesRequest($organization_id, $config_template_id, string $contentType = self::contentTypes['getOrganizationConfigTemplateSwitchProfiles'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationConfigTemplateSwitchProfiles'
            );
        }

        // verify the required parameter 'config_template_id' is set
        if ($config_template_id === null || (is_array($config_template_id) && count($config_template_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $config_template_id when calling getOrganizationConfigTemplateSwitchProfiles'
            );
        }


        $resourcePath = '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($config_template_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configTemplateId' . '}',
                ObjectSerializer::toPathValue($config_template_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setNetworkWirelessEthernetPortsProfilesDefault
     *
     * Set the AP port profile to be default for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefaultRequest $set_network_wireless_ethernet_ports_profiles_default_request set_network_wireless_ethernet_ports_profiles_default_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefault200Response
     */
    public function setNetworkWirelessEthernetPortsProfilesDefault($network_id, $set_network_wireless_ethernet_ports_profiles_default_request, string $contentType = self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'][0])
    {
        list($response) = $this->setNetworkWirelessEthernetPortsProfilesDefaultWithHttpInfo($network_id, $set_network_wireless_ethernet_ports_profiles_default_request, $contentType);
        return $response;
    }

    /**
     * Operation setNetworkWirelessEthernetPortsProfilesDefaultWithHttpInfo
     *
     * Set the AP port profile to be default for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefaultRequest $set_network_wireless_ethernet_ports_profiles_default_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefault200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function setNetworkWirelessEthernetPortsProfilesDefaultWithHttpInfo($network_id, $set_network_wireless_ethernet_ports_profiles_default_request, string $contentType = self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'][0])
    {
        $request = $this->setNetworkWirelessEthernetPortsProfilesDefaultRequest($network_id, $set_network_wireless_ethernet_ports_profiles_default_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefault200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefault200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefault200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefault200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefault200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setNetworkWirelessEthernetPortsProfilesDefaultAsync
     *
     * Set the AP port profile to be default for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefaultRequest $set_network_wireless_ethernet_ports_profiles_default_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setNetworkWirelessEthernetPortsProfilesDefaultAsync($network_id, $set_network_wireless_ethernet_ports_profiles_default_request, string $contentType = self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'][0])
    {
        return $this->setNetworkWirelessEthernetPortsProfilesDefaultAsyncWithHttpInfo($network_id, $set_network_wireless_ethernet_ports_profiles_default_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setNetworkWirelessEthernetPortsProfilesDefaultAsyncWithHttpInfo
     *
     * Set the AP port profile to be default for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefaultRequest $set_network_wireless_ethernet_ports_profiles_default_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setNetworkWirelessEthernetPortsProfilesDefaultAsyncWithHttpInfo($network_id, $set_network_wireless_ethernet_ports_profiles_default_request, string $contentType = self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'][0])
    {
        $returnType = '\Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefault200Response';
        $request = $this->setNetworkWirelessEthernetPortsProfilesDefaultRequest($network_id, $set_network_wireless_ethernet_ports_profiles_default_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setNetworkWirelessEthernetPortsProfilesDefault'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\SetNetworkWirelessEthernetPortsProfilesDefaultRequest $set_network_wireless_ethernet_ports_profiles_default_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setNetworkWirelessEthernetPortsProfilesDefaultRequest($network_id, $set_network_wireless_ethernet_ports_profiles_default_request, string $contentType = self::contentTypes['setNetworkWirelessEthernetPortsProfilesDefault'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling setNetworkWirelessEthernetPortsProfilesDefault'
            );
        }

        // verify the required parameter 'set_network_wireless_ethernet_ports_profiles_default_request' is set
        if ($set_network_wireless_ethernet_ports_profiles_default_request === null || (is_array($set_network_wireless_ethernet_ports_profiles_default_request) && count($set_network_wireless_ethernet_ports_profiles_default_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_network_wireless_ethernet_ports_profiles_default_request when calling setNetworkWirelessEthernetPortsProfilesDefault'
            );
        }


        $resourcePath = '/networks/{networkId}/wireless/ethernet/ports/profiles/setDefault';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($set_network_wireless_ethernet_ports_profiles_default_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($set_network_wireless_ethernet_ports_profiles_default_request));
            } else {
                $httpBody = $set_network_wireless_ethernet_ports_profiles_default_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkSensorAlertsProfile
     *
     * Updates a sensor alert profile for a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $id ID (required)
     * @param  \Meraki\Model\UpdateNetworkSensorAlertsProfileRequest|null $update_network_sensor_alerts_profile_request update_network_sensor_alerts_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner
     */
    public function updateNetworkSensorAlertsProfile($network_id, $id, $update_network_sensor_alerts_profile_request = null, string $contentType = self::contentTypes['updateNetworkSensorAlertsProfile'][0])
    {
        list($response) = $this->updateNetworkSensorAlertsProfileWithHttpInfo($network_id, $id, $update_network_sensor_alerts_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkSensorAlertsProfileWithHttpInfo
     *
     * Updates a sensor alert profile for a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $id ID (required)
     * @param  \Meraki\Model\UpdateNetworkSensorAlertsProfileRequest|null $update_network_sensor_alerts_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkSensorAlertsProfileWithHttpInfo($network_id, $id, $update_network_sensor_alerts_profile_request = null, string $contentType = self::contentTypes['updateNetworkSensorAlertsProfile'][0])
    {
        $request = $this->updateNetworkSensorAlertsProfileRequest($network_id, $id, $update_network_sensor_alerts_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkSensorAlertsProfileAsync
     *
     * Updates a sensor alert profile for a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $id ID (required)
     * @param  \Meraki\Model\UpdateNetworkSensorAlertsProfileRequest|null $update_network_sensor_alerts_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSensorAlertsProfileAsync($network_id, $id, $update_network_sensor_alerts_profile_request = null, string $contentType = self::contentTypes['updateNetworkSensorAlertsProfile'][0])
    {
        return $this->updateNetworkSensorAlertsProfileAsyncWithHttpInfo($network_id, $id, $update_network_sensor_alerts_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkSensorAlertsProfileAsyncWithHttpInfo
     *
     * Updates a sensor alert profile for a network.
     *
     * @param  string $network_id Network ID (required)
     * @param  string $id ID (required)
     * @param  \Meraki\Model\UpdateNetworkSensorAlertsProfileRequest|null $update_network_sensor_alerts_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkSensorAlertsProfileAsyncWithHttpInfo($network_id, $id, $update_network_sensor_alerts_profile_request = null, string $contentType = self::contentTypes['updateNetworkSensorAlertsProfile'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkSensorAlertsProfiles200ResponseInner';
        $request = $this->updateNetworkSensorAlertsProfileRequest($network_id, $id, $update_network_sensor_alerts_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkSensorAlertsProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $id ID (required)
     * @param  \Meraki\Model\UpdateNetworkSensorAlertsProfileRequest|null $update_network_sensor_alerts_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkSensorAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkSensorAlertsProfileRequest($network_id, $id, $update_network_sensor_alerts_profile_request = null, string $contentType = self::contentTypes['updateNetworkSensorAlertsProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkSensorAlertsProfile'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateNetworkSensorAlertsProfile'
            );
        }



        $resourcePath = '/networks/{networkId}/sensor/alerts/profiles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_network_sensor_alerts_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_network_sensor_alerts_profile_request));
            } else {
                $httpBody = $update_network_sensor_alerts_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkWirelessEthernetPortsProfile
     *
     * Update the AP port profile by ID for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkWirelessEthernetPortsProfileRequest|null $update_network_wireless_ethernet_ports_profile_request update_network_wireless_ethernet_ports_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner
     */
    public function updateNetworkWirelessEthernetPortsProfile($network_id, $profile_id, $update_network_wireless_ethernet_ports_profile_request = null, string $contentType = self::contentTypes['updateNetworkWirelessEthernetPortsProfile'][0])
    {
        list($response) = $this->updateNetworkWirelessEthernetPortsProfileWithHttpInfo($network_id, $profile_id, $update_network_wireless_ethernet_ports_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkWirelessEthernetPortsProfileWithHttpInfo
     *
     * Update the AP port profile by ID for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkWirelessEthernetPortsProfileRequest|null $update_network_wireless_ethernet_ports_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkWirelessEthernetPortsProfileWithHttpInfo($network_id, $profile_id, $update_network_wireless_ethernet_ports_profile_request = null, string $contentType = self::contentTypes['updateNetworkWirelessEthernetPortsProfile'][0])
    {
        $request = $this->updateNetworkWirelessEthernetPortsProfileRequest($network_id, $profile_id, $update_network_wireless_ethernet_ports_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkWirelessEthernetPortsProfileAsync
     *
     * Update the AP port profile by ID for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkWirelessEthernetPortsProfileRequest|null $update_network_wireless_ethernet_ports_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkWirelessEthernetPortsProfileAsync($network_id, $profile_id, $update_network_wireless_ethernet_ports_profile_request = null, string $contentType = self::contentTypes['updateNetworkWirelessEthernetPortsProfile'][0])
    {
        return $this->updateNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo($network_id, $profile_id, $update_network_wireless_ethernet_ports_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo
     *
     * Update the AP port profile by ID for this network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkWirelessEthernetPortsProfileRequest|null $update_network_wireless_ethernet_ports_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkWirelessEthernetPortsProfileAsyncWithHttpInfo($network_id, $profile_id, $update_network_wireless_ethernet_ports_profile_request = null, string $contentType = self::contentTypes['updateNetworkWirelessEthernetPortsProfile'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkWirelessEthernetPortsProfiles200ResponseInner';
        $request = $this->updateNetworkWirelessEthernetPortsProfileRequest($network_id, $profile_id, $update_network_wireless_ethernet_ports_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkWirelessEthernetPortsProfile'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\UpdateNetworkWirelessEthernetPortsProfileRequest|null $update_network_wireless_ethernet_ports_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkWirelessEthernetPortsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkWirelessEthernetPortsProfileRequest($network_id, $profile_id, $update_network_wireless_ethernet_ports_profile_request = null, string $contentType = self::contentTypes['updateNetworkWirelessEthernetPortsProfile'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkWirelessEthernetPortsProfile'
            );
        }

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling updateNetworkWirelessEthernetPortsProfile'
            );
        }



        $resourcePath = '/networks/{networkId}/wireless/ethernet/ports/profiles/{profileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_network_wireless_ethernet_ports_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_network_wireless_ethernet_ports_profile_request));
            } else {
                $httpBody = $update_network_wireless_ethernet_ports_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrganizationAlertsProfile
     *
     * Update an organization-wide alert config
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $alert_config_id Alert config ID (required)
     * @param  \Meraki\Model\UpdateOrganizationAlertsProfileRequest|null $update_organization_alerts_profile_request update_organization_alerts_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationAlertsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner
     */
    public function updateOrganizationAlertsProfile($organization_id, $alert_config_id, $update_organization_alerts_profile_request = null, string $contentType = self::contentTypes['updateOrganizationAlertsProfile'][0])
    {
        list($response) = $this->updateOrganizationAlertsProfileWithHttpInfo($organization_id, $alert_config_id, $update_organization_alerts_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation updateOrganizationAlertsProfileWithHttpInfo
     *
     * Update an organization-wide alert config
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $alert_config_id Alert config ID (required)
     * @param  \Meraki\Model\UpdateOrganizationAlertsProfileRequest|null $update_organization_alerts_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationAlertsProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrganizationAlertsProfileWithHttpInfo($organization_id, $alert_config_id, $update_organization_alerts_profile_request = null, string $contentType = self::contentTypes['updateOrganizationAlertsProfile'][0])
    {
        $request = $this->updateOrganizationAlertsProfileRequest($organization_id, $alert_config_id, $update_organization_alerts_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrganizationAlertsProfileAsync
     *
     * Update an organization-wide alert config
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $alert_config_id Alert config ID (required)
     * @param  \Meraki\Model\UpdateOrganizationAlertsProfileRequest|null $update_organization_alerts_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationAlertsProfileAsync($organization_id, $alert_config_id, $update_organization_alerts_profile_request = null, string $contentType = self::contentTypes['updateOrganizationAlertsProfile'][0])
    {
        return $this->updateOrganizationAlertsProfileAsyncWithHttpInfo($organization_id, $alert_config_id, $update_organization_alerts_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateOrganizationAlertsProfileAsyncWithHttpInfo
     *
     * Update an organization-wide alert config
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $alert_config_id Alert config ID (required)
     * @param  \Meraki\Model\UpdateOrganizationAlertsProfileRequest|null $update_organization_alerts_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationAlertsProfileAsyncWithHttpInfo($organization_id, $alert_config_id, $update_organization_alerts_profile_request = null, string $contentType = self::contentTypes['updateOrganizationAlertsProfile'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationAlertsProfiles200ResponseInner';
        $request = $this->updateOrganizationAlertsProfileRequest($organization_id, $alert_config_id, $update_organization_alerts_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrganizationAlertsProfile'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $alert_config_id Alert config ID (required)
     * @param  \Meraki\Model\UpdateOrganizationAlertsProfileRequest|null $update_organization_alerts_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationAlertsProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateOrganizationAlertsProfileRequest($organization_id, $alert_config_id, $update_organization_alerts_profile_request = null, string $contentType = self::contentTypes['updateOrganizationAlertsProfile'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling updateOrganizationAlertsProfile'
            );
        }

        // verify the required parameter 'alert_config_id' is set
        if ($alert_config_id === null || (is_array($alert_config_id) && count($alert_config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alert_config_id when calling updateOrganizationAlertsProfile'
            );
        }



        $resourcePath = '/organizations/{organizationId}/alerts/profiles/{alertConfigId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($alert_config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'alertConfigId' . '}',
                ObjectSerializer::toPathValue($alert_config_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_organization_alerts_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_organization_alerts_profile_request));
            } else {
                $httpBody = $update_organization_alerts_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrganizationApplianceDnsLocalProfile
     *
     * Update a local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner
     */
    public function updateOrganizationApplianceDnsLocalProfile($organization_id, $profile_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['updateOrganizationApplianceDnsLocalProfile'][0])
    {
        list($response) = $this->updateOrganizationApplianceDnsLocalProfileWithHttpInfo($organization_id, $profile_id, $create_organization_appliance_dns_local_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation updateOrganizationApplianceDnsLocalProfileWithHttpInfo
     *
     * Update a local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrganizationApplianceDnsLocalProfileWithHttpInfo($organization_id, $profile_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['updateOrganizationApplianceDnsLocalProfile'][0])
    {
        $request = $this->updateOrganizationApplianceDnsLocalProfileRequest($organization_id, $profile_id, $create_organization_appliance_dns_local_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrganizationApplianceDnsLocalProfileAsync
     *
     * Update a local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationApplianceDnsLocalProfileAsync($organization_id, $profile_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['updateOrganizationApplianceDnsLocalProfile'][0])
    {
        return $this->updateOrganizationApplianceDnsLocalProfileAsyncWithHttpInfo($organization_id, $profile_id, $create_organization_appliance_dns_local_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateOrganizationApplianceDnsLocalProfileAsyncWithHttpInfo
     *
     * Update a local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationApplianceDnsLocalProfileAsyncWithHttpInfo($organization_id, $profile_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['updateOrganizationApplianceDnsLocalProfile'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner';
        $request = $this->updateOrganizationApplianceDnsLocalProfileRequest($organization_id, $profile_id, $create_organization_appliance_dns_local_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrganizationApplianceDnsLocalProfile'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateOrganizationApplianceDnsLocalProfileRequest($organization_id, $profile_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['updateOrganizationApplianceDnsLocalProfile'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling updateOrganizationApplianceDnsLocalProfile'
            );
        }

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling updateOrganizationApplianceDnsLocalProfile'
            );
        }

        // verify the required parameter 'create_organization_appliance_dns_local_profile_request' is set
        if ($create_organization_appliance_dns_local_profile_request === null || (is_array($create_organization_appliance_dns_local_profile_request) && count($create_organization_appliance_dns_local_profile_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_appliance_dns_local_profile_request when calling updateOrganizationApplianceDnsLocalProfile'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/profiles/{profileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_appliance_dns_local_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_appliance_dns_local_profile_request));
            } else {
                $httpBody = $create_organization_appliance_dns_local_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrganizationApplianceDnsSplitProfile
     *
     * Update a split DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\UpdateOrganizationApplianceDnsSplitProfileRequest|null $update_organization_appliance_dns_split_profile_request update_organization_appliance_dns_split_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsSplitProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner
     */
    public function updateOrganizationApplianceDnsSplitProfile($organization_id, $profile_id, $update_organization_appliance_dns_split_profile_request = null, string $contentType = self::contentTypes['updateOrganizationApplianceDnsSplitProfile'][0])
    {
        list($response) = $this->updateOrganizationApplianceDnsSplitProfileWithHttpInfo($organization_id, $profile_id, $update_organization_appliance_dns_split_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation updateOrganizationApplianceDnsSplitProfileWithHttpInfo
     *
     * Update a split DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\UpdateOrganizationApplianceDnsSplitProfileRequest|null $update_organization_appliance_dns_split_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsSplitProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrganizationApplianceDnsSplitProfileWithHttpInfo($organization_id, $profile_id, $update_organization_appliance_dns_split_profile_request = null, string $contentType = self::contentTypes['updateOrganizationApplianceDnsSplitProfile'][0])
    {
        $request = $this->updateOrganizationApplianceDnsSplitProfileRequest($organization_id, $profile_id, $update_organization_appliance_dns_split_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrganizationApplianceDnsSplitProfileAsync
     *
     * Update a split DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\UpdateOrganizationApplianceDnsSplitProfileRequest|null $update_organization_appliance_dns_split_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsSplitProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationApplianceDnsSplitProfileAsync($organization_id, $profile_id, $update_organization_appliance_dns_split_profile_request = null, string $contentType = self::contentTypes['updateOrganizationApplianceDnsSplitProfile'][0])
    {
        return $this->updateOrganizationApplianceDnsSplitProfileAsyncWithHttpInfo($organization_id, $profile_id, $update_organization_appliance_dns_split_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateOrganizationApplianceDnsSplitProfileAsyncWithHttpInfo
     *
     * Update a split DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\UpdateOrganizationApplianceDnsSplitProfileRequest|null $update_organization_appliance_dns_split_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsSplitProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationApplianceDnsSplitProfileAsyncWithHttpInfo($organization_id, $profile_id, $update_organization_appliance_dns_split_profile_request = null, string $contentType = self::contentTypes['updateOrganizationApplianceDnsSplitProfile'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationApplianceDnsSplitProfiles200ResponseInner';
        $request = $this->updateOrganizationApplianceDnsSplitProfileRequest($organization_id, $profile_id, $update_organization_appliance_dns_split_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrganizationApplianceDnsSplitProfile'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\UpdateOrganizationApplianceDnsSplitProfileRequest|null $update_organization_appliance_dns_split_profile_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsSplitProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateOrganizationApplianceDnsSplitProfileRequest($organization_id, $profile_id, $update_organization_appliance_dns_split_profile_request = null, string $contentType = self::contentTypes['updateOrganizationApplianceDnsSplitProfile'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling updateOrganizationApplianceDnsSplitProfile'
            );
        }

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling updateOrganizationApplianceDnsSplitProfile'
            );
        }



        $resourcePath = '/organizations/{organizationId}/appliance/dns/split/profiles/{profileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_organization_appliance_dns_split_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_organization_appliance_dns_split_profile_request));
            } else {
                $httpBody = $update_organization_appliance_dns_split_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrganizationConfigTemplateSwitchProfilePort
     *
     * Update a switch template port
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $port_id Port ID (required)
     * @param  \Meraki\Model\UpdateOrganizationConfigTemplateSwitchProfilePortRequest|null $update_organization_config_template_switch_profile_port_request update_organization_config_template_switch_profile_port_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationConfigTemplateSwitchProfilePort'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner
     */
    public function updateOrganizationConfigTemplateSwitchProfilePort($organization_id, $config_template_id, $profile_id, $port_id, $update_organization_config_template_switch_profile_port_request = null, string $contentType = self::contentTypes['updateOrganizationConfigTemplateSwitchProfilePort'][0])
    {
        list($response) = $this->updateOrganizationConfigTemplateSwitchProfilePortWithHttpInfo($organization_id, $config_template_id, $profile_id, $port_id, $update_organization_config_template_switch_profile_port_request, $contentType);
        return $response;
    }

    /**
     * Operation updateOrganizationConfigTemplateSwitchProfilePortWithHttpInfo
     *
     * Update a switch template port
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $port_id Port ID (required)
     * @param  \Meraki\Model\UpdateOrganizationConfigTemplateSwitchProfilePortRequest|null $update_organization_config_template_switch_profile_port_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationConfigTemplateSwitchProfilePort'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrganizationConfigTemplateSwitchProfilePortWithHttpInfo($organization_id, $config_template_id, $profile_id, $port_id, $update_organization_config_template_switch_profile_port_request = null, string $contentType = self::contentTypes['updateOrganizationConfigTemplateSwitchProfilePort'][0])
    {
        $request = $this->updateOrganizationConfigTemplateSwitchProfilePortRequest($organization_id, $config_template_id, $profile_id, $port_id, $update_organization_config_template_switch_profile_port_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrganizationConfigTemplateSwitchProfilePortAsync
     *
     * Update a switch template port
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $port_id Port ID (required)
     * @param  \Meraki\Model\UpdateOrganizationConfigTemplateSwitchProfilePortRequest|null $update_organization_config_template_switch_profile_port_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationConfigTemplateSwitchProfilePort'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationConfigTemplateSwitchProfilePortAsync($organization_id, $config_template_id, $profile_id, $port_id, $update_organization_config_template_switch_profile_port_request = null, string $contentType = self::contentTypes['updateOrganizationConfigTemplateSwitchProfilePort'][0])
    {
        return $this->updateOrganizationConfigTemplateSwitchProfilePortAsyncWithHttpInfo($organization_id, $config_template_id, $profile_id, $port_id, $update_organization_config_template_switch_profile_port_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateOrganizationConfigTemplateSwitchProfilePortAsyncWithHttpInfo
     *
     * Update a switch template port
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $port_id Port ID (required)
     * @param  \Meraki\Model\UpdateOrganizationConfigTemplateSwitchProfilePortRequest|null $update_organization_config_template_switch_profile_port_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationConfigTemplateSwitchProfilePort'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationConfigTemplateSwitchProfilePortAsyncWithHttpInfo($organization_id, $config_template_id, $profile_id, $port_id, $update_organization_config_template_switch_profile_port_request = null, string $contentType = self::contentTypes['updateOrganizationConfigTemplateSwitchProfilePort'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInner';
        $request = $this->updateOrganizationConfigTemplateSwitchProfilePortRequest($organization_id, $config_template_id, $profile_id, $port_id, $update_organization_config_template_switch_profile_port_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrganizationConfigTemplateSwitchProfilePort'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $config_template_id Config template ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $port_id Port ID (required)
     * @param  \Meraki\Model\UpdateOrganizationConfigTemplateSwitchProfilePortRequest|null $update_organization_config_template_switch_profile_port_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationConfigTemplateSwitchProfilePort'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateOrganizationConfigTemplateSwitchProfilePortRequest($organization_id, $config_template_id, $profile_id, $port_id, $update_organization_config_template_switch_profile_port_request = null, string $contentType = self::contentTypes['updateOrganizationConfigTemplateSwitchProfilePort'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling updateOrganizationConfigTemplateSwitchProfilePort'
            );
        }

        // verify the required parameter 'config_template_id' is set
        if ($config_template_id === null || (is_array($config_template_id) && count($config_template_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $config_template_id when calling updateOrganizationConfigTemplateSwitchProfilePort'
            );
        }

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling updateOrganizationConfigTemplateSwitchProfilePort'
            );
        }

        // verify the required parameter 'port_id' is set
        if ($port_id === null || (is_array($port_id) && count($port_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $port_id when calling updateOrganizationConfigTemplateSwitchProfilePort'
            );
        }



        $resourcePath = '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($config_template_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configTemplateId' . '}',
                ObjectSerializer::toPathValue($config_template_id),
                $resourcePath
            );
        }
        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }
        // path params
        if ($port_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portId' . '}',
                ObjectSerializer::toPathValue($port_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_organization_config_template_switch_profile_port_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_organization_config_template_switch_profile_port_request));
            } else {
                $httpBody = $update_organization_config_template_switch_profile_port_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
