<?php
/**
 * CloudMonitoringApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Meraki\ApiException;
use Meraki\Configuration;
use Meraki\HeaderSelector;
use Meraki\ObjectSerializer;

/**
 * CloudMonitoringApi Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CloudMonitoringApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createOrganizationInventoryOnboardingCloudMonitoringExportEvent' => [
            'application/json',
        ],
        'createOrganizationInventoryOnboardingCloudMonitoringImport' => [
            'application/json',
        ],
        'createOrganizationInventoryOnboardingCloudMonitoringPrepare' => [
            'application/json',
        ],
        'getOrganizationInventoryOnboardingCloudMonitoringImports' => [
            'application/json',
        ],
        'getOrganizationInventoryOnboardingCloudMonitoringNetworks' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringExportEvent
     *
     * Imports event logs related to the onboarding app into elastisearch
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest $create_organization_inventory_onboarding_cloud_monitoring_export_event_request create_organization_inventory_onboarding_cloud_monitoring_export_event_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringExportEvent($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_export_event_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'][0])
    {
        list($response) = $this->createOrganizationInventoryOnboardingCloudMonitoringExportEventWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_export_event_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringExportEventWithHttpInfo
     *
     * Imports event logs related to the onboarding app into elastisearch
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest $create_organization_inventory_onboarding_cloud_monitoring_export_event_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringExportEventWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_export_event_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'][0])
    {
        $request = $this->createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_export_event_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringExportEventAsync
     *
     * Imports event logs related to the onboarding app into elastisearch
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest $create_organization_inventory_onboarding_cloud_monitoring_export_event_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringExportEventAsync($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_export_event_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'][0])
    {
        return $this->createOrganizationInventoryOnboardingCloudMonitoringExportEventAsyncWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_export_event_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringExportEventAsyncWithHttpInfo
     *
     * Imports event logs related to the onboarding app into elastisearch
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest $create_organization_inventory_onboarding_cloud_monitoring_export_event_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringExportEventAsyncWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_export_event_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'][0])
    {
        $returnType = 'object';
        $request = $this->createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_export_event_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationInventoryOnboardingCloudMonitoringExportEvent'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest $create_organization_inventory_onboarding_cloud_monitoring_export_event_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_export_event_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationInventoryOnboardingCloudMonitoringExportEvent'
            );
        }

        // verify the required parameter 'create_organization_inventory_onboarding_cloud_monitoring_export_event_request' is set
        if ($create_organization_inventory_onboarding_cloud_monitoring_export_event_request === null || (is_array($create_organization_inventory_onboarding_cloud_monitoring_export_event_request) && count($create_organization_inventory_onboarding_cloud_monitoring_export_event_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_inventory_onboarding_cloud_monitoring_export_event_request when calling createOrganizationInventoryOnboardingCloudMonitoringExportEvent'
            );
        }


        $resourcePath = '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/exportEvents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_inventory_onboarding_cloud_monitoring_export_event_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_inventory_onboarding_cloud_monitoring_export_event_request));
            } else {
                $httpBody = $create_organization_inventory_onboarding_cloud_monitoring_export_event_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringImport
     *
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest $create_organization_inventory_onboarding_cloud_monitoring_import_request create_organization_inventory_onboarding_cloud_monitoring_import_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner[]
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringImport($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_import_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'][0])
    {
        list($response) = $this->createOrganizationInventoryOnboardingCloudMonitoringImportWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_import_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringImportWithHttpInfo
     *
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest $create_organization_inventory_onboarding_cloud_monitoring_import_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringImportWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_import_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'][0])
    {
        $request = $this->createOrganizationInventoryOnboardingCloudMonitoringImportRequest($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_import_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringImportAsync
     *
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest $create_organization_inventory_onboarding_cloud_monitoring_import_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringImportAsync($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_import_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'][0])
    {
        return $this->createOrganizationInventoryOnboardingCloudMonitoringImportAsyncWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_import_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringImportAsyncWithHttpInfo
     *
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest $create_organization_inventory_onboarding_cloud_monitoring_import_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringImportAsyncWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_import_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'][0])
    {
        $returnType = '\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner[]';
        $request = $this->createOrganizationInventoryOnboardingCloudMonitoringImportRequest($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_import_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationInventoryOnboardingCloudMonitoringImport'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest $create_organization_inventory_onboarding_cloud_monitoring_import_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringImportRequest($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_import_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationInventoryOnboardingCloudMonitoringImport'
            );
        }

        // verify the required parameter 'create_organization_inventory_onboarding_cloud_monitoring_import_request' is set
        if ($create_organization_inventory_onboarding_cloud_monitoring_import_request === null || (is_array($create_organization_inventory_onboarding_cloud_monitoring_import_request) && count($create_organization_inventory_onboarding_cloud_monitoring_import_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_inventory_onboarding_cloud_monitoring_import_request when calling createOrganizationInventoryOnboardingCloudMonitoringImport'
            );
        }


        $resourcePath = '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_inventory_onboarding_cloud_monitoring_import_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_inventory_onboarding_cloud_monitoring_import_request));
            } else {
                $httpBody = $create_organization_inventory_onboarding_cloud_monitoring_import_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringPrepare
     *
     * Initiates or updates an import session
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest $create_organization_inventory_onboarding_cloud_monitoring_prepare_request create_organization_inventory_onboarding_cloud_monitoring_prepare_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner[]
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringPrepare($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_prepare_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'][0])
    {
        list($response) = $this->createOrganizationInventoryOnboardingCloudMonitoringPrepareWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_prepare_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringPrepareWithHttpInfo
     *
     * Initiates or updates an import session
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest $create_organization_inventory_onboarding_cloud_monitoring_prepare_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringPrepareWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_prepare_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'][0])
    {
        $request = $this->createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_prepare_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringPrepareAsync
     *
     * Initiates or updates an import session
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest $create_organization_inventory_onboarding_cloud_monitoring_prepare_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringPrepareAsync($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_prepare_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'][0])
    {
        return $this->createOrganizationInventoryOnboardingCloudMonitoringPrepareAsyncWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_prepare_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringPrepareAsyncWithHttpInfo
     *
     * Initiates or updates an import session
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest $create_organization_inventory_onboarding_cloud_monitoring_prepare_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringPrepareAsyncWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_prepare_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'][0])
    {
        $returnType = '\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner[]';
        $request = $this->createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_prepare_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationInventoryOnboardingCloudMonitoringPrepare'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest $create_organization_inventory_onboarding_cloud_monitoring_prepare_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_prepare_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationInventoryOnboardingCloudMonitoringPrepare'
            );
        }

        // verify the required parameter 'create_organization_inventory_onboarding_cloud_monitoring_prepare_request' is set
        if ($create_organization_inventory_onboarding_cloud_monitoring_prepare_request === null || (is_array($create_organization_inventory_onboarding_cloud_monitoring_prepare_request) && count($create_organization_inventory_onboarding_cloud_monitoring_prepare_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_inventory_onboarding_cloud_monitoring_prepare_request when calling createOrganizationInventoryOnboardingCloudMonitoringPrepare'
            );
        }


        $resourcePath = '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/prepare';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_inventory_onboarding_cloud_monitoring_prepare_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_inventory_onboarding_cloud_monitoring_prepare_request));
            } else {
                $httpBody = $create_organization_inventory_onboarding_cloud_monitoring_prepare_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationInventoryOnboardingCloudMonitoringImports
     *
     * Check the status of a committed Import operation
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $import_ids import ids from an imports (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner[]
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringImports($organization_id, $import_ids, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'][0])
    {
        list($response) = $this->getOrganizationInventoryOnboardingCloudMonitoringImportsWithHttpInfo($organization_id, $import_ids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationInventoryOnboardingCloudMonitoringImportsWithHttpInfo
     *
     * Check the status of a committed Import operation
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $import_ids import ids from an imports (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringImportsWithHttpInfo($organization_id, $import_ids, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'][0])
    {
        $request = $this->getOrganizationInventoryOnboardingCloudMonitoringImportsRequest($organization_id, $import_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationInventoryOnboardingCloudMonitoringImportsAsync
     *
     * Check the status of a committed Import operation
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $import_ids import ids from an imports (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringImportsAsync($organization_id, $import_ids, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'][0])
    {
        return $this->getOrganizationInventoryOnboardingCloudMonitoringImportsAsyncWithHttpInfo($organization_id, $import_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationInventoryOnboardingCloudMonitoringImportsAsyncWithHttpInfo
     *
     * Check the status of a committed Import operation
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $import_ids import ids from an imports (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringImportsAsyncWithHttpInfo($organization_id, $import_ids, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner[]';
        $request = $this->getOrganizationInventoryOnboardingCloudMonitoringImportsRequest($organization_id, $import_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationInventoryOnboardingCloudMonitoringImports'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $import_ids import ids from an imports (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringImportsRequest($organization_id, $import_ids, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationInventoryOnboardingCloudMonitoringImports'
            );
        }

        // verify the required parameter 'import_ids' is set
        if ($import_ids === null || (is_array($import_ids) && count($import_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $import_ids when calling getOrganizationInventoryOnboardingCloudMonitoringImports'
            );
        }


        $resourcePath = '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $import_ids,
            'importIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationInventoryOnboardingCloudMonitoringNetworks
     *
     * Returns list of networks eligible for adding cloud monitored device
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $device_type Device Type switch or wireless controller (required)
     * @param  string|null $search Optional parameter to search on network name (optional)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetwork200Response[]
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringNetworks($organization_id, $device_type, $search = null, $per_page = null, $starting_after = null, $ending_before = null, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'][0])
    {
        list($response) = $this->getOrganizationInventoryOnboardingCloudMonitoringNetworksWithHttpInfo($organization_id, $device_type, $search, $per_page, $starting_after, $ending_before, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationInventoryOnboardingCloudMonitoringNetworksWithHttpInfo
     *
     * Returns list of networks eligible for adding cloud monitored device
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $device_type Device Type switch or wireless controller (required)
     * @param  string|null $search Optional parameter to search on network name (optional)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetwork200Response[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringNetworksWithHttpInfo($organization_id, $device_type, $search = null, $per_page = null, $starting_after = null, $ending_before = null, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'][0])
    {
        $request = $this->getOrganizationInventoryOnboardingCloudMonitoringNetworksRequest($organization_id, $device_type, $search, $per_page, $starting_after, $ending_before, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('\Meraki\Model\GetNetwork200Response[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetwork200Response[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetwork200Response[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetwork200Response[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetwork200Response[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationInventoryOnboardingCloudMonitoringNetworksAsync
     *
     * Returns list of networks eligible for adding cloud monitored device
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $device_type Device Type switch or wireless controller (required)
     * @param  string|null $search Optional parameter to search on network name (optional)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringNetworksAsync($organization_id, $device_type, $search = null, $per_page = null, $starting_after = null, $ending_before = null, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'][0])
    {
        return $this->getOrganizationInventoryOnboardingCloudMonitoringNetworksAsyncWithHttpInfo($organization_id, $device_type, $search, $per_page, $starting_after, $ending_before, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationInventoryOnboardingCloudMonitoringNetworksAsyncWithHttpInfo
     *
     * Returns list of networks eligible for adding cloud monitored device
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $device_type Device Type switch or wireless controller (required)
     * @param  string|null $search Optional parameter to search on network name (optional)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringNetworksAsyncWithHttpInfo($organization_id, $device_type, $search = null, $per_page = null, $starting_after = null, $ending_before = null, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'][0])
    {
        $returnType = '\Meraki\Model\GetNetwork200Response[]';
        $request = $this->getOrganizationInventoryOnboardingCloudMonitoringNetworksRequest($organization_id, $device_type, $search, $per_page, $starting_after, $ending_before, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationInventoryOnboardingCloudMonitoringNetworks'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $device_type Device Type switch or wireless controller (required)
     * @param  string|null $search Optional parameter to search on network name (optional)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringNetworksRequest($organization_id, $device_type, $search = null, $per_page = null, $starting_after = null, $ending_before = null, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks'
            );
        }

        // verify the required parameter 'device_type' is set
        if ($device_type === null || (is_array($device_type) && count($device_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $device_type when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks'
            );
        }






        $resourcePath = '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/networks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $device_type,
            'deviceType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'perPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starting_after,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ending_before,
            'endingBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
