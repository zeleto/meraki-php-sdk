<?php
/**
 * StagedApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Meraki\ApiException;
use Meraki\Configuration;
use Meraki\HeaderSelector;
use Meraki\ObjectSerializer;

/**
 * StagedApi Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StagedApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createNetworkFirmwareUpgradesStagedEvent' => [
            'application/json',
        ],
        'createNetworkFirmwareUpgradesStagedGroup' => [
            'application/json',
        ],
        'deferNetworkFirmwareUpgradesStagedEvents' => [
            'application/json',
        ],
        'deleteNetworkFirmwareUpgradesStagedGroup' => [
            'application/json',
        ],
        'getNetworkFirmwareUpgradesStagedEvents' => [
            'application/json',
        ],
        'getNetworkFirmwareUpgradesStagedGroup' => [
            'application/json',
        ],
        'getNetworkFirmwareUpgradesStagedGroups' => [
            'application/json',
        ],
        'getNetworkFirmwareUpgradesStagedStages' => [
            'application/json',
        ],
        'rollbacksNetworkFirmwareUpgradesStagedEvents' => [
            'application/json',
        ],
        'updateNetworkFirmwareUpgradesStagedEvents' => [
            'application/json',
        ],
        'updateNetworkFirmwareUpgradesStagedGroup' => [
            'application/json',
        ],
        'updateNetworkFirmwareUpgradesStagedStages' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createNetworkFirmwareUpgradesStagedEvent
     *
     * Create a Staged Upgrade Event for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkFirmwareUpgradesStagedEventRequest $create_network_firmware_upgrades_staged_event_request create_network_firmware_upgrades_staged_event_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkFirmwareUpgradesStagedEvent'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response
     */
    public function createNetworkFirmwareUpgradesStagedEvent($network_id, $create_network_firmware_upgrades_staged_event_request, string $contentType = self::contentTypes['createNetworkFirmwareUpgradesStagedEvent'][0])
    {
        list($response) = $this->createNetworkFirmwareUpgradesStagedEventWithHttpInfo($network_id, $create_network_firmware_upgrades_staged_event_request, $contentType);
        return $response;
    }

    /**
     * Operation createNetworkFirmwareUpgradesStagedEventWithHttpInfo
     *
     * Create a Staged Upgrade Event for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkFirmwareUpgradesStagedEventRequest $create_network_firmware_upgrades_staged_event_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkFirmwareUpgradesStagedEvent'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNetworkFirmwareUpgradesStagedEventWithHttpInfo($network_id, $create_network_firmware_upgrades_staged_event_request, string $contentType = self::contentTypes['createNetworkFirmwareUpgradesStagedEvent'][0])
    {
        $request = $this->createNetworkFirmwareUpgradesStagedEventRequest($network_id, $create_network_firmware_upgrades_staged_event_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNetworkFirmwareUpgradesStagedEventAsync
     *
     * Create a Staged Upgrade Event for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkFirmwareUpgradesStagedEventRequest $create_network_firmware_upgrades_staged_event_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkFirmwareUpgradesStagedEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkFirmwareUpgradesStagedEventAsync($network_id, $create_network_firmware_upgrades_staged_event_request, string $contentType = self::contentTypes['createNetworkFirmwareUpgradesStagedEvent'][0])
    {
        return $this->createNetworkFirmwareUpgradesStagedEventAsyncWithHttpInfo($network_id, $create_network_firmware_upgrades_staged_event_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNetworkFirmwareUpgradesStagedEventAsyncWithHttpInfo
     *
     * Create a Staged Upgrade Event for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkFirmwareUpgradesStagedEventRequest $create_network_firmware_upgrades_staged_event_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkFirmwareUpgradesStagedEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkFirmwareUpgradesStagedEventAsyncWithHttpInfo($network_id, $create_network_firmware_upgrades_staged_event_request, string $contentType = self::contentTypes['createNetworkFirmwareUpgradesStagedEvent'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response';
        $request = $this->createNetworkFirmwareUpgradesStagedEventRequest($network_id, $create_network_firmware_upgrades_staged_event_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNetworkFirmwareUpgradesStagedEvent'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkFirmwareUpgradesStagedEventRequest $create_network_firmware_upgrades_staged_event_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkFirmwareUpgradesStagedEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNetworkFirmwareUpgradesStagedEventRequest($network_id, $create_network_firmware_upgrades_staged_event_request, string $contentType = self::contentTypes['createNetworkFirmwareUpgradesStagedEvent'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling createNetworkFirmwareUpgradesStagedEvent'
            );
        }

        // verify the required parameter 'create_network_firmware_upgrades_staged_event_request' is set
        if ($create_network_firmware_upgrades_staged_event_request === null || (is_array($create_network_firmware_upgrades_staged_event_request) && count($create_network_firmware_upgrades_staged_event_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_network_firmware_upgrades_staged_event_request when calling createNetworkFirmwareUpgradesStagedEvent'
            );
        }


        $resourcePath = '/networks/{networkId}/firmwareUpgrades/staged/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_network_firmware_upgrades_staged_event_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_network_firmware_upgrades_staged_event_request));
            } else {
                $httpBody = $create_network_firmware_upgrades_staged_event_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNetworkFirmwareUpgradesStagedGroup
     *
     * Create a Staged Upgrade Group for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkFirmwareUpgradesStagedGroupRequest $create_network_firmware_upgrades_staged_group_request create_network_firmware_upgrades_staged_group_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner
     */
    public function createNetworkFirmwareUpgradesStagedGroup($network_id, $create_network_firmware_upgrades_staged_group_request, string $contentType = self::contentTypes['createNetworkFirmwareUpgradesStagedGroup'][0])
    {
        list($response) = $this->createNetworkFirmwareUpgradesStagedGroupWithHttpInfo($network_id, $create_network_firmware_upgrades_staged_group_request, $contentType);
        return $response;
    }

    /**
     * Operation createNetworkFirmwareUpgradesStagedGroupWithHttpInfo
     *
     * Create a Staged Upgrade Group for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkFirmwareUpgradesStagedGroupRequest $create_network_firmware_upgrades_staged_group_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNetworkFirmwareUpgradesStagedGroupWithHttpInfo($network_id, $create_network_firmware_upgrades_staged_group_request, string $contentType = self::contentTypes['createNetworkFirmwareUpgradesStagedGroup'][0])
    {
        $request = $this->createNetworkFirmwareUpgradesStagedGroupRequest($network_id, $create_network_firmware_upgrades_staged_group_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNetworkFirmwareUpgradesStagedGroupAsync
     *
     * Create a Staged Upgrade Group for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkFirmwareUpgradesStagedGroupRequest $create_network_firmware_upgrades_staged_group_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkFirmwareUpgradesStagedGroupAsync($network_id, $create_network_firmware_upgrades_staged_group_request, string $contentType = self::contentTypes['createNetworkFirmwareUpgradesStagedGroup'][0])
    {
        return $this->createNetworkFirmwareUpgradesStagedGroupAsyncWithHttpInfo($network_id, $create_network_firmware_upgrades_staged_group_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNetworkFirmwareUpgradesStagedGroupAsyncWithHttpInfo
     *
     * Create a Staged Upgrade Group for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkFirmwareUpgradesStagedGroupRequest $create_network_firmware_upgrades_staged_group_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNetworkFirmwareUpgradesStagedGroupAsyncWithHttpInfo($network_id, $create_network_firmware_upgrades_staged_group_request, string $contentType = self::contentTypes['createNetworkFirmwareUpgradesStagedGroup'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner';
        $request = $this->createNetworkFirmwareUpgradesStagedGroupRequest($network_id, $create_network_firmware_upgrades_staged_group_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNetworkFirmwareUpgradesStagedGroup'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\CreateNetworkFirmwareUpgradesStagedGroupRequest $create_network_firmware_upgrades_staged_group_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNetworkFirmwareUpgradesStagedGroupRequest($network_id, $create_network_firmware_upgrades_staged_group_request, string $contentType = self::contentTypes['createNetworkFirmwareUpgradesStagedGroup'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling createNetworkFirmwareUpgradesStagedGroup'
            );
        }

        // verify the required parameter 'create_network_firmware_upgrades_staged_group_request' is set
        if ($create_network_firmware_upgrades_staged_group_request === null || (is_array($create_network_firmware_upgrades_staged_group_request) && count($create_network_firmware_upgrades_staged_group_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_network_firmware_upgrades_staged_group_request when calling createNetworkFirmwareUpgradesStagedGroup'
            );
        }


        $resourcePath = '/networks/{networkId}/firmwareUpgrades/staged/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_network_firmware_upgrades_staged_group_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_network_firmware_upgrades_staged_group_request));
            } else {
                $httpBody = $create_network_firmware_upgrades_staged_group_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deferNetworkFirmwareUpgradesStagedEvents
     *
     * Postpone by 1 week all pending staged upgrade stages for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deferNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response
     */
    public function deferNetworkFirmwareUpgradesStagedEvents($network_id, string $contentType = self::contentTypes['deferNetworkFirmwareUpgradesStagedEvents'][0])
    {
        list($response) = $this->deferNetworkFirmwareUpgradesStagedEventsWithHttpInfo($network_id, $contentType);
        return $response;
    }

    /**
     * Operation deferNetworkFirmwareUpgradesStagedEventsWithHttpInfo
     *
     * Postpone by 1 week all pending staged upgrade stages for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deferNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function deferNetworkFirmwareUpgradesStagedEventsWithHttpInfo($network_id, string $contentType = self::contentTypes['deferNetworkFirmwareUpgradesStagedEvents'][0])
    {
        $request = $this->deferNetworkFirmwareUpgradesStagedEventsRequest($network_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deferNetworkFirmwareUpgradesStagedEventsAsync
     *
     * Postpone by 1 week all pending staged upgrade stages for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deferNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deferNetworkFirmwareUpgradesStagedEventsAsync($network_id, string $contentType = self::contentTypes['deferNetworkFirmwareUpgradesStagedEvents'][0])
    {
        return $this->deferNetworkFirmwareUpgradesStagedEventsAsyncWithHttpInfo($network_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deferNetworkFirmwareUpgradesStagedEventsAsyncWithHttpInfo
     *
     * Postpone by 1 week all pending staged upgrade stages for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deferNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deferNetworkFirmwareUpgradesStagedEventsAsyncWithHttpInfo($network_id, string $contentType = self::contentTypes['deferNetworkFirmwareUpgradesStagedEvents'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response';
        $request = $this->deferNetworkFirmwareUpgradesStagedEventsRequest($network_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deferNetworkFirmwareUpgradesStagedEvents'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deferNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deferNetworkFirmwareUpgradesStagedEventsRequest($network_id, string $contentType = self::contentTypes['deferNetworkFirmwareUpgradesStagedEvents'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling deferNetworkFirmwareUpgradesStagedEvents'
            );
        }


        $resourcePath = '/networks/{networkId}/firmwareUpgrades/staged/events/defer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNetworkFirmwareUpgradesStagedGroup
     *
     * Delete a Staged Upgrade Group
     *
     * @param  string $network_id Network ID (required)
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNetworkFirmwareUpgradesStagedGroup($network_id, $group_id, string $contentType = self::contentTypes['deleteNetworkFirmwareUpgradesStagedGroup'][0])
    {
        $this->deleteNetworkFirmwareUpgradesStagedGroupWithHttpInfo($network_id, $group_id, $contentType);
    }

    /**
     * Operation deleteNetworkFirmwareUpgradesStagedGroupWithHttpInfo
     *
     * Delete a Staged Upgrade Group
     *
     * @param  string $network_id Network ID (required)
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNetworkFirmwareUpgradesStagedGroupWithHttpInfo($network_id, $group_id, string $contentType = self::contentTypes['deleteNetworkFirmwareUpgradesStagedGroup'][0])
    {
        $request = $this->deleteNetworkFirmwareUpgradesStagedGroupRequest($network_id, $group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNetworkFirmwareUpgradesStagedGroupAsync
     *
     * Delete a Staged Upgrade Group
     *
     * @param  string $network_id Network ID (required)
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkFirmwareUpgradesStagedGroupAsync($network_id, $group_id, string $contentType = self::contentTypes['deleteNetworkFirmwareUpgradesStagedGroup'][0])
    {
        return $this->deleteNetworkFirmwareUpgradesStagedGroupAsyncWithHttpInfo($network_id, $group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNetworkFirmwareUpgradesStagedGroupAsyncWithHttpInfo
     *
     * Delete a Staged Upgrade Group
     *
     * @param  string $network_id Network ID (required)
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNetworkFirmwareUpgradesStagedGroupAsyncWithHttpInfo($network_id, $group_id, string $contentType = self::contentTypes['deleteNetworkFirmwareUpgradesStagedGroup'][0])
    {
        $returnType = '';
        $request = $this->deleteNetworkFirmwareUpgradesStagedGroupRequest($network_id, $group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNetworkFirmwareUpgradesStagedGroup'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNetworkFirmwareUpgradesStagedGroupRequest($network_id, $group_id, string $contentType = self::contentTypes['deleteNetworkFirmwareUpgradesStagedGroup'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling deleteNetworkFirmwareUpgradesStagedGroup'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling deleteNetworkFirmwareUpgradesStagedGroup'
            );
        }


        $resourcePath = '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkFirmwareUpgradesStagedEvents
     *
     * Get the Staged Upgrade Event from a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response
     */
    public function getNetworkFirmwareUpgradesStagedEvents($network_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedEvents'][0])
    {
        list($response) = $this->getNetworkFirmwareUpgradesStagedEventsWithHttpInfo($network_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkFirmwareUpgradesStagedEventsWithHttpInfo
     *
     * Get the Staged Upgrade Event from a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkFirmwareUpgradesStagedEventsWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedEvents'][0])
    {
        $request = $this->getNetworkFirmwareUpgradesStagedEventsRequest($network_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkFirmwareUpgradesStagedEventsAsync
     *
     * Get the Staged Upgrade Event from a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkFirmwareUpgradesStagedEventsAsync($network_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedEvents'][0])
    {
        return $this->getNetworkFirmwareUpgradesStagedEventsAsyncWithHttpInfo($network_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkFirmwareUpgradesStagedEventsAsyncWithHttpInfo
     *
     * Get the Staged Upgrade Event from a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkFirmwareUpgradesStagedEventsAsyncWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedEvents'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response';
        $request = $this->getNetworkFirmwareUpgradesStagedEventsRequest($network_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkFirmwareUpgradesStagedEvents'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkFirmwareUpgradesStagedEventsRequest($network_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedEvents'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkFirmwareUpgradesStagedEvents'
            );
        }


        $resourcePath = '/networks/{networkId}/firmwareUpgrades/staged/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkFirmwareUpgradesStagedGroup
     *
     * Get a Staged Upgrade Group from a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner
     */
    public function getNetworkFirmwareUpgradesStagedGroup($network_id, $group_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedGroup'][0])
    {
        list($response) = $this->getNetworkFirmwareUpgradesStagedGroupWithHttpInfo($network_id, $group_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkFirmwareUpgradesStagedGroupWithHttpInfo
     *
     * Get a Staged Upgrade Group from a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkFirmwareUpgradesStagedGroupWithHttpInfo($network_id, $group_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedGroup'][0])
    {
        $request = $this->getNetworkFirmwareUpgradesStagedGroupRequest($network_id, $group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkFirmwareUpgradesStagedGroupAsync
     *
     * Get a Staged Upgrade Group from a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkFirmwareUpgradesStagedGroupAsync($network_id, $group_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedGroup'][0])
    {
        return $this->getNetworkFirmwareUpgradesStagedGroupAsyncWithHttpInfo($network_id, $group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkFirmwareUpgradesStagedGroupAsyncWithHttpInfo
     *
     * Get a Staged Upgrade Group from a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkFirmwareUpgradesStagedGroupAsyncWithHttpInfo($network_id, $group_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedGroup'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner';
        $request = $this->getNetworkFirmwareUpgradesStagedGroupRequest($network_id, $group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkFirmwareUpgradesStagedGroup'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $group_id Group ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkFirmwareUpgradesStagedGroupRequest($network_id, $group_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedGroup'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkFirmwareUpgradesStagedGroup'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling getNetworkFirmwareUpgradesStagedGroup'
            );
        }


        $resourcePath = '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkFirmwareUpgradesStagedGroups
     *
     * List of Staged Upgrade Groups in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedGroups'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner[]
     */
    public function getNetworkFirmwareUpgradesStagedGroups($network_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedGroups'][0])
    {
        list($response) = $this->getNetworkFirmwareUpgradesStagedGroupsWithHttpInfo($network_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkFirmwareUpgradesStagedGroupsWithHttpInfo
     *
     * List of Staged Upgrade Groups in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedGroups'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkFirmwareUpgradesStagedGroupsWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedGroups'][0])
    {
        $request = $this->getNetworkFirmwareUpgradesStagedGroupsRequest($network_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkFirmwareUpgradesStagedGroupsAsync
     *
     * List of Staged Upgrade Groups in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkFirmwareUpgradesStagedGroupsAsync($network_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedGroups'][0])
    {
        return $this->getNetworkFirmwareUpgradesStagedGroupsAsyncWithHttpInfo($network_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkFirmwareUpgradesStagedGroupsAsyncWithHttpInfo
     *
     * List of Staged Upgrade Groups in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkFirmwareUpgradesStagedGroupsAsyncWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedGroups'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner[]';
        $request = $this->getNetworkFirmwareUpgradesStagedGroupsRequest($network_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkFirmwareUpgradesStagedGroups'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkFirmwareUpgradesStagedGroupsRequest($network_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedGroups'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkFirmwareUpgradesStagedGroups'
            );
        }


        $resourcePath = '/networks/{networkId}/firmwareUpgrades/staged/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkFirmwareUpgradesStagedStages
     *
     * Order of Staged Upgrade Groups in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedStages'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkFirmwareUpgradesStagedStages200ResponseInner[]
     */
    public function getNetworkFirmwareUpgradesStagedStages($network_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedStages'][0])
    {
        list($response) = $this->getNetworkFirmwareUpgradesStagedStagesWithHttpInfo($network_id, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkFirmwareUpgradesStagedStagesWithHttpInfo
     *
     * Order of Staged Upgrade Groups in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedStages'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkFirmwareUpgradesStagedStages200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkFirmwareUpgradesStagedStagesWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedStages'][0])
    {
        $request = $this->getNetworkFirmwareUpgradesStagedStagesRequest($network_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedStages200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedStages200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkFirmwareUpgradesStagedStages200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedStages200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkFirmwareUpgradesStagedStages200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkFirmwareUpgradesStagedStagesAsync
     *
     * Order of Staged Upgrade Groups in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedStages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkFirmwareUpgradesStagedStagesAsync($network_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedStages'][0])
    {
        return $this->getNetworkFirmwareUpgradesStagedStagesAsyncWithHttpInfo($network_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkFirmwareUpgradesStagedStagesAsyncWithHttpInfo
     *
     * Order of Staged Upgrade Groups in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedStages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkFirmwareUpgradesStagedStagesAsyncWithHttpInfo($network_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedStages'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedStages200ResponseInner[]';
        $request = $this->getNetworkFirmwareUpgradesStagedStagesRequest($network_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkFirmwareUpgradesStagedStages'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkFirmwareUpgradesStagedStages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkFirmwareUpgradesStagedStagesRequest($network_id, string $contentType = self::contentTypes['getNetworkFirmwareUpgradesStagedStages'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkFirmwareUpgradesStagedStages'
            );
        }


        $resourcePath = '/networks/{networkId}/firmwareUpgrades/staged/stages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rollbacksNetworkFirmwareUpgradesStagedEvents
     *
     * Rollback a Staged Upgrade Event for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\RollbacksNetworkFirmwareUpgradesStagedEventsRequest $rollbacks_network_firmware_upgrades_staged_events_request rollbacks_network_firmware_upgrades_staged_events_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rollbacksNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response
     */
    public function rollbacksNetworkFirmwareUpgradesStagedEvents($network_id, $rollbacks_network_firmware_upgrades_staged_events_request, string $contentType = self::contentTypes['rollbacksNetworkFirmwareUpgradesStagedEvents'][0])
    {
        list($response) = $this->rollbacksNetworkFirmwareUpgradesStagedEventsWithHttpInfo($network_id, $rollbacks_network_firmware_upgrades_staged_events_request, $contentType);
        return $response;
    }

    /**
     * Operation rollbacksNetworkFirmwareUpgradesStagedEventsWithHttpInfo
     *
     * Rollback a Staged Upgrade Event for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\RollbacksNetworkFirmwareUpgradesStagedEventsRequest $rollbacks_network_firmware_upgrades_staged_events_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rollbacksNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function rollbacksNetworkFirmwareUpgradesStagedEventsWithHttpInfo($network_id, $rollbacks_network_firmware_upgrades_staged_events_request, string $contentType = self::contentTypes['rollbacksNetworkFirmwareUpgradesStagedEvents'][0])
    {
        $request = $this->rollbacksNetworkFirmwareUpgradesStagedEventsRequest($network_id, $rollbacks_network_firmware_upgrades_staged_events_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rollbacksNetworkFirmwareUpgradesStagedEventsAsync
     *
     * Rollback a Staged Upgrade Event for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\RollbacksNetworkFirmwareUpgradesStagedEventsRequest $rollbacks_network_firmware_upgrades_staged_events_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rollbacksNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rollbacksNetworkFirmwareUpgradesStagedEventsAsync($network_id, $rollbacks_network_firmware_upgrades_staged_events_request, string $contentType = self::contentTypes['rollbacksNetworkFirmwareUpgradesStagedEvents'][0])
    {
        return $this->rollbacksNetworkFirmwareUpgradesStagedEventsAsyncWithHttpInfo($network_id, $rollbacks_network_firmware_upgrades_staged_events_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rollbacksNetworkFirmwareUpgradesStagedEventsAsyncWithHttpInfo
     *
     * Rollback a Staged Upgrade Event for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\RollbacksNetworkFirmwareUpgradesStagedEventsRequest $rollbacks_network_firmware_upgrades_staged_events_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rollbacksNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rollbacksNetworkFirmwareUpgradesStagedEventsAsyncWithHttpInfo($network_id, $rollbacks_network_firmware_upgrades_staged_events_request, string $contentType = self::contentTypes['rollbacksNetworkFirmwareUpgradesStagedEvents'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response';
        $request = $this->rollbacksNetworkFirmwareUpgradesStagedEventsRequest($network_id, $rollbacks_network_firmware_upgrades_staged_events_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rollbacksNetworkFirmwareUpgradesStagedEvents'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\RollbacksNetworkFirmwareUpgradesStagedEventsRequest $rollbacks_network_firmware_upgrades_staged_events_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rollbacksNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rollbacksNetworkFirmwareUpgradesStagedEventsRequest($network_id, $rollbacks_network_firmware_upgrades_staged_events_request, string $contentType = self::contentTypes['rollbacksNetworkFirmwareUpgradesStagedEvents'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling rollbacksNetworkFirmwareUpgradesStagedEvents'
            );
        }

        // verify the required parameter 'rollbacks_network_firmware_upgrades_staged_events_request' is set
        if ($rollbacks_network_firmware_upgrades_staged_events_request === null || (is_array($rollbacks_network_firmware_upgrades_staged_events_request) && count($rollbacks_network_firmware_upgrades_staged_events_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rollbacks_network_firmware_upgrades_staged_events_request when calling rollbacksNetworkFirmwareUpgradesStagedEvents'
            );
        }


        $resourcePath = '/networks/{networkId}/firmwareUpgrades/staged/events/rollbacks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rollbacks_network_firmware_upgrades_staged_events_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rollbacks_network_firmware_upgrades_staged_events_request));
            } else {
                $httpBody = $rollbacks_network_firmware_upgrades_staged_events_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkFirmwareUpgradesStagedEvents
     *
     * Update the Staged Upgrade Event for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkFirmwareUpgradesStagedEventsRequest $update_network_firmware_upgrades_staged_events_request update_network_firmware_upgrades_staged_events_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response
     */
    public function updateNetworkFirmwareUpgradesStagedEvents($network_id, $update_network_firmware_upgrades_staged_events_request, string $contentType = self::contentTypes['updateNetworkFirmwareUpgradesStagedEvents'][0])
    {
        list($response) = $this->updateNetworkFirmwareUpgradesStagedEventsWithHttpInfo($network_id, $update_network_firmware_upgrades_staged_events_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkFirmwareUpgradesStagedEventsWithHttpInfo
     *
     * Update the Staged Upgrade Event for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkFirmwareUpgradesStagedEventsRequest $update_network_firmware_upgrades_staged_events_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkFirmwareUpgradesStagedEventsWithHttpInfo($network_id, $update_network_firmware_upgrades_staged_events_request, string $contentType = self::contentTypes['updateNetworkFirmwareUpgradesStagedEvents'][0])
    {
        $request = $this->updateNetworkFirmwareUpgradesStagedEventsRequest($network_id, $update_network_firmware_upgrades_staged_events_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkFirmwareUpgradesStagedEventsAsync
     *
     * Update the Staged Upgrade Event for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkFirmwareUpgradesStagedEventsRequest $update_network_firmware_upgrades_staged_events_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkFirmwareUpgradesStagedEventsAsync($network_id, $update_network_firmware_upgrades_staged_events_request, string $contentType = self::contentTypes['updateNetworkFirmwareUpgradesStagedEvents'][0])
    {
        return $this->updateNetworkFirmwareUpgradesStagedEventsAsyncWithHttpInfo($network_id, $update_network_firmware_upgrades_staged_events_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkFirmwareUpgradesStagedEventsAsyncWithHttpInfo
     *
     * Update the Staged Upgrade Event for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkFirmwareUpgradesStagedEventsRequest $update_network_firmware_upgrades_staged_events_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkFirmwareUpgradesStagedEventsAsyncWithHttpInfo($network_id, $update_network_firmware_upgrades_staged_events_request, string $contentType = self::contentTypes['updateNetworkFirmwareUpgradesStagedEvents'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedEvents200Response';
        $request = $this->updateNetworkFirmwareUpgradesStagedEventsRequest($network_id, $update_network_firmware_upgrades_staged_events_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkFirmwareUpgradesStagedEvents'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkFirmwareUpgradesStagedEventsRequest $update_network_firmware_upgrades_staged_events_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFirmwareUpgradesStagedEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkFirmwareUpgradesStagedEventsRequest($network_id, $update_network_firmware_upgrades_staged_events_request, string $contentType = self::contentTypes['updateNetworkFirmwareUpgradesStagedEvents'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkFirmwareUpgradesStagedEvents'
            );
        }

        // verify the required parameter 'update_network_firmware_upgrades_staged_events_request' is set
        if ($update_network_firmware_upgrades_staged_events_request === null || (is_array($update_network_firmware_upgrades_staged_events_request) && count($update_network_firmware_upgrades_staged_events_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_network_firmware_upgrades_staged_events_request when calling updateNetworkFirmwareUpgradesStagedEvents'
            );
        }


        $resourcePath = '/networks/{networkId}/firmwareUpgrades/staged/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_network_firmware_upgrades_staged_events_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_network_firmware_upgrades_staged_events_request));
            } else {
                $httpBody = $update_network_firmware_upgrades_staged_events_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkFirmwareUpgradesStagedGroup
     *
     * Update a Staged Upgrade Group for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $group_id Group ID (required)
     * @param  \Meraki\Model\CreateNetworkFirmwareUpgradesStagedGroupRequest $create_network_firmware_upgrades_staged_group_request create_network_firmware_upgrades_staged_group_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner
     */
    public function updateNetworkFirmwareUpgradesStagedGroup($network_id, $group_id, $create_network_firmware_upgrades_staged_group_request, string $contentType = self::contentTypes['updateNetworkFirmwareUpgradesStagedGroup'][0])
    {
        list($response) = $this->updateNetworkFirmwareUpgradesStagedGroupWithHttpInfo($network_id, $group_id, $create_network_firmware_upgrades_staged_group_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkFirmwareUpgradesStagedGroupWithHttpInfo
     *
     * Update a Staged Upgrade Group for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $group_id Group ID (required)
     * @param  \Meraki\Model\CreateNetworkFirmwareUpgradesStagedGroupRequest $create_network_firmware_upgrades_staged_group_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkFirmwareUpgradesStagedGroupWithHttpInfo($network_id, $group_id, $create_network_firmware_upgrades_staged_group_request, string $contentType = self::contentTypes['updateNetworkFirmwareUpgradesStagedGroup'][0])
    {
        $request = $this->updateNetworkFirmwareUpgradesStagedGroupRequest($network_id, $group_id, $create_network_firmware_upgrades_staged_group_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkFirmwareUpgradesStagedGroupAsync
     *
     * Update a Staged Upgrade Group for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $group_id Group ID (required)
     * @param  \Meraki\Model\CreateNetworkFirmwareUpgradesStagedGroupRequest $create_network_firmware_upgrades_staged_group_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkFirmwareUpgradesStagedGroupAsync($network_id, $group_id, $create_network_firmware_upgrades_staged_group_request, string $contentType = self::contentTypes['updateNetworkFirmwareUpgradesStagedGroup'][0])
    {
        return $this->updateNetworkFirmwareUpgradesStagedGroupAsyncWithHttpInfo($network_id, $group_id, $create_network_firmware_upgrades_staged_group_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkFirmwareUpgradesStagedGroupAsyncWithHttpInfo
     *
     * Update a Staged Upgrade Group for a network
     *
     * @param  string $network_id Network ID (required)
     * @param  string $group_id Group ID (required)
     * @param  \Meraki\Model\CreateNetworkFirmwareUpgradesStagedGroupRequest $create_network_firmware_upgrades_staged_group_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkFirmwareUpgradesStagedGroupAsyncWithHttpInfo($network_id, $group_id, $create_network_firmware_upgrades_staged_group_request, string $contentType = self::contentTypes['updateNetworkFirmwareUpgradesStagedGroup'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedGroups200ResponseInner';
        $request = $this->updateNetworkFirmwareUpgradesStagedGroupRequest($network_id, $group_id, $create_network_firmware_upgrades_staged_group_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkFirmwareUpgradesStagedGroup'
     *
     * @param  string $network_id Network ID (required)
     * @param  string $group_id Group ID (required)
     * @param  \Meraki\Model\CreateNetworkFirmwareUpgradesStagedGroupRequest $create_network_firmware_upgrades_staged_group_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFirmwareUpgradesStagedGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkFirmwareUpgradesStagedGroupRequest($network_id, $group_id, $create_network_firmware_upgrades_staged_group_request, string $contentType = self::contentTypes['updateNetworkFirmwareUpgradesStagedGroup'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkFirmwareUpgradesStagedGroup'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling updateNetworkFirmwareUpgradesStagedGroup'
            );
        }

        // verify the required parameter 'create_network_firmware_upgrades_staged_group_request' is set
        if ($create_network_firmware_upgrades_staged_group_request === null || (is_array($create_network_firmware_upgrades_staged_group_request) && count($create_network_firmware_upgrades_staged_group_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_network_firmware_upgrades_staged_group_request when calling updateNetworkFirmwareUpgradesStagedGroup'
            );
        }


        $resourcePath = '/networks/{networkId}/firmwareUpgrades/staged/groups/{groupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'groupId' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_network_firmware_upgrades_staged_group_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_network_firmware_upgrades_staged_group_request));
            } else {
                $httpBody = $create_network_firmware_upgrades_staged_group_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNetworkFirmwareUpgradesStagedStages
     *
     * Assign Staged Upgrade Group order in the sequence.
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkFirmwareUpgradesStagedStagesRequest|null $update_network_firmware_upgrades_staged_stages_request update_network_firmware_upgrades_staged_stages_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFirmwareUpgradesStagedStages'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkFirmwareUpgradesStagedStages200ResponseInner[]
     */
    public function updateNetworkFirmwareUpgradesStagedStages($network_id, $update_network_firmware_upgrades_staged_stages_request = null, string $contentType = self::contentTypes['updateNetworkFirmwareUpgradesStagedStages'][0])
    {
        list($response) = $this->updateNetworkFirmwareUpgradesStagedStagesWithHttpInfo($network_id, $update_network_firmware_upgrades_staged_stages_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNetworkFirmwareUpgradesStagedStagesWithHttpInfo
     *
     * Assign Staged Upgrade Group order in the sequence.
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkFirmwareUpgradesStagedStagesRequest|null $update_network_firmware_upgrades_staged_stages_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFirmwareUpgradesStagedStages'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkFirmwareUpgradesStagedStages200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNetworkFirmwareUpgradesStagedStagesWithHttpInfo($network_id, $update_network_firmware_upgrades_staged_stages_request = null, string $contentType = self::contentTypes['updateNetworkFirmwareUpgradesStagedStages'][0])
    {
        $request = $this->updateNetworkFirmwareUpgradesStagedStagesRequest($network_id, $update_network_firmware_upgrades_staged_stages_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedStages200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkFirmwareUpgradesStagedStages200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkFirmwareUpgradesStagedStages200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedStages200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkFirmwareUpgradesStagedStages200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNetworkFirmwareUpgradesStagedStagesAsync
     *
     * Assign Staged Upgrade Group order in the sequence.
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkFirmwareUpgradesStagedStagesRequest|null $update_network_firmware_upgrades_staged_stages_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFirmwareUpgradesStagedStages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkFirmwareUpgradesStagedStagesAsync($network_id, $update_network_firmware_upgrades_staged_stages_request = null, string $contentType = self::contentTypes['updateNetworkFirmwareUpgradesStagedStages'][0])
    {
        return $this->updateNetworkFirmwareUpgradesStagedStagesAsyncWithHttpInfo($network_id, $update_network_firmware_upgrades_staged_stages_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNetworkFirmwareUpgradesStagedStagesAsyncWithHttpInfo
     *
     * Assign Staged Upgrade Group order in the sequence.
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkFirmwareUpgradesStagedStagesRequest|null $update_network_firmware_upgrades_staged_stages_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFirmwareUpgradesStagedStages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNetworkFirmwareUpgradesStagedStagesAsyncWithHttpInfo($network_id, $update_network_firmware_upgrades_staged_stages_request = null, string $contentType = self::contentTypes['updateNetworkFirmwareUpgradesStagedStages'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkFirmwareUpgradesStagedStages200ResponseInner[]';
        $request = $this->updateNetworkFirmwareUpgradesStagedStagesRequest($network_id, $update_network_firmware_upgrades_staged_stages_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNetworkFirmwareUpgradesStagedStages'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\UpdateNetworkFirmwareUpgradesStagedStagesRequest|null $update_network_firmware_upgrades_staged_stages_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNetworkFirmwareUpgradesStagedStages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNetworkFirmwareUpgradesStagedStagesRequest($network_id, $update_network_firmware_upgrades_staged_stages_request = null, string $contentType = self::contentTypes['updateNetworkFirmwareUpgradesStagedStages'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling updateNetworkFirmwareUpgradesStagedStages'
            );
        }



        $resourcePath = '/networks/{networkId}/firmwareUpgrades/staged/stages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_network_firmware_upgrades_staged_stages_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_network_firmware_upgrades_staged_stages_request));
            } else {
                $httpBody = $update_network_firmware_upgrades_staged_stages_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
