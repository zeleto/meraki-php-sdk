<?php
/**
 * LocalApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Meraki\ApiException;
use Meraki\Configuration;
use Meraki\HeaderSelector;
use Meraki\ObjectSerializer;

/**
 * LocalApi Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LocalApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate' => [
            'application/json',
        ],
        'createOrganizationApplianceDnsLocalProfile' => [
            'application/json',
        ],
        'createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete' => [
            'application/json',
        ],
        'createOrganizationApplianceDnsLocalRecord' => [
            'application/json',
        ],
        'deleteOrganizationApplianceDnsLocalProfile' => [
            'application/json',
        ],
        'deleteOrganizationApplianceDnsLocalRecord' => [
            'application/json',
        ],
        'getOrganizationApplianceDnsLocalProfiles' => [
            'application/json',
        ],
        'getOrganizationApplianceDnsLocalProfilesAssignments' => [
            'application/json',
        ],
        'getOrganizationApplianceDnsLocalRecords' => [
            'application/json',
        ],
        'updateOrganizationApplianceDnsLocalProfile' => [
            'application/json',
        ],
        'updateOrganizationApplianceDnsLocalRecord' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate
     *
     * Assign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response
     */
    public function bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'][0])
    {
        list($response) = $this->bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType);
        return $response;
    }

    /**
     * Operation bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateWithHttpInfo
     *
     * Assign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'][0])
    {
        $request = $this->bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateAsync
     *
     * Assign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateAsync($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'][0])
    {
        return $this->bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateAsyncWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateAsyncWithHttpInfo
     *
     * Assign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateAsyncWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'][0])
    {
        $returnType = '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response';
        $request = $this->bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'
            );
        }

        // verify the required parameter 'bulk_organization_appliance_dns_local_profiles_assignments_create_request' is set
        if ($bulk_organization_appliance_dns_local_profiles_assignments_create_request === null || (is_array($bulk_organization_appliance_dns_local_profiles_assignments_create_request) && count($bulk_organization_appliance_dns_local_profiles_assignments_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_organization_appliance_dns_local_profiles_assignments_create_request when calling bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/profiles/assignments/bulkCreate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulk_organization_appliance_dns_local_profiles_assignments_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulk_organization_appliance_dns_local_profiles_assignments_create_request));
            } else {
                $httpBody = $bulk_organization_appliance_dns_local_profiles_assignments_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfile
     *
     * Create a new local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner
     */
    public function createOrganizationApplianceDnsLocalProfile($organization_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfile'][0])
    {
        list($response) = $this->createOrganizationApplianceDnsLocalProfileWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfileWithHttpInfo
     *
     * Create a new local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationApplianceDnsLocalProfileWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfile'][0])
    {
        $request = $this->createOrganizationApplianceDnsLocalProfileRequest($organization_id, $create_organization_appliance_dns_local_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfileAsync
     *
     * Create a new local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsLocalProfileAsync($organization_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfile'][0])
    {
        return $this->createOrganizationApplianceDnsLocalProfileAsyncWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfileAsyncWithHttpInfo
     *
     * Create a new local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsLocalProfileAsyncWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfile'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner';
        $request = $this->createOrganizationApplianceDnsLocalProfileRequest($organization_id, $create_organization_appliance_dns_local_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationApplianceDnsLocalProfile'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationApplianceDnsLocalProfileRequest($organization_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfile'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationApplianceDnsLocalProfile'
            );
        }

        // verify the required parameter 'create_organization_appliance_dns_local_profile_request' is set
        if ($create_organization_appliance_dns_local_profile_request === null || (is_array($create_organization_appliance_dns_local_profile_request) && count($create_organization_appliance_dns_local_profile_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_appliance_dns_local_profile_request when calling createOrganizationApplianceDnsLocalProfile'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_appliance_dns_local_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_appliance_dns_local_profile_request));
            } else {
                $httpBody = $create_organization_appliance_dns_local_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete
     *
     * Unassign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response
     */
    public function createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'][0])
    {
        list($response) = $this->createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteWithHttpInfo
     *
     * Unassign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'][0])
    {
        $request = $this->createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteAsync
     *
     * Unassign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteAsync($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'][0])
    {
        return $this->createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteAsyncWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteAsyncWithHttpInfo
     *
     * Unassign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteAsyncWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'][0])
    {
        $returnType = '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response';
        $request = $this->createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'
            );
        }

        // verify the required parameter 'create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request' is set
        if ($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request === null || (is_array($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request) && count($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request when calling createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/profiles/assignments/bulkDelete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request));
            } else {
                $httpBody = $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganizationApplianceDnsLocalRecord
     *
     * Create a new local DNS record
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalRecordRequest $create_organization_appliance_dns_local_record_request create_organization_appliance_dns_local_record_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalRecord'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner[]
     */
    public function createOrganizationApplianceDnsLocalRecord($organization_id, $create_organization_appliance_dns_local_record_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalRecord'][0])
    {
        list($response) = $this->createOrganizationApplianceDnsLocalRecordWithHttpInfo($organization_id, $create_organization_appliance_dns_local_record_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationApplianceDnsLocalRecordWithHttpInfo
     *
     * Create a new local DNS record
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalRecordRequest $create_organization_appliance_dns_local_record_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalRecord'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationApplianceDnsLocalRecordWithHttpInfo($organization_id, $create_organization_appliance_dns_local_record_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalRecord'][0])
    {
        $request = $this->createOrganizationApplianceDnsLocalRecordRequest($organization_id, $create_organization_appliance_dns_local_record_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationApplianceDnsLocalRecordAsync
     *
     * Create a new local DNS record
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalRecordRequest $create_organization_appliance_dns_local_record_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsLocalRecordAsync($organization_id, $create_organization_appliance_dns_local_record_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalRecord'][0])
    {
        return $this->createOrganizationApplianceDnsLocalRecordAsyncWithHttpInfo($organization_id, $create_organization_appliance_dns_local_record_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationApplianceDnsLocalRecordAsyncWithHttpInfo
     *
     * Create a new local DNS record
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalRecordRequest $create_organization_appliance_dns_local_record_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsLocalRecordAsyncWithHttpInfo($organization_id, $create_organization_appliance_dns_local_record_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalRecord'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner[]';
        $request = $this->createOrganizationApplianceDnsLocalRecordRequest($organization_id, $create_organization_appliance_dns_local_record_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationApplianceDnsLocalRecord'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalRecordRequest $create_organization_appliance_dns_local_record_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationApplianceDnsLocalRecordRequest($organization_id, $create_organization_appliance_dns_local_record_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalRecord'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationApplianceDnsLocalRecord'
            );
        }

        // verify the required parameter 'create_organization_appliance_dns_local_record_request' is set
        if ($create_organization_appliance_dns_local_record_request === null || (is_array($create_organization_appliance_dns_local_record_request) && count($create_organization_appliance_dns_local_record_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_appliance_dns_local_record_request when calling createOrganizationApplianceDnsLocalRecord'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/records';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_appliance_dns_local_record_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_appliance_dns_local_record_request));
            } else {
                $httpBody = $create_organization_appliance_dns_local_record_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrganizationApplianceDnsLocalProfile
     *
     * Deletes a local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOrganizationApplianceDnsLocalProfile($organization_id, $profile_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'][0])
    {
        $this->deleteOrganizationApplianceDnsLocalProfileWithHttpInfo($organization_id, $profile_id, $contentType);
    }

    /**
     * Operation deleteOrganizationApplianceDnsLocalProfileWithHttpInfo
     *
     * Deletes a local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrganizationApplianceDnsLocalProfileWithHttpInfo($organization_id, $profile_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'][0])
    {
        $request = $this->deleteOrganizationApplianceDnsLocalProfileRequest($organization_id, $profile_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrganizationApplianceDnsLocalProfileAsync
     *
     * Deletes a local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationApplianceDnsLocalProfileAsync($organization_id, $profile_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'][0])
    {
        return $this->deleteOrganizationApplianceDnsLocalProfileAsyncWithHttpInfo($organization_id, $profile_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrganizationApplianceDnsLocalProfileAsyncWithHttpInfo
     *
     * Deletes a local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationApplianceDnsLocalProfileAsyncWithHttpInfo($organization_id, $profile_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'][0])
    {
        $returnType = '';
        $request = $this->deleteOrganizationApplianceDnsLocalProfileRequest($organization_id, $profile_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrganizationApplianceDnsLocalProfile'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteOrganizationApplianceDnsLocalProfileRequest($organization_id, $profile_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsLocalProfile'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling deleteOrganizationApplianceDnsLocalProfile'
            );
        }

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling deleteOrganizationApplianceDnsLocalProfile'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/profiles/{profileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrganizationApplianceDnsLocalRecord
     *
     * Deletes a local DNS record
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $record_id Record ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsLocalRecord'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOrganizationApplianceDnsLocalRecord($organization_id, $record_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsLocalRecord'][0])
    {
        $this->deleteOrganizationApplianceDnsLocalRecordWithHttpInfo($organization_id, $record_id, $contentType);
    }

    /**
     * Operation deleteOrganizationApplianceDnsLocalRecordWithHttpInfo
     *
     * Deletes a local DNS record
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $record_id Record ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsLocalRecord'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrganizationApplianceDnsLocalRecordWithHttpInfo($organization_id, $record_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsLocalRecord'][0])
    {
        $request = $this->deleteOrganizationApplianceDnsLocalRecordRequest($organization_id, $record_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrganizationApplianceDnsLocalRecordAsync
     *
     * Deletes a local DNS record
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $record_id Record ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsLocalRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationApplianceDnsLocalRecordAsync($organization_id, $record_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsLocalRecord'][0])
    {
        return $this->deleteOrganizationApplianceDnsLocalRecordAsyncWithHttpInfo($organization_id, $record_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrganizationApplianceDnsLocalRecordAsyncWithHttpInfo
     *
     * Deletes a local DNS record
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $record_id Record ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsLocalRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationApplianceDnsLocalRecordAsyncWithHttpInfo($organization_id, $record_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsLocalRecord'][0])
    {
        $returnType = '';
        $request = $this->deleteOrganizationApplianceDnsLocalRecordRequest($organization_id, $record_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrganizationApplianceDnsLocalRecord'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $record_id Record ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationApplianceDnsLocalRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteOrganizationApplianceDnsLocalRecordRequest($organization_id, $record_id, string $contentType = self::contentTypes['deleteOrganizationApplianceDnsLocalRecord'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling deleteOrganizationApplianceDnsLocalRecord'
            );
        }

        // verify the required parameter 'record_id' is set
        if ($record_id === null || (is_array($record_id) && count($record_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $record_id when calling deleteOrganizationApplianceDnsLocalRecord'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/records/{recordId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($record_id !== null) {
            $resourcePath = str_replace(
                '{' . 'recordId' . '}',
                ObjectSerializer::toPathValue($record_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfiles
     *
     * Fetch the local DNS profiles used in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner[]
     */
    public function getOrganizationApplianceDnsLocalProfiles($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfiles'][0])
    {
        list($response) = $this->getOrganizationApplianceDnsLocalProfilesWithHttpInfo($organization_id, $profile_ids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfilesWithHttpInfo
     *
     * Fetch the local DNS profiles used in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfiles'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationApplianceDnsLocalProfilesWithHttpInfo($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfiles'][0])
    {
        $request = $this->getOrganizationApplianceDnsLocalProfilesRequest($organization_id, $profile_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfilesAsync
     *
     * Fetch the local DNS profiles used in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationApplianceDnsLocalProfilesAsync($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfiles'][0])
    {
        return $this->getOrganizationApplianceDnsLocalProfilesAsyncWithHttpInfo($organization_id, $profile_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfilesAsyncWithHttpInfo
     *
     * Fetch the local DNS profiles used in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationApplianceDnsLocalProfilesAsyncWithHttpInfo($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfiles'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner[]';
        $request = $this->getOrganizationApplianceDnsLocalProfilesRequest($organization_id, $profile_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationApplianceDnsLocalProfiles'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationApplianceDnsLocalProfilesRequest($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfiles'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationApplianceDnsLocalProfiles'
            );
        }



        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $profile_ids,
            'profileIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfilesAssignments
     *
     * Fetch the local DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response
     */
    public function getOrganizationApplianceDnsLocalProfilesAssignments($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'][0])
    {
        list($response) = $this->getOrganizationApplianceDnsLocalProfilesAssignmentsWithHttpInfo($organization_id, $profile_ids, $network_ids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfilesAssignmentsWithHttpInfo
     *
     * Fetch the local DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationApplianceDnsLocalProfilesAssignmentsWithHttpInfo($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'][0])
    {
        $request = $this->getOrganizationApplianceDnsLocalProfilesAssignmentsRequest($organization_id, $profile_ids, $network_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfilesAssignmentsAsync
     *
     * Fetch the local DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationApplianceDnsLocalProfilesAssignmentsAsync($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'][0])
    {
        return $this->getOrganizationApplianceDnsLocalProfilesAssignmentsAsyncWithHttpInfo($organization_id, $profile_ids, $network_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfilesAssignmentsAsyncWithHttpInfo
     *
     * Fetch the local DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationApplianceDnsLocalProfilesAssignmentsAsyncWithHttpInfo($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response';
        $request = $this->getOrganizationApplianceDnsLocalProfilesAssignmentsRequest($organization_id, $profile_ids, $network_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationApplianceDnsLocalProfilesAssignments'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationApplianceDnsLocalProfilesAssignmentsRequest($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationApplianceDnsLocalProfilesAssignments'
            );
        }




        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/profiles/assignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $profile_ids,
            'profileIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network_ids,
            'networkIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationApplianceDnsLocalRecords
     *
     * Fetch the DNS records used in local DNS profiles
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalRecords'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner[]
     */
    public function getOrganizationApplianceDnsLocalRecords($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalRecords'][0])
    {
        list($response) = $this->getOrganizationApplianceDnsLocalRecordsWithHttpInfo($organization_id, $profile_ids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationApplianceDnsLocalRecordsWithHttpInfo
     *
     * Fetch the DNS records used in local DNS profiles
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalRecords'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationApplianceDnsLocalRecordsWithHttpInfo($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalRecords'][0])
    {
        $request = $this->getOrganizationApplianceDnsLocalRecordsRequest($organization_id, $profile_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationApplianceDnsLocalRecordsAsync
     *
     * Fetch the DNS records used in local DNS profiles
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationApplianceDnsLocalRecordsAsync($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalRecords'][0])
    {
        return $this->getOrganizationApplianceDnsLocalRecordsAsyncWithHttpInfo($organization_id, $profile_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationApplianceDnsLocalRecordsAsyncWithHttpInfo
     *
     * Fetch the DNS records used in local DNS profiles
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationApplianceDnsLocalRecordsAsyncWithHttpInfo($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalRecords'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner[]';
        $request = $this->getOrganizationApplianceDnsLocalRecordsRequest($organization_id, $profile_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationApplianceDnsLocalRecords'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationApplianceDnsLocalRecordsRequest($organization_id, $profile_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalRecords'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationApplianceDnsLocalRecords'
            );
        }



        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/records';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $profile_ids,
            'profileIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrganizationApplianceDnsLocalProfile
     *
     * Update a local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner
     */
    public function updateOrganizationApplianceDnsLocalProfile($organization_id, $profile_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['updateOrganizationApplianceDnsLocalProfile'][0])
    {
        list($response) = $this->updateOrganizationApplianceDnsLocalProfileWithHttpInfo($organization_id, $profile_id, $create_organization_appliance_dns_local_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation updateOrganizationApplianceDnsLocalProfileWithHttpInfo
     *
     * Update a local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrganizationApplianceDnsLocalProfileWithHttpInfo($organization_id, $profile_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['updateOrganizationApplianceDnsLocalProfile'][0])
    {
        $request = $this->updateOrganizationApplianceDnsLocalProfileRequest($organization_id, $profile_id, $create_organization_appliance_dns_local_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrganizationApplianceDnsLocalProfileAsync
     *
     * Update a local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationApplianceDnsLocalProfileAsync($organization_id, $profile_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['updateOrganizationApplianceDnsLocalProfile'][0])
    {
        return $this->updateOrganizationApplianceDnsLocalProfileAsyncWithHttpInfo($organization_id, $profile_id, $create_organization_appliance_dns_local_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateOrganizationApplianceDnsLocalProfileAsyncWithHttpInfo
     *
     * Update a local DNS profile
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationApplianceDnsLocalProfileAsyncWithHttpInfo($organization_id, $profile_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['updateOrganizationApplianceDnsLocalProfile'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalProfiles200ResponseInner';
        $request = $this->updateOrganizationApplianceDnsLocalProfileRequest($organization_id, $profile_id, $create_organization_appliance_dns_local_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrganizationApplianceDnsLocalProfile'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $profile_id Profile ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfileRequest $create_organization_appliance_dns_local_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsLocalProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateOrganizationApplianceDnsLocalProfileRequest($organization_id, $profile_id, $create_organization_appliance_dns_local_profile_request, string $contentType = self::contentTypes['updateOrganizationApplianceDnsLocalProfile'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling updateOrganizationApplianceDnsLocalProfile'
            );
        }

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling updateOrganizationApplianceDnsLocalProfile'
            );
        }

        // verify the required parameter 'create_organization_appliance_dns_local_profile_request' is set
        if ($create_organization_appliance_dns_local_profile_request === null || (is_array($create_organization_appliance_dns_local_profile_request) && count($create_organization_appliance_dns_local_profile_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_appliance_dns_local_profile_request when calling updateOrganizationApplianceDnsLocalProfile'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/profiles/{profileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_appliance_dns_local_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_appliance_dns_local_profile_request));
            } else {
                $httpBody = $create_organization_appliance_dns_local_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrganizationApplianceDnsLocalRecord
     *
     * Updates a local DNS record
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $record_id Record ID (required)
     * @param  \Meraki\Model\UpdateOrganizationApplianceDnsLocalRecordRequest|null $update_organization_appliance_dns_local_record_request update_organization_appliance_dns_local_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsLocalRecord'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner
     */
    public function updateOrganizationApplianceDnsLocalRecord($organization_id, $record_id, $update_organization_appliance_dns_local_record_request = null, string $contentType = self::contentTypes['updateOrganizationApplianceDnsLocalRecord'][0])
    {
        list($response) = $this->updateOrganizationApplianceDnsLocalRecordWithHttpInfo($organization_id, $record_id, $update_organization_appliance_dns_local_record_request, $contentType);
        return $response;
    }

    /**
     * Operation updateOrganizationApplianceDnsLocalRecordWithHttpInfo
     *
     * Updates a local DNS record
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $record_id Record ID (required)
     * @param  \Meraki\Model\UpdateOrganizationApplianceDnsLocalRecordRequest|null $update_organization_appliance_dns_local_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsLocalRecord'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrganizationApplianceDnsLocalRecordWithHttpInfo($organization_id, $record_id, $update_organization_appliance_dns_local_record_request = null, string $contentType = self::contentTypes['updateOrganizationApplianceDnsLocalRecord'][0])
    {
        $request = $this->updateOrganizationApplianceDnsLocalRecordRequest($organization_id, $record_id, $update_organization_appliance_dns_local_record_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrganizationApplianceDnsLocalRecordAsync
     *
     * Updates a local DNS record
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $record_id Record ID (required)
     * @param  \Meraki\Model\UpdateOrganizationApplianceDnsLocalRecordRequest|null $update_organization_appliance_dns_local_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsLocalRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationApplianceDnsLocalRecordAsync($organization_id, $record_id, $update_organization_appliance_dns_local_record_request = null, string $contentType = self::contentTypes['updateOrganizationApplianceDnsLocalRecord'][0])
    {
        return $this->updateOrganizationApplianceDnsLocalRecordAsyncWithHttpInfo($organization_id, $record_id, $update_organization_appliance_dns_local_record_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateOrganizationApplianceDnsLocalRecordAsyncWithHttpInfo
     *
     * Updates a local DNS record
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $record_id Record ID (required)
     * @param  \Meraki\Model\UpdateOrganizationApplianceDnsLocalRecordRequest|null $update_organization_appliance_dns_local_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsLocalRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationApplianceDnsLocalRecordAsyncWithHttpInfo($organization_id, $record_id, $update_organization_appliance_dns_local_record_request = null, string $contentType = self::contentTypes['updateOrganizationApplianceDnsLocalRecord'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalRecords200ResponseInner';
        $request = $this->updateOrganizationApplianceDnsLocalRecordRequest($organization_id, $record_id, $update_organization_appliance_dns_local_record_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrganizationApplianceDnsLocalRecord'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $record_id Record ID (required)
     * @param  \Meraki\Model\UpdateOrganizationApplianceDnsLocalRecordRequest|null $update_organization_appliance_dns_local_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationApplianceDnsLocalRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateOrganizationApplianceDnsLocalRecordRequest($organization_id, $record_id, $update_organization_appliance_dns_local_record_request = null, string $contentType = self::contentTypes['updateOrganizationApplianceDnsLocalRecord'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling updateOrganizationApplianceDnsLocalRecord'
            );
        }

        // verify the required parameter 'record_id' is set
        if ($record_id === null || (is_array($record_id) && count($record_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $record_id when calling updateOrganizationApplianceDnsLocalRecord'
            );
        }



        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/records/{recordId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($record_id !== null) {
            $resourcePath = str_replace(
                '{' . 'recordId' . '}',
                ObjectSerializer::toPathValue($record_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_organization_appliance_dns_local_record_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_organization_appliance_dns_local_record_request));
            } else {
                $httpBody = $update_organization_appliance_dns_local_record_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
