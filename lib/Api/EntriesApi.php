<?php
/**
 * EntriesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Meraki\ApiException;
use Meraki\Configuration;
use Meraki\HeaderSelector;
use Meraki\ObjectSerializer;

/**
 * EntriesApi Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EntriesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry' => [
            'application/json',
        ],
        'deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry' => [
            'application/json',
        ],
        'getOrganizationWirelessSsidsFirewallIsolationAllowlistEntries' => [
            'application/json',
        ],
        'updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry
     *
     * Create isolation allow list MAC entry for this organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest $create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200ResponseItemsInner
     */
    public function createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry($organization_id, $create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request, string $contentType = self::contentTypes['createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'][0])
    {
        list($response) = $this->createOrganizationWirelessSsidsFirewallIsolationAllowlistEntryWithHttpInfo($organization_id, $create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationWirelessSsidsFirewallIsolationAllowlistEntryWithHttpInfo
     *
     * Create isolation allow list MAC entry for this organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest $create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200ResponseItemsInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationWirelessSsidsFirewallIsolationAllowlistEntryWithHttpInfo($organization_id, $create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request, string $contentType = self::contentTypes['createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'][0])
    {
        $request = $this->createOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest($organization_id, $create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200ResponseItemsInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200ResponseItemsInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200ResponseItemsInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200ResponseItemsInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200ResponseItemsInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationWirelessSsidsFirewallIsolationAllowlistEntryAsync
     *
     * Create isolation allow list MAC entry for this organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest $create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationWirelessSsidsFirewallIsolationAllowlistEntryAsync($organization_id, $create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request, string $contentType = self::contentTypes['createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'][0])
    {
        return $this->createOrganizationWirelessSsidsFirewallIsolationAllowlistEntryAsyncWithHttpInfo($organization_id, $create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationWirelessSsidsFirewallIsolationAllowlistEntryAsyncWithHttpInfo
     *
     * Create isolation allow list MAC entry for this organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest $create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationWirelessSsidsFirewallIsolationAllowlistEntryAsyncWithHttpInfo($organization_id, $create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request, string $contentType = self::contentTypes['createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200ResponseItemsInner';
        $request = $this->createOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest($organization_id, $create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest $create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest($organization_id, $create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request, string $contentType = self::contentTypes['createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'
            );
        }

        // verify the required parameter 'create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request' is set
        if ($create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request === null || (is_array($create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request) && count($create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request when calling createOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'
            );
        }


        $resourcePath = '/organizations/{organizationId}/wireless/ssids/firewall/isolation/allowlist/entries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request));
            } else {
                $httpBody = $create_organization_wireless_ssids_firewall_isolation_allowlist_entry_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry
     *
     * Destroy isolation allow list MAC entry for this organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $entry_id Entry ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry($organization_id, $entry_id, string $contentType = self::contentTypes['deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'][0])
    {
        $this->deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntryWithHttpInfo($organization_id, $entry_id, $contentType);
    }

    /**
     * Operation deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntryWithHttpInfo
     *
     * Destroy isolation allow list MAC entry for this organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $entry_id Entry ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntryWithHttpInfo($organization_id, $entry_id, string $contentType = self::contentTypes['deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'][0])
    {
        $request = $this->deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest($organization_id, $entry_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntryAsync
     *
     * Destroy isolation allow list MAC entry for this organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $entry_id Entry ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntryAsync($organization_id, $entry_id, string $contentType = self::contentTypes['deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'][0])
    {
        return $this->deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntryAsyncWithHttpInfo($organization_id, $entry_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntryAsyncWithHttpInfo
     *
     * Destroy isolation allow list MAC entry for this organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $entry_id Entry ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntryAsyncWithHttpInfo($organization_id, $entry_id, string $contentType = self::contentTypes['deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'][0])
    {
        $returnType = '';
        $request = $this->deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest($organization_id, $entry_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $entry_id Entry ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest($organization_id, $entry_id, string $contentType = self::contentTypes['deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'
            );
        }

        // verify the required parameter 'entry_id' is set
        if ($entry_id === null || (is_array($entry_id) && count($entry_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entry_id when calling deleteOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'
            );
        }


        $resourcePath = '/organizations/{organizationId}/wireless/ssids/firewall/isolation/allowlist/entries/{entryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($entry_id !== null) {
            $resourcePath = str_replace(
                '{' . 'entryId' . '}',
                ObjectSerializer::toPathValue($entry_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationWirelessSsidsFirewallIsolationAllowlistEntries
     *
     * List the L2 isolation allow list MAC entry in an organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids networkIds array to filter out results (optional)
     * @param  int[]|null $ssids ssids number array to filter out results (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessSsidsFirewallIsolationAllowlistEntries'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200Response
     */
    public function getOrganizationWirelessSsidsFirewallIsolationAllowlistEntries($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $ssids = null, string $contentType = self::contentTypes['getOrganizationWirelessSsidsFirewallIsolationAllowlistEntries'][0])
    {
        list($response) = $this->getOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $ssids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesWithHttpInfo
     *
     * List the L2 isolation allow list MAC entry in an organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids networkIds array to filter out results (optional)
     * @param  int[]|null $ssids ssids number array to filter out results (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessSsidsFirewallIsolationAllowlistEntries'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $ssids = null, string $contentType = self::contentTypes['getOrganizationWirelessSsidsFirewallIsolationAllowlistEntries'][0])
    {
        $request = $this->getOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesRequest($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $ssids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesAsync
     *
     * List the L2 isolation allow list MAC entry in an organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids networkIds array to filter out results (optional)
     * @param  int[]|null $ssids ssids number array to filter out results (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessSsidsFirewallIsolationAllowlistEntries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesAsync($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $ssids = null, string $contentType = self::contentTypes['getOrganizationWirelessSsidsFirewallIsolationAllowlistEntries'][0])
    {
        return $this->getOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesAsyncWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $ssids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesAsyncWithHttpInfo
     *
     * List the L2 isolation allow list MAC entry in an organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids networkIds array to filter out results (optional)
     * @param  int[]|null $ssids ssids number array to filter out results (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessSsidsFirewallIsolationAllowlistEntries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesAsyncWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $ssids = null, string $contentType = self::contentTypes['getOrganizationWirelessSsidsFirewallIsolationAllowlistEntries'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200Response';
        $request = $this->getOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesRequest($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $ssids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationWirelessSsidsFirewallIsolationAllowlistEntries'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids networkIds array to filter out results (optional)
     * @param  int[]|null $ssids ssids number array to filter out results (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessSsidsFirewallIsolationAllowlistEntries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationWirelessSsidsFirewallIsolationAllowlistEntriesRequest($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $ssids = null, string $contentType = self::contentTypes['getOrganizationWirelessSsidsFirewallIsolationAllowlistEntries'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationWirelessSsidsFirewallIsolationAllowlistEntries'
            );
        }







        $resourcePath = '/organizations/{organizationId}/wireless/ssids/firewall/isolation/allowlist/entries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'perPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starting_after,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ending_before,
            'endingBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network_ids,
            'networkIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ssids,
            'ssids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry
     *
     * Update isolation allow list MAC entry info
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $entry_id Entry ID (required)
     * @param  \Meraki\Model\UpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest|null $update_organization_wireless_ssids_firewall_isolation_allowlist_entry_request update_organization_wireless_ssids_firewall_isolation_allowlist_entry_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200ResponseItemsInner
     */
    public function updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry($organization_id, $entry_id, $update_organization_wireless_ssids_firewall_isolation_allowlist_entry_request = null, string $contentType = self::contentTypes['updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'][0])
    {
        list($response) = $this->updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryWithHttpInfo($organization_id, $entry_id, $update_organization_wireless_ssids_firewall_isolation_allowlist_entry_request, $contentType);
        return $response;
    }

    /**
     * Operation updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryWithHttpInfo
     *
     * Update isolation allow list MAC entry info
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $entry_id Entry ID (required)
     * @param  \Meraki\Model\UpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest|null $update_organization_wireless_ssids_firewall_isolation_allowlist_entry_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200ResponseItemsInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryWithHttpInfo($organization_id, $entry_id, $update_organization_wireless_ssids_firewall_isolation_allowlist_entry_request = null, string $contentType = self::contentTypes['updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'][0])
    {
        $request = $this->updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest($organization_id, $entry_id, $update_organization_wireless_ssids_firewall_isolation_allowlist_entry_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200ResponseItemsInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200ResponseItemsInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200ResponseItemsInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200ResponseItemsInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200ResponseItemsInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryAsync
     *
     * Update isolation allow list MAC entry info
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $entry_id Entry ID (required)
     * @param  \Meraki\Model\UpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest|null $update_organization_wireless_ssids_firewall_isolation_allowlist_entry_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryAsync($organization_id, $entry_id, $update_organization_wireless_ssids_firewall_isolation_allowlist_entry_request = null, string $contentType = self::contentTypes['updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'][0])
    {
        return $this->updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryAsyncWithHttpInfo($organization_id, $entry_id, $update_organization_wireless_ssids_firewall_isolation_allowlist_entry_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryAsyncWithHttpInfo
     *
     * Update isolation allow list MAC entry info
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $entry_id Entry ID (required)
     * @param  \Meraki\Model\UpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest|null $update_organization_wireless_ssids_firewall_isolation_allowlist_entry_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryAsyncWithHttpInfo($organization_id, $entry_id, $update_organization_wireless_ssids_firewall_isolation_allowlist_entry_request = null, string $contentType = self::contentTypes['updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationWirelessSsidsFirewallIsolationAllowlistEntries200ResponseItemsInner';
        $request = $this->updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest($organization_id, $entry_id, $update_organization_wireless_ssids_firewall_isolation_allowlist_entry_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $entry_id Entry ID (required)
     * @param  \Meraki\Model\UpdateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest|null $update_organization_wireless_ssids_firewall_isolation_allowlist_entry_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntryRequest($organization_id, $entry_id, $update_organization_wireless_ssids_firewall_isolation_allowlist_entry_request = null, string $contentType = self::contentTypes['updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'
            );
        }

        // verify the required parameter 'entry_id' is set
        if ($entry_id === null || (is_array($entry_id) && count($entry_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entry_id when calling updateOrganizationWirelessSsidsFirewallIsolationAllowlistEntry'
            );
        }



        $resourcePath = '/organizations/{organizationId}/wireless/ssids/firewall/isolation/allowlist/entries/{entryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($entry_id !== null) {
            $resourcePath = str_replace(
                '{' . 'entryId' . '}',
                ObjectSerializer::toPathValue($entry_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_organization_wireless_ssids_firewall_isolation_allowlist_entry_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_organization_wireless_ssids_firewall_isolation_allowlist_entry_request));
            } else {
                $httpBody = $update_organization_wireless_ssids_firewall_isolation_allowlist_entry_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
