<?php
/**
 * LicensingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Meraki\ApiException;
use Meraki\Configuration;
use Meraki\HeaderSelector;
use Meraki\ObjectSerializer;

/**
 * LicensingApi Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LicensingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'bindAdministeredLicensingSubscriptionSubscription' => [
            'application/json',
        ],
        'claimAdministeredLicensingSubscriptionSubscriptions' => [
            'application/json',
        ],
        'getAdministeredLicensingSubscriptionEntitlements' => [
            'application/json',
        ],
        'getAdministeredLicensingSubscriptionSubscriptions' => [
            'application/json',
        ],
        'getAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses' => [
            'application/json',
        ],
        'getOrganizationLicensingCotermLicenses' => [
            'application/json',
        ],
        'moveOrganizationLicensingCotermLicenses' => [
            'application/json',
        ],
        'validateAdministeredLicensingSubscriptionSubscriptionsClaimKey' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bindAdministeredLicensingSubscriptionSubscription
     *
     * Bind networks to a subscription
     *
     * @param  string $subscription_id Subscription ID (required)
     * @param  bool|null $validate Check if the provided networks can be bound to the subscription. Returns any licensing problems and does not commit the results. (optional)
     * @param  \Meraki\Model\BindAdministeredLicensingSubscriptionSubscriptionRequest|null $bind_administered_licensing_subscription_subscription_request bind_administered_licensing_subscription_subscription_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bindAdministeredLicensingSubscriptionSubscription'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\BindAdministeredLicensingSubscriptionSubscription200Response
     */
    public function bindAdministeredLicensingSubscriptionSubscription($subscription_id, $validate = null, $bind_administered_licensing_subscription_subscription_request = null, string $contentType = self::contentTypes['bindAdministeredLicensingSubscriptionSubscription'][0])
    {
        list($response) = $this->bindAdministeredLicensingSubscriptionSubscriptionWithHttpInfo($subscription_id, $validate, $bind_administered_licensing_subscription_subscription_request, $contentType);
        return $response;
    }

    /**
     * Operation bindAdministeredLicensingSubscriptionSubscriptionWithHttpInfo
     *
     * Bind networks to a subscription
     *
     * @param  string $subscription_id Subscription ID (required)
     * @param  bool|null $validate Check if the provided networks can be bound to the subscription. Returns any licensing problems and does not commit the results. (optional)
     * @param  \Meraki\Model\BindAdministeredLicensingSubscriptionSubscriptionRequest|null $bind_administered_licensing_subscription_subscription_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bindAdministeredLicensingSubscriptionSubscription'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\BindAdministeredLicensingSubscriptionSubscription200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function bindAdministeredLicensingSubscriptionSubscriptionWithHttpInfo($subscription_id, $validate = null, $bind_administered_licensing_subscription_subscription_request = null, string $contentType = self::contentTypes['bindAdministeredLicensingSubscriptionSubscription'][0])
    {
        $request = $this->bindAdministeredLicensingSubscriptionSubscriptionRequest($subscription_id, $validate, $bind_administered_licensing_subscription_subscription_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\BindAdministeredLicensingSubscriptionSubscription200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\BindAdministeredLicensingSubscriptionSubscription200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\BindAdministeredLicensingSubscriptionSubscription200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\BindAdministeredLicensingSubscriptionSubscription200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\BindAdministeredLicensingSubscriptionSubscription200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bindAdministeredLicensingSubscriptionSubscriptionAsync
     *
     * Bind networks to a subscription
     *
     * @param  string $subscription_id Subscription ID (required)
     * @param  bool|null $validate Check if the provided networks can be bound to the subscription. Returns any licensing problems and does not commit the results. (optional)
     * @param  \Meraki\Model\BindAdministeredLicensingSubscriptionSubscriptionRequest|null $bind_administered_licensing_subscription_subscription_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bindAdministeredLicensingSubscriptionSubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bindAdministeredLicensingSubscriptionSubscriptionAsync($subscription_id, $validate = null, $bind_administered_licensing_subscription_subscription_request = null, string $contentType = self::contentTypes['bindAdministeredLicensingSubscriptionSubscription'][0])
    {
        return $this->bindAdministeredLicensingSubscriptionSubscriptionAsyncWithHttpInfo($subscription_id, $validate, $bind_administered_licensing_subscription_subscription_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bindAdministeredLicensingSubscriptionSubscriptionAsyncWithHttpInfo
     *
     * Bind networks to a subscription
     *
     * @param  string $subscription_id Subscription ID (required)
     * @param  bool|null $validate Check if the provided networks can be bound to the subscription. Returns any licensing problems and does not commit the results. (optional)
     * @param  \Meraki\Model\BindAdministeredLicensingSubscriptionSubscriptionRequest|null $bind_administered_licensing_subscription_subscription_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bindAdministeredLicensingSubscriptionSubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bindAdministeredLicensingSubscriptionSubscriptionAsyncWithHttpInfo($subscription_id, $validate = null, $bind_administered_licensing_subscription_subscription_request = null, string $contentType = self::contentTypes['bindAdministeredLicensingSubscriptionSubscription'][0])
    {
        $returnType = '\Meraki\Model\BindAdministeredLicensingSubscriptionSubscription200Response';
        $request = $this->bindAdministeredLicensingSubscriptionSubscriptionRequest($subscription_id, $validate, $bind_administered_licensing_subscription_subscription_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bindAdministeredLicensingSubscriptionSubscription'
     *
     * @param  string $subscription_id Subscription ID (required)
     * @param  bool|null $validate Check if the provided networks can be bound to the subscription. Returns any licensing problems and does not commit the results. (optional)
     * @param  \Meraki\Model\BindAdministeredLicensingSubscriptionSubscriptionRequest|null $bind_administered_licensing_subscription_subscription_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bindAdministeredLicensingSubscriptionSubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bindAdministeredLicensingSubscriptionSubscriptionRequest($subscription_id, $validate = null, $bind_administered_licensing_subscription_subscription_request = null, string $contentType = self::contentTypes['bindAdministeredLicensingSubscriptionSubscription'][0])
    {

        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null || (is_array($subscription_id) && count($subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_id when calling bindAdministeredLicensingSubscriptionSubscription'
            );
        }




        $resourcePath = '/administered/licensing/subscription/subscriptions/{subscriptionId}/bind';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $validate,
            'validate', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscription_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bind_administered_licensing_subscription_subscription_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bind_administered_licensing_subscription_subscription_request));
            } else {
                $httpBody = $bind_administered_licensing_subscription_subscription_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation claimAdministeredLicensingSubscriptionSubscriptions
     *
     * Claim a subscription into an organization.
     *
     * @param  \Meraki\Model\ClaimAdministeredLicensingSubscriptionSubscriptionsRequest $claim_administered_licensing_subscription_subscriptions_request claim_administered_licensing_subscription_subscriptions_request (required)
     * @param  bool|null $validate Check if the provided claim key is valid and can be claimed into the organization. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimAdministeredLicensingSubscriptionSubscriptions'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner
     */
    public function claimAdministeredLicensingSubscriptionSubscriptions($claim_administered_licensing_subscription_subscriptions_request, $validate = null, string $contentType = self::contentTypes['claimAdministeredLicensingSubscriptionSubscriptions'][0])
    {
        list($response) = $this->claimAdministeredLicensingSubscriptionSubscriptionsWithHttpInfo($claim_administered_licensing_subscription_subscriptions_request, $validate, $contentType);
        return $response;
    }

    /**
     * Operation claimAdministeredLicensingSubscriptionSubscriptionsWithHttpInfo
     *
     * Claim a subscription into an organization.
     *
     * @param  \Meraki\Model\ClaimAdministeredLicensingSubscriptionSubscriptionsRequest $claim_administered_licensing_subscription_subscriptions_request (required)
     * @param  bool|null $validate Check if the provided claim key is valid and can be claimed into the organization. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimAdministeredLicensingSubscriptionSubscriptions'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function claimAdministeredLicensingSubscriptionSubscriptionsWithHttpInfo($claim_administered_licensing_subscription_subscriptions_request, $validate = null, string $contentType = self::contentTypes['claimAdministeredLicensingSubscriptionSubscriptions'][0])
    {
        $request = $this->claimAdministeredLicensingSubscriptionSubscriptionsRequest($claim_administered_licensing_subscription_subscriptions_request, $validate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation claimAdministeredLicensingSubscriptionSubscriptionsAsync
     *
     * Claim a subscription into an organization.
     *
     * @param  \Meraki\Model\ClaimAdministeredLicensingSubscriptionSubscriptionsRequest $claim_administered_licensing_subscription_subscriptions_request (required)
     * @param  bool|null $validate Check if the provided claim key is valid and can be claimed into the organization. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimAdministeredLicensingSubscriptionSubscriptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function claimAdministeredLicensingSubscriptionSubscriptionsAsync($claim_administered_licensing_subscription_subscriptions_request, $validate = null, string $contentType = self::contentTypes['claimAdministeredLicensingSubscriptionSubscriptions'][0])
    {
        return $this->claimAdministeredLicensingSubscriptionSubscriptionsAsyncWithHttpInfo($claim_administered_licensing_subscription_subscriptions_request, $validate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation claimAdministeredLicensingSubscriptionSubscriptionsAsyncWithHttpInfo
     *
     * Claim a subscription into an organization.
     *
     * @param  \Meraki\Model\ClaimAdministeredLicensingSubscriptionSubscriptionsRequest $claim_administered_licensing_subscription_subscriptions_request (required)
     * @param  bool|null $validate Check if the provided claim key is valid and can be claimed into the organization. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimAdministeredLicensingSubscriptionSubscriptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function claimAdministeredLicensingSubscriptionSubscriptionsAsyncWithHttpInfo($claim_administered_licensing_subscription_subscriptions_request, $validate = null, string $contentType = self::contentTypes['claimAdministeredLicensingSubscriptionSubscriptions'][0])
    {
        $returnType = '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner';
        $request = $this->claimAdministeredLicensingSubscriptionSubscriptionsRequest($claim_administered_licensing_subscription_subscriptions_request, $validate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'claimAdministeredLicensingSubscriptionSubscriptions'
     *
     * @param  \Meraki\Model\ClaimAdministeredLicensingSubscriptionSubscriptionsRequest $claim_administered_licensing_subscription_subscriptions_request (required)
     * @param  bool|null $validate Check if the provided claim key is valid and can be claimed into the organization. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimAdministeredLicensingSubscriptionSubscriptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function claimAdministeredLicensingSubscriptionSubscriptionsRequest($claim_administered_licensing_subscription_subscriptions_request, $validate = null, string $contentType = self::contentTypes['claimAdministeredLicensingSubscriptionSubscriptions'][0])
    {

        // verify the required parameter 'claim_administered_licensing_subscription_subscriptions_request' is set
        if ($claim_administered_licensing_subscription_subscriptions_request === null || (is_array($claim_administered_licensing_subscription_subscriptions_request) && count($claim_administered_licensing_subscription_subscriptions_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $claim_administered_licensing_subscription_subscriptions_request when calling claimAdministeredLicensingSubscriptionSubscriptions'
            );
        }



        $resourcePath = '/administered/licensing/subscription/subscriptions/claim';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $validate,
            'validate', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($claim_administered_licensing_subscription_subscriptions_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($claim_administered_licensing_subscription_subscriptions_request));
            } else {
                $httpBody = $claim_administered_licensing_subscription_subscriptions_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdministeredLicensingSubscriptionEntitlements
     *
     * Retrieve the list of purchasable entitlements
     *
     * @param  string[]|null $skus Filter to entitlements with the specified SKUs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdministeredLicensingSubscriptionEntitlements'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetAdministeredLicensingSubscriptionEntitlements200Response
     */
    public function getAdministeredLicensingSubscriptionEntitlements($skus = null, string $contentType = self::contentTypes['getAdministeredLicensingSubscriptionEntitlements'][0])
    {
        list($response) = $this->getAdministeredLicensingSubscriptionEntitlementsWithHttpInfo($skus, $contentType);
        return $response;
    }

    /**
     * Operation getAdministeredLicensingSubscriptionEntitlementsWithHttpInfo
     *
     * Retrieve the list of purchasable entitlements
     *
     * @param  string[]|null $skus Filter to entitlements with the specified SKUs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdministeredLicensingSubscriptionEntitlements'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetAdministeredLicensingSubscriptionEntitlements200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdministeredLicensingSubscriptionEntitlementsWithHttpInfo($skus = null, string $contentType = self::contentTypes['getAdministeredLicensingSubscriptionEntitlements'][0])
    {
        $request = $this->getAdministeredLicensingSubscriptionEntitlementsRequest($skus, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetAdministeredLicensingSubscriptionEntitlements200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetAdministeredLicensingSubscriptionEntitlements200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetAdministeredLicensingSubscriptionEntitlements200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetAdministeredLicensingSubscriptionEntitlements200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetAdministeredLicensingSubscriptionEntitlements200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdministeredLicensingSubscriptionEntitlementsAsync
     *
     * Retrieve the list of purchasable entitlements
     *
     * @param  string[]|null $skus Filter to entitlements with the specified SKUs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdministeredLicensingSubscriptionEntitlements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdministeredLicensingSubscriptionEntitlementsAsync($skus = null, string $contentType = self::contentTypes['getAdministeredLicensingSubscriptionEntitlements'][0])
    {
        return $this->getAdministeredLicensingSubscriptionEntitlementsAsyncWithHttpInfo($skus, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdministeredLicensingSubscriptionEntitlementsAsyncWithHttpInfo
     *
     * Retrieve the list of purchasable entitlements
     *
     * @param  string[]|null $skus Filter to entitlements with the specified SKUs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdministeredLicensingSubscriptionEntitlements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdministeredLicensingSubscriptionEntitlementsAsyncWithHttpInfo($skus = null, string $contentType = self::contentTypes['getAdministeredLicensingSubscriptionEntitlements'][0])
    {
        $returnType = '\Meraki\Model\GetAdministeredLicensingSubscriptionEntitlements200Response';
        $request = $this->getAdministeredLicensingSubscriptionEntitlementsRequest($skus, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdministeredLicensingSubscriptionEntitlements'
     *
     * @param  string[]|null $skus Filter to entitlements with the specified SKUs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdministeredLicensingSubscriptionEntitlements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdministeredLicensingSubscriptionEntitlementsRequest($skus = null, string $contentType = self::contentTypes['getAdministeredLicensingSubscriptionEntitlements'][0])
    {



        $resourcePath = '/administered/licensing/subscription/entitlements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skus,
            'skus', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdministeredLicensingSubscriptionSubscriptions
     *
     * List available subscriptions
     *
     * @param  string[] $organization_ids Organizations to get associated subscriptions for (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $subscription_ids List of subscription ids to fetch (optional)
     * @param  string[]|null $statuses List of statuses that returned subscriptions can have (optional)
     * @param  string[]|null $product_types List of product types that returned subscriptions need to have entitlements for. (optional)
     * @param  string|null $name Search for subscription name (optional)
     * @param  \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter|null $start_date Filter subscriptions by start date, ISO 8601 format. To filter with a range of dates, use &#39;startDate[&lt;option&gt;]&#x3D;?&#39; in the request. Accepted options include lt, gt, lte, gte. (optional)
     * @param  \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter|null $end_date Filter subscriptions by end date, ISO 8601 format. To filter with a range of dates, use &#39;endDate[&lt;option&gt;]&#x3D;?&#39; in the request. Accepted options include lt, gt, lte, gte. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdministeredLicensingSubscriptionSubscriptions'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner[]
     */
    public function getAdministeredLicensingSubscriptionSubscriptions($organization_ids, $per_page = null, $starting_after = null, $ending_before = null, $subscription_ids = null, $statuses = null, $product_types = null, $name = null, $start_date = null, $end_date = null, string $contentType = self::contentTypes['getAdministeredLicensingSubscriptionSubscriptions'][0])
    {
        list($response) = $this->getAdministeredLicensingSubscriptionSubscriptionsWithHttpInfo($organization_ids, $per_page, $starting_after, $ending_before, $subscription_ids, $statuses, $product_types, $name, $start_date, $end_date, $contentType);
        return $response;
    }

    /**
     * Operation getAdministeredLicensingSubscriptionSubscriptionsWithHttpInfo
     *
     * List available subscriptions
     *
     * @param  string[] $organization_ids Organizations to get associated subscriptions for (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $subscription_ids List of subscription ids to fetch (optional)
     * @param  string[]|null $statuses List of statuses that returned subscriptions can have (optional)
     * @param  string[]|null $product_types List of product types that returned subscriptions need to have entitlements for. (optional)
     * @param  string|null $name Search for subscription name (optional)
     * @param  \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter|null $start_date Filter subscriptions by start date, ISO 8601 format. To filter with a range of dates, use &#39;startDate[&lt;option&gt;]&#x3D;?&#39; in the request. Accepted options include lt, gt, lte, gte. (optional)
     * @param  \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter|null $end_date Filter subscriptions by end date, ISO 8601 format. To filter with a range of dates, use &#39;endDate[&lt;option&gt;]&#x3D;?&#39; in the request. Accepted options include lt, gt, lte, gte. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdministeredLicensingSubscriptionSubscriptions'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdministeredLicensingSubscriptionSubscriptionsWithHttpInfo($organization_ids, $per_page = null, $starting_after = null, $ending_before = null, $subscription_ids = null, $statuses = null, $product_types = null, $name = null, $start_date = null, $end_date = null, string $contentType = self::contentTypes['getAdministeredLicensingSubscriptionSubscriptions'][0])
    {
        $request = $this->getAdministeredLicensingSubscriptionSubscriptionsRequest($organization_ids, $per_page, $starting_after, $ending_before, $subscription_ids, $statuses, $product_types, $name, $start_date, $end_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdministeredLicensingSubscriptionSubscriptionsAsync
     *
     * List available subscriptions
     *
     * @param  string[] $organization_ids Organizations to get associated subscriptions for (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $subscription_ids List of subscription ids to fetch (optional)
     * @param  string[]|null $statuses List of statuses that returned subscriptions can have (optional)
     * @param  string[]|null $product_types List of product types that returned subscriptions need to have entitlements for. (optional)
     * @param  string|null $name Search for subscription name (optional)
     * @param  \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter|null $start_date Filter subscriptions by start date, ISO 8601 format. To filter with a range of dates, use &#39;startDate[&lt;option&gt;]&#x3D;?&#39; in the request. Accepted options include lt, gt, lte, gte. (optional)
     * @param  \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter|null $end_date Filter subscriptions by end date, ISO 8601 format. To filter with a range of dates, use &#39;endDate[&lt;option&gt;]&#x3D;?&#39; in the request. Accepted options include lt, gt, lte, gte. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdministeredLicensingSubscriptionSubscriptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdministeredLicensingSubscriptionSubscriptionsAsync($organization_ids, $per_page = null, $starting_after = null, $ending_before = null, $subscription_ids = null, $statuses = null, $product_types = null, $name = null, $start_date = null, $end_date = null, string $contentType = self::contentTypes['getAdministeredLicensingSubscriptionSubscriptions'][0])
    {
        return $this->getAdministeredLicensingSubscriptionSubscriptionsAsyncWithHttpInfo($organization_ids, $per_page, $starting_after, $ending_before, $subscription_ids, $statuses, $product_types, $name, $start_date, $end_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdministeredLicensingSubscriptionSubscriptionsAsyncWithHttpInfo
     *
     * List available subscriptions
     *
     * @param  string[] $organization_ids Organizations to get associated subscriptions for (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $subscription_ids List of subscription ids to fetch (optional)
     * @param  string[]|null $statuses List of statuses that returned subscriptions can have (optional)
     * @param  string[]|null $product_types List of product types that returned subscriptions need to have entitlements for. (optional)
     * @param  string|null $name Search for subscription name (optional)
     * @param  \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter|null $start_date Filter subscriptions by start date, ISO 8601 format. To filter with a range of dates, use &#39;startDate[&lt;option&gt;]&#x3D;?&#39; in the request. Accepted options include lt, gt, lte, gte. (optional)
     * @param  \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter|null $end_date Filter subscriptions by end date, ISO 8601 format. To filter with a range of dates, use &#39;endDate[&lt;option&gt;]&#x3D;?&#39; in the request. Accepted options include lt, gt, lte, gte. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdministeredLicensingSubscriptionSubscriptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdministeredLicensingSubscriptionSubscriptionsAsyncWithHttpInfo($organization_ids, $per_page = null, $starting_after = null, $ending_before = null, $subscription_ids = null, $statuses = null, $product_types = null, $name = null, $start_date = null, $end_date = null, string $contentType = self::contentTypes['getAdministeredLicensingSubscriptionSubscriptions'][0])
    {
        $returnType = '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner[]';
        $request = $this->getAdministeredLicensingSubscriptionSubscriptionsRequest($organization_ids, $per_page, $starting_after, $ending_before, $subscription_ids, $statuses, $product_types, $name, $start_date, $end_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdministeredLicensingSubscriptionSubscriptions'
     *
     * @param  string[] $organization_ids Organizations to get associated subscriptions for (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $subscription_ids List of subscription ids to fetch (optional)
     * @param  string[]|null $statuses List of statuses that returned subscriptions can have (optional)
     * @param  string[]|null $product_types List of product types that returned subscriptions need to have entitlements for. (optional)
     * @param  string|null $name Search for subscription name (optional)
     * @param  \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter|null $start_date Filter subscriptions by start date, ISO 8601 format. To filter with a range of dates, use &#39;startDate[&lt;option&gt;]&#x3D;?&#39; in the request. Accepted options include lt, gt, lte, gte. (optional)
     * @param  \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameter|null $end_date Filter subscriptions by end date, ISO 8601 format. To filter with a range of dates, use &#39;endDate[&lt;option&gt;]&#x3D;?&#39; in the request. Accepted options include lt, gt, lte, gte. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdministeredLicensingSubscriptionSubscriptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdministeredLicensingSubscriptionSubscriptionsRequest($organization_ids, $per_page = null, $starting_after = null, $ending_before = null, $subscription_ids = null, $statuses = null, $product_types = null, $name = null, $start_date = null, $end_date = null, string $contentType = self::contentTypes['getAdministeredLicensingSubscriptionSubscriptions'][0])
    {

        // verify the required parameter 'organization_ids' is set
        if ($organization_ids === null || (is_array($organization_ids) && count($organization_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_ids when calling getAdministeredLicensingSubscriptionSubscriptions'
            );
        }











        $resourcePath = '/administered/licensing/subscription/subscriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'perPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starting_after,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ending_before,
            'endingBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subscription_ids,
            'subscriptionIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $organization_ids,
            'organizationIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_types,
            'productTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'startDate', // param base name
            '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf|\DateTime', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'endDate', // param base name
            '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsStartDateParameterOneOf|\DateTime', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses
     *
     * Get compliance status for requested subscriptions
     *
     * @param  string[] $organization_ids Organizations to get subscription compliance information for (required)
     * @param  string[]|null $subscription_ids Subscription ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses200ResponseInner[]
     */
    public function getAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses($organization_ids, $subscription_ids = null, string $contentType = self::contentTypes['getAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses'][0])
    {
        list($response) = $this->getAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesWithHttpInfo($organization_ids, $subscription_ids, $contentType);
        return $response;
    }

    /**
     * Operation getAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesWithHttpInfo
     *
     * Get compliance status for requested subscriptions
     *
     * @param  string[] $organization_ids Organizations to get subscription compliance information for (required)
     * @param  string[]|null $subscription_ids Subscription ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesWithHttpInfo($organization_ids, $subscription_ids = null, string $contentType = self::contentTypes['getAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses'][0])
    {
        $request = $this->getAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesRequest($organization_ids, $subscription_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesAsync
     *
     * Get compliance status for requested subscriptions
     *
     * @param  string[] $organization_ids Organizations to get subscription compliance information for (required)
     * @param  string[]|null $subscription_ids Subscription ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesAsync($organization_ids, $subscription_ids = null, string $contentType = self::contentTypes['getAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses'][0])
    {
        return $this->getAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesAsyncWithHttpInfo($organization_ids, $subscription_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesAsyncWithHttpInfo
     *
     * Get compliance status for requested subscriptions
     *
     * @param  string[] $organization_ids Organizations to get subscription compliance information for (required)
     * @param  string[]|null $subscription_ids Subscription ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesAsyncWithHttpInfo($organization_ids, $subscription_ids = null, string $contentType = self::contentTypes['getAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses'][0])
    {
        $returnType = '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses200ResponseInner[]';
        $request = $this->getAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesRequest($organization_ids, $subscription_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses'
     *
     * @param  string[] $organization_ids Organizations to get subscription compliance information for (required)
     * @param  string[]|null $subscription_ids Subscription ids (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdministeredLicensingSubscriptionSubscriptionsComplianceStatusesRequest($organization_ids, $subscription_ids = null, string $contentType = self::contentTypes['getAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses'][0])
    {

        // verify the required parameter 'organization_ids' is set
        if ($organization_ids === null || (is_array($organization_ids) && count($organization_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_ids when calling getAdministeredLicensingSubscriptionSubscriptionsComplianceStatuses'
            );
        }



        $resourcePath = '/administered/licensing/subscription/subscriptions/compliance/statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $organization_ids,
            'organizationIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subscription_ids,
            'subscriptionIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationLicensingCotermLicenses
     *
     * List the licenses in a coterm organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  bool|null $invalidated Filter for licenses that are invalidated (optional)
     * @param  bool|null $expired Filter for licenses that are expired (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationLicensingCotermLicenses'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationLicensingCotermLicenses200ResponseInner[]
     */
    public function getOrganizationLicensingCotermLicenses($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $invalidated = null, $expired = null, string $contentType = self::contentTypes['getOrganizationLicensingCotermLicenses'][0])
    {
        list($response) = $this->getOrganizationLicensingCotermLicensesWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $invalidated, $expired, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationLicensingCotermLicensesWithHttpInfo
     *
     * List the licenses in a coterm organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  bool|null $invalidated Filter for licenses that are invalidated (optional)
     * @param  bool|null $expired Filter for licenses that are expired (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationLicensingCotermLicenses'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationLicensingCotermLicenses200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationLicensingCotermLicensesWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $invalidated = null, $expired = null, string $contentType = self::contentTypes['getOrganizationLicensingCotermLicenses'][0])
    {
        $request = $this->getOrganizationLicensingCotermLicensesRequest($organization_id, $per_page, $starting_after, $ending_before, $invalidated, $expired, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationLicensingCotermLicenses200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationLicensingCotermLicenses200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationLicensingCotermLicenses200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationLicensingCotermLicenses200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationLicensingCotermLicenses200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationLicensingCotermLicensesAsync
     *
     * List the licenses in a coterm organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  bool|null $invalidated Filter for licenses that are invalidated (optional)
     * @param  bool|null $expired Filter for licenses that are expired (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationLicensingCotermLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationLicensingCotermLicensesAsync($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $invalidated = null, $expired = null, string $contentType = self::contentTypes['getOrganizationLicensingCotermLicenses'][0])
    {
        return $this->getOrganizationLicensingCotermLicensesAsyncWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $invalidated, $expired, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationLicensingCotermLicensesAsyncWithHttpInfo
     *
     * List the licenses in a coterm organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  bool|null $invalidated Filter for licenses that are invalidated (optional)
     * @param  bool|null $expired Filter for licenses that are expired (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationLicensingCotermLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationLicensingCotermLicensesAsyncWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $invalidated = null, $expired = null, string $contentType = self::contentTypes['getOrganizationLicensingCotermLicenses'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationLicensingCotermLicenses200ResponseInner[]';
        $request = $this->getOrganizationLicensingCotermLicensesRequest($organization_id, $per_page, $starting_after, $ending_before, $invalidated, $expired, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationLicensingCotermLicenses'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  bool|null $invalidated Filter for licenses that are invalidated (optional)
     * @param  bool|null $expired Filter for licenses that are expired (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationLicensingCotermLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationLicensingCotermLicensesRequest($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $invalidated = null, $expired = null, string $contentType = self::contentTypes['getOrganizationLicensingCotermLicenses'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationLicensingCotermLicenses'
            );
        }







        $resourcePath = '/organizations/{organizationId}/licensing/coterm/licenses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'perPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starting_after,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ending_before,
            'endingBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $invalidated,
            'invalidated', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expired,
            'expired', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation moveOrganizationLicensingCotermLicenses
     *
     * Moves a license to a different organization (coterm only)
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\MoveOrganizationLicensingCotermLicensesRequest $move_organization_licensing_coterm_licenses_request move_organization_licensing_coterm_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveOrganizationLicensingCotermLicenses'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\MoveOrganizationLicensingCotermLicenses200Response
     */
    public function moveOrganizationLicensingCotermLicenses($organization_id, $move_organization_licensing_coterm_licenses_request, string $contentType = self::contentTypes['moveOrganizationLicensingCotermLicenses'][0])
    {
        list($response) = $this->moveOrganizationLicensingCotermLicensesWithHttpInfo($organization_id, $move_organization_licensing_coterm_licenses_request, $contentType);
        return $response;
    }

    /**
     * Operation moveOrganizationLicensingCotermLicensesWithHttpInfo
     *
     * Moves a license to a different organization (coterm only)
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\MoveOrganizationLicensingCotermLicensesRequest $move_organization_licensing_coterm_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveOrganizationLicensingCotermLicenses'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\MoveOrganizationLicensingCotermLicenses200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function moveOrganizationLicensingCotermLicensesWithHttpInfo($organization_id, $move_organization_licensing_coterm_licenses_request, string $contentType = self::contentTypes['moveOrganizationLicensingCotermLicenses'][0])
    {
        $request = $this->moveOrganizationLicensingCotermLicensesRequest($organization_id, $move_organization_licensing_coterm_licenses_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\MoveOrganizationLicensingCotermLicenses200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\MoveOrganizationLicensingCotermLicenses200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\MoveOrganizationLicensingCotermLicenses200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\MoveOrganizationLicensingCotermLicenses200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\MoveOrganizationLicensingCotermLicenses200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation moveOrganizationLicensingCotermLicensesAsync
     *
     * Moves a license to a different organization (coterm only)
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\MoveOrganizationLicensingCotermLicensesRequest $move_organization_licensing_coterm_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveOrganizationLicensingCotermLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function moveOrganizationLicensingCotermLicensesAsync($organization_id, $move_organization_licensing_coterm_licenses_request, string $contentType = self::contentTypes['moveOrganizationLicensingCotermLicenses'][0])
    {
        return $this->moveOrganizationLicensingCotermLicensesAsyncWithHttpInfo($organization_id, $move_organization_licensing_coterm_licenses_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation moveOrganizationLicensingCotermLicensesAsyncWithHttpInfo
     *
     * Moves a license to a different organization (coterm only)
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\MoveOrganizationLicensingCotermLicensesRequest $move_organization_licensing_coterm_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveOrganizationLicensingCotermLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function moveOrganizationLicensingCotermLicensesAsyncWithHttpInfo($organization_id, $move_organization_licensing_coterm_licenses_request, string $contentType = self::contentTypes['moveOrganizationLicensingCotermLicenses'][0])
    {
        $returnType = '\Meraki\Model\MoveOrganizationLicensingCotermLicenses200Response';
        $request = $this->moveOrganizationLicensingCotermLicensesRequest($organization_id, $move_organization_licensing_coterm_licenses_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'moveOrganizationLicensingCotermLicenses'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\MoveOrganizationLicensingCotermLicensesRequest $move_organization_licensing_coterm_licenses_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveOrganizationLicensingCotermLicenses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function moveOrganizationLicensingCotermLicensesRequest($organization_id, $move_organization_licensing_coterm_licenses_request, string $contentType = self::contentTypes['moveOrganizationLicensingCotermLicenses'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling moveOrganizationLicensingCotermLicenses'
            );
        }

        // verify the required parameter 'move_organization_licensing_coterm_licenses_request' is set
        if ($move_organization_licensing_coterm_licenses_request === null || (is_array($move_organization_licensing_coterm_licenses_request) && count($move_organization_licensing_coterm_licenses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $move_organization_licensing_coterm_licenses_request when calling moveOrganizationLicensingCotermLicenses'
            );
        }


        $resourcePath = '/organizations/{organizationId}/licensing/coterm/licenses/move';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($move_organization_licensing_coterm_licenses_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($move_organization_licensing_coterm_licenses_request));
            } else {
                $httpBody = $move_organization_licensing_coterm_licenses_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateAdministeredLicensingSubscriptionSubscriptionsClaimKey
     *
     * Find a subscription by claim key
     *
     * @param  \Meraki\Model\ValidateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest $validate_administered_licensing_subscription_subscriptions_claim_key_request validate_administered_licensing_subscription_subscriptions_claim_key_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateAdministeredLicensingSubscriptionSubscriptionsClaimKey'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner
     */
    public function validateAdministeredLicensingSubscriptionSubscriptionsClaimKey($validate_administered_licensing_subscription_subscriptions_claim_key_request, string $contentType = self::contentTypes['validateAdministeredLicensingSubscriptionSubscriptionsClaimKey'][0])
    {
        list($response) = $this->validateAdministeredLicensingSubscriptionSubscriptionsClaimKeyWithHttpInfo($validate_administered_licensing_subscription_subscriptions_claim_key_request, $contentType);
        return $response;
    }

    /**
     * Operation validateAdministeredLicensingSubscriptionSubscriptionsClaimKeyWithHttpInfo
     *
     * Find a subscription by claim key
     *
     * @param  \Meraki\Model\ValidateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest $validate_administered_licensing_subscription_subscriptions_claim_key_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateAdministeredLicensingSubscriptionSubscriptionsClaimKey'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateAdministeredLicensingSubscriptionSubscriptionsClaimKeyWithHttpInfo($validate_administered_licensing_subscription_subscriptions_claim_key_request, string $contentType = self::contentTypes['validateAdministeredLicensingSubscriptionSubscriptionsClaimKey'][0])
    {
        $request = $this->validateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest($validate_administered_licensing_subscription_subscriptions_claim_key_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateAdministeredLicensingSubscriptionSubscriptionsClaimKeyAsync
     *
     * Find a subscription by claim key
     *
     * @param  \Meraki\Model\ValidateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest $validate_administered_licensing_subscription_subscriptions_claim_key_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateAdministeredLicensingSubscriptionSubscriptionsClaimKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateAdministeredLicensingSubscriptionSubscriptionsClaimKeyAsync($validate_administered_licensing_subscription_subscriptions_claim_key_request, string $contentType = self::contentTypes['validateAdministeredLicensingSubscriptionSubscriptionsClaimKey'][0])
    {
        return $this->validateAdministeredLicensingSubscriptionSubscriptionsClaimKeyAsyncWithHttpInfo($validate_administered_licensing_subscription_subscriptions_claim_key_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateAdministeredLicensingSubscriptionSubscriptionsClaimKeyAsyncWithHttpInfo
     *
     * Find a subscription by claim key
     *
     * @param  \Meraki\Model\ValidateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest $validate_administered_licensing_subscription_subscriptions_claim_key_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateAdministeredLicensingSubscriptionSubscriptionsClaimKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateAdministeredLicensingSubscriptionSubscriptionsClaimKeyAsyncWithHttpInfo($validate_administered_licensing_subscription_subscriptions_claim_key_request, string $contentType = self::contentTypes['validateAdministeredLicensingSubscriptionSubscriptionsClaimKey'][0])
    {
        $returnType = '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner';
        $request = $this->validateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest($validate_administered_licensing_subscription_subscriptions_claim_key_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateAdministeredLicensingSubscriptionSubscriptionsClaimKey'
     *
     * @param  \Meraki\Model\ValidateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest $validate_administered_licensing_subscription_subscriptions_claim_key_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateAdministeredLicensingSubscriptionSubscriptionsClaimKey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function validateAdministeredLicensingSubscriptionSubscriptionsClaimKeyRequest($validate_administered_licensing_subscription_subscriptions_claim_key_request, string $contentType = self::contentTypes['validateAdministeredLicensingSubscriptionSubscriptionsClaimKey'][0])
    {

        // verify the required parameter 'validate_administered_licensing_subscription_subscriptions_claim_key_request' is set
        if ($validate_administered_licensing_subscription_subscriptions_claim_key_request === null || (is_array($validate_administered_licensing_subscription_subscriptions_claim_key_request) && count($validate_administered_licensing_subscription_subscriptions_claim_key_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $validate_administered_licensing_subscription_subscriptions_claim_key_request when calling validateAdministeredLicensingSubscriptionSubscriptionsClaimKey'
            );
        }


        $resourcePath = '/administered/licensing/subscription/subscriptions/claimKey/validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($validate_administered_licensing_subscription_subscriptions_claim_key_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($validate_administered_licensing_subscription_subscriptions_claim_key_request));
            } else {
                $httpBody = $validate_administered_licensing_subscription_subscriptions_claim_key_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
