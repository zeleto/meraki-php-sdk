<?php
/**
 * InventoryApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Meraki\ApiException;
use Meraki\Configuration;
use Meraki\HeaderSelector;
use Meraki\ObjectSerializer;

/**
 * InventoryApi Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InventoryApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'claimIntoOrganizationInventory' => [
            'application/json',
        ],
        'createOrganizationInventoryDevicesSwapsBulk' => [
            'application/json',
        ],
        'createOrganizationInventoryOnboardingCloudMonitoringExportEvent' => [
            'application/json',
        ],
        'createOrganizationInventoryOnboardingCloudMonitoringImport' => [
            'application/json',
        ],
        'createOrganizationInventoryOnboardingCloudMonitoringPrepare' => [
            'application/json',
        ],
        'getOrganizationCellularGatewayEsimsInventory' => [
            'application/json',
        ],
        'getOrganizationInventoryDevice' => [
            'application/json',
        ],
        'getOrganizationInventoryDevices' => [
            'application/json',
        ],
        'getOrganizationInventoryDevicesSwapsBulk' => [
            'application/json',
        ],
        'getOrganizationInventoryOnboardingCloudMonitoringImports' => [
            'application/json',
        ],
        'getOrganizationInventoryOnboardingCloudMonitoringNetworks' => [
            'application/json',
        ],
        'releaseFromOrganizationInventory' => [
            'application/json',
        ],
        'updateOrganizationCellularGatewayEsimsInventory' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation claimIntoOrganizationInventory
     *
     * Claim a list of devices, licenses, and/or orders into an organization inventory
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\ClaimIntoOrganizationInventoryRequest|null $claim_into_organization_inventory_request claim_into_organization_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimIntoOrganizationInventory'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\ClaimIntoOrganization200Response
     */
    public function claimIntoOrganizationInventory($organization_id, $claim_into_organization_inventory_request = null, string $contentType = self::contentTypes['claimIntoOrganizationInventory'][0])
    {
        list($response) = $this->claimIntoOrganizationInventoryWithHttpInfo($organization_id, $claim_into_organization_inventory_request, $contentType);
        return $response;
    }

    /**
     * Operation claimIntoOrganizationInventoryWithHttpInfo
     *
     * Claim a list of devices, licenses, and/or orders into an organization inventory
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\ClaimIntoOrganizationInventoryRequest|null $claim_into_organization_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimIntoOrganizationInventory'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\ClaimIntoOrganization200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function claimIntoOrganizationInventoryWithHttpInfo($organization_id, $claim_into_organization_inventory_request = null, string $contentType = self::contentTypes['claimIntoOrganizationInventory'][0])
    {
        $request = $this->claimIntoOrganizationInventoryRequest($organization_id, $claim_into_organization_inventory_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\ClaimIntoOrganization200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\ClaimIntoOrganization200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\ClaimIntoOrganization200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\ClaimIntoOrganization200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\ClaimIntoOrganization200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation claimIntoOrganizationInventoryAsync
     *
     * Claim a list of devices, licenses, and/or orders into an organization inventory
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\ClaimIntoOrganizationInventoryRequest|null $claim_into_organization_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimIntoOrganizationInventory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function claimIntoOrganizationInventoryAsync($organization_id, $claim_into_organization_inventory_request = null, string $contentType = self::contentTypes['claimIntoOrganizationInventory'][0])
    {
        return $this->claimIntoOrganizationInventoryAsyncWithHttpInfo($organization_id, $claim_into_organization_inventory_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation claimIntoOrganizationInventoryAsyncWithHttpInfo
     *
     * Claim a list of devices, licenses, and/or orders into an organization inventory
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\ClaimIntoOrganizationInventoryRequest|null $claim_into_organization_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimIntoOrganizationInventory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function claimIntoOrganizationInventoryAsyncWithHttpInfo($organization_id, $claim_into_organization_inventory_request = null, string $contentType = self::contentTypes['claimIntoOrganizationInventory'][0])
    {
        $returnType = '\Meraki\Model\ClaimIntoOrganization200Response';
        $request = $this->claimIntoOrganizationInventoryRequest($organization_id, $claim_into_organization_inventory_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'claimIntoOrganizationInventory'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\ClaimIntoOrganizationInventoryRequest|null $claim_into_organization_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimIntoOrganizationInventory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function claimIntoOrganizationInventoryRequest($organization_id, $claim_into_organization_inventory_request = null, string $contentType = self::contentTypes['claimIntoOrganizationInventory'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling claimIntoOrganizationInventory'
            );
        }



        $resourcePath = '/organizations/{organizationId}/inventory/claim';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($claim_into_organization_inventory_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($claim_into_organization_inventory_request));
            } else {
                $httpBody = $claim_into_organization_inventory_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganizationInventoryDevicesSwapsBulk
     *
     * Swap the devices identified by devices.old with a devices.new, then perform the :afterAction on the devices.old.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulkRequest $create_organization_inventory_devices_swaps_bulk_request create_organization_inventory_devices_swaps_bulk_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryDevicesSwapsBulk'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulk207Response
     */
    public function createOrganizationInventoryDevicesSwapsBulk($organization_id, $create_organization_inventory_devices_swaps_bulk_request, string $contentType = self::contentTypes['createOrganizationInventoryDevicesSwapsBulk'][0])
    {
        list($response) = $this->createOrganizationInventoryDevicesSwapsBulkWithHttpInfo($organization_id, $create_organization_inventory_devices_swaps_bulk_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationInventoryDevicesSwapsBulkWithHttpInfo
     *
     * Swap the devices identified by devices.old with a devices.new, then perform the :afterAction on the devices.old.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulkRequest $create_organization_inventory_devices_swaps_bulk_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryDevicesSwapsBulk'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulk207Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationInventoryDevicesSwapsBulkWithHttpInfo($organization_id, $create_organization_inventory_devices_swaps_bulk_request, string $contentType = self::contentTypes['createOrganizationInventoryDevicesSwapsBulk'][0])
    {
        $request = $this->createOrganizationInventoryDevicesSwapsBulkRequest($organization_id, $create_organization_inventory_devices_swaps_bulk_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 207:
                    if ('\Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulk207Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulk207Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulk207Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulk207Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 207:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulk207Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationInventoryDevicesSwapsBulkAsync
     *
     * Swap the devices identified by devices.old with a devices.new, then perform the :afterAction on the devices.old.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulkRequest $create_organization_inventory_devices_swaps_bulk_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryDevicesSwapsBulk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationInventoryDevicesSwapsBulkAsync($organization_id, $create_organization_inventory_devices_swaps_bulk_request, string $contentType = self::contentTypes['createOrganizationInventoryDevicesSwapsBulk'][0])
    {
        return $this->createOrganizationInventoryDevicesSwapsBulkAsyncWithHttpInfo($organization_id, $create_organization_inventory_devices_swaps_bulk_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationInventoryDevicesSwapsBulkAsyncWithHttpInfo
     *
     * Swap the devices identified by devices.old with a devices.new, then perform the :afterAction on the devices.old.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulkRequest $create_organization_inventory_devices_swaps_bulk_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryDevicesSwapsBulk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationInventoryDevicesSwapsBulkAsyncWithHttpInfo($organization_id, $create_organization_inventory_devices_swaps_bulk_request, string $contentType = self::contentTypes['createOrganizationInventoryDevicesSwapsBulk'][0])
    {
        $returnType = '\Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulk207Response';
        $request = $this->createOrganizationInventoryDevicesSwapsBulkRequest($organization_id, $create_organization_inventory_devices_swaps_bulk_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationInventoryDevicesSwapsBulk'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulkRequest $create_organization_inventory_devices_swaps_bulk_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryDevicesSwapsBulk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationInventoryDevicesSwapsBulkRequest($organization_id, $create_organization_inventory_devices_swaps_bulk_request, string $contentType = self::contentTypes['createOrganizationInventoryDevicesSwapsBulk'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationInventoryDevicesSwapsBulk'
            );
        }

        // verify the required parameter 'create_organization_inventory_devices_swaps_bulk_request' is set
        if ($create_organization_inventory_devices_swaps_bulk_request === null || (is_array($create_organization_inventory_devices_swaps_bulk_request) && count($create_organization_inventory_devices_swaps_bulk_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_inventory_devices_swaps_bulk_request when calling createOrganizationInventoryDevicesSwapsBulk'
            );
        }


        $resourcePath = '/organizations/{organizationId}/inventory/devices/swaps/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_inventory_devices_swaps_bulk_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_inventory_devices_swaps_bulk_request));
            } else {
                $httpBody = $create_organization_inventory_devices_swaps_bulk_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringExportEvent
     *
     * Imports event logs related to the onboarding app into elastisearch
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest $create_organization_inventory_onboarding_cloud_monitoring_export_event_request create_organization_inventory_onboarding_cloud_monitoring_export_event_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringExportEvent($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_export_event_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'][0])
    {
        list($response) = $this->createOrganizationInventoryOnboardingCloudMonitoringExportEventWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_export_event_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringExportEventWithHttpInfo
     *
     * Imports event logs related to the onboarding app into elastisearch
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest $create_organization_inventory_onboarding_cloud_monitoring_export_event_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringExportEventWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_export_event_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'][0])
    {
        $request = $this->createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_export_event_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringExportEventAsync
     *
     * Imports event logs related to the onboarding app into elastisearch
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest $create_organization_inventory_onboarding_cloud_monitoring_export_event_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringExportEventAsync($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_export_event_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'][0])
    {
        return $this->createOrganizationInventoryOnboardingCloudMonitoringExportEventAsyncWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_export_event_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringExportEventAsyncWithHttpInfo
     *
     * Imports event logs related to the onboarding app into elastisearch
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest $create_organization_inventory_onboarding_cloud_monitoring_export_event_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringExportEventAsyncWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_export_event_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'][0])
    {
        $returnType = 'object';
        $request = $this->createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_export_event_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationInventoryOnboardingCloudMonitoringExportEvent'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest $create_organization_inventory_onboarding_cloud_monitoring_export_event_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringExportEventRequest($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_export_event_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringExportEvent'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationInventoryOnboardingCloudMonitoringExportEvent'
            );
        }

        // verify the required parameter 'create_organization_inventory_onboarding_cloud_monitoring_export_event_request' is set
        if ($create_organization_inventory_onboarding_cloud_monitoring_export_event_request === null || (is_array($create_organization_inventory_onboarding_cloud_monitoring_export_event_request) && count($create_organization_inventory_onboarding_cloud_monitoring_export_event_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_inventory_onboarding_cloud_monitoring_export_event_request when calling createOrganizationInventoryOnboardingCloudMonitoringExportEvent'
            );
        }


        $resourcePath = '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/exportEvents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_inventory_onboarding_cloud_monitoring_export_event_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_inventory_onboarding_cloud_monitoring_export_event_request));
            } else {
                $httpBody = $create_organization_inventory_onboarding_cloud_monitoring_export_event_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringImport
     *
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest $create_organization_inventory_onboarding_cloud_monitoring_import_request create_organization_inventory_onboarding_cloud_monitoring_import_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner[]
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringImport($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_import_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'][0])
    {
        list($response) = $this->createOrganizationInventoryOnboardingCloudMonitoringImportWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_import_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringImportWithHttpInfo
     *
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest $create_organization_inventory_onboarding_cloud_monitoring_import_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringImportWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_import_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'][0])
    {
        $request = $this->createOrganizationInventoryOnboardingCloudMonitoringImportRequest($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_import_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringImportAsync
     *
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest $create_organization_inventory_onboarding_cloud_monitoring_import_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringImportAsync($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_import_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'][0])
    {
        return $this->createOrganizationInventoryOnboardingCloudMonitoringImportAsyncWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_import_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringImportAsyncWithHttpInfo
     *
     * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest $create_organization_inventory_onboarding_cloud_monitoring_import_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringImportAsyncWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_import_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'][0])
    {
        $returnType = '\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImport201ResponseInner[]';
        $request = $this->createOrganizationInventoryOnboardingCloudMonitoringImportRequest($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_import_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationInventoryOnboardingCloudMonitoringImport'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest $create_organization_inventory_onboarding_cloud_monitoring_import_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringImportRequest($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_import_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringImport'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationInventoryOnboardingCloudMonitoringImport'
            );
        }

        // verify the required parameter 'create_organization_inventory_onboarding_cloud_monitoring_import_request' is set
        if ($create_organization_inventory_onboarding_cloud_monitoring_import_request === null || (is_array($create_organization_inventory_onboarding_cloud_monitoring_import_request) && count($create_organization_inventory_onboarding_cloud_monitoring_import_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_inventory_onboarding_cloud_monitoring_import_request when calling createOrganizationInventoryOnboardingCloudMonitoringImport'
            );
        }


        $resourcePath = '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_inventory_onboarding_cloud_monitoring_import_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_inventory_onboarding_cloud_monitoring_import_request));
            } else {
                $httpBody = $create_organization_inventory_onboarding_cloud_monitoring_import_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringPrepare
     *
     * Initiates or updates an import session
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest $create_organization_inventory_onboarding_cloud_monitoring_prepare_request create_organization_inventory_onboarding_cloud_monitoring_prepare_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner[]
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringPrepare($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_prepare_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'][0])
    {
        list($response) = $this->createOrganizationInventoryOnboardingCloudMonitoringPrepareWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_prepare_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringPrepareWithHttpInfo
     *
     * Initiates or updates an import session
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest $create_organization_inventory_onboarding_cloud_monitoring_prepare_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringPrepareWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_prepare_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'][0])
    {
        $request = $this->createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_prepare_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringPrepareAsync
     *
     * Initiates or updates an import session
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest $create_organization_inventory_onboarding_cloud_monitoring_prepare_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringPrepareAsync($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_prepare_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'][0])
    {
        return $this->createOrganizationInventoryOnboardingCloudMonitoringPrepareAsyncWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_prepare_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationInventoryOnboardingCloudMonitoringPrepareAsyncWithHttpInfo
     *
     * Initiates or updates an import session
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest $create_organization_inventory_onboarding_cloud_monitoring_prepare_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringPrepareAsyncWithHttpInfo($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_prepare_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'][0])
    {
        $returnType = '\Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepare201ResponseInner[]';
        $request = $this->createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_prepare_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationInventoryOnboardingCloudMonitoringPrepare'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationInventoryOnboardingCloudMonitoringPrepareRequest $create_organization_inventory_onboarding_cloud_monitoring_prepare_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationInventoryOnboardingCloudMonitoringPrepareRequest($organization_id, $create_organization_inventory_onboarding_cloud_monitoring_prepare_request, string $contentType = self::contentTypes['createOrganizationInventoryOnboardingCloudMonitoringPrepare'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationInventoryOnboardingCloudMonitoringPrepare'
            );
        }

        // verify the required parameter 'create_organization_inventory_onboarding_cloud_monitoring_prepare_request' is set
        if ($create_organization_inventory_onboarding_cloud_monitoring_prepare_request === null || (is_array($create_organization_inventory_onboarding_cloud_monitoring_prepare_request) && count($create_organization_inventory_onboarding_cloud_monitoring_prepare_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_inventory_onboarding_cloud_monitoring_prepare_request when calling createOrganizationInventoryOnboardingCloudMonitoringPrepare'
            );
        }


        $resourcePath = '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/prepare';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_inventory_onboarding_cloud_monitoring_prepare_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_inventory_onboarding_cloud_monitoring_prepare_request));
            } else {
                $httpBody = $create_organization_inventory_onboarding_cloud_monitoring_prepare_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsInventory
     *
     * The eSIM inventory of a given organization.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $eids Optional parameter to filter the results by EID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200Response
     */
    public function getOrganizationCellularGatewayEsimsInventory($organization_id, $eids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsInventory'][0])
    {
        list($response) = $this->getOrganizationCellularGatewayEsimsInventoryWithHttpInfo($organization_id, $eids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsInventoryWithHttpInfo
     *
     * The eSIM inventory of a given organization.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $eids Optional parameter to filter the results by EID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationCellularGatewayEsimsInventoryWithHttpInfo($organization_id, $eids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsInventory'][0])
    {
        $request = $this->getOrganizationCellularGatewayEsimsInventoryRequest($organization_id, $eids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsInventoryAsync
     *
     * The eSIM inventory of a given organization.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $eids Optional parameter to filter the results by EID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCellularGatewayEsimsInventoryAsync($organization_id, $eids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsInventory'][0])
    {
        return $this->getOrganizationCellularGatewayEsimsInventoryAsyncWithHttpInfo($organization_id, $eids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationCellularGatewayEsimsInventoryAsyncWithHttpInfo
     *
     * The eSIM inventory of a given organization.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $eids Optional parameter to filter the results by EID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCellularGatewayEsimsInventoryAsyncWithHttpInfo($organization_id, $eids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsInventory'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200Response';
        $request = $this->getOrganizationCellularGatewayEsimsInventoryRequest($organization_id, $eids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationCellularGatewayEsimsInventory'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $eids Optional parameter to filter the results by EID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationCellularGatewayEsimsInventoryRequest($organization_id, $eids = null, string $contentType = self::contentTypes['getOrganizationCellularGatewayEsimsInventory'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationCellularGatewayEsimsInventory'
            );
        }



        $resourcePath = '/organizations/{organizationId}/cellularGateway/esims/inventory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $eids,
            'eids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationInventoryDevice
     *
     * Return a single device from the inventory of an organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryDevice'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationInventoryDevices200ResponseInner
     */
    public function getOrganizationInventoryDevice($organization_id, $serial, string $contentType = self::contentTypes['getOrganizationInventoryDevice'][0])
    {
        list($response) = $this->getOrganizationInventoryDeviceWithHttpInfo($organization_id, $serial, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationInventoryDeviceWithHttpInfo
     *
     * Return a single device from the inventory of an organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryDevice'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationInventoryDevices200ResponseInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationInventoryDeviceWithHttpInfo($organization_id, $serial, string $contentType = self::contentTypes['getOrganizationInventoryDevice'][0])
    {
        $request = $this->getOrganizationInventoryDeviceRequest($organization_id, $serial, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationInventoryDevices200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationInventoryDevices200ResponseInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationInventoryDevices200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationInventoryDevices200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationInventoryDevices200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationInventoryDeviceAsync
     *
     * Return a single device from the inventory of an organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationInventoryDeviceAsync($organization_id, $serial, string $contentType = self::contentTypes['getOrganizationInventoryDevice'][0])
    {
        return $this->getOrganizationInventoryDeviceAsyncWithHttpInfo($organization_id, $serial, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationInventoryDeviceAsyncWithHttpInfo
     *
     * Return a single device from the inventory of an organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationInventoryDeviceAsyncWithHttpInfo($organization_id, $serial, string $contentType = self::contentTypes['getOrganizationInventoryDevice'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationInventoryDevices200ResponseInner';
        $request = $this->getOrganizationInventoryDeviceRequest($organization_id, $serial, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationInventoryDevice'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $serial Serial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationInventoryDeviceRequest($organization_id, $serial, string $contentType = self::contentTypes['getOrganizationInventoryDevice'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationInventoryDevice'
            );
        }

        // verify the required parameter 'serial' is set
        if ($serial === null || (is_array($serial) && count($serial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serial when calling getOrganizationInventoryDevice'
            );
        }


        $resourcePath = '/organizations/{organizationId}/inventory/devices/{serial}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($serial !== null) {
            $resourcePath = str_replace(
                '{' . 'serial' . '}',
                ObjectSerializer::toPathValue($serial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationInventoryDevices
     *
     * Return the device inventory for an organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $used_state Filter results by used or unused inventory. Accepted values are &#39;used&#39; or &#39;unused&#39;. (optional)
     * @param  string|null $search Search for devices in inventory based on serial number, mac address, or model. (optional)
     * @param  string[]|null $macs Search for devices in inventory based on mac addresses. (optional)
     * @param  string[]|null $network_ids Search for devices in inventory based on network ids. Use explicit &#39;null&#39; value to get available devices only. (optional)
     * @param  string[]|null $serials Search for devices in inventory based on serials. (optional)
     * @param  string[]|null $models Search for devices in inventory based on model. (optional)
     * @param  string[]|null $order_numbers Search for devices in inventory based on order numbers. (optional)
     * @param  string[]|null $tags Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param  string|null $tags_filter_type To use with &#39;tags&#39; parameter, to filter devices which contain ANY or ALL given tags. Accepted values are &#39;withAnyTags&#39; or &#39;withAllTags&#39;, default is &#39;withAnyTags&#39;. (optional)
     * @param  string[]|null $product_types Filter devices by product type. Accepted values are appliance, camera, cellularGateway, secureConnect, sensor, switch, systemsManager, wireless, and wirelessController. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryDevices'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationInventoryDevices200ResponseInner[]
     */
    public function getOrganizationInventoryDevices($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $used_state = null, $search = null, $macs = null, $network_ids = null, $serials = null, $models = null, $order_numbers = null, $tags = null, $tags_filter_type = null, $product_types = null, string $contentType = self::contentTypes['getOrganizationInventoryDevices'][0])
    {
        list($response) = $this->getOrganizationInventoryDevicesWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $used_state, $search, $macs, $network_ids, $serials, $models, $order_numbers, $tags, $tags_filter_type, $product_types, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationInventoryDevicesWithHttpInfo
     *
     * Return the device inventory for an organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $used_state Filter results by used or unused inventory. Accepted values are &#39;used&#39; or &#39;unused&#39;. (optional)
     * @param  string|null $search Search for devices in inventory based on serial number, mac address, or model. (optional)
     * @param  string[]|null $macs Search for devices in inventory based on mac addresses. (optional)
     * @param  string[]|null $network_ids Search for devices in inventory based on network ids. Use explicit &#39;null&#39; value to get available devices only. (optional)
     * @param  string[]|null $serials Search for devices in inventory based on serials. (optional)
     * @param  string[]|null $models Search for devices in inventory based on model. (optional)
     * @param  string[]|null $order_numbers Search for devices in inventory based on order numbers. (optional)
     * @param  string[]|null $tags Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param  string|null $tags_filter_type To use with &#39;tags&#39; parameter, to filter devices which contain ANY or ALL given tags. Accepted values are &#39;withAnyTags&#39; or &#39;withAllTags&#39;, default is &#39;withAnyTags&#39;. (optional)
     * @param  string[]|null $product_types Filter devices by product type. Accepted values are appliance, camera, cellularGateway, secureConnect, sensor, switch, systemsManager, wireless, and wirelessController. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryDevices'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationInventoryDevices200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationInventoryDevicesWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $used_state = null, $search = null, $macs = null, $network_ids = null, $serials = null, $models = null, $order_numbers = null, $tags = null, $tags_filter_type = null, $product_types = null, string $contentType = self::contentTypes['getOrganizationInventoryDevices'][0])
    {
        $request = $this->getOrganizationInventoryDevicesRequest($organization_id, $per_page, $starting_after, $ending_before, $used_state, $search, $macs, $network_ids, $serials, $models, $order_numbers, $tags, $tags_filter_type, $product_types, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationInventoryDevices200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationInventoryDevices200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationInventoryDevices200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationInventoryDevices200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationInventoryDevices200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationInventoryDevicesAsync
     *
     * Return the device inventory for an organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $used_state Filter results by used or unused inventory. Accepted values are &#39;used&#39; or &#39;unused&#39;. (optional)
     * @param  string|null $search Search for devices in inventory based on serial number, mac address, or model. (optional)
     * @param  string[]|null $macs Search for devices in inventory based on mac addresses. (optional)
     * @param  string[]|null $network_ids Search for devices in inventory based on network ids. Use explicit &#39;null&#39; value to get available devices only. (optional)
     * @param  string[]|null $serials Search for devices in inventory based on serials. (optional)
     * @param  string[]|null $models Search for devices in inventory based on model. (optional)
     * @param  string[]|null $order_numbers Search for devices in inventory based on order numbers. (optional)
     * @param  string[]|null $tags Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param  string|null $tags_filter_type To use with &#39;tags&#39; parameter, to filter devices which contain ANY or ALL given tags. Accepted values are &#39;withAnyTags&#39; or &#39;withAllTags&#39;, default is &#39;withAnyTags&#39;. (optional)
     * @param  string[]|null $product_types Filter devices by product type. Accepted values are appliance, camera, cellularGateway, secureConnect, sensor, switch, systemsManager, wireless, and wirelessController. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryDevices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationInventoryDevicesAsync($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $used_state = null, $search = null, $macs = null, $network_ids = null, $serials = null, $models = null, $order_numbers = null, $tags = null, $tags_filter_type = null, $product_types = null, string $contentType = self::contentTypes['getOrganizationInventoryDevices'][0])
    {
        return $this->getOrganizationInventoryDevicesAsyncWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $used_state, $search, $macs, $network_ids, $serials, $models, $order_numbers, $tags, $tags_filter_type, $product_types, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationInventoryDevicesAsyncWithHttpInfo
     *
     * Return the device inventory for an organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $used_state Filter results by used or unused inventory. Accepted values are &#39;used&#39; or &#39;unused&#39;. (optional)
     * @param  string|null $search Search for devices in inventory based on serial number, mac address, or model. (optional)
     * @param  string[]|null $macs Search for devices in inventory based on mac addresses. (optional)
     * @param  string[]|null $network_ids Search for devices in inventory based on network ids. Use explicit &#39;null&#39; value to get available devices only. (optional)
     * @param  string[]|null $serials Search for devices in inventory based on serials. (optional)
     * @param  string[]|null $models Search for devices in inventory based on model. (optional)
     * @param  string[]|null $order_numbers Search for devices in inventory based on order numbers. (optional)
     * @param  string[]|null $tags Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param  string|null $tags_filter_type To use with &#39;tags&#39; parameter, to filter devices which contain ANY or ALL given tags. Accepted values are &#39;withAnyTags&#39; or &#39;withAllTags&#39;, default is &#39;withAnyTags&#39;. (optional)
     * @param  string[]|null $product_types Filter devices by product type. Accepted values are appliance, camera, cellularGateway, secureConnect, sensor, switch, systemsManager, wireless, and wirelessController. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryDevices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationInventoryDevicesAsyncWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $used_state = null, $search = null, $macs = null, $network_ids = null, $serials = null, $models = null, $order_numbers = null, $tags = null, $tags_filter_type = null, $product_types = null, string $contentType = self::contentTypes['getOrganizationInventoryDevices'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationInventoryDevices200ResponseInner[]';
        $request = $this->getOrganizationInventoryDevicesRequest($organization_id, $per_page, $starting_after, $ending_before, $used_state, $search, $macs, $network_ids, $serials, $models, $order_numbers, $tags, $tags_filter_type, $product_types, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationInventoryDevices'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $used_state Filter results by used or unused inventory. Accepted values are &#39;used&#39; or &#39;unused&#39;. (optional)
     * @param  string|null $search Search for devices in inventory based on serial number, mac address, or model. (optional)
     * @param  string[]|null $macs Search for devices in inventory based on mac addresses. (optional)
     * @param  string[]|null $network_ids Search for devices in inventory based on network ids. Use explicit &#39;null&#39; value to get available devices only. (optional)
     * @param  string[]|null $serials Search for devices in inventory based on serials. (optional)
     * @param  string[]|null $models Search for devices in inventory based on model. (optional)
     * @param  string[]|null $order_numbers Search for devices in inventory based on order numbers. (optional)
     * @param  string[]|null $tags Filter devices by tags. The filtering is case-sensitive. If tags are included, &#39;tagsFilterType&#39; should also be included (see below). (optional)
     * @param  string|null $tags_filter_type To use with &#39;tags&#39; parameter, to filter devices which contain ANY or ALL given tags. Accepted values are &#39;withAnyTags&#39; or &#39;withAllTags&#39;, default is &#39;withAnyTags&#39;. (optional)
     * @param  string[]|null $product_types Filter devices by product type. Accepted values are appliance, camera, cellularGateway, secureConnect, sensor, switch, systemsManager, wireless, and wirelessController. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryDevices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationInventoryDevicesRequest($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $used_state = null, $search = null, $macs = null, $network_ids = null, $serials = null, $models = null, $order_numbers = null, $tags = null, $tags_filter_type = null, $product_types = null, string $contentType = self::contentTypes['getOrganizationInventoryDevices'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationInventoryDevices'
            );
        }















        $resourcePath = '/organizations/{organizationId}/inventory/devices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'perPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starting_after,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ending_before,
            'endingBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $used_state,
            'usedState', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $macs,
            'macs', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network_ids,
            'networkIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serials,
            'serials', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $models,
            'models', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_numbers,
            'orderNumbers', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tags,
            'tags', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tags_filter_type,
            'tagsFilterType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_types,
            'productTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationInventoryDevicesSwapsBulk
     *
     * List of device swaps for a given request ID ({id}).
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryDevicesSwapsBulk'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulk207Response
     */
    public function getOrganizationInventoryDevicesSwapsBulk($organization_id, $id, string $contentType = self::contentTypes['getOrganizationInventoryDevicesSwapsBulk'][0])
    {
        list($response) = $this->getOrganizationInventoryDevicesSwapsBulkWithHttpInfo($organization_id, $id, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationInventoryDevicesSwapsBulkWithHttpInfo
     *
     * List of device swaps for a given request ID ({id}).
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryDevicesSwapsBulk'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulk207Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationInventoryDevicesSwapsBulkWithHttpInfo($organization_id, $id, string $contentType = self::contentTypes['getOrganizationInventoryDevicesSwapsBulk'][0])
    {
        $request = $this->getOrganizationInventoryDevicesSwapsBulkRequest($organization_id, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulk207Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulk207Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulk207Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulk207Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulk207Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationInventoryDevicesSwapsBulkAsync
     *
     * List of device swaps for a given request ID ({id}).
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryDevicesSwapsBulk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationInventoryDevicesSwapsBulkAsync($organization_id, $id, string $contentType = self::contentTypes['getOrganizationInventoryDevicesSwapsBulk'][0])
    {
        return $this->getOrganizationInventoryDevicesSwapsBulkAsyncWithHttpInfo($organization_id, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationInventoryDevicesSwapsBulkAsyncWithHttpInfo
     *
     * List of device swaps for a given request ID ({id}).
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryDevicesSwapsBulk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationInventoryDevicesSwapsBulkAsyncWithHttpInfo($organization_id, $id, string $contentType = self::contentTypes['getOrganizationInventoryDevicesSwapsBulk'][0])
    {
        $returnType = '\Meraki\Model\CreateOrganizationInventoryDevicesSwapsBulk207Response';
        $request = $this->getOrganizationInventoryDevicesSwapsBulkRequest($organization_id, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationInventoryDevicesSwapsBulk'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryDevicesSwapsBulk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationInventoryDevicesSwapsBulkRequest($organization_id, $id, string $contentType = self::contentTypes['getOrganizationInventoryDevicesSwapsBulk'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationInventoryDevicesSwapsBulk'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getOrganizationInventoryDevicesSwapsBulk'
            );
        }


        $resourcePath = '/organizations/{organizationId}/inventory/devices/swaps/bulk/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationInventoryOnboardingCloudMonitoringImports
     *
     * Check the status of a committed Import operation
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $import_ids import ids from an imports (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner[]
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringImports($organization_id, $import_ids, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'][0])
    {
        list($response) = $this->getOrganizationInventoryOnboardingCloudMonitoringImportsWithHttpInfo($organization_id, $import_ids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationInventoryOnboardingCloudMonitoringImportsWithHttpInfo
     *
     * Check the status of a committed Import operation
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $import_ids import ids from an imports (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringImportsWithHttpInfo($organization_id, $import_ids, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'][0])
    {
        $request = $this->getOrganizationInventoryOnboardingCloudMonitoringImportsRequest($organization_id, $import_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationInventoryOnboardingCloudMonitoringImportsAsync
     *
     * Check the status of a committed Import operation
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $import_ids import ids from an imports (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringImportsAsync($organization_id, $import_ids, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'][0])
    {
        return $this->getOrganizationInventoryOnboardingCloudMonitoringImportsAsyncWithHttpInfo($organization_id, $import_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationInventoryOnboardingCloudMonitoringImportsAsyncWithHttpInfo
     *
     * Check the status of a committed Import operation
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $import_ids import ids from an imports (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringImportsAsyncWithHttpInfo($organization_id, $import_ids, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationInventoryOnboardingCloudMonitoringImports200ResponseInner[]';
        $request = $this->getOrganizationInventoryOnboardingCloudMonitoringImportsRequest($organization_id, $import_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationInventoryOnboardingCloudMonitoringImports'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[] $import_ids import ids from an imports (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringImportsRequest($organization_id, $import_ids, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringImports'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationInventoryOnboardingCloudMonitoringImports'
            );
        }

        // verify the required parameter 'import_ids' is set
        if ($import_ids === null || (is_array($import_ids) && count($import_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $import_ids when calling getOrganizationInventoryOnboardingCloudMonitoringImports'
            );
        }


        $resourcePath = '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $import_ids,
            'importIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationInventoryOnboardingCloudMonitoringNetworks
     *
     * Returns list of networks eligible for adding cloud monitored device
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $device_type Device Type switch or wireless controller (required)
     * @param  string|null $search Optional parameter to search on network name (optional)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetwork200Response[]
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringNetworks($organization_id, $device_type, $search = null, $per_page = null, $starting_after = null, $ending_before = null, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'][0])
    {
        list($response) = $this->getOrganizationInventoryOnboardingCloudMonitoringNetworksWithHttpInfo($organization_id, $device_type, $search, $per_page, $starting_after, $ending_before, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationInventoryOnboardingCloudMonitoringNetworksWithHttpInfo
     *
     * Returns list of networks eligible for adding cloud monitored device
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $device_type Device Type switch or wireless controller (required)
     * @param  string|null $search Optional parameter to search on network name (optional)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetwork200Response[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringNetworksWithHttpInfo($organization_id, $device_type, $search = null, $per_page = null, $starting_after = null, $ending_before = null, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'][0])
    {
        $request = $this->getOrganizationInventoryOnboardingCloudMonitoringNetworksRequest($organization_id, $device_type, $search, $per_page, $starting_after, $ending_before, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('\Meraki\Model\GetNetwork200Response[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetwork200Response[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetwork200Response[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetwork200Response[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetwork200Response[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationInventoryOnboardingCloudMonitoringNetworksAsync
     *
     * Returns list of networks eligible for adding cloud monitored device
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $device_type Device Type switch or wireless controller (required)
     * @param  string|null $search Optional parameter to search on network name (optional)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringNetworksAsync($organization_id, $device_type, $search = null, $per_page = null, $starting_after = null, $ending_before = null, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'][0])
    {
        return $this->getOrganizationInventoryOnboardingCloudMonitoringNetworksAsyncWithHttpInfo($organization_id, $device_type, $search, $per_page, $starting_after, $ending_before, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationInventoryOnboardingCloudMonitoringNetworksAsyncWithHttpInfo
     *
     * Returns list of networks eligible for adding cloud monitored device
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $device_type Device Type switch or wireless controller (required)
     * @param  string|null $search Optional parameter to search on network name (optional)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringNetworksAsyncWithHttpInfo($organization_id, $device_type, $search = null, $per_page = null, $starting_after = null, $ending_before = null, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'][0])
    {
        $returnType = '\Meraki\Model\GetNetwork200Response[]';
        $request = $this->getOrganizationInventoryOnboardingCloudMonitoringNetworksRequest($organization_id, $device_type, $search, $per_page, $starting_after, $ending_before, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationInventoryOnboardingCloudMonitoringNetworks'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $device_type Device Type switch or wireless controller (required)
     * @param  string|null $search Optional parameter to search on network name (optional)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationInventoryOnboardingCloudMonitoringNetworksRequest($organization_id, $device_type, $search = null, $per_page = null, $starting_after = null, $ending_before = null, string $contentType = self::contentTypes['getOrganizationInventoryOnboardingCloudMonitoringNetworks'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks'
            );
        }

        // verify the required parameter 'device_type' is set
        if ($device_type === null || (is_array($device_type) && count($device_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $device_type when calling getOrganizationInventoryOnboardingCloudMonitoringNetworks'
            );
        }






        $resourcePath = '/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/networks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $device_type,
            'deviceType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'perPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starting_after,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ending_before,
            'endingBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation releaseFromOrganizationInventory
     *
     * Release a list of claimed devices from an organization.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\ReleaseFromOrganizationInventoryRequest|null $release_from_organization_inventory_request release_from_organization_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseFromOrganizationInventory'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\ReleaseFromOrganizationInventory200Response
     */
    public function releaseFromOrganizationInventory($organization_id, $release_from_organization_inventory_request = null, string $contentType = self::contentTypes['releaseFromOrganizationInventory'][0])
    {
        list($response) = $this->releaseFromOrganizationInventoryWithHttpInfo($organization_id, $release_from_organization_inventory_request, $contentType);
        return $response;
    }

    /**
     * Operation releaseFromOrganizationInventoryWithHttpInfo
     *
     * Release a list of claimed devices from an organization.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\ReleaseFromOrganizationInventoryRequest|null $release_from_organization_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseFromOrganizationInventory'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\ReleaseFromOrganizationInventory200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function releaseFromOrganizationInventoryWithHttpInfo($organization_id, $release_from_organization_inventory_request = null, string $contentType = self::contentTypes['releaseFromOrganizationInventory'][0])
    {
        $request = $this->releaseFromOrganizationInventoryRequest($organization_id, $release_from_organization_inventory_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\ReleaseFromOrganizationInventory200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\ReleaseFromOrganizationInventory200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\ReleaseFromOrganizationInventory200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\ReleaseFromOrganizationInventory200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\ReleaseFromOrganizationInventory200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation releaseFromOrganizationInventoryAsync
     *
     * Release a list of claimed devices from an organization.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\ReleaseFromOrganizationInventoryRequest|null $release_from_organization_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseFromOrganizationInventory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function releaseFromOrganizationInventoryAsync($organization_id, $release_from_organization_inventory_request = null, string $contentType = self::contentTypes['releaseFromOrganizationInventory'][0])
    {
        return $this->releaseFromOrganizationInventoryAsyncWithHttpInfo($organization_id, $release_from_organization_inventory_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation releaseFromOrganizationInventoryAsyncWithHttpInfo
     *
     * Release a list of claimed devices from an organization.
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\ReleaseFromOrganizationInventoryRequest|null $release_from_organization_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseFromOrganizationInventory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function releaseFromOrganizationInventoryAsyncWithHttpInfo($organization_id, $release_from_organization_inventory_request = null, string $contentType = self::contentTypes['releaseFromOrganizationInventory'][0])
    {
        $returnType = '\Meraki\Model\ReleaseFromOrganizationInventory200Response';
        $request = $this->releaseFromOrganizationInventoryRequest($organization_id, $release_from_organization_inventory_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'releaseFromOrganizationInventory'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\ReleaseFromOrganizationInventoryRequest|null $release_from_organization_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseFromOrganizationInventory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function releaseFromOrganizationInventoryRequest($organization_id, $release_from_organization_inventory_request = null, string $contentType = self::contentTypes['releaseFromOrganizationInventory'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling releaseFromOrganizationInventory'
            );
        }



        $resourcePath = '/organizations/{organizationId}/inventory/release';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($release_from_organization_inventory_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($release_from_organization_inventory_request));
            } else {
                $httpBody = $release_from_organization_inventory_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrganizationCellularGatewayEsimsInventory
     *
     * Toggle the status of an eSIM
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $id ID (required)
     * @param  \Meraki\Model\UpdateOrganizationCellularGatewayEsimsInventoryRequest|null $update_organization_cellular_gateway_esims_inventory_request update_organization_cellular_gateway_esims_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200ResponseItemsInner
     */
    public function updateOrganizationCellularGatewayEsimsInventory($organization_id, $id, $update_organization_cellular_gateway_esims_inventory_request = null, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'][0])
    {
        list($response) = $this->updateOrganizationCellularGatewayEsimsInventoryWithHttpInfo($organization_id, $id, $update_organization_cellular_gateway_esims_inventory_request, $contentType);
        return $response;
    }

    /**
     * Operation updateOrganizationCellularGatewayEsimsInventoryWithHttpInfo
     *
     * Toggle the status of an eSIM
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $id ID (required)
     * @param  \Meraki\Model\UpdateOrganizationCellularGatewayEsimsInventoryRequest|null $update_organization_cellular_gateway_esims_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200ResponseItemsInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrganizationCellularGatewayEsimsInventoryWithHttpInfo($organization_id, $id, $update_organization_cellular_gateway_esims_inventory_request = null, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'][0])
    {
        $request = $this->updateOrganizationCellularGatewayEsimsInventoryRequest($organization_id, $id, $update_organization_cellular_gateway_esims_inventory_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200ResponseItemsInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200ResponseItemsInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200ResponseItemsInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200ResponseItemsInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200ResponseItemsInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrganizationCellularGatewayEsimsInventoryAsync
     *
     * Toggle the status of an eSIM
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $id ID (required)
     * @param  \Meraki\Model\UpdateOrganizationCellularGatewayEsimsInventoryRequest|null $update_organization_cellular_gateway_esims_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationCellularGatewayEsimsInventoryAsync($organization_id, $id, $update_organization_cellular_gateway_esims_inventory_request = null, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'][0])
    {
        return $this->updateOrganizationCellularGatewayEsimsInventoryAsyncWithHttpInfo($organization_id, $id, $update_organization_cellular_gateway_esims_inventory_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateOrganizationCellularGatewayEsimsInventoryAsyncWithHttpInfo
     *
     * Toggle the status of an eSIM
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $id ID (required)
     * @param  \Meraki\Model\UpdateOrganizationCellularGatewayEsimsInventoryRequest|null $update_organization_cellular_gateway_esims_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationCellularGatewayEsimsInventoryAsyncWithHttpInfo($organization_id, $id, $update_organization_cellular_gateway_esims_inventory_request = null, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationCellularGatewayEsimsInventory200ResponseItemsInner';
        $request = $this->updateOrganizationCellularGatewayEsimsInventoryRequest($organization_id, $id, $update_organization_cellular_gateway_esims_inventory_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrganizationCellularGatewayEsimsInventory'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string $id ID (required)
     * @param  \Meraki\Model\UpdateOrganizationCellularGatewayEsimsInventoryRequest|null $update_organization_cellular_gateway_esims_inventory_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateOrganizationCellularGatewayEsimsInventoryRequest($organization_id, $id, $update_organization_cellular_gateway_esims_inventory_request = null, string $contentType = self::contentTypes['updateOrganizationCellularGatewayEsimsInventory'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling updateOrganizationCellularGatewayEsimsInventory'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateOrganizationCellularGatewayEsimsInventory'
            );
        }



        $resourcePath = '/organizations/{organizationId}/cellularGateway/esims/inventory/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_organization_cellular_gateway_esims_inventory_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_organization_cellular_gateway_esims_inventory_request));
            } else {
                $httpBody = $update_organization_cellular_gateway_esims_inventory_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
