<?php
/**
 * BySwitchApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Meraki\ApiException;
use Meraki\Configuration;
use Meraki\HeaderSelector;
use Meraki\ObjectSerializer;

/**
 * BySwitchApi Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BySwitchApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getOrganizationSwitchPortsBySwitch' => [
            'application/json',
        ],
        'getOrganizationSwitchPortsStatusesBySwitch' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getOrganizationSwitchPortsBySwitch
     *
     * List the switchports in an organization by switch
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  \DateTime|null $configuration_updated_after Optional parameter to filter items to switches where the configuration has been updated after the given timestamp. (optional)
     * @param  string|null $mac Optional parameter to filter items to switches with MAC addresses that contain the search term or are an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter items to switches that have one of the provided MAC addresses. (optional)
     * @param  string|null $name Optional parameter to filter items to switches with names that contain the search term or are an exact match. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter items to switches in one of the provided networks. (optional)
     * @param  string[]|null $port_profile_ids Optional parameter to filter items to switches that contain switchports belonging to one of the specified port profiles. (optional)
     * @param  string|null $serial Optional parameter to filter items to switches with serial number that contains the search term or are an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter items to switches that have one of the provided serials. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationSwitchPortsBySwitch'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationSwitchPortsBySwitch200Response
     */
    public function getOrganizationSwitchPortsBySwitch($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $configuration_updated_after = null, $mac = null, $macs = null, $name = null, $network_ids = null, $port_profile_ids = null, $serial = null, $serials = null, string $contentType = self::contentTypes['getOrganizationSwitchPortsBySwitch'][0])
    {
        list($response) = $this->getOrganizationSwitchPortsBySwitchWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $configuration_updated_after, $mac, $macs, $name, $network_ids, $port_profile_ids, $serial, $serials, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationSwitchPortsBySwitchWithHttpInfo
     *
     * List the switchports in an organization by switch
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  \DateTime|null $configuration_updated_after Optional parameter to filter items to switches where the configuration has been updated after the given timestamp. (optional)
     * @param  string|null $mac Optional parameter to filter items to switches with MAC addresses that contain the search term or are an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter items to switches that have one of the provided MAC addresses. (optional)
     * @param  string|null $name Optional parameter to filter items to switches with names that contain the search term or are an exact match. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter items to switches in one of the provided networks. (optional)
     * @param  string[]|null $port_profile_ids Optional parameter to filter items to switches that contain switchports belonging to one of the specified port profiles. (optional)
     * @param  string|null $serial Optional parameter to filter items to switches with serial number that contains the search term or are an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter items to switches that have one of the provided serials. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationSwitchPortsBySwitch'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationSwitchPortsBySwitch200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationSwitchPortsBySwitchWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $configuration_updated_after = null, $mac = null, $macs = null, $name = null, $network_ids = null, $port_profile_ids = null, $serial = null, $serials = null, string $contentType = self::contentTypes['getOrganizationSwitchPortsBySwitch'][0])
    {
        $request = $this->getOrganizationSwitchPortsBySwitchRequest($organization_id, $per_page, $starting_after, $ending_before, $configuration_updated_after, $mac, $macs, $name, $network_ids, $port_profile_ids, $serial, $serials, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationSwitchPortsBySwitch200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationSwitchPortsBySwitch200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationSwitchPortsBySwitch200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationSwitchPortsBySwitch200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationSwitchPortsBySwitch200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationSwitchPortsBySwitchAsync
     *
     * List the switchports in an organization by switch
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  \DateTime|null $configuration_updated_after Optional parameter to filter items to switches where the configuration has been updated after the given timestamp. (optional)
     * @param  string|null $mac Optional parameter to filter items to switches with MAC addresses that contain the search term or are an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter items to switches that have one of the provided MAC addresses. (optional)
     * @param  string|null $name Optional parameter to filter items to switches with names that contain the search term or are an exact match. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter items to switches in one of the provided networks. (optional)
     * @param  string[]|null $port_profile_ids Optional parameter to filter items to switches that contain switchports belonging to one of the specified port profiles. (optional)
     * @param  string|null $serial Optional parameter to filter items to switches with serial number that contains the search term or are an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter items to switches that have one of the provided serials. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationSwitchPortsBySwitch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationSwitchPortsBySwitchAsync($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $configuration_updated_after = null, $mac = null, $macs = null, $name = null, $network_ids = null, $port_profile_ids = null, $serial = null, $serials = null, string $contentType = self::contentTypes['getOrganizationSwitchPortsBySwitch'][0])
    {
        return $this->getOrganizationSwitchPortsBySwitchAsyncWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $configuration_updated_after, $mac, $macs, $name, $network_ids, $port_profile_ids, $serial, $serials, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationSwitchPortsBySwitchAsyncWithHttpInfo
     *
     * List the switchports in an organization by switch
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  \DateTime|null $configuration_updated_after Optional parameter to filter items to switches where the configuration has been updated after the given timestamp. (optional)
     * @param  string|null $mac Optional parameter to filter items to switches with MAC addresses that contain the search term or are an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter items to switches that have one of the provided MAC addresses. (optional)
     * @param  string|null $name Optional parameter to filter items to switches with names that contain the search term or are an exact match. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter items to switches in one of the provided networks. (optional)
     * @param  string[]|null $port_profile_ids Optional parameter to filter items to switches that contain switchports belonging to one of the specified port profiles. (optional)
     * @param  string|null $serial Optional parameter to filter items to switches with serial number that contains the search term or are an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter items to switches that have one of the provided serials. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationSwitchPortsBySwitch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationSwitchPortsBySwitchAsyncWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $configuration_updated_after = null, $mac = null, $macs = null, $name = null, $network_ids = null, $port_profile_ids = null, $serial = null, $serials = null, string $contentType = self::contentTypes['getOrganizationSwitchPortsBySwitch'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationSwitchPortsBySwitch200Response';
        $request = $this->getOrganizationSwitchPortsBySwitchRequest($organization_id, $per_page, $starting_after, $ending_before, $configuration_updated_after, $mac, $macs, $name, $network_ids, $port_profile_ids, $serial, $serials, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationSwitchPortsBySwitch'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 50. Default is 50. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  \DateTime|null $configuration_updated_after Optional parameter to filter items to switches where the configuration has been updated after the given timestamp. (optional)
     * @param  string|null $mac Optional parameter to filter items to switches with MAC addresses that contain the search term or are an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter items to switches that have one of the provided MAC addresses. (optional)
     * @param  string|null $name Optional parameter to filter items to switches with names that contain the search term or are an exact match. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter items to switches in one of the provided networks. (optional)
     * @param  string[]|null $port_profile_ids Optional parameter to filter items to switches that contain switchports belonging to one of the specified port profiles. (optional)
     * @param  string|null $serial Optional parameter to filter items to switches with serial number that contains the search term or are an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter items to switches that have one of the provided serials. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationSwitchPortsBySwitch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationSwitchPortsBySwitchRequest($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $configuration_updated_after = null, $mac = null, $macs = null, $name = null, $network_ids = null, $port_profile_ids = null, $serial = null, $serials = null, string $contentType = self::contentTypes['getOrganizationSwitchPortsBySwitch'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationSwitchPortsBySwitch'
            );
        }













        $resourcePath = '/organizations/{organizationId}/switch/ports/bySwitch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'perPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starting_after,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ending_before,
            'endingBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $configuration_updated_after,
            'configurationUpdatedAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mac,
            'mac', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $macs,
            'macs', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network_ids,
            'networkIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $port_profile_ids,
            'portProfileIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serial,
            'serial', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serials,
            'serials', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationSwitchPortsStatusesBySwitch
     *
     * List the switchports in an organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 20. Default is 10. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  \DateTime|null $configuration_updated_after Optional parameter to filter items to switches where the configuration has been updated after the given timestamp. (optional)
     * @param  string|null $mac Optional parameter to filter items to switches with MAC addresses that contain the search term or are an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter items to switches that have one of the provided MAC addresses. (optional)
     * @param  string|null $name Optional parameter to filter items to switches with names that contain the search term or are an exact match. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter items to switches in one of the provided networks. (optional)
     * @param  string[]|null $port_profile_ids Optional parameter to filter items to switches that contain switchports belonging to one of the specified port profiles. (optional)
     * @param  string|null $serial Optional parameter to filter items to switches with serial number that contains the search term or are an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter items to switches that have one of the provided serials. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationSwitchPortsStatusesBySwitch'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationSwitchPortsStatusesBySwitch200Response
     */
    public function getOrganizationSwitchPortsStatusesBySwitch($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $configuration_updated_after = null, $mac = null, $macs = null, $name = null, $network_ids = null, $port_profile_ids = null, $serial = null, $serials = null, string $contentType = self::contentTypes['getOrganizationSwitchPortsStatusesBySwitch'][0])
    {
        list($response) = $this->getOrganizationSwitchPortsStatusesBySwitchWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $configuration_updated_after, $mac, $macs, $name, $network_ids, $port_profile_ids, $serial, $serials, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationSwitchPortsStatusesBySwitchWithHttpInfo
     *
     * List the switchports in an organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 20. Default is 10. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  \DateTime|null $configuration_updated_after Optional parameter to filter items to switches where the configuration has been updated after the given timestamp. (optional)
     * @param  string|null $mac Optional parameter to filter items to switches with MAC addresses that contain the search term or are an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter items to switches that have one of the provided MAC addresses. (optional)
     * @param  string|null $name Optional parameter to filter items to switches with names that contain the search term or are an exact match. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter items to switches in one of the provided networks. (optional)
     * @param  string[]|null $port_profile_ids Optional parameter to filter items to switches that contain switchports belonging to one of the specified port profiles. (optional)
     * @param  string|null $serial Optional parameter to filter items to switches with serial number that contains the search term or are an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter items to switches that have one of the provided serials. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationSwitchPortsStatusesBySwitch'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationSwitchPortsStatusesBySwitch200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationSwitchPortsStatusesBySwitchWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $configuration_updated_after = null, $mac = null, $macs = null, $name = null, $network_ids = null, $port_profile_ids = null, $serial = null, $serials = null, string $contentType = self::contentTypes['getOrganizationSwitchPortsStatusesBySwitch'][0])
    {
        $request = $this->getOrganizationSwitchPortsStatusesBySwitchRequest($organization_id, $per_page, $starting_after, $ending_before, $configuration_updated_after, $mac, $macs, $name, $network_ids, $port_profile_ids, $serial, $serials, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationSwitchPortsStatusesBySwitch200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationSwitchPortsStatusesBySwitch200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationSwitchPortsStatusesBySwitch200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationSwitchPortsStatusesBySwitch200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationSwitchPortsStatusesBySwitch200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationSwitchPortsStatusesBySwitchAsync
     *
     * List the switchports in an organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 20. Default is 10. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  \DateTime|null $configuration_updated_after Optional parameter to filter items to switches where the configuration has been updated after the given timestamp. (optional)
     * @param  string|null $mac Optional parameter to filter items to switches with MAC addresses that contain the search term or are an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter items to switches that have one of the provided MAC addresses. (optional)
     * @param  string|null $name Optional parameter to filter items to switches with names that contain the search term or are an exact match. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter items to switches in one of the provided networks. (optional)
     * @param  string[]|null $port_profile_ids Optional parameter to filter items to switches that contain switchports belonging to one of the specified port profiles. (optional)
     * @param  string|null $serial Optional parameter to filter items to switches with serial number that contains the search term or are an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter items to switches that have one of the provided serials. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationSwitchPortsStatusesBySwitch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationSwitchPortsStatusesBySwitchAsync($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $configuration_updated_after = null, $mac = null, $macs = null, $name = null, $network_ids = null, $port_profile_ids = null, $serial = null, $serials = null, string $contentType = self::contentTypes['getOrganizationSwitchPortsStatusesBySwitch'][0])
    {
        return $this->getOrganizationSwitchPortsStatusesBySwitchAsyncWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $configuration_updated_after, $mac, $macs, $name, $network_ids, $port_profile_ids, $serial, $serials, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationSwitchPortsStatusesBySwitchAsyncWithHttpInfo
     *
     * List the switchports in an organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 20. Default is 10. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  \DateTime|null $configuration_updated_after Optional parameter to filter items to switches where the configuration has been updated after the given timestamp. (optional)
     * @param  string|null $mac Optional parameter to filter items to switches with MAC addresses that contain the search term or are an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter items to switches that have one of the provided MAC addresses. (optional)
     * @param  string|null $name Optional parameter to filter items to switches with names that contain the search term or are an exact match. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter items to switches in one of the provided networks. (optional)
     * @param  string[]|null $port_profile_ids Optional parameter to filter items to switches that contain switchports belonging to one of the specified port profiles. (optional)
     * @param  string|null $serial Optional parameter to filter items to switches with serial number that contains the search term or are an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter items to switches that have one of the provided serials. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationSwitchPortsStatusesBySwitch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationSwitchPortsStatusesBySwitchAsyncWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $configuration_updated_after = null, $mac = null, $macs = null, $name = null, $network_ids = null, $port_profile_ids = null, $serial = null, $serials = null, string $contentType = self::contentTypes['getOrganizationSwitchPortsStatusesBySwitch'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationSwitchPortsStatusesBySwitch200Response';
        $request = $this->getOrganizationSwitchPortsStatusesBySwitchRequest($organization_id, $per_page, $starting_after, $ending_before, $configuration_updated_after, $mac, $macs, $name, $network_ids, $port_profile_ids, $serial, $serials, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationSwitchPortsStatusesBySwitch'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 20. Default is 10. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  \DateTime|null $configuration_updated_after Optional parameter to filter items to switches where the configuration has been updated after the given timestamp. (optional)
     * @param  string|null $mac Optional parameter to filter items to switches with MAC addresses that contain the search term or are an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter items to switches that have one of the provided MAC addresses. (optional)
     * @param  string|null $name Optional parameter to filter items to switches with names that contain the search term or are an exact match. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter items to switches in one of the provided networks. (optional)
     * @param  string[]|null $port_profile_ids Optional parameter to filter items to switches that contain switchports belonging to one of the specified port profiles. (optional)
     * @param  string|null $serial Optional parameter to filter items to switches with serial number that contains the search term or are an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter items to switches that have one of the provided serials. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationSwitchPortsStatusesBySwitch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationSwitchPortsStatusesBySwitchRequest($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $configuration_updated_after = null, $mac = null, $macs = null, $name = null, $network_ids = null, $port_profile_ids = null, $serial = null, $serials = null, string $contentType = self::contentTypes['getOrganizationSwitchPortsStatusesBySwitch'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationSwitchPortsStatusesBySwitch'
            );
        }













        $resourcePath = '/organizations/{organizationId}/switch/ports/statuses/bySwitch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'perPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starting_after,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ending_before,
            'endingBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $configuration_updated_after,
            'configurationUpdatedAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mac,
            'mac', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $macs,
            'macs', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network_ids,
            'networkIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $port_profile_ids,
            'portProfileIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serial,
            'serial', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serials,
            'serials', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
