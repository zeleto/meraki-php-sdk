<?php
/**
 * AssignmentsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Meraki\ApiException;
use Meraki\Configuration;
use Meraki\HeaderSelector;
use Meraki\ObjectSerializer;

/**
 * AssignmentsApi Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AssignmentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate' => [
            'application/json',
        ],
        'createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete' => [
            'application/json',
        ],
        'createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate' => [
            'application/json',
        ],
        'createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete' => [
            'application/json',
        ],
        'getNetworkVlanProfilesAssignmentsByDevice' => [
            'application/json',
        ],
        'getOrganizationApplianceDnsLocalProfilesAssignments' => [
            'application/json',
        ],
        'getOrganizationApplianceDnsSplitProfilesAssignments' => [
            'application/json',
        ],
        'getOrganizationSmSentryPoliciesAssignmentsByNetwork' => [
            'application/json',
        ],
        'getOrganizationWirelessRfProfilesAssignmentsByDevice' => [
            'application/json',
        ],
        'reassignNetworkVlanProfilesAssignments' => [
            'application/json',
        ],
        'updateOrganizationSmSentryPoliciesAssignments' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate
     *
     * Assign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response
     */
    public function bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'][0])
    {
        list($response) = $this->bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType);
        return $response;
    }

    /**
     * Operation bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateWithHttpInfo
     *
     * Assign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'][0])
    {
        $request = $this->bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateAsync
     *
     * Assign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateAsync($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'][0])
    {
        return $this->bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateAsyncWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateAsyncWithHttpInfo
     *
     * Assign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateAsyncWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'][0])
    {
        $returnType = '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response';
        $request = $this->bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'
            );
        }

        // verify the required parameter 'bulk_organization_appliance_dns_local_profiles_assignments_create_request' is set
        if ($bulk_organization_appliance_dns_local_profiles_assignments_create_request === null || (is_array($bulk_organization_appliance_dns_local_profiles_assignments_create_request) && count($bulk_organization_appliance_dns_local_profiles_assignments_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_organization_appliance_dns_local_profiles_assignments_create_request when calling bulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/profiles/assignments/bulkCreate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulk_organization_appliance_dns_local_profiles_assignments_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulk_organization_appliance_dns_local_profiles_assignments_create_request));
            } else {
                $httpBody = $bulk_organization_appliance_dns_local_profiles_assignments_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete
     *
     * Unassign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response
     */
    public function createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'][0])
    {
        list($response) = $this->createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteWithHttpInfo
     *
     * Unassign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'][0])
    {
        $request = $this->createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteAsync
     *
     * Unassign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteAsync($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'][0])
    {
        return $this->createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteAsyncWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteAsyncWithHttpInfo
     *
     * Unassign the local DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteAsyncWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'][0])
    {
        $returnType = '\Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreate200Response';
        $request = $this->createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'
            );
        }

        // verify the required parameter 'create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request' is set
        if ($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request === null || (is_array($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request) && count($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request when calling createOrganizationApplianceDnsLocalProfilesAssignmentsBulkDelete'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/profiles/assignments/bulkDelete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request));
            } else {
                $httpBody = $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate
     *
     * Assign the split DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'][0])
    {
        list($response) = $this->createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateWithHttpInfo
     *
     * Assign the split DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'][0])
    {
        $request = $this->createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateRequest($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateAsync
     *
     * Assign the split DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateAsync($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'][0])
    {
        return $this->createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateAsyncWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateAsyncWithHttpInfo
     *
     * Assign the split DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateAsyncWithHttpInfo($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'][0])
    {
        $returnType = '\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response';
        $request = $this->createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateRequest($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\BulkOrganizationApplianceDnsLocalProfilesAssignmentsCreateRequest $bulk_organization_appliance_dns_local_profiles_assignments_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreateRequest($organization_id, $bulk_organization_appliance_dns_local_profiles_assignments_create_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'
            );
        }

        // verify the required parameter 'bulk_organization_appliance_dns_local_profiles_assignments_create_request' is set
        if ($bulk_organization_appliance_dns_local_profiles_assignments_create_request === null || (is_array($bulk_organization_appliance_dns_local_profiles_assignments_create_request) && count($bulk_organization_appliance_dns_local_profiles_assignments_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_organization_appliance_dns_local_profiles_assignments_create_request when calling createOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/split/profiles/assignments/bulkCreate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulk_organization_appliance_dns_local_profiles_assignments_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulk_organization_appliance_dns_local_profiles_assignments_create_request));
            } else {
                $httpBody = $bulk_organization_appliance_dns_local_profiles_assignments_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete
     *
     * Unassign the split DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'][0])
    {
        list($response) = $this->createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType);
        return $response;
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteWithHttpInfo
     *
     * Unassign the split DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'][0])
    {
        $request = $this->createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteRequest($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteAsync
     *
     * Unassign the split DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteAsync($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'][0])
    {
        return $this->createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteAsyncWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteAsyncWithHttpInfo
     *
     * Unassign the split DNS profile to networks in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteAsyncWithHttpInfo($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'][0])
    {
        $returnType = '\Meraki\Model\CreateOrganizationApplianceDnsSplitProfilesAssignmentsBulkCreate200Response';
        $request = $this->createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteRequest($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\CreateOrganizationApplianceDnsLocalProfilesAssignmentsBulkDeleteRequest $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDeleteRequest($organization_id, $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request, string $contentType = self::contentTypes['createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'
            );
        }

        // verify the required parameter 'create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request' is set
        if ($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request === null || (is_array($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request) && count($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request when calling createOrganizationApplianceDnsSplitProfilesAssignmentsBulkDelete'
            );
        }


        $resourcePath = '/organizations/{organizationId}/appliance/dns/split/profiles/assignments/bulkDelete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request));
            } else {
                $httpBody = $create_organization_appliance_dns_local_profiles_assignments_bulk_delete_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNetworkVlanProfilesAssignmentsByDevice
     *
     * Get the assigned VLAN Profiles for devices in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $serials Optional parameter to filter devices by serials. All devices returned belong to serial numbers that are an exact match. (optional)
     * @param  string[]|null $product_types Optional parameter to filter devices by product types. (optional)
     * @param  string[]|null $stack_ids Optional parameter to filter devices by Switch Stack ids. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkVlanProfilesAssignmentsByDevice'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetNetworkVlanProfilesAssignmentsByDevice200ResponseInner[]
     */
    public function getNetworkVlanProfilesAssignmentsByDevice($network_id, $per_page = null, $starting_after = null, $ending_before = null, $serials = null, $product_types = null, $stack_ids = null, string $contentType = self::contentTypes['getNetworkVlanProfilesAssignmentsByDevice'][0])
    {
        list($response) = $this->getNetworkVlanProfilesAssignmentsByDeviceWithHttpInfo($network_id, $per_page, $starting_after, $ending_before, $serials, $product_types, $stack_ids, $contentType);
        return $response;
    }

    /**
     * Operation getNetworkVlanProfilesAssignmentsByDeviceWithHttpInfo
     *
     * Get the assigned VLAN Profiles for devices in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $serials Optional parameter to filter devices by serials. All devices returned belong to serial numbers that are an exact match. (optional)
     * @param  string[]|null $product_types Optional parameter to filter devices by product types. (optional)
     * @param  string[]|null $stack_ids Optional parameter to filter devices by Switch Stack ids. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkVlanProfilesAssignmentsByDevice'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetNetworkVlanProfilesAssignmentsByDevice200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getNetworkVlanProfilesAssignmentsByDeviceWithHttpInfo($network_id, $per_page = null, $starting_after = null, $ending_before = null, $serials = null, $product_types = null, $stack_ids = null, string $contentType = self::contentTypes['getNetworkVlanProfilesAssignmentsByDevice'][0])
    {
        $request = $this->getNetworkVlanProfilesAssignmentsByDeviceRequest($network_id, $per_page, $starting_after, $ending_before, $serials, $product_types, $stack_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetNetworkVlanProfilesAssignmentsByDevice200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetNetworkVlanProfilesAssignmentsByDevice200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetNetworkVlanProfilesAssignmentsByDevice200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetNetworkVlanProfilesAssignmentsByDevice200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetNetworkVlanProfilesAssignmentsByDevice200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNetworkVlanProfilesAssignmentsByDeviceAsync
     *
     * Get the assigned VLAN Profiles for devices in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $serials Optional parameter to filter devices by serials. All devices returned belong to serial numbers that are an exact match. (optional)
     * @param  string[]|null $product_types Optional parameter to filter devices by product types. (optional)
     * @param  string[]|null $stack_ids Optional parameter to filter devices by Switch Stack ids. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkVlanProfilesAssignmentsByDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkVlanProfilesAssignmentsByDeviceAsync($network_id, $per_page = null, $starting_after = null, $ending_before = null, $serials = null, $product_types = null, $stack_ids = null, string $contentType = self::contentTypes['getNetworkVlanProfilesAssignmentsByDevice'][0])
    {
        return $this->getNetworkVlanProfilesAssignmentsByDeviceAsyncWithHttpInfo($network_id, $per_page, $starting_after, $ending_before, $serials, $product_types, $stack_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNetworkVlanProfilesAssignmentsByDeviceAsyncWithHttpInfo
     *
     * Get the assigned VLAN Profiles for devices in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $serials Optional parameter to filter devices by serials. All devices returned belong to serial numbers that are an exact match. (optional)
     * @param  string[]|null $product_types Optional parameter to filter devices by product types. (optional)
     * @param  string[]|null $stack_ids Optional parameter to filter devices by Switch Stack ids. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkVlanProfilesAssignmentsByDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNetworkVlanProfilesAssignmentsByDeviceAsyncWithHttpInfo($network_id, $per_page = null, $starting_after = null, $ending_before = null, $serials = null, $product_types = null, $stack_ids = null, string $contentType = self::contentTypes['getNetworkVlanProfilesAssignmentsByDevice'][0])
    {
        $returnType = '\Meraki\Model\GetNetworkVlanProfilesAssignmentsByDevice200ResponseInner[]';
        $request = $this->getNetworkVlanProfilesAssignmentsByDeviceRequest($network_id, $per_page, $starting_after, $ending_before, $serials, $product_types, $stack_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNetworkVlanProfilesAssignmentsByDevice'
     *
     * @param  string $network_id Network ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $serials Optional parameter to filter devices by serials. All devices returned belong to serial numbers that are an exact match. (optional)
     * @param  string[]|null $product_types Optional parameter to filter devices by product types. (optional)
     * @param  string[]|null $stack_ids Optional parameter to filter devices by Switch Stack ids. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNetworkVlanProfilesAssignmentsByDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNetworkVlanProfilesAssignmentsByDeviceRequest($network_id, $per_page = null, $starting_after = null, $ending_before = null, $serials = null, $product_types = null, $stack_ids = null, string $contentType = self::contentTypes['getNetworkVlanProfilesAssignmentsByDevice'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling getNetworkVlanProfilesAssignmentsByDevice'
            );
        }








        $resourcePath = '/networks/{networkId}/vlanProfiles/assignments/byDevice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'perPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starting_after,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ending_before,
            'endingBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serials,
            'serials', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_types,
            'productTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stack_ids,
            'stackIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfilesAssignments
     *
     * Fetch the local DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response
     */
    public function getOrganizationApplianceDnsLocalProfilesAssignments($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'][0])
    {
        list($response) = $this->getOrganizationApplianceDnsLocalProfilesAssignmentsWithHttpInfo($organization_id, $profile_ids, $network_ids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfilesAssignmentsWithHttpInfo
     *
     * Fetch the local DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationApplianceDnsLocalProfilesAssignmentsWithHttpInfo($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'][0])
    {
        $request = $this->getOrganizationApplianceDnsLocalProfilesAssignmentsRequest($organization_id, $profile_ids, $network_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfilesAssignmentsAsync
     *
     * Fetch the local DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationApplianceDnsLocalProfilesAssignmentsAsync($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'][0])
    {
        return $this->getOrganizationApplianceDnsLocalProfilesAssignmentsAsyncWithHttpInfo($organization_id, $profile_ids, $network_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationApplianceDnsLocalProfilesAssignmentsAsyncWithHttpInfo
     *
     * Fetch the local DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationApplianceDnsLocalProfilesAssignmentsAsyncWithHttpInfo($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationApplianceDnsLocalProfilesAssignments200Response';
        $request = $this->getOrganizationApplianceDnsLocalProfilesAssignmentsRequest($organization_id, $profile_ids, $network_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationApplianceDnsLocalProfilesAssignments'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationApplianceDnsLocalProfilesAssignmentsRequest($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsLocalProfilesAssignments'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationApplianceDnsLocalProfilesAssignments'
            );
        }




        $resourcePath = '/organizations/{organizationId}/appliance/dns/local/profiles/assignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $profile_ids,
            'profileIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network_ids,
            'networkIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationApplianceDnsSplitProfilesAssignments
     *
     * Fetch the split DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationApplianceDnsSplitProfilesAssignments200Response
     */
    public function getOrganizationApplianceDnsSplitProfilesAssignments($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'][0])
    {
        list($response) = $this->getOrganizationApplianceDnsSplitProfilesAssignmentsWithHttpInfo($organization_id, $profile_ids, $network_ids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationApplianceDnsSplitProfilesAssignmentsWithHttpInfo
     *
     * Fetch the split DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationApplianceDnsSplitProfilesAssignments200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationApplianceDnsSplitProfilesAssignmentsWithHttpInfo($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'][0])
    {
        $request = $this->getOrganizationApplianceDnsSplitProfilesAssignmentsRequest($organization_id, $profile_ids, $network_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationApplianceDnsSplitProfilesAssignments200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationApplianceDnsSplitProfilesAssignments200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationApplianceDnsSplitProfilesAssignments200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationApplianceDnsSplitProfilesAssignments200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationApplianceDnsSplitProfilesAssignments200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationApplianceDnsSplitProfilesAssignmentsAsync
     *
     * Fetch the split DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationApplianceDnsSplitProfilesAssignmentsAsync($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'][0])
    {
        return $this->getOrganizationApplianceDnsSplitProfilesAssignmentsAsyncWithHttpInfo($organization_id, $profile_ids, $network_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationApplianceDnsSplitProfilesAssignmentsAsyncWithHttpInfo
     *
     * Fetch the split DNS profile assignments in the organization
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationApplianceDnsSplitProfilesAssignmentsAsyncWithHttpInfo($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationApplianceDnsSplitProfilesAssignments200Response';
        $request = $this->getOrganizationApplianceDnsSplitProfilesAssignmentsRequest($organization_id, $profile_ids, $network_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationApplianceDnsSplitProfilesAssignments'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  string[]|null $profile_ids Optional parameter to filter the results by profile IDs (optional)
     * @param  string[]|null $network_ids Optional parameter to filter the results by network IDs (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationApplianceDnsSplitProfilesAssignmentsRequest($organization_id, $profile_ids = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationApplianceDnsSplitProfilesAssignments'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationApplianceDnsSplitProfilesAssignments'
            );
        }




        $resourcePath = '/organizations/{organizationId}/appliance/dns/split/profiles/assignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $profile_ids,
            'profileIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network_ids,
            'networkIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationSmSentryPoliciesAssignmentsByNetwork
     *
     * List the Sentry Policies for an organization ordered in ascending order of priority
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter Sentry Policies by Network Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationSmSentryPoliciesAssignmentsByNetwork'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationSmSentryPoliciesAssignmentsByNetwork200ResponseInner[]
     */
    public function getOrganizationSmSentryPoliciesAssignmentsByNetwork($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationSmSentryPoliciesAssignmentsByNetwork'][0])
    {
        list($response) = $this->getOrganizationSmSentryPoliciesAssignmentsByNetworkWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationSmSentryPoliciesAssignmentsByNetworkWithHttpInfo
     *
     * List the Sentry Policies for an organization ordered in ascending order of priority
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter Sentry Policies by Network Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationSmSentryPoliciesAssignmentsByNetwork'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationSmSentryPoliciesAssignmentsByNetwork200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationSmSentryPoliciesAssignmentsByNetworkWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationSmSentryPoliciesAssignmentsByNetwork'][0])
    {
        $request = $this->getOrganizationSmSentryPoliciesAssignmentsByNetworkRequest($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationSmSentryPoliciesAssignmentsByNetwork200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationSmSentryPoliciesAssignmentsByNetwork200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationSmSentryPoliciesAssignmentsByNetwork200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationSmSentryPoliciesAssignmentsByNetwork200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationSmSentryPoliciesAssignmentsByNetwork200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationSmSentryPoliciesAssignmentsByNetworkAsync
     *
     * List the Sentry Policies for an organization ordered in ascending order of priority
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter Sentry Policies by Network Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationSmSentryPoliciesAssignmentsByNetwork'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationSmSentryPoliciesAssignmentsByNetworkAsync($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationSmSentryPoliciesAssignmentsByNetwork'][0])
    {
        return $this->getOrganizationSmSentryPoliciesAssignmentsByNetworkAsyncWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationSmSentryPoliciesAssignmentsByNetworkAsyncWithHttpInfo
     *
     * List the Sentry Policies for an organization ordered in ascending order of priority
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter Sentry Policies by Network Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationSmSentryPoliciesAssignmentsByNetwork'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationSmSentryPoliciesAssignmentsByNetworkAsyncWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationSmSentryPoliciesAssignmentsByNetwork'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationSmSentryPoliciesAssignmentsByNetwork200ResponseInner[]';
        $request = $this->getOrganizationSmSentryPoliciesAssignmentsByNetworkRequest($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationSmSentryPoliciesAssignmentsByNetwork'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter Sentry Policies by Network Id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationSmSentryPoliciesAssignmentsByNetwork'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationSmSentryPoliciesAssignmentsByNetworkRequest($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, string $contentType = self::contentTypes['getOrganizationSmSentryPoliciesAssignmentsByNetwork'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationSmSentryPoliciesAssignmentsByNetwork'
            );
        }






        $resourcePath = '/organizations/{organizationId}/sm/sentry/policies/assignments/byNetwork';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'perPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starting_after,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ending_before,
            'endingBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network_ids,
            'networkIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationWirelessRfProfilesAssignmentsByDevice
     *
     * List the RF profiles of an organization by device
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter devices by network. (optional)
     * @param  string[]|null $product_types Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, sensor, wirelessController, and secureConnect. (optional)
     * @param  string|null $name Optional parameter to filter RF profiles by device name. All returned devices will have a name that contains the search term or is an exact match. (optional)
     * @param  string|null $mac Optional parameter to filter RF profiles by device MAC address. All returned devices will have a MAC address that contains the search term or is an exact match. (optional)
     * @param  string|null $serial Optional parameter to filter RF profiles by device serial number. All returned devices will have a serial number that contains the search term or is an exact match. (optional)
     * @param  string|null $model Optional parameter to filter RF profiles by device model. All returned devices will have a model that contains the search term or is an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter RF profiles by one or more device MAC addresses. All returned devices will have a MAC address that is an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter RF profiles by one or more device serial numbers. All returned devices will have a serial number that is an exact match. (optional)
     * @param  string[]|null $models Optional parameter to filter RF profiles by one or more device models. All returned devices will have a model that is an exact match. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\GetOrganizationWirelessRfProfilesAssignmentsByDevice200ResponseInner[]
     */
    public function getOrganizationWirelessRfProfilesAssignmentsByDevice($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $product_types = null, $name = null, $mac = null, $serial = null, $model = null, $macs = null, $serials = null, $models = null, string $contentType = self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'][0])
    {
        list($response) = $this->getOrganizationWirelessRfProfilesAssignmentsByDeviceWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $product_types, $name, $mac, $serial, $model, $macs, $serials, $models, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationWirelessRfProfilesAssignmentsByDeviceWithHttpInfo
     *
     * List the RF profiles of an organization by device
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter devices by network. (optional)
     * @param  string[]|null $product_types Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, sensor, wirelessController, and secureConnect. (optional)
     * @param  string|null $name Optional parameter to filter RF profiles by device name. All returned devices will have a name that contains the search term or is an exact match. (optional)
     * @param  string|null $mac Optional parameter to filter RF profiles by device MAC address. All returned devices will have a MAC address that contains the search term or is an exact match. (optional)
     * @param  string|null $serial Optional parameter to filter RF profiles by device serial number. All returned devices will have a serial number that contains the search term or is an exact match. (optional)
     * @param  string|null $model Optional parameter to filter RF profiles by device model. All returned devices will have a model that contains the search term or is an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter RF profiles by one or more device MAC addresses. All returned devices will have a MAC address that is an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter RF profiles by one or more device serial numbers. All returned devices will have a serial number that is an exact match. (optional)
     * @param  string[]|null $models Optional parameter to filter RF profiles by one or more device models. All returned devices will have a model that is an exact match. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\GetOrganizationWirelessRfProfilesAssignmentsByDevice200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationWirelessRfProfilesAssignmentsByDeviceWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $product_types = null, $name = null, $mac = null, $serial = null, $model = null, $macs = null, $serials = null, $models = null, string $contentType = self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'][0])
    {
        $request = $this->getOrganizationWirelessRfProfilesAssignmentsByDeviceRequest($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $product_types, $name, $mac, $serial, $model, $macs, $serials, $models, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\GetOrganizationWirelessRfProfilesAssignmentsByDevice200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\GetOrganizationWirelessRfProfilesAssignmentsByDevice200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\GetOrganizationWirelessRfProfilesAssignmentsByDevice200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\GetOrganizationWirelessRfProfilesAssignmentsByDevice200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\GetOrganizationWirelessRfProfilesAssignmentsByDevice200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationWirelessRfProfilesAssignmentsByDeviceAsync
     *
     * List the RF profiles of an organization by device
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter devices by network. (optional)
     * @param  string[]|null $product_types Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, sensor, wirelessController, and secureConnect. (optional)
     * @param  string|null $name Optional parameter to filter RF profiles by device name. All returned devices will have a name that contains the search term or is an exact match. (optional)
     * @param  string|null $mac Optional parameter to filter RF profiles by device MAC address. All returned devices will have a MAC address that contains the search term or is an exact match. (optional)
     * @param  string|null $serial Optional parameter to filter RF profiles by device serial number. All returned devices will have a serial number that contains the search term or is an exact match. (optional)
     * @param  string|null $model Optional parameter to filter RF profiles by device model. All returned devices will have a model that contains the search term or is an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter RF profiles by one or more device MAC addresses. All returned devices will have a MAC address that is an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter RF profiles by one or more device serial numbers. All returned devices will have a serial number that is an exact match. (optional)
     * @param  string[]|null $models Optional parameter to filter RF profiles by one or more device models. All returned devices will have a model that is an exact match. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationWirelessRfProfilesAssignmentsByDeviceAsync($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $product_types = null, $name = null, $mac = null, $serial = null, $model = null, $macs = null, $serials = null, $models = null, string $contentType = self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'][0])
    {
        return $this->getOrganizationWirelessRfProfilesAssignmentsByDeviceAsyncWithHttpInfo($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $product_types, $name, $mac, $serial, $model, $macs, $serials, $models, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationWirelessRfProfilesAssignmentsByDeviceAsyncWithHttpInfo
     *
     * List the RF profiles of an organization by device
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter devices by network. (optional)
     * @param  string[]|null $product_types Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, sensor, wirelessController, and secureConnect. (optional)
     * @param  string|null $name Optional parameter to filter RF profiles by device name. All returned devices will have a name that contains the search term or is an exact match. (optional)
     * @param  string|null $mac Optional parameter to filter RF profiles by device MAC address. All returned devices will have a MAC address that contains the search term or is an exact match. (optional)
     * @param  string|null $serial Optional parameter to filter RF profiles by device serial number. All returned devices will have a serial number that contains the search term or is an exact match. (optional)
     * @param  string|null $model Optional parameter to filter RF profiles by device model. All returned devices will have a model that contains the search term or is an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter RF profiles by one or more device MAC addresses. All returned devices will have a MAC address that is an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter RF profiles by one or more device serial numbers. All returned devices will have a serial number that is an exact match. (optional)
     * @param  string[]|null $models Optional parameter to filter RF profiles by one or more device models. All returned devices will have a model that is an exact match. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationWirelessRfProfilesAssignmentsByDeviceAsyncWithHttpInfo($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $product_types = null, $name = null, $mac = null, $serial = null, $model = null, $macs = null, $serials = null, $models = null, string $contentType = self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'][0])
    {
        $returnType = '\Meraki\Model\GetOrganizationWirelessRfProfilesAssignmentsByDevice200ResponseInner[]';
        $request = $this->getOrganizationWirelessRfProfilesAssignmentsByDeviceRequest($organization_id, $per_page, $starting_after, $ending_before, $network_ids, $product_types, $name, $mac, $serial, $model, $macs, $serials, $models, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationWirelessRfProfilesAssignmentsByDevice'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  int|null $per_page The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000. (optional)
     * @param  string|null $starting_after A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string|null $ending_before A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it. (optional)
     * @param  string[]|null $network_ids Optional parameter to filter devices by network. (optional)
     * @param  string[]|null $product_types Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, sensor, wirelessController, and secureConnect. (optional)
     * @param  string|null $name Optional parameter to filter RF profiles by device name. All returned devices will have a name that contains the search term or is an exact match. (optional)
     * @param  string|null $mac Optional parameter to filter RF profiles by device MAC address. All returned devices will have a MAC address that contains the search term or is an exact match. (optional)
     * @param  string|null $serial Optional parameter to filter RF profiles by device serial number. All returned devices will have a serial number that contains the search term or is an exact match. (optional)
     * @param  string|null $model Optional parameter to filter RF profiles by device model. All returned devices will have a model that contains the search term or is an exact match. (optional)
     * @param  string[]|null $macs Optional parameter to filter RF profiles by one or more device MAC addresses. All returned devices will have a MAC address that is an exact match. (optional)
     * @param  string[]|null $serials Optional parameter to filter RF profiles by one or more device serial numbers. All returned devices will have a serial number that is an exact match. (optional)
     * @param  string[]|null $models Optional parameter to filter RF profiles by one or more device models. All returned devices will have a model that is an exact match. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationWirelessRfProfilesAssignmentsByDeviceRequest($organization_id, $per_page = null, $starting_after = null, $ending_before = null, $network_ids = null, $product_types = null, $name = null, $mac = null, $serial = null, $model = null, $macs = null, $serials = null, $models = null, string $contentType = self::contentTypes['getOrganizationWirelessRfProfilesAssignmentsByDevice'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling getOrganizationWirelessRfProfilesAssignmentsByDevice'
            );
        }














        $resourcePath = '/organizations/{organizationId}/wireless/rfProfiles/assignments/byDevice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'perPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starting_after,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ending_before,
            'endingBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $network_ids,
            'networkIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_types,
            'productTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mac,
            'mac', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serial,
            'serial', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model,
            'model', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $macs,
            'macs', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serials,
            'serials', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $models,
            'models', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reassignNetworkVlanProfilesAssignments
     *
     * Update the assigned VLAN Profile for devices in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\ReassignNetworkVlanProfilesAssignmentsRequest $reassign_network_vlan_profiles_assignments_request reassign_network_vlan_profiles_assignments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reassignNetworkVlanProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\ReassignNetworkVlanProfilesAssignments200Response
     */
    public function reassignNetworkVlanProfilesAssignments($network_id, $reassign_network_vlan_profiles_assignments_request, string $contentType = self::contentTypes['reassignNetworkVlanProfilesAssignments'][0])
    {
        list($response) = $this->reassignNetworkVlanProfilesAssignmentsWithHttpInfo($network_id, $reassign_network_vlan_profiles_assignments_request, $contentType);
        return $response;
    }

    /**
     * Operation reassignNetworkVlanProfilesAssignmentsWithHttpInfo
     *
     * Update the assigned VLAN Profile for devices in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\ReassignNetworkVlanProfilesAssignmentsRequest $reassign_network_vlan_profiles_assignments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reassignNetworkVlanProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\ReassignNetworkVlanProfilesAssignments200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function reassignNetworkVlanProfilesAssignmentsWithHttpInfo($network_id, $reassign_network_vlan_profiles_assignments_request, string $contentType = self::contentTypes['reassignNetworkVlanProfilesAssignments'][0])
    {
        $request = $this->reassignNetworkVlanProfilesAssignmentsRequest($network_id, $reassign_network_vlan_profiles_assignments_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\ReassignNetworkVlanProfilesAssignments200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\ReassignNetworkVlanProfilesAssignments200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\ReassignNetworkVlanProfilesAssignments200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\ReassignNetworkVlanProfilesAssignments200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\ReassignNetworkVlanProfilesAssignments200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reassignNetworkVlanProfilesAssignmentsAsync
     *
     * Update the assigned VLAN Profile for devices in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\ReassignNetworkVlanProfilesAssignmentsRequest $reassign_network_vlan_profiles_assignments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reassignNetworkVlanProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reassignNetworkVlanProfilesAssignmentsAsync($network_id, $reassign_network_vlan_profiles_assignments_request, string $contentType = self::contentTypes['reassignNetworkVlanProfilesAssignments'][0])
    {
        return $this->reassignNetworkVlanProfilesAssignmentsAsyncWithHttpInfo($network_id, $reassign_network_vlan_profiles_assignments_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reassignNetworkVlanProfilesAssignmentsAsyncWithHttpInfo
     *
     * Update the assigned VLAN Profile for devices in a network
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\ReassignNetworkVlanProfilesAssignmentsRequest $reassign_network_vlan_profiles_assignments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reassignNetworkVlanProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reassignNetworkVlanProfilesAssignmentsAsyncWithHttpInfo($network_id, $reassign_network_vlan_profiles_assignments_request, string $contentType = self::contentTypes['reassignNetworkVlanProfilesAssignments'][0])
    {
        $returnType = '\Meraki\Model\ReassignNetworkVlanProfilesAssignments200Response';
        $request = $this->reassignNetworkVlanProfilesAssignmentsRequest($network_id, $reassign_network_vlan_profiles_assignments_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reassignNetworkVlanProfilesAssignments'
     *
     * @param  string $network_id Network ID (required)
     * @param  \Meraki\Model\ReassignNetworkVlanProfilesAssignmentsRequest $reassign_network_vlan_profiles_assignments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reassignNetworkVlanProfilesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reassignNetworkVlanProfilesAssignmentsRequest($network_id, $reassign_network_vlan_profiles_assignments_request, string $contentType = self::contentTypes['reassignNetworkVlanProfilesAssignments'][0])
    {

        // verify the required parameter 'network_id' is set
        if ($network_id === null || (is_array($network_id) && count($network_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network_id when calling reassignNetworkVlanProfilesAssignments'
            );
        }

        // verify the required parameter 'reassign_network_vlan_profiles_assignments_request' is set
        if ($reassign_network_vlan_profiles_assignments_request === null || (is_array($reassign_network_vlan_profiles_assignments_request) && count($reassign_network_vlan_profiles_assignments_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reassign_network_vlan_profiles_assignments_request when calling reassignNetworkVlanProfilesAssignments'
            );
        }


        $resourcePath = '/networks/{networkId}/vlanProfiles/assignments/reassign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($network_id !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($network_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($reassign_network_vlan_profiles_assignments_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($reassign_network_vlan_profiles_assignments_request));
            } else {
                $httpBody = $reassign_network_vlan_profiles_assignments_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrganizationSmSentryPoliciesAssignments
     *
     * Update an Organizations Sentry Policies using the provided list
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\UpdateOrganizationSmSentryPoliciesAssignmentsRequest $update_organization_sm_sentry_policies_assignments_request update_organization_sm_sentry_policies_assignments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationSmSentryPoliciesAssignments'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Meraki\Model\UpdateOrganizationSmSentryPoliciesAssignments200Response
     */
    public function updateOrganizationSmSentryPoliciesAssignments($organization_id, $update_organization_sm_sentry_policies_assignments_request, string $contentType = self::contentTypes['updateOrganizationSmSentryPoliciesAssignments'][0])
    {
        list($response) = $this->updateOrganizationSmSentryPoliciesAssignmentsWithHttpInfo($organization_id, $update_organization_sm_sentry_policies_assignments_request, $contentType);
        return $response;
    }

    /**
     * Operation updateOrganizationSmSentryPoliciesAssignmentsWithHttpInfo
     *
     * Update an Organizations Sentry Policies using the provided list
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\UpdateOrganizationSmSentryPoliciesAssignmentsRequest $update_organization_sm_sentry_policies_assignments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationSmSentryPoliciesAssignments'] to see the possible values for this operation
     *
     * @throws \Meraki\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Meraki\Model\UpdateOrganizationSmSentryPoliciesAssignments200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrganizationSmSentryPoliciesAssignmentsWithHttpInfo($organization_id, $update_organization_sm_sentry_policies_assignments_request, string $contentType = self::contentTypes['updateOrganizationSmSentryPoliciesAssignments'][0])
    {
        $request = $this->updateOrganizationSmSentryPoliciesAssignmentsRequest($organization_id, $update_organization_sm_sentry_policies_assignments_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Meraki\Model\UpdateOrganizationSmSentryPoliciesAssignments200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Meraki\Model\UpdateOrganizationSmSentryPoliciesAssignments200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Meraki\Model\UpdateOrganizationSmSentryPoliciesAssignments200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Meraki\Model\UpdateOrganizationSmSentryPoliciesAssignments200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Meraki\Model\UpdateOrganizationSmSentryPoliciesAssignments200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrganizationSmSentryPoliciesAssignmentsAsync
     *
     * Update an Organizations Sentry Policies using the provided list
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\UpdateOrganizationSmSentryPoliciesAssignmentsRequest $update_organization_sm_sentry_policies_assignments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationSmSentryPoliciesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationSmSentryPoliciesAssignmentsAsync($organization_id, $update_organization_sm_sentry_policies_assignments_request, string $contentType = self::contentTypes['updateOrganizationSmSentryPoliciesAssignments'][0])
    {
        return $this->updateOrganizationSmSentryPoliciesAssignmentsAsyncWithHttpInfo($organization_id, $update_organization_sm_sentry_policies_assignments_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateOrganizationSmSentryPoliciesAssignmentsAsyncWithHttpInfo
     *
     * Update an Organizations Sentry Policies using the provided list
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\UpdateOrganizationSmSentryPoliciesAssignmentsRequest $update_organization_sm_sentry_policies_assignments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationSmSentryPoliciesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganizationSmSentryPoliciesAssignmentsAsyncWithHttpInfo($organization_id, $update_organization_sm_sentry_policies_assignments_request, string $contentType = self::contentTypes['updateOrganizationSmSentryPoliciesAssignments'][0])
    {
        $returnType = '\Meraki\Model\UpdateOrganizationSmSentryPoliciesAssignments200Response';
        $request = $this->updateOrganizationSmSentryPoliciesAssignmentsRequest($organization_id, $update_organization_sm_sentry_policies_assignments_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrganizationSmSentryPoliciesAssignments'
     *
     * @param  string $organization_id Organization ID (required)
     * @param  \Meraki\Model\UpdateOrganizationSmSentryPoliciesAssignmentsRequest $update_organization_sm_sentry_policies_assignments_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganizationSmSentryPoliciesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateOrganizationSmSentryPoliciesAssignmentsRequest($organization_id, $update_organization_sm_sentry_policies_assignments_request, string $contentType = self::contentTypes['updateOrganizationSmSentryPoliciesAssignments'][0])
    {

        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling updateOrganizationSmSentryPoliciesAssignments'
            );
        }

        // verify the required parameter 'update_organization_sm_sentry_policies_assignments_request' is set
        if ($update_organization_sm_sentry_policies_assignments_request === null || (is_array($update_organization_sm_sentry_policies_assignments_request) && count($update_organization_sm_sentry_policies_assignments_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_organization_sm_sentry_policies_assignments_request when calling updateOrganizationSmSentryPoliciesAssignments'
            );
        }


        $resourcePath = '/organizations/{organizationId}/sm/sentry/policies/assignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_organization_sm_sentry_policies_assignments_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_organization_sm_sentry_policies_assignments_request));
            } else {
                $httpBody = $update_organization_sm_sentry_policies_assignments_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Cisco-Meraki-API-Key');
        if ($apiKey !== null) {
            $headers['X-Cisco-Meraki-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer (API Key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
