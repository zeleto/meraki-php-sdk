<?php
/**
 * GetNetworkSmDeviceDesktopLogs200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetNetworkSmDeviceDesktopLogs200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetNetworkSmDeviceDesktopLogs200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getNetworkSmDeviceDesktopLogs_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'measured_at' => 'string',
        'user' => 'string',
        'network_device' => 'string',
        'network_driver' => 'string',
        'wifi_channel' => 'string',
        'wifi_auth' => 'string',
        'wifi_bssid' => 'string',
        'wifi_ssid' => 'string',
        'wifi_rssi' => 'string',
        'wifi_noise' => 'string',
        'dhcp_server' => 'string',
        'ip' => 'string',
        'network_mtu' => 'string',
        'subnet' => 'string',
        'gateway' => 'string',
        'public_ip' => 'string',
        'dns_server' => 'string',
        'ts' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'measured_at' => null,
        'user' => null,
        'network_device' => null,
        'network_driver' => null,
        'wifi_channel' => null,
        'wifi_auth' => null,
        'wifi_bssid' => null,
        'wifi_ssid' => null,
        'wifi_rssi' => null,
        'wifi_noise' => null,
        'dhcp_server' => null,
        'ip' => null,
        'network_mtu' => null,
        'subnet' => null,
        'gateway' => null,
        'public_ip' => null,
        'dns_server' => null,
        'ts' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'measured_at' => false,
        'user' => false,
        'network_device' => false,
        'network_driver' => false,
        'wifi_channel' => false,
        'wifi_auth' => false,
        'wifi_bssid' => false,
        'wifi_ssid' => false,
        'wifi_rssi' => false,
        'wifi_noise' => false,
        'dhcp_server' => false,
        'ip' => false,
        'network_mtu' => false,
        'subnet' => false,
        'gateway' => false,
        'public_ip' => false,
        'dns_server' => false,
        'ts' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'measured_at' => 'measuredAt',
        'user' => 'user',
        'network_device' => 'networkDevice',
        'network_driver' => 'networkDriver',
        'wifi_channel' => 'wifiChannel',
        'wifi_auth' => 'wifiAuth',
        'wifi_bssid' => 'wifiBssid',
        'wifi_ssid' => 'wifiSsid',
        'wifi_rssi' => 'wifiRssi',
        'wifi_noise' => 'wifiNoise',
        'dhcp_server' => 'dhcpServer',
        'ip' => 'ip',
        'network_mtu' => 'networkMTU',
        'subnet' => 'subnet',
        'gateway' => 'gateway',
        'public_ip' => 'publicIP',
        'dns_server' => 'dnsServer',
        'ts' => 'ts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'measured_at' => 'setMeasuredAt',
        'user' => 'setUser',
        'network_device' => 'setNetworkDevice',
        'network_driver' => 'setNetworkDriver',
        'wifi_channel' => 'setWifiChannel',
        'wifi_auth' => 'setWifiAuth',
        'wifi_bssid' => 'setWifiBssid',
        'wifi_ssid' => 'setWifiSsid',
        'wifi_rssi' => 'setWifiRssi',
        'wifi_noise' => 'setWifiNoise',
        'dhcp_server' => 'setDhcpServer',
        'ip' => 'setIp',
        'network_mtu' => 'setNetworkMtu',
        'subnet' => 'setSubnet',
        'gateway' => 'setGateway',
        'public_ip' => 'setPublicIp',
        'dns_server' => 'setDnsServer',
        'ts' => 'setTs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'measured_at' => 'getMeasuredAt',
        'user' => 'getUser',
        'network_device' => 'getNetworkDevice',
        'network_driver' => 'getNetworkDriver',
        'wifi_channel' => 'getWifiChannel',
        'wifi_auth' => 'getWifiAuth',
        'wifi_bssid' => 'getWifiBssid',
        'wifi_ssid' => 'getWifiSsid',
        'wifi_rssi' => 'getWifiRssi',
        'wifi_noise' => 'getWifiNoise',
        'dhcp_server' => 'getDhcpServer',
        'ip' => 'getIp',
        'network_mtu' => 'getNetworkMtu',
        'subnet' => 'getSubnet',
        'gateway' => 'getGateway',
        'public_ip' => 'getPublicIp',
        'dns_server' => 'getDnsServer',
        'ts' => 'getTs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('measured_at', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('network_device', $data ?? [], null);
        $this->setIfExists('network_driver', $data ?? [], null);
        $this->setIfExists('wifi_channel', $data ?? [], null);
        $this->setIfExists('wifi_auth', $data ?? [], null);
        $this->setIfExists('wifi_bssid', $data ?? [], null);
        $this->setIfExists('wifi_ssid', $data ?? [], null);
        $this->setIfExists('wifi_rssi', $data ?? [], null);
        $this->setIfExists('wifi_noise', $data ?? [], null);
        $this->setIfExists('dhcp_server', $data ?? [], null);
        $this->setIfExists('ip', $data ?? [], null);
        $this->setIfExists('network_mtu', $data ?? [], null);
        $this->setIfExists('subnet', $data ?? [], null);
        $this->setIfExists('gateway', $data ?? [], null);
        $this->setIfExists('public_ip', $data ?? [], null);
        $this->setIfExists('dns_server', $data ?? [], null);
        $this->setIfExists('ts', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets measured_at
     *
     * @return string|null
     */
    public function getMeasuredAt()
    {
        return $this->container['measured_at'];
    }

    /**
     * Sets measured_at
     *
     * @param string|null $measured_at The time the data was measured at.
     *
     * @return self
     */
    public function setMeasuredAt($measured_at)
    {
        if (is_null($measured_at)) {
            throw new \InvalidArgumentException('non-nullable measured_at cannot be null');
        }
        $this->container['measured_at'] = $measured_at;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user The user during connection.
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets network_device
     *
     * @return string|null
     */
    public function getNetworkDevice()
    {
        return $this->container['network_device'];
    }

    /**
     * Sets network_device
     *
     * @param string|null $network_device The network device for the device used for connection.
     *
     * @return self
     */
    public function setNetworkDevice($network_device)
    {
        if (is_null($network_device)) {
            throw new \InvalidArgumentException('non-nullable network_device cannot be null');
        }
        $this->container['network_device'] = $network_device;

        return $this;
    }

    /**
     * Gets network_driver
     *
     * @return string|null
     */
    public function getNetworkDriver()
    {
        return $this->container['network_driver'];
    }

    /**
     * Sets network_driver
     *
     * @param string|null $network_driver The network driver for the device.
     *
     * @return self
     */
    public function setNetworkDriver($network_driver)
    {
        if (is_null($network_driver)) {
            throw new \InvalidArgumentException('non-nullable network_driver cannot be null');
        }
        $this->container['network_driver'] = $network_driver;

        return $this;
    }

    /**
     * Gets wifi_channel
     *
     * @return string|null
     */
    public function getWifiChannel()
    {
        return $this->container['wifi_channel'];
    }

    /**
     * Sets wifi_channel
     *
     * @param string|null $wifi_channel Channel through which the connection is routing.
     *
     * @return self
     */
    public function setWifiChannel($wifi_channel)
    {
        if (is_null($wifi_channel)) {
            throw new \InvalidArgumentException('non-nullable wifi_channel cannot be null');
        }
        $this->container['wifi_channel'] = $wifi_channel;

        return $this;
    }

    /**
     * Gets wifi_auth
     *
     * @return string|null
     */
    public function getWifiAuth()
    {
        return $this->container['wifi_auth'];
    }

    /**
     * Sets wifi_auth
     *
     * @param string|null $wifi_auth The type of authentication used by the SSID.
     *
     * @return self
     */
    public function setWifiAuth($wifi_auth)
    {
        if (is_null($wifi_auth)) {
            throw new \InvalidArgumentException('non-nullable wifi_auth cannot be null');
        }
        $this->container['wifi_auth'] = $wifi_auth;

        return $this;
    }

    /**
     * Gets wifi_bssid
     *
     * @return string|null
     */
    public function getWifiBssid()
    {
        return $this->container['wifi_bssid'];
    }

    /**
     * Sets wifi_bssid
     *
     * @param string|null $wifi_bssid The MAC of the access point the device is connected to.
     *
     * @return self
     */
    public function setWifiBssid($wifi_bssid)
    {
        if (is_null($wifi_bssid)) {
            throw new \InvalidArgumentException('non-nullable wifi_bssid cannot be null');
        }
        $this->container['wifi_bssid'] = $wifi_bssid;

        return $this;
    }

    /**
     * Gets wifi_ssid
     *
     * @return string|null
     */
    public function getWifiSsid()
    {
        return $this->container['wifi_ssid'];
    }

    /**
     * Sets wifi_ssid
     *
     * @param string|null $wifi_ssid The name of the network the device is connected to.
     *
     * @return self
     */
    public function setWifiSsid($wifi_ssid)
    {
        if (is_null($wifi_ssid)) {
            throw new \InvalidArgumentException('non-nullable wifi_ssid cannot be null');
        }
        $this->container['wifi_ssid'] = $wifi_ssid;

        return $this;
    }

    /**
     * Gets wifi_rssi
     *
     * @return string|null
     */
    public function getWifiRssi()
    {
        return $this->container['wifi_rssi'];
    }

    /**
     * Sets wifi_rssi
     *
     * @param string|null $wifi_rssi The Received Signal Strength Indicator for the device.
     *
     * @return self
     */
    public function setWifiRssi($wifi_rssi)
    {
        if (is_null($wifi_rssi)) {
            throw new \InvalidArgumentException('non-nullable wifi_rssi cannot be null');
        }
        $this->container['wifi_rssi'] = $wifi_rssi;

        return $this;
    }

    /**
     * Gets wifi_noise
     *
     * @return string|null
     */
    public function getWifiNoise()
    {
        return $this->container['wifi_noise'];
    }

    /**
     * Sets wifi_noise
     *
     * @param string|null $wifi_noise The wireless signal power level received by the device.
     *
     * @return self
     */
    public function setWifiNoise($wifi_noise)
    {
        if (is_null($wifi_noise)) {
            throw new \InvalidArgumentException('non-nullable wifi_noise cannot be null');
        }
        $this->container['wifi_noise'] = $wifi_noise;

        return $this;
    }

    /**
     * Gets dhcp_server
     *
     * @return string|null
     */
    public function getDhcpServer()
    {
        return $this->container['dhcp_server'];
    }

    /**
     * Sets dhcp_server
     *
     * @param string|null $dhcp_server The IP address of the DCHP Server.
     *
     * @return self
     */
    public function setDhcpServer($dhcp_server)
    {
        if (is_null($dhcp_server)) {
            throw new \InvalidArgumentException('non-nullable dhcp_server cannot be null');
        }
        $this->container['dhcp_server'] = $dhcp_server;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip The IP of the device during connection.
     *
     * @return self
     */
    public function setIp($ip)
    {
        if (is_null($ip)) {
            throw new \InvalidArgumentException('non-nullable ip cannot be null');
        }
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets network_mtu
     *
     * @return string|null
     */
    public function getNetworkMtu()
    {
        return $this->container['network_mtu'];
    }

    /**
     * Sets network_mtu
     *
     * @param string|null $network_mtu The network max transmission unit.
     *
     * @return self
     */
    public function setNetworkMtu($network_mtu)
    {
        if (is_null($network_mtu)) {
            throw new \InvalidArgumentException('non-nullable network_mtu cannot be null');
        }
        $this->container['network_mtu'] = $network_mtu;

        return $this;
    }

    /**
     * Gets subnet
     *
     * @return string|null
     */
    public function getSubnet()
    {
        return $this->container['subnet'];
    }

    /**
     * Sets subnet
     *
     * @param string|null $subnet The subnet of the device connection.
     *
     * @return self
     */
    public function setSubnet($subnet)
    {
        if (is_null($subnet)) {
            throw new \InvalidArgumentException('non-nullable subnet cannot be null');
        }
        $this->container['subnet'] = $subnet;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string|null
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string|null $gateway The gateway IP the device was connected to.
     *
     * @return self
     */
    public function setGateway($gateway)
    {
        if (is_null($gateway)) {
            throw new \InvalidArgumentException('non-nullable gateway cannot be null');
        }
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets public_ip
     *
     * @return string|null
     */
    public function getPublicIp()
    {
        return $this->container['public_ip'];
    }

    /**
     * Sets public_ip
     *
     * @param string|null $public_ip The public IP address of the device.
     *
     * @return self
     */
    public function setPublicIp($public_ip)
    {
        if (is_null($public_ip)) {
            throw new \InvalidArgumentException('non-nullable public_ip cannot be null');
        }
        $this->container['public_ip'] = $public_ip;

        return $this;
    }

    /**
     * Gets dns_server
     *
     * @return string|null
     */
    public function getDnsServer()
    {
        return $this->container['dns_server'];
    }

    /**
     * Sets dns_server
     *
     * @param string|null $dns_server The DNS Server during the connection.
     *
     * @return self
     */
    public function setDnsServer($dns_server)
    {
        if (is_null($dns_server)) {
            throw new \InvalidArgumentException('non-nullable dns_server cannot be null');
        }
        $this->container['dns_server'] = $dns_server;

        return $this;
    }

    /**
     * Gets ts
     *
     * @return string|null
     */
    public function getTs()
    {
        return $this->container['ts'];
    }

    /**
     * Sets ts
     *
     * @param string|null $ts The time the connection was logged.
     *
     * @return self
     */
    public function setTs($ts)
    {
        if (is_null($ts)) {
            throw new \InvalidArgumentException('non-nullable ts cannot be null');
        }
        $this->container['ts'] = $ts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


