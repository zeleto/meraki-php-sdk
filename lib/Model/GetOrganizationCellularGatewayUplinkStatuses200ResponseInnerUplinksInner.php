<?php
/**
 * GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getOrganizationCellularGatewayUplinkStatuses_200_response_inner_uplinks_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'interface' => 'string',
        'status' => 'string',
        'ip' => 'string',
        'provider' => 'string',
        'public_ip' => 'string',
        'model' => 'string',
        'signal_stat' => '\Meraki\Model\GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInnerSignalStat',
        'mcc' => 'string',
        'mnc' => 'string',
        'roaming' => '\Meraki\Model\GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInnerRoaming',
        'connection_type' => 'string',
        'apn' => 'string',
        'gateway' => 'string',
        'dns1' => 'string',
        'dns2' => 'string',
        'signal_type' => 'string',
        'mtu' => 'int',
        'iccid' => 'string',
        'imsi' => 'string',
        'msisdn' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'interface' => null,
        'status' => null,
        'ip' => null,
        'provider' => null,
        'public_ip' => null,
        'model' => null,
        'signal_stat' => null,
        'mcc' => null,
        'mnc' => null,
        'roaming' => null,
        'connection_type' => null,
        'apn' => null,
        'gateway' => null,
        'dns1' => null,
        'dns2' => null,
        'signal_type' => null,
        'mtu' => null,
        'iccid' => null,
        'imsi' => null,
        'msisdn' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'interface' => false,
        'status' => false,
        'ip' => false,
        'provider' => false,
        'public_ip' => false,
        'model' => false,
        'signal_stat' => false,
        'mcc' => false,
        'mnc' => false,
        'roaming' => false,
        'connection_type' => false,
        'apn' => false,
        'gateway' => false,
        'dns1' => false,
        'dns2' => false,
        'signal_type' => false,
        'mtu' => false,
        'iccid' => false,
        'imsi' => false,
        'msisdn' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'interface' => 'interface',
        'status' => 'status',
        'ip' => 'ip',
        'provider' => 'provider',
        'public_ip' => 'publicIp',
        'model' => 'model',
        'signal_stat' => 'signalStat',
        'mcc' => 'mcc',
        'mnc' => 'mnc',
        'roaming' => 'roaming',
        'connection_type' => 'connectionType',
        'apn' => 'apn',
        'gateway' => 'gateway',
        'dns1' => 'dns1',
        'dns2' => 'dns2',
        'signal_type' => 'signalType',
        'mtu' => 'mtu',
        'iccid' => 'iccid',
        'imsi' => 'imsi',
        'msisdn' => 'msisdn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'interface' => 'setInterface',
        'status' => 'setStatus',
        'ip' => 'setIp',
        'provider' => 'setProvider',
        'public_ip' => 'setPublicIp',
        'model' => 'setModel',
        'signal_stat' => 'setSignalStat',
        'mcc' => 'setMcc',
        'mnc' => 'setMnc',
        'roaming' => 'setRoaming',
        'connection_type' => 'setConnectionType',
        'apn' => 'setApn',
        'gateway' => 'setGateway',
        'dns1' => 'setDns1',
        'dns2' => 'setDns2',
        'signal_type' => 'setSignalType',
        'mtu' => 'setMtu',
        'iccid' => 'setIccid',
        'imsi' => 'setImsi',
        'msisdn' => 'setMsisdn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'interface' => 'getInterface',
        'status' => 'getStatus',
        'ip' => 'getIp',
        'provider' => 'getProvider',
        'public_ip' => 'getPublicIp',
        'model' => 'getModel',
        'signal_stat' => 'getSignalStat',
        'mcc' => 'getMcc',
        'mnc' => 'getMnc',
        'roaming' => 'getRoaming',
        'connection_type' => 'getConnectionType',
        'apn' => 'getApn',
        'gateway' => 'getGateway',
        'dns1' => 'getDns1',
        'dns2' => 'getDns2',
        'signal_type' => 'getSignalType',
        'mtu' => 'getMtu',
        'iccid' => 'getIccid',
        'imsi' => 'getImsi',
        'msisdn' => 'getMsisdn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('interface', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('ip', $data ?? [], null);
        $this->setIfExists('provider', $data ?? [], null);
        $this->setIfExists('public_ip', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('signal_stat', $data ?? [], null);
        $this->setIfExists('mcc', $data ?? [], null);
        $this->setIfExists('mnc', $data ?? [], null);
        $this->setIfExists('roaming', $data ?? [], null);
        $this->setIfExists('connection_type', $data ?? [], null);
        $this->setIfExists('apn', $data ?? [], null);
        $this->setIfExists('gateway', $data ?? [], null);
        $this->setIfExists('dns1', $data ?? [], null);
        $this->setIfExists('dns2', $data ?? [], null);
        $this->setIfExists('signal_type', $data ?? [], null);
        $this->setIfExists('mtu', $data ?? [], null);
        $this->setIfExists('iccid', $data ?? [], null);
        $this->setIfExists('imsi', $data ?? [], null);
        $this->setIfExists('msisdn', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface Uplink interface
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (is_null($interface)) {
            throw new \InvalidArgumentException('non-nullable interface cannot be null');
        }
        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Uplink status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip Uplink IP
     *
     * @return self
     */
    public function setIp($ip)
    {
        if (is_null($ip)) {
            throw new \InvalidArgumentException('non-nullable ip cannot be null');
        }
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string|null
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string|null $provider Network Provider
     *
     * @return self
     */
    public function setProvider($provider)
    {
        if (is_null($provider)) {
            throw new \InvalidArgumentException('non-nullable provider cannot be null');
        }
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets public_ip
     *
     * @return string|null
     */
    public function getPublicIp()
    {
        return $this->container['public_ip'];
    }

    /**
     * Sets public_ip
     *
     * @param string|null $public_ip Public IP
     *
     * @return self
     */
    public function setPublicIp($public_ip)
    {
        if (is_null($public_ip)) {
            throw new \InvalidArgumentException('non-nullable public_ip cannot be null');
        }
        $this->container['public_ip'] = $public_ip;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model Uplink model
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets signal_stat
     *
     * @return \Meraki\Model\GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInnerSignalStat|null
     */
    public function getSignalStat()
    {
        return $this->container['signal_stat'];
    }

    /**
     * Sets signal_stat
     *
     * @param \Meraki\Model\GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInnerSignalStat|null $signal_stat signal_stat
     *
     * @return self
     */
    public function setSignalStat($signal_stat)
    {
        if (is_null($signal_stat)) {
            throw new \InvalidArgumentException('non-nullable signal_stat cannot be null');
        }
        $this->container['signal_stat'] = $signal_stat;

        return $this;
    }

    /**
     * Gets mcc
     *
     * @return string|null
     */
    public function getMcc()
    {
        return $this->container['mcc'];
    }

    /**
     * Sets mcc
     *
     * @param string|null $mcc Mobile Country Code
     *
     * @return self
     */
    public function setMcc($mcc)
    {
        if (is_null($mcc)) {
            throw new \InvalidArgumentException('non-nullable mcc cannot be null');
        }
        $this->container['mcc'] = $mcc;

        return $this;
    }

    /**
     * Gets mnc
     *
     * @return string|null
     */
    public function getMnc()
    {
        return $this->container['mnc'];
    }

    /**
     * Sets mnc
     *
     * @param string|null $mnc Mobile Network Code
     *
     * @return self
     */
    public function setMnc($mnc)
    {
        if (is_null($mnc)) {
            throw new \InvalidArgumentException('non-nullable mnc cannot be null');
        }
        $this->container['mnc'] = $mnc;

        return $this;
    }

    /**
     * Gets roaming
     *
     * @return \Meraki\Model\GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInnerRoaming|null
     */
    public function getRoaming()
    {
        return $this->container['roaming'];
    }

    /**
     * Sets roaming
     *
     * @param \Meraki\Model\GetOrganizationCellularGatewayUplinkStatuses200ResponseInnerUplinksInnerRoaming|null $roaming roaming
     *
     * @return self
     */
    public function setRoaming($roaming)
    {
        if (is_null($roaming)) {
            throw new \InvalidArgumentException('non-nullable roaming cannot be null');
        }
        $this->container['roaming'] = $roaming;

        return $this;
    }

    /**
     * Gets connection_type
     *
     * @return string|null
     */
    public function getConnectionType()
    {
        return $this->container['connection_type'];
    }

    /**
     * Sets connection_type
     *
     * @param string|null $connection_type Connection Type
     *
     * @return self
     */
    public function setConnectionType($connection_type)
    {
        if (is_null($connection_type)) {
            throw new \InvalidArgumentException('non-nullable connection_type cannot be null');
        }
        $this->container['connection_type'] = $connection_type;

        return $this;
    }

    /**
     * Gets apn
     *
     * @return string|null
     */
    public function getApn()
    {
        return $this->container['apn'];
    }

    /**
     * Sets apn
     *
     * @param string|null $apn Access Point Name
     *
     * @return self
     */
    public function setApn($apn)
    {
        if (is_null($apn)) {
            throw new \InvalidArgumentException('non-nullable apn cannot be null');
        }
        $this->container['apn'] = $apn;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string|null
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string|null $gateway Gateway IP
     *
     * @return self
     */
    public function setGateway($gateway)
    {
        if (is_null($gateway)) {
            throw new \InvalidArgumentException('non-nullable gateway cannot be null');
        }
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets dns1
     *
     * @return string|null
     */
    public function getDns1()
    {
        return $this->container['dns1'];
    }

    /**
     * Sets dns1
     *
     * @param string|null $dns1 Primary DNS IP
     *
     * @return self
     */
    public function setDns1($dns1)
    {
        if (is_null($dns1)) {
            throw new \InvalidArgumentException('non-nullable dns1 cannot be null');
        }
        $this->container['dns1'] = $dns1;

        return $this;
    }

    /**
     * Gets dns2
     *
     * @return string|null
     */
    public function getDns2()
    {
        return $this->container['dns2'];
    }

    /**
     * Sets dns2
     *
     * @param string|null $dns2 Secondary DNS IP
     *
     * @return self
     */
    public function setDns2($dns2)
    {
        if (is_null($dns2)) {
            throw new \InvalidArgumentException('non-nullable dns2 cannot be null');
        }
        $this->container['dns2'] = $dns2;

        return $this;
    }

    /**
     * Gets signal_type
     *
     * @return string|null
     */
    public function getSignalType()
    {
        return $this->container['signal_type'];
    }

    /**
     * Sets signal_type
     *
     * @param string|null $signal_type Signal Type
     *
     * @return self
     */
    public function setSignalType($signal_type)
    {
        if (is_null($signal_type)) {
            throw new \InvalidArgumentException('non-nullable signal_type cannot be null');
        }
        $this->container['signal_type'] = $signal_type;

        return $this;
    }

    /**
     * Gets mtu
     *
     * @return int|null
     */
    public function getMtu()
    {
        return $this->container['mtu'];
    }

    /**
     * Sets mtu
     *
     * @param int|null $mtu Maximum Transmission Unit
     *
     * @return self
     */
    public function setMtu($mtu)
    {
        if (is_null($mtu)) {
            throw new \InvalidArgumentException('non-nullable mtu cannot be null');
        }
        $this->container['mtu'] = $mtu;

        return $this;
    }

    /**
     * Gets iccid
     *
     * @return string|null
     */
    public function getIccid()
    {
        return $this->container['iccid'];
    }

    /**
     * Sets iccid
     *
     * @param string|null $iccid Integrated Circuit Card Identification Number
     *
     * @return self
     */
    public function setIccid($iccid)
    {
        if (is_null($iccid)) {
            throw new \InvalidArgumentException('non-nullable iccid cannot be null');
        }
        $this->container['iccid'] = $iccid;

        return $this;
    }

    /**
     * Gets imsi
     *
     * @return string|null
     */
    public function getImsi()
    {
        return $this->container['imsi'];
    }

    /**
     * Sets imsi
     *
     * @param string|null $imsi International Mobile Subscriber Identity
     *
     * @return self
     */
    public function setImsi($imsi)
    {
        if (is_null($imsi)) {
            throw new \InvalidArgumentException('non-nullable imsi cannot be null');
        }
        $this->container['imsi'] = $imsi;

        return $this;
    }

    /**
     * Gets msisdn
     *
     * @return string|null
     */
    public function getMsisdn()
    {
        return $this->container['msisdn'];
    }

    /**
     * Sets msisdn
     *
     * @param string|null $msisdn Mobile Station Integrated Services Digital Network
     *
     * @return self
     */
    public function setMsisdn($msisdn)
    {
        if (is_null($msisdn)) {
            throw new \InvalidArgumentException('non-nullable msisdn cannot be null');
        }
        $this->container['msisdn'] = $msisdn;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


