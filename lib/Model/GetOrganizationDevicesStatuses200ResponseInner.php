<?php
/**
 * GetOrganizationDevicesStatuses200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetOrganizationDevicesStatuses200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetOrganizationDevicesStatuses200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getOrganizationDevicesStatuses_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'serial' => 'string',
        'mac' => 'string',
        'public_ip' => 'string',
        'network_id' => 'string',
        'status' => 'string',
        'last_reported_at' => 'string',
        'lan_ip' => 'string',
        'gateway' => 'string',
        'ip_type' => 'string',
        'primary_dns' => 'string',
        'secondary_dns' => 'string',
        'product_type' => 'string',
        'components' => '\Meraki\Model\GetOrganizationDevicesStatuses200ResponseInnerComponents',
        'model' => 'string',
        'tags' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'serial' => null,
        'mac' => null,
        'public_ip' => null,
        'network_id' => null,
        'status' => null,
        'last_reported_at' => null,
        'lan_ip' => null,
        'gateway' => null,
        'ip_type' => null,
        'primary_dns' => null,
        'secondary_dns' => null,
        'product_type' => null,
        'components' => null,
        'model' => null,
        'tags' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'serial' => false,
        'mac' => false,
        'public_ip' => false,
        'network_id' => false,
        'status' => false,
        'last_reported_at' => false,
        'lan_ip' => false,
        'gateway' => false,
        'ip_type' => false,
        'primary_dns' => false,
        'secondary_dns' => false,
        'product_type' => false,
        'components' => false,
        'model' => false,
        'tags' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'serial' => 'serial',
        'mac' => 'mac',
        'public_ip' => 'publicIp',
        'network_id' => 'networkId',
        'status' => 'status',
        'last_reported_at' => 'lastReportedAt',
        'lan_ip' => 'lanIp',
        'gateway' => 'gateway',
        'ip_type' => 'ipType',
        'primary_dns' => 'primaryDns',
        'secondary_dns' => 'secondaryDns',
        'product_type' => 'productType',
        'components' => 'components',
        'model' => 'model',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'serial' => 'setSerial',
        'mac' => 'setMac',
        'public_ip' => 'setPublicIp',
        'network_id' => 'setNetworkId',
        'status' => 'setStatus',
        'last_reported_at' => 'setLastReportedAt',
        'lan_ip' => 'setLanIp',
        'gateway' => 'setGateway',
        'ip_type' => 'setIpType',
        'primary_dns' => 'setPrimaryDns',
        'secondary_dns' => 'setSecondaryDns',
        'product_type' => 'setProductType',
        'components' => 'setComponents',
        'model' => 'setModel',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'serial' => 'getSerial',
        'mac' => 'getMac',
        'public_ip' => 'getPublicIp',
        'network_id' => 'getNetworkId',
        'status' => 'getStatus',
        'last_reported_at' => 'getLastReportedAt',
        'lan_ip' => 'getLanIp',
        'gateway' => 'getGateway',
        'ip_type' => 'getIpType',
        'primary_dns' => 'getPrimaryDns',
        'secondary_dns' => 'getSecondaryDns',
        'product_type' => 'getProductType',
        'components' => 'getComponents',
        'model' => 'getModel',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('serial', $data ?? [], null);
        $this->setIfExists('mac', $data ?? [], null);
        $this->setIfExists('public_ip', $data ?? [], null);
        $this->setIfExists('network_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('last_reported_at', $data ?? [], null);
        $this->setIfExists('lan_ip', $data ?? [], null);
        $this->setIfExists('gateway', $data ?? [], null);
        $this->setIfExists('ip_type', $data ?? [], null);
        $this->setIfExists('primary_dns', $data ?? [], null);
        $this->setIfExists('secondary_dns', $data ?? [], null);
        $this->setIfExists('product_type', $data ?? [], null);
        $this->setIfExists('components', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Device Name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets serial
     *
     * @return string|null
     */
    public function getSerial()
    {
        return $this->container['serial'];
    }

    /**
     * Sets serial
     *
     * @param string|null $serial Device Serial Number
     *
     * @return self
     */
    public function setSerial($serial)
    {
        if (is_null($serial)) {
            throw new \InvalidArgumentException('non-nullable serial cannot be null');
        }
        $this->container['serial'] = $serial;

        return $this;
    }

    /**
     * Gets mac
     *
     * @return string|null
     */
    public function getMac()
    {
        return $this->container['mac'];
    }

    /**
     * Sets mac
     *
     * @param string|null $mac MAC Address
     *
     * @return self
     */
    public function setMac($mac)
    {
        if (is_null($mac)) {
            throw new \InvalidArgumentException('non-nullable mac cannot be null');
        }
        $this->container['mac'] = $mac;

        return $this;
    }

    /**
     * Gets public_ip
     *
     * @return string|null
     */
    public function getPublicIp()
    {
        return $this->container['public_ip'];
    }

    /**
     * Sets public_ip
     *
     * @param string|null $public_ip Public IP Address
     *
     * @return self
     */
    public function setPublicIp($public_ip)
    {
        if (is_null($public_ip)) {
            throw new \InvalidArgumentException('non-nullable public_ip cannot be null');
        }
        $this->container['public_ip'] = $public_ip;

        return $this;
    }

    /**
     * Gets network_id
     *
     * @return string|null
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param string|null $network_id Network ID
     *
     * @return self
     */
    public function setNetworkId($network_id)
    {
        if (is_null($network_id)) {
            throw new \InvalidArgumentException('non-nullable network_id cannot be null');
        }
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Device Status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets last_reported_at
     *
     * @return string|null
     */
    public function getLastReportedAt()
    {
        return $this->container['last_reported_at'];
    }

    /**
     * Sets last_reported_at
     *
     * @param string|null $last_reported_at Device Last Reported Location
     *
     * @return self
     */
    public function setLastReportedAt($last_reported_at)
    {
        if (is_null($last_reported_at)) {
            throw new \InvalidArgumentException('non-nullable last_reported_at cannot be null');
        }
        $this->container['last_reported_at'] = $last_reported_at;

        return $this;
    }

    /**
     * Gets lan_ip
     *
     * @return string|null
     */
    public function getLanIp()
    {
        return $this->container['lan_ip'];
    }

    /**
     * Sets lan_ip
     *
     * @param string|null $lan_ip LAN IP Address
     *
     * @return self
     */
    public function setLanIp($lan_ip)
    {
        if (is_null($lan_ip)) {
            throw new \InvalidArgumentException('non-nullable lan_ip cannot be null');
        }
        $this->container['lan_ip'] = $lan_ip;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string|null
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string|null $gateway IP Gateway
     *
     * @return self
     */
    public function setGateway($gateway)
    {
        if (is_null($gateway)) {
            throw new \InvalidArgumentException('non-nullable gateway cannot be null');
        }
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets ip_type
     *
     * @return string|null
     */
    public function getIpType()
    {
        return $this->container['ip_type'];
    }

    /**
     * Sets ip_type
     *
     * @param string|null $ip_type IP Type
     *
     * @return self
     */
    public function setIpType($ip_type)
    {
        if (is_null($ip_type)) {
            throw new \InvalidArgumentException('non-nullable ip_type cannot be null');
        }
        $this->container['ip_type'] = $ip_type;

        return $this;
    }

    /**
     * Gets primary_dns
     *
     * @return string|null
     */
    public function getPrimaryDns()
    {
        return $this->container['primary_dns'];
    }

    /**
     * Sets primary_dns
     *
     * @param string|null $primary_dns Primary DNS
     *
     * @return self
     */
    public function setPrimaryDns($primary_dns)
    {
        if (is_null($primary_dns)) {
            throw new \InvalidArgumentException('non-nullable primary_dns cannot be null');
        }
        $this->container['primary_dns'] = $primary_dns;

        return $this;
    }

    /**
     * Gets secondary_dns
     *
     * @return string|null
     */
    public function getSecondaryDns()
    {
        return $this->container['secondary_dns'];
    }

    /**
     * Sets secondary_dns
     *
     * @param string|null $secondary_dns Secondary DNS
     *
     * @return self
     */
    public function setSecondaryDns($secondary_dns)
    {
        if (is_null($secondary_dns)) {
            throw new \InvalidArgumentException('non-nullable secondary_dns cannot be null');
        }
        $this->container['secondary_dns'] = $secondary_dns;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string|null
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string|null $product_type Product Type
     *
     * @return self
     */
    public function setProductType($product_type)
    {
        if (is_null($product_type)) {
            throw new \InvalidArgumentException('non-nullable product_type cannot be null');
        }
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets components
     *
     * @return \Meraki\Model\GetOrganizationDevicesStatuses200ResponseInnerComponents|null
     */
    public function getComponents()
    {
        return $this->container['components'];
    }

    /**
     * Sets components
     *
     * @param \Meraki\Model\GetOrganizationDevicesStatuses200ResponseInnerComponents|null $components components
     *
     * @return self
     */
    public function setComponents($components)
    {
        if (is_null($components)) {
            throw new \InvalidArgumentException('non-nullable components cannot be null');
        }
        $this->container['components'] = $components;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model Model
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags Tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


