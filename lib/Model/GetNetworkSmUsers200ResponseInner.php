<?php
/**
 * GetNetworkSmUsers200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetNetworkSmUsers200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetNetworkSmUsers200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getNetworkSmUsers_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'email' => 'string',
        'full_name' => 'string',
        'username' => 'string',
        'has_password' => 'bool',
        'tags' => 'string',
        'ad_groups' => 'string[]',
        'azure_ad_groups' => 'string[]',
        'saml_groups' => 'string[]',
        'asm_groups' => 'string[]',
        'is_external' => 'bool',
        'display_name' => 'string',
        'has_identity_certificate' => 'bool',
        'user_thumbnail' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'email' => null,
        'full_name' => null,
        'username' => null,
        'has_password' => null,
        'tags' => null,
        'ad_groups' => null,
        'azure_ad_groups' => null,
        'saml_groups' => null,
        'asm_groups' => null,
        'is_external' => null,
        'display_name' => null,
        'has_identity_certificate' => null,
        'user_thumbnail' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'email' => false,
        'full_name' => false,
        'username' => false,
        'has_password' => false,
        'tags' => false,
        'ad_groups' => false,
        'azure_ad_groups' => false,
        'saml_groups' => false,
        'asm_groups' => false,
        'is_external' => false,
        'display_name' => false,
        'has_identity_certificate' => false,
        'user_thumbnail' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'email' => 'email',
        'full_name' => 'fullName',
        'username' => 'username',
        'has_password' => 'hasPassword',
        'tags' => 'tags',
        'ad_groups' => 'adGroups',
        'azure_ad_groups' => 'azureAdGroups',
        'saml_groups' => 'samlGroups',
        'asm_groups' => 'asmGroups',
        'is_external' => 'isExternal',
        'display_name' => 'displayName',
        'has_identity_certificate' => 'hasIdentityCertificate',
        'user_thumbnail' => 'userThumbnail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'email' => 'setEmail',
        'full_name' => 'setFullName',
        'username' => 'setUsername',
        'has_password' => 'setHasPassword',
        'tags' => 'setTags',
        'ad_groups' => 'setAdGroups',
        'azure_ad_groups' => 'setAzureAdGroups',
        'saml_groups' => 'setSamlGroups',
        'asm_groups' => 'setAsmGroups',
        'is_external' => 'setIsExternal',
        'display_name' => 'setDisplayName',
        'has_identity_certificate' => 'setHasIdentityCertificate',
        'user_thumbnail' => 'setUserThumbnail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'email' => 'getEmail',
        'full_name' => 'getFullName',
        'username' => 'getUsername',
        'has_password' => 'getHasPassword',
        'tags' => 'getTags',
        'ad_groups' => 'getAdGroups',
        'azure_ad_groups' => 'getAzureAdGroups',
        'saml_groups' => 'getSamlGroups',
        'asm_groups' => 'getAsmGroups',
        'is_external' => 'getIsExternal',
        'display_name' => 'getDisplayName',
        'has_identity_certificate' => 'getHasIdentityCertificate',
        'user_thumbnail' => 'getUserThumbnail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('full_name', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('has_password', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('ad_groups', $data ?? [], null);
        $this->setIfExists('azure_ad_groups', $data ?? [], null);
        $this->setIfExists('saml_groups', $data ?? [], null);
        $this->setIfExists('asm_groups', $data ?? [], null);
        $this->setIfExists('is_external', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('has_identity_certificate', $data ?? [], null);
        $this->setIfExists('user_thumbnail', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The Meraki managed Id of the user record.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email User email.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name User full name.
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        if (is_null($full_name)) {
            throw new \InvalidArgumentException('non-nullable full_name cannot be null');
        }
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username The users username.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets has_password
     *
     * @return bool|null
     */
    public function getHasPassword()
    {
        return $this->container['has_password'];
    }

    /**
     * Sets has_password
     *
     * @param bool|null $has_password A boolean denoting if the user has a password associated with the record.
     *
     * @return self
     */
    public function setHasPassword($has_password)
    {
        if (is_null($has_password)) {
            throw new \InvalidArgumentException('non-nullable has_password cannot be null');
        }
        $this->container['has_password'] = $has_password;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string|null $tags The set of tags the user is scoped to.
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets ad_groups
     *
     * @return string[]|null
     */
    public function getAdGroups()
    {
        return $this->container['ad_groups'];
    }

    /**
     * Sets ad_groups
     *
     * @param string[]|null $ad_groups Active Directory Groups the user belongs to.
     *
     * @return self
     */
    public function setAdGroups($ad_groups)
    {
        if (is_null($ad_groups)) {
            throw new \InvalidArgumentException('non-nullable ad_groups cannot be null');
        }
        $this->container['ad_groups'] = $ad_groups;

        return $this;
    }

    /**
     * Gets azure_ad_groups
     *
     * @return string[]|null
     */
    public function getAzureAdGroups()
    {
        return $this->container['azure_ad_groups'];
    }

    /**
     * Sets azure_ad_groups
     *
     * @param string[]|null $azure_ad_groups Azure Active Directory Groups the user belongs to.
     *
     * @return self
     */
    public function setAzureAdGroups($azure_ad_groups)
    {
        if (is_null($azure_ad_groups)) {
            throw new \InvalidArgumentException('non-nullable azure_ad_groups cannot be null');
        }
        $this->container['azure_ad_groups'] = $azure_ad_groups;

        return $this;
    }

    /**
     * Gets saml_groups
     *
     * @return string[]|null
     */
    public function getSamlGroups()
    {
        return $this->container['saml_groups'];
    }

    /**
     * Sets saml_groups
     *
     * @param string[]|null $saml_groups SAML Groups the user belongs to.
     *
     * @return self
     */
    public function setSamlGroups($saml_groups)
    {
        if (is_null($saml_groups)) {
            throw new \InvalidArgumentException('non-nullable saml_groups cannot be null');
        }
        $this->container['saml_groups'] = $saml_groups;

        return $this;
    }

    /**
     * Gets asm_groups
     *
     * @return string[]|null
     */
    public function getAsmGroups()
    {
        return $this->container['asm_groups'];
    }

    /**
     * Sets asm_groups
     *
     * @param string[]|null $asm_groups Apple School Manager Groups the user belongs to.
     *
     * @return self
     */
    public function setAsmGroups($asm_groups)
    {
        if (is_null($asm_groups)) {
            throw new \InvalidArgumentException('non-nullable asm_groups cannot be null');
        }
        $this->container['asm_groups'] = $asm_groups;

        return $this;
    }

    /**
     * Gets is_external
     *
     * @return bool|null
     */
    public function getIsExternal()
    {
        return $this->container['is_external'];
    }

    /**
     * Sets is_external
     *
     * @param bool|null $is_external Whether the user was created using an external integration, or via the Meraki Dashboard.
     *
     * @return self
     */
    public function setIsExternal($is_external)
    {
        if (is_null($is_external)) {
            throw new \InvalidArgumentException('non-nullable is_external cannot be null');
        }
        $this->container['is_external'] = $is_external;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name The user display name.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets has_identity_certificate
     *
     * @return bool|null
     */
    public function getHasIdentityCertificate()
    {
        return $this->container['has_identity_certificate'];
    }

    /**
     * Sets has_identity_certificate
     *
     * @param bool|null $has_identity_certificate A boolean indicating if the user has an associated identity certificate..
     *
     * @return self
     */
    public function setHasIdentityCertificate($has_identity_certificate)
    {
        if (is_null($has_identity_certificate)) {
            throw new \InvalidArgumentException('non-nullable has_identity_certificate cannot be null');
        }
        $this->container['has_identity_certificate'] = $has_identity_certificate;

        return $this;
    }

    /**
     * Gets user_thumbnail
     *
     * @return string|null
     */
    public function getUserThumbnail()
    {
        return $this->container['user_thumbnail'];
    }

    /**
     * Sets user_thumbnail
     *
     * @param string|null $user_thumbnail The url where the users thumbnail is hosted.
     *
     * @return self
     */
    public function setUserThumbnail($user_thumbnail)
    {
        if (is_null($user_thumbnail)) {
            throw new \InvalidArgumentException('non-nullable user_thumbnail cannot be null');
        }
        $this->container['user_thumbnail'] = $user_thumbnail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


