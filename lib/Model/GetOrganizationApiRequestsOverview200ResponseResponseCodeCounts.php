<?php
/**
 * GetOrganizationApiRequestsOverview200ResponseResponseCodeCounts
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetOrganizationApiRequestsOverview200ResponseResponseCodeCounts Class Doc Comment
 *
 * @category Class
 * @description object of all supported HTTP response code
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetOrganizationApiRequestsOverview200ResponseResponseCodeCounts implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getOrganizationApiRequestsOverview_200_response_responseCodeCounts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_200' => 'int',
        '_201' => 'int',
        '_202' => 'int',
        '_203' => 'int',
        '_204' => 'int',
        '_205' => 'int',
        '_206' => 'int',
        '_207' => 'int',
        '_208' => 'int',
        '_226' => 'int',
        '_300' => 'int',
        '_301' => 'int',
        '_302' => 'int',
        '_303' => 'int',
        '_304' => 'int',
        '_305' => 'int',
        '_306' => 'int',
        '_307' => 'int',
        '_308' => 'int',
        '_400' => 'int',
        '_401' => 'int',
        '_402' => 'int',
        '_403' => 'int',
        '_404' => 'int',
        '_405' => 'int',
        '_406' => 'int',
        '_407' => 'int',
        '_408' => 'int',
        '_409' => 'int',
        '_410' => 'int',
        '_411' => 'int',
        '_412' => 'int',
        '_413' => 'int',
        '_414' => 'int',
        '_415' => 'int',
        '_416' => 'int',
        '_417' => 'int',
        '_421' => 'int',
        '_422' => 'int',
        '_423' => 'int',
        '_424' => 'int',
        '_425' => 'int',
        '_426' => 'int',
        '_428' => 'int',
        '_429' => 'int',
        '_431' => 'int',
        '_451' => 'int',
        '_500' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_200' => null,
        '_201' => null,
        '_202' => null,
        '_203' => null,
        '_204' => null,
        '_205' => null,
        '_206' => null,
        '_207' => null,
        '_208' => null,
        '_226' => null,
        '_300' => null,
        '_301' => null,
        '_302' => null,
        '_303' => null,
        '_304' => null,
        '_305' => null,
        '_306' => null,
        '_307' => null,
        '_308' => null,
        '_400' => null,
        '_401' => null,
        '_402' => null,
        '_403' => null,
        '_404' => null,
        '_405' => null,
        '_406' => null,
        '_407' => null,
        '_408' => null,
        '_409' => null,
        '_410' => null,
        '_411' => null,
        '_412' => null,
        '_413' => null,
        '_414' => null,
        '_415' => null,
        '_416' => null,
        '_417' => null,
        '_421' => null,
        '_422' => null,
        '_423' => null,
        '_424' => null,
        '_425' => null,
        '_426' => null,
        '_428' => null,
        '_429' => null,
        '_431' => null,
        '_451' => null,
        '_500' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_200' => false,
        '_201' => false,
        '_202' => false,
        '_203' => false,
        '_204' => false,
        '_205' => false,
        '_206' => false,
        '_207' => false,
        '_208' => false,
        '_226' => false,
        '_300' => false,
        '_301' => false,
        '_302' => false,
        '_303' => false,
        '_304' => false,
        '_305' => false,
        '_306' => false,
        '_307' => false,
        '_308' => false,
        '_400' => false,
        '_401' => false,
        '_402' => false,
        '_403' => false,
        '_404' => false,
        '_405' => false,
        '_406' => false,
        '_407' => false,
        '_408' => false,
        '_409' => false,
        '_410' => false,
        '_411' => false,
        '_412' => false,
        '_413' => false,
        '_414' => false,
        '_415' => false,
        '_416' => false,
        '_417' => false,
        '_421' => false,
        '_422' => false,
        '_423' => false,
        '_424' => false,
        '_425' => false,
        '_426' => false,
        '_428' => false,
        '_429' => false,
        '_431' => false,
        '_451' => false,
        '_500' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_200' => '200',
        '_201' => '201',
        '_202' => '202',
        '_203' => '203',
        '_204' => '204',
        '_205' => '205',
        '_206' => '206',
        '_207' => '207',
        '_208' => '208',
        '_226' => '226',
        '_300' => '300',
        '_301' => '301',
        '_302' => '302',
        '_303' => '303',
        '_304' => '304',
        '_305' => '305',
        '_306' => '306',
        '_307' => '307',
        '_308' => '308',
        '_400' => '400',
        '_401' => '401',
        '_402' => '402',
        '_403' => '403',
        '_404' => '404',
        '_405' => '405',
        '_406' => '406',
        '_407' => '407',
        '_408' => '408',
        '_409' => '409',
        '_410' => '410',
        '_411' => '411',
        '_412' => '412',
        '_413' => '413',
        '_414' => '414',
        '_415' => '415',
        '_416' => '416',
        '_417' => '417',
        '_421' => '421',
        '_422' => '422',
        '_423' => '423',
        '_424' => '424',
        '_425' => '425',
        '_426' => '426',
        '_428' => '428',
        '_429' => '429',
        '_431' => '431',
        '_451' => '451',
        '_500' => '500'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_200' => 'set200',
        '_201' => 'set201',
        '_202' => 'set202',
        '_203' => 'set203',
        '_204' => 'set204',
        '_205' => 'set205',
        '_206' => 'set206',
        '_207' => 'set207',
        '_208' => 'set208',
        '_226' => 'set226',
        '_300' => 'set300',
        '_301' => 'set301',
        '_302' => 'set302',
        '_303' => 'set303',
        '_304' => 'set304',
        '_305' => 'set305',
        '_306' => 'set306',
        '_307' => 'set307',
        '_308' => 'set308',
        '_400' => 'set400',
        '_401' => 'set401',
        '_402' => 'set402',
        '_403' => 'set403',
        '_404' => 'set404',
        '_405' => 'set405',
        '_406' => 'set406',
        '_407' => 'set407',
        '_408' => 'set408',
        '_409' => 'set409',
        '_410' => 'set410',
        '_411' => 'set411',
        '_412' => 'set412',
        '_413' => 'set413',
        '_414' => 'set414',
        '_415' => 'set415',
        '_416' => 'set416',
        '_417' => 'set417',
        '_421' => 'set421',
        '_422' => 'set422',
        '_423' => 'set423',
        '_424' => 'set424',
        '_425' => 'set425',
        '_426' => 'set426',
        '_428' => 'set428',
        '_429' => 'set429',
        '_431' => 'set431',
        '_451' => 'set451',
        '_500' => 'set500'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_200' => 'get200',
        '_201' => 'get201',
        '_202' => 'get202',
        '_203' => 'get203',
        '_204' => 'get204',
        '_205' => 'get205',
        '_206' => 'get206',
        '_207' => 'get207',
        '_208' => 'get208',
        '_226' => 'get226',
        '_300' => 'get300',
        '_301' => 'get301',
        '_302' => 'get302',
        '_303' => 'get303',
        '_304' => 'get304',
        '_305' => 'get305',
        '_306' => 'get306',
        '_307' => 'get307',
        '_308' => 'get308',
        '_400' => 'get400',
        '_401' => 'get401',
        '_402' => 'get402',
        '_403' => 'get403',
        '_404' => 'get404',
        '_405' => 'get405',
        '_406' => 'get406',
        '_407' => 'get407',
        '_408' => 'get408',
        '_409' => 'get409',
        '_410' => 'get410',
        '_411' => 'get411',
        '_412' => 'get412',
        '_413' => 'get413',
        '_414' => 'get414',
        '_415' => 'get415',
        '_416' => 'get416',
        '_417' => 'get417',
        '_421' => 'get421',
        '_422' => 'get422',
        '_423' => 'get423',
        '_424' => 'get424',
        '_425' => 'get425',
        '_426' => 'get426',
        '_428' => 'get428',
        '_429' => 'get429',
        '_431' => 'get431',
        '_451' => 'get451',
        '_500' => 'get500'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('_200', $data ?? [], null);
        $this->setIfExists('_201', $data ?? [], null);
        $this->setIfExists('_202', $data ?? [], null);
        $this->setIfExists('_203', $data ?? [], null);
        $this->setIfExists('_204', $data ?? [], null);
        $this->setIfExists('_205', $data ?? [], null);
        $this->setIfExists('_206', $data ?? [], null);
        $this->setIfExists('_207', $data ?? [], null);
        $this->setIfExists('_208', $data ?? [], null);
        $this->setIfExists('_226', $data ?? [], null);
        $this->setIfExists('_300', $data ?? [], null);
        $this->setIfExists('_301', $data ?? [], null);
        $this->setIfExists('_302', $data ?? [], null);
        $this->setIfExists('_303', $data ?? [], null);
        $this->setIfExists('_304', $data ?? [], null);
        $this->setIfExists('_305', $data ?? [], null);
        $this->setIfExists('_306', $data ?? [], null);
        $this->setIfExists('_307', $data ?? [], null);
        $this->setIfExists('_308', $data ?? [], null);
        $this->setIfExists('_400', $data ?? [], null);
        $this->setIfExists('_401', $data ?? [], null);
        $this->setIfExists('_402', $data ?? [], null);
        $this->setIfExists('_403', $data ?? [], null);
        $this->setIfExists('_404', $data ?? [], null);
        $this->setIfExists('_405', $data ?? [], null);
        $this->setIfExists('_406', $data ?? [], null);
        $this->setIfExists('_407', $data ?? [], null);
        $this->setIfExists('_408', $data ?? [], null);
        $this->setIfExists('_409', $data ?? [], null);
        $this->setIfExists('_410', $data ?? [], null);
        $this->setIfExists('_411', $data ?? [], null);
        $this->setIfExists('_412', $data ?? [], null);
        $this->setIfExists('_413', $data ?? [], null);
        $this->setIfExists('_414', $data ?? [], null);
        $this->setIfExists('_415', $data ?? [], null);
        $this->setIfExists('_416', $data ?? [], null);
        $this->setIfExists('_417', $data ?? [], null);
        $this->setIfExists('_421', $data ?? [], null);
        $this->setIfExists('_422', $data ?? [], null);
        $this->setIfExists('_423', $data ?? [], null);
        $this->setIfExists('_424', $data ?? [], null);
        $this->setIfExists('_425', $data ?? [], null);
        $this->setIfExists('_426', $data ?? [], null);
        $this->setIfExists('_428', $data ?? [], null);
        $this->setIfExists('_429', $data ?? [], null);
        $this->setIfExists('_431', $data ?? [], null);
        $this->setIfExists('_451', $data ?? [], null);
        $this->setIfExists('_500', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _200
     *
     * @return int|null
     */
    public function get200()
    {
        return $this->container['_200'];
    }

    /**
     * Sets _200
     *
     * @param int|null $_200 HTTP 200 response code count.
     *
     * @return self
     */
    public function set200($_200)
    {
        if (is_null($_200)) {
            throw new \InvalidArgumentException('non-nullable _200 cannot be null');
        }
        $this->container['_200'] = $_200;

        return $this;
    }

    /**
     * Gets _201
     *
     * @return int|null
     */
    public function get201()
    {
        return $this->container['_201'];
    }

    /**
     * Sets _201
     *
     * @param int|null $_201 HTTP 201 response code count.
     *
     * @return self
     */
    public function set201($_201)
    {
        if (is_null($_201)) {
            throw new \InvalidArgumentException('non-nullable _201 cannot be null');
        }
        $this->container['_201'] = $_201;

        return $this;
    }

    /**
     * Gets _202
     *
     * @return int|null
     */
    public function get202()
    {
        return $this->container['_202'];
    }

    /**
     * Sets _202
     *
     * @param int|null $_202 HTTP 202 response code count.
     *
     * @return self
     */
    public function set202($_202)
    {
        if (is_null($_202)) {
            throw new \InvalidArgumentException('non-nullable _202 cannot be null');
        }
        $this->container['_202'] = $_202;

        return $this;
    }

    /**
     * Gets _203
     *
     * @return int|null
     */
    public function get203()
    {
        return $this->container['_203'];
    }

    /**
     * Sets _203
     *
     * @param int|null $_203 HTTP 203 response code count.
     *
     * @return self
     */
    public function set203($_203)
    {
        if (is_null($_203)) {
            throw new \InvalidArgumentException('non-nullable _203 cannot be null');
        }
        $this->container['_203'] = $_203;

        return $this;
    }

    /**
     * Gets _204
     *
     * @return int|null
     */
    public function get204()
    {
        return $this->container['_204'];
    }

    /**
     * Sets _204
     *
     * @param int|null $_204 HTTP 204 response code count.
     *
     * @return self
     */
    public function set204($_204)
    {
        if (is_null($_204)) {
            throw new \InvalidArgumentException('non-nullable _204 cannot be null');
        }
        $this->container['_204'] = $_204;

        return $this;
    }

    /**
     * Gets _205
     *
     * @return int|null
     */
    public function get205()
    {
        return $this->container['_205'];
    }

    /**
     * Sets _205
     *
     * @param int|null $_205 HTTP 205 response code count.
     *
     * @return self
     */
    public function set205($_205)
    {
        if (is_null($_205)) {
            throw new \InvalidArgumentException('non-nullable _205 cannot be null');
        }
        $this->container['_205'] = $_205;

        return $this;
    }

    /**
     * Gets _206
     *
     * @return int|null
     */
    public function get206()
    {
        return $this->container['_206'];
    }

    /**
     * Sets _206
     *
     * @param int|null $_206 HTTP 206 response code count.
     *
     * @return self
     */
    public function set206($_206)
    {
        if (is_null($_206)) {
            throw new \InvalidArgumentException('non-nullable _206 cannot be null');
        }
        $this->container['_206'] = $_206;

        return $this;
    }

    /**
     * Gets _207
     *
     * @return int|null
     */
    public function get207()
    {
        return $this->container['_207'];
    }

    /**
     * Sets _207
     *
     * @param int|null $_207 HTTP 207 response code count.
     *
     * @return self
     */
    public function set207($_207)
    {
        if (is_null($_207)) {
            throw new \InvalidArgumentException('non-nullable _207 cannot be null');
        }
        $this->container['_207'] = $_207;

        return $this;
    }

    /**
     * Gets _208
     *
     * @return int|null
     */
    public function get208()
    {
        return $this->container['_208'];
    }

    /**
     * Sets _208
     *
     * @param int|null $_208 HTTP 208 response code count.
     *
     * @return self
     */
    public function set208($_208)
    {
        if (is_null($_208)) {
            throw new \InvalidArgumentException('non-nullable _208 cannot be null');
        }
        $this->container['_208'] = $_208;

        return $this;
    }

    /**
     * Gets _226
     *
     * @return int|null
     */
    public function get226()
    {
        return $this->container['_226'];
    }

    /**
     * Sets _226
     *
     * @param int|null $_226 HTTP 226 response code count.
     *
     * @return self
     */
    public function set226($_226)
    {
        if (is_null($_226)) {
            throw new \InvalidArgumentException('non-nullable _226 cannot be null');
        }
        $this->container['_226'] = $_226;

        return $this;
    }

    /**
     * Gets _300
     *
     * @return int|null
     */
    public function get300()
    {
        return $this->container['_300'];
    }

    /**
     * Sets _300
     *
     * @param int|null $_300 HTTP 300 response code count.
     *
     * @return self
     */
    public function set300($_300)
    {
        if (is_null($_300)) {
            throw new \InvalidArgumentException('non-nullable _300 cannot be null');
        }
        $this->container['_300'] = $_300;

        return $this;
    }

    /**
     * Gets _301
     *
     * @return int|null
     */
    public function get301()
    {
        return $this->container['_301'];
    }

    /**
     * Sets _301
     *
     * @param int|null $_301 HTTP 301 response code count.
     *
     * @return self
     */
    public function set301($_301)
    {
        if (is_null($_301)) {
            throw new \InvalidArgumentException('non-nullable _301 cannot be null');
        }
        $this->container['_301'] = $_301;

        return $this;
    }

    /**
     * Gets _302
     *
     * @return int|null
     */
    public function get302()
    {
        return $this->container['_302'];
    }

    /**
     * Sets _302
     *
     * @param int|null $_302 HTTP 302 response code count.
     *
     * @return self
     */
    public function set302($_302)
    {
        if (is_null($_302)) {
            throw new \InvalidArgumentException('non-nullable _302 cannot be null');
        }
        $this->container['_302'] = $_302;

        return $this;
    }

    /**
     * Gets _303
     *
     * @return int|null
     */
    public function get303()
    {
        return $this->container['_303'];
    }

    /**
     * Sets _303
     *
     * @param int|null $_303 HTTP 303 response code count.
     *
     * @return self
     */
    public function set303($_303)
    {
        if (is_null($_303)) {
            throw new \InvalidArgumentException('non-nullable _303 cannot be null');
        }
        $this->container['_303'] = $_303;

        return $this;
    }

    /**
     * Gets _304
     *
     * @return int|null
     */
    public function get304()
    {
        return $this->container['_304'];
    }

    /**
     * Sets _304
     *
     * @param int|null $_304 HTTP 304 response code count.
     *
     * @return self
     */
    public function set304($_304)
    {
        if (is_null($_304)) {
            throw new \InvalidArgumentException('non-nullable _304 cannot be null');
        }
        $this->container['_304'] = $_304;

        return $this;
    }

    /**
     * Gets _305
     *
     * @return int|null
     */
    public function get305()
    {
        return $this->container['_305'];
    }

    /**
     * Sets _305
     *
     * @param int|null $_305 HTTP 305 response code count.
     *
     * @return self
     */
    public function set305($_305)
    {
        if (is_null($_305)) {
            throw new \InvalidArgumentException('non-nullable _305 cannot be null');
        }
        $this->container['_305'] = $_305;

        return $this;
    }

    /**
     * Gets _306
     *
     * @return int|null
     */
    public function get306()
    {
        return $this->container['_306'];
    }

    /**
     * Sets _306
     *
     * @param int|null $_306 HTTP 306 response code count.
     *
     * @return self
     */
    public function set306($_306)
    {
        if (is_null($_306)) {
            throw new \InvalidArgumentException('non-nullable _306 cannot be null');
        }
        $this->container['_306'] = $_306;

        return $this;
    }

    /**
     * Gets _307
     *
     * @return int|null
     */
    public function get307()
    {
        return $this->container['_307'];
    }

    /**
     * Sets _307
     *
     * @param int|null $_307 HTTP 307 response code count.
     *
     * @return self
     */
    public function set307($_307)
    {
        if (is_null($_307)) {
            throw new \InvalidArgumentException('non-nullable _307 cannot be null');
        }
        $this->container['_307'] = $_307;

        return $this;
    }

    /**
     * Gets _308
     *
     * @return int|null
     */
    public function get308()
    {
        return $this->container['_308'];
    }

    /**
     * Sets _308
     *
     * @param int|null $_308 HTTP 308 response code count.
     *
     * @return self
     */
    public function set308($_308)
    {
        if (is_null($_308)) {
            throw new \InvalidArgumentException('non-nullable _308 cannot be null');
        }
        $this->container['_308'] = $_308;

        return $this;
    }

    /**
     * Gets _400
     *
     * @return int|null
     */
    public function get400()
    {
        return $this->container['_400'];
    }

    /**
     * Sets _400
     *
     * @param int|null $_400 HTTP 400 response code count.
     *
     * @return self
     */
    public function set400($_400)
    {
        if (is_null($_400)) {
            throw new \InvalidArgumentException('non-nullable _400 cannot be null');
        }
        $this->container['_400'] = $_400;

        return $this;
    }

    /**
     * Gets _401
     *
     * @return int|null
     */
    public function get401()
    {
        return $this->container['_401'];
    }

    /**
     * Sets _401
     *
     * @param int|null $_401 HTTP 401 response code count.
     *
     * @return self
     */
    public function set401($_401)
    {
        if (is_null($_401)) {
            throw new \InvalidArgumentException('non-nullable _401 cannot be null');
        }
        $this->container['_401'] = $_401;

        return $this;
    }

    /**
     * Gets _402
     *
     * @return int|null
     */
    public function get402()
    {
        return $this->container['_402'];
    }

    /**
     * Sets _402
     *
     * @param int|null $_402 HTTP 402 response code count.
     *
     * @return self
     */
    public function set402($_402)
    {
        if (is_null($_402)) {
            throw new \InvalidArgumentException('non-nullable _402 cannot be null');
        }
        $this->container['_402'] = $_402;

        return $this;
    }

    /**
     * Gets _403
     *
     * @return int|null
     */
    public function get403()
    {
        return $this->container['_403'];
    }

    /**
     * Sets _403
     *
     * @param int|null $_403 HTTP 403 response code count.
     *
     * @return self
     */
    public function set403($_403)
    {
        if (is_null($_403)) {
            throw new \InvalidArgumentException('non-nullable _403 cannot be null');
        }
        $this->container['_403'] = $_403;

        return $this;
    }

    /**
     * Gets _404
     *
     * @return int|null
     */
    public function get404()
    {
        return $this->container['_404'];
    }

    /**
     * Sets _404
     *
     * @param int|null $_404 HTTP 404 response code count.
     *
     * @return self
     */
    public function set404($_404)
    {
        if (is_null($_404)) {
            throw new \InvalidArgumentException('non-nullable _404 cannot be null');
        }
        $this->container['_404'] = $_404;

        return $this;
    }

    /**
     * Gets _405
     *
     * @return int|null
     */
    public function get405()
    {
        return $this->container['_405'];
    }

    /**
     * Sets _405
     *
     * @param int|null $_405 HTTP 405 response code count.
     *
     * @return self
     */
    public function set405($_405)
    {
        if (is_null($_405)) {
            throw new \InvalidArgumentException('non-nullable _405 cannot be null');
        }
        $this->container['_405'] = $_405;

        return $this;
    }

    /**
     * Gets _406
     *
     * @return int|null
     */
    public function get406()
    {
        return $this->container['_406'];
    }

    /**
     * Sets _406
     *
     * @param int|null $_406 HTTP 406 response code count.
     *
     * @return self
     */
    public function set406($_406)
    {
        if (is_null($_406)) {
            throw new \InvalidArgumentException('non-nullable _406 cannot be null');
        }
        $this->container['_406'] = $_406;

        return $this;
    }

    /**
     * Gets _407
     *
     * @return int|null
     */
    public function get407()
    {
        return $this->container['_407'];
    }

    /**
     * Sets _407
     *
     * @param int|null $_407 HTTP 407 response code count.
     *
     * @return self
     */
    public function set407($_407)
    {
        if (is_null($_407)) {
            throw new \InvalidArgumentException('non-nullable _407 cannot be null');
        }
        $this->container['_407'] = $_407;

        return $this;
    }

    /**
     * Gets _408
     *
     * @return int|null
     */
    public function get408()
    {
        return $this->container['_408'];
    }

    /**
     * Sets _408
     *
     * @param int|null $_408 HTTP 408 response code count.
     *
     * @return self
     */
    public function set408($_408)
    {
        if (is_null($_408)) {
            throw new \InvalidArgumentException('non-nullable _408 cannot be null');
        }
        $this->container['_408'] = $_408;

        return $this;
    }

    /**
     * Gets _409
     *
     * @return int|null
     */
    public function get409()
    {
        return $this->container['_409'];
    }

    /**
     * Sets _409
     *
     * @param int|null $_409 HTTP 409 response code count.
     *
     * @return self
     */
    public function set409($_409)
    {
        if (is_null($_409)) {
            throw new \InvalidArgumentException('non-nullable _409 cannot be null');
        }
        $this->container['_409'] = $_409;

        return $this;
    }

    /**
     * Gets _410
     *
     * @return int|null
     */
    public function get410()
    {
        return $this->container['_410'];
    }

    /**
     * Sets _410
     *
     * @param int|null $_410 HTTP 410 response code count.
     *
     * @return self
     */
    public function set410($_410)
    {
        if (is_null($_410)) {
            throw new \InvalidArgumentException('non-nullable _410 cannot be null');
        }
        $this->container['_410'] = $_410;

        return $this;
    }

    /**
     * Gets _411
     *
     * @return int|null
     */
    public function get411()
    {
        return $this->container['_411'];
    }

    /**
     * Sets _411
     *
     * @param int|null $_411 HTTP 411 response code count.
     *
     * @return self
     */
    public function set411($_411)
    {
        if (is_null($_411)) {
            throw new \InvalidArgumentException('non-nullable _411 cannot be null');
        }
        $this->container['_411'] = $_411;

        return $this;
    }

    /**
     * Gets _412
     *
     * @return int|null
     */
    public function get412()
    {
        return $this->container['_412'];
    }

    /**
     * Sets _412
     *
     * @param int|null $_412 HTTP 412 response code count.
     *
     * @return self
     */
    public function set412($_412)
    {
        if (is_null($_412)) {
            throw new \InvalidArgumentException('non-nullable _412 cannot be null');
        }
        $this->container['_412'] = $_412;

        return $this;
    }

    /**
     * Gets _413
     *
     * @return int|null
     */
    public function get413()
    {
        return $this->container['_413'];
    }

    /**
     * Sets _413
     *
     * @param int|null $_413 HTTP 413 response code count.
     *
     * @return self
     */
    public function set413($_413)
    {
        if (is_null($_413)) {
            throw new \InvalidArgumentException('non-nullable _413 cannot be null');
        }
        $this->container['_413'] = $_413;

        return $this;
    }

    /**
     * Gets _414
     *
     * @return int|null
     */
    public function get414()
    {
        return $this->container['_414'];
    }

    /**
     * Sets _414
     *
     * @param int|null $_414 HTTP 414 response code count.
     *
     * @return self
     */
    public function set414($_414)
    {
        if (is_null($_414)) {
            throw new \InvalidArgumentException('non-nullable _414 cannot be null');
        }
        $this->container['_414'] = $_414;

        return $this;
    }

    /**
     * Gets _415
     *
     * @return int|null
     */
    public function get415()
    {
        return $this->container['_415'];
    }

    /**
     * Sets _415
     *
     * @param int|null $_415 HTTP 415 response code count.
     *
     * @return self
     */
    public function set415($_415)
    {
        if (is_null($_415)) {
            throw new \InvalidArgumentException('non-nullable _415 cannot be null');
        }
        $this->container['_415'] = $_415;

        return $this;
    }

    /**
     * Gets _416
     *
     * @return int|null
     */
    public function get416()
    {
        return $this->container['_416'];
    }

    /**
     * Sets _416
     *
     * @param int|null $_416 HTTP 416 response code count.
     *
     * @return self
     */
    public function set416($_416)
    {
        if (is_null($_416)) {
            throw new \InvalidArgumentException('non-nullable _416 cannot be null');
        }
        $this->container['_416'] = $_416;

        return $this;
    }

    /**
     * Gets _417
     *
     * @return int|null
     */
    public function get417()
    {
        return $this->container['_417'];
    }

    /**
     * Sets _417
     *
     * @param int|null $_417 HTTP 417 response code count.
     *
     * @return self
     */
    public function set417($_417)
    {
        if (is_null($_417)) {
            throw new \InvalidArgumentException('non-nullable _417 cannot be null');
        }
        $this->container['_417'] = $_417;

        return $this;
    }

    /**
     * Gets _421
     *
     * @return int|null
     */
    public function get421()
    {
        return $this->container['_421'];
    }

    /**
     * Sets _421
     *
     * @param int|null $_421 HTTP 421 response code count.
     *
     * @return self
     */
    public function set421($_421)
    {
        if (is_null($_421)) {
            throw new \InvalidArgumentException('non-nullable _421 cannot be null');
        }
        $this->container['_421'] = $_421;

        return $this;
    }

    /**
     * Gets _422
     *
     * @return int|null
     */
    public function get422()
    {
        return $this->container['_422'];
    }

    /**
     * Sets _422
     *
     * @param int|null $_422 HTTP 422 response code count.
     *
     * @return self
     */
    public function set422($_422)
    {
        if (is_null($_422)) {
            throw new \InvalidArgumentException('non-nullable _422 cannot be null');
        }
        $this->container['_422'] = $_422;

        return $this;
    }

    /**
     * Gets _423
     *
     * @return int|null
     */
    public function get423()
    {
        return $this->container['_423'];
    }

    /**
     * Sets _423
     *
     * @param int|null $_423 HTTP 423 response code count.
     *
     * @return self
     */
    public function set423($_423)
    {
        if (is_null($_423)) {
            throw new \InvalidArgumentException('non-nullable _423 cannot be null');
        }
        $this->container['_423'] = $_423;

        return $this;
    }

    /**
     * Gets _424
     *
     * @return int|null
     */
    public function get424()
    {
        return $this->container['_424'];
    }

    /**
     * Sets _424
     *
     * @param int|null $_424 HTTP 424 response code count.
     *
     * @return self
     */
    public function set424($_424)
    {
        if (is_null($_424)) {
            throw new \InvalidArgumentException('non-nullable _424 cannot be null');
        }
        $this->container['_424'] = $_424;

        return $this;
    }

    /**
     * Gets _425
     *
     * @return int|null
     */
    public function get425()
    {
        return $this->container['_425'];
    }

    /**
     * Sets _425
     *
     * @param int|null $_425 HTTP 425 response code count.
     *
     * @return self
     */
    public function set425($_425)
    {
        if (is_null($_425)) {
            throw new \InvalidArgumentException('non-nullable _425 cannot be null');
        }
        $this->container['_425'] = $_425;

        return $this;
    }

    /**
     * Gets _426
     *
     * @return int|null
     */
    public function get426()
    {
        return $this->container['_426'];
    }

    /**
     * Sets _426
     *
     * @param int|null $_426 HTTP 426 response code count.
     *
     * @return self
     */
    public function set426($_426)
    {
        if (is_null($_426)) {
            throw new \InvalidArgumentException('non-nullable _426 cannot be null');
        }
        $this->container['_426'] = $_426;

        return $this;
    }

    /**
     * Gets _428
     *
     * @return int|null
     */
    public function get428()
    {
        return $this->container['_428'];
    }

    /**
     * Sets _428
     *
     * @param int|null $_428 HTTP 428 response code count.
     *
     * @return self
     */
    public function set428($_428)
    {
        if (is_null($_428)) {
            throw new \InvalidArgumentException('non-nullable _428 cannot be null');
        }
        $this->container['_428'] = $_428;

        return $this;
    }

    /**
     * Gets _429
     *
     * @return int|null
     */
    public function get429()
    {
        return $this->container['_429'];
    }

    /**
     * Sets _429
     *
     * @param int|null $_429 HTTP 429 response code count.
     *
     * @return self
     */
    public function set429($_429)
    {
        if (is_null($_429)) {
            throw new \InvalidArgumentException('non-nullable _429 cannot be null');
        }
        $this->container['_429'] = $_429;

        return $this;
    }

    /**
     * Gets _431
     *
     * @return int|null
     */
    public function get431()
    {
        return $this->container['_431'];
    }

    /**
     * Sets _431
     *
     * @param int|null $_431 HTTP 431 response code count.
     *
     * @return self
     */
    public function set431($_431)
    {
        if (is_null($_431)) {
            throw new \InvalidArgumentException('non-nullable _431 cannot be null');
        }
        $this->container['_431'] = $_431;

        return $this;
    }

    /**
     * Gets _451
     *
     * @return int|null
     */
    public function get451()
    {
        return $this->container['_451'];
    }

    /**
     * Sets _451
     *
     * @param int|null $_451 HTTP 451 response code count.
     *
     * @return self
     */
    public function set451($_451)
    {
        if (is_null($_451)) {
            throw new \InvalidArgumentException('non-nullable _451 cannot be null');
        }
        $this->container['_451'] = $_451;

        return $this;
    }

    /**
     * Gets _500
     *
     * @return int|null
     */
    public function get500()
    {
        return $this->container['_500'];
    }

    /**
     * Sets _500
     *
     * @param int|null $_500 HTTP 500 response code count.
     *
     * @return self
     */
    public function set500($_500)
    {
        if (is_null($_500)) {
            throw new \InvalidArgumentException('non-nullable _500 cannot be null');
        }
        $this->container['_500'] = $_500;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


