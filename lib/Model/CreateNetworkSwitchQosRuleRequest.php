<?php
/**
 * CreateNetworkSwitchQosRuleRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * CreateNetworkSwitchQosRuleRequest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateNetworkSwitchQosRuleRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'createNetworkSwitchQosRule_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vlan' => 'int',
        'protocol' => 'string',
        'src_port' => 'int',
        'src_port_range' => 'string',
        'dst_port' => 'int',
        'dst_port_range' => 'string',
        'dscp' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vlan' => null,
        'protocol' => null,
        'src_port' => null,
        'src_port_range' => null,
        'dst_port' => null,
        'dst_port_range' => null,
        'dscp' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'vlan' => false,
        'protocol' => false,
        'src_port' => false,
        'src_port_range' => false,
        'dst_port' => false,
        'dst_port_range' => false,
        'dscp' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vlan' => 'vlan',
        'protocol' => 'protocol',
        'src_port' => 'srcPort',
        'src_port_range' => 'srcPortRange',
        'dst_port' => 'dstPort',
        'dst_port_range' => 'dstPortRange',
        'dscp' => 'dscp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vlan' => 'setVlan',
        'protocol' => 'setProtocol',
        'src_port' => 'setSrcPort',
        'src_port_range' => 'setSrcPortRange',
        'dst_port' => 'setDstPort',
        'dst_port_range' => 'setDstPortRange',
        'dscp' => 'setDscp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vlan' => 'getVlan',
        'protocol' => 'getProtocol',
        'src_port' => 'getSrcPort',
        'src_port_range' => 'getSrcPortRange',
        'dst_port' => 'getDstPort',
        'dst_port_range' => 'getDstPortRange',
        'dscp' => 'getDscp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PROTOCOL_ANY = 'ANY';
    public const PROTOCOL_TCP = 'TCP';
    public const PROTOCOL_UDP = 'UDP';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProtocolAllowableValues()
    {
        return [
            self::PROTOCOL_ANY,
            self::PROTOCOL_TCP,
            self::PROTOCOL_UDP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('vlan', $data ?? [], null);
        $this->setIfExists('protocol', $data ?? [], null);
        $this->setIfExists('src_port', $data ?? [], null);
        $this->setIfExists('src_port_range', $data ?? [], null);
        $this->setIfExists('dst_port', $data ?? [], null);
        $this->setIfExists('dst_port_range', $data ?? [], null);
        $this->setIfExists('dscp', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['vlan'] === null) {
            $invalidProperties[] = "'vlan' can't be null";
        }
        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($this->container['protocol']) && !in_array($this->container['protocol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'protocol', must be one of '%s'",
                $this->container['protocol'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vlan
     *
     * @return int
     */
    public function getVlan()
    {
        return $this->container['vlan'];
    }

    /**
     * Sets vlan
     *
     * @param int $vlan The VLAN of the incoming packet. A null value will match any VLAN.
     *
     * @return self
     */
    public function setVlan($vlan)
    {
        if (is_null($vlan)) {
            throw new \InvalidArgumentException('non-nullable vlan cannot be null');
        }
        $this->container['vlan'] = $vlan;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string|null $protocol The protocol of the incoming packet. Default value is \"ANY\"
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        if (is_null($protocol)) {
            throw new \InvalidArgumentException('non-nullable protocol cannot be null');
        }
        $allowedValues = $this->getProtocolAllowableValues();
        if (!in_array($protocol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'protocol', must be one of '%s'",
                    $protocol,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets src_port
     *
     * @return int|null
     */
    public function getSrcPort()
    {
        return $this->container['src_port'];
    }

    /**
     * Sets src_port
     *
     * @param int|null $src_port The source port of the incoming packet. Applicable only if protocol is TCP or UDP.
     *
     * @return self
     */
    public function setSrcPort($src_port)
    {
        if (is_null($src_port)) {
            throw new \InvalidArgumentException('non-nullable src_port cannot be null');
        }
        $this->container['src_port'] = $src_port;

        return $this;
    }

    /**
     * Gets src_port_range
     *
     * @return string|null
     */
    public function getSrcPortRange()
    {
        return $this->container['src_port_range'];
    }

    /**
     * Sets src_port_range
     *
     * @param string|null $src_port_range The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP.
     *
     * @return self
     */
    public function setSrcPortRange($src_port_range)
    {
        if (is_null($src_port_range)) {
            throw new \InvalidArgumentException('non-nullable src_port_range cannot be null');
        }
        $this->container['src_port_range'] = $src_port_range;

        return $this;
    }

    /**
     * Gets dst_port
     *
     * @return int|null
     */
    public function getDstPort()
    {
        return $this->container['dst_port'];
    }

    /**
     * Sets dst_port
     *
     * @param int|null $dst_port The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.
     *
     * @return self
     */
    public function setDstPort($dst_port)
    {
        if (is_null($dst_port)) {
            throw new \InvalidArgumentException('non-nullable dst_port cannot be null');
        }
        $this->container['dst_port'] = $dst_port;

        return $this;
    }

    /**
     * Gets dst_port_range
     *
     * @return string|null
     */
    public function getDstPortRange()
    {
        return $this->container['dst_port_range'];
    }

    /**
     * Sets dst_port_range
     *
     * @param string|null $dst_port_range The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP.
     *
     * @return self
     */
    public function setDstPortRange($dst_port_range)
    {
        if (is_null($dst_port_range)) {
            throw new \InvalidArgumentException('non-nullable dst_port_range cannot be null');
        }
        $this->container['dst_port_range'] = $dst_port_range;

        return $this;
    }

    /**
     * Gets dscp
     *
     * @return int|null
     */
    public function getDscp()
    {
        return $this->container['dscp'];
    }

    /**
     * Sets dscp
     *
     * @param int|null $dscp DSCP tag for the incoming packet. Set this to -1 to trust incoming DSCP. Default value is 0
     *
     * @return self
     */
    public function setDscp($dscp)
    {
        if (is_null($dscp)) {
            throw new \InvalidArgumentException('non-nullable dscp cannot be null');
        }
        $this->container['dscp'] = $dscp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


