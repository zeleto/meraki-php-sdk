<?php
/**
 * GetNetworkSmDevicePerformanceHistory200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetNetworkSmDevicePerformanceHistory200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetNetworkSmDevicePerformanceHistory200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getNetworkSmDevicePerformanceHistory_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cpu_percent_used' => 'float',
        'mem_free' => 'int',
        'mem_wired' => 'int',
        'mem_active' => 'int',
        'mem_inactive' => 'int',
        'network_sent' => 'int',
        'network_received' => 'int',
        'swap_used' => 'int',
        'disk_usage' => '\Meraki\Model\GetNetworkSmDevicePerformanceHistory200ResponseInnerDiskUsage',
        'ts' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cpu_percent_used' => 'float',
        'mem_free' => null,
        'mem_wired' => null,
        'mem_active' => null,
        'mem_inactive' => null,
        'network_sent' => null,
        'network_received' => null,
        'swap_used' => null,
        'disk_usage' => null,
        'ts' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cpu_percent_used' => false,
        'mem_free' => false,
        'mem_wired' => false,
        'mem_active' => false,
        'mem_inactive' => false,
        'network_sent' => false,
        'network_received' => false,
        'swap_used' => false,
        'disk_usage' => false,
        'ts' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cpu_percent_used' => 'cpuPercentUsed',
        'mem_free' => 'memFree',
        'mem_wired' => 'memWired',
        'mem_active' => 'memActive',
        'mem_inactive' => 'memInactive',
        'network_sent' => 'networkSent',
        'network_received' => 'networkReceived',
        'swap_used' => 'swapUsed',
        'disk_usage' => 'diskUsage',
        'ts' => 'ts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cpu_percent_used' => 'setCpuPercentUsed',
        'mem_free' => 'setMemFree',
        'mem_wired' => 'setMemWired',
        'mem_active' => 'setMemActive',
        'mem_inactive' => 'setMemInactive',
        'network_sent' => 'setNetworkSent',
        'network_received' => 'setNetworkReceived',
        'swap_used' => 'setSwapUsed',
        'disk_usage' => 'setDiskUsage',
        'ts' => 'setTs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cpu_percent_used' => 'getCpuPercentUsed',
        'mem_free' => 'getMemFree',
        'mem_wired' => 'getMemWired',
        'mem_active' => 'getMemActive',
        'mem_inactive' => 'getMemInactive',
        'network_sent' => 'getNetworkSent',
        'network_received' => 'getNetworkReceived',
        'swap_used' => 'getSwapUsed',
        'disk_usage' => 'getDiskUsage',
        'ts' => 'getTs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('cpu_percent_used', $data ?? [], null);
        $this->setIfExists('mem_free', $data ?? [], null);
        $this->setIfExists('mem_wired', $data ?? [], null);
        $this->setIfExists('mem_active', $data ?? [], null);
        $this->setIfExists('mem_inactive', $data ?? [], null);
        $this->setIfExists('network_sent', $data ?? [], null);
        $this->setIfExists('network_received', $data ?? [], null);
        $this->setIfExists('swap_used', $data ?? [], null);
        $this->setIfExists('disk_usage', $data ?? [], null);
        $this->setIfExists('ts', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cpu_percent_used
     *
     * @return float|null
     */
    public function getCpuPercentUsed()
    {
        return $this->container['cpu_percent_used'];
    }

    /**
     * Sets cpu_percent_used
     *
     * @param float|null $cpu_percent_used The percentage of CPU used as a decimal format.
     *
     * @return self
     */
    public function setCpuPercentUsed($cpu_percent_used)
    {
        if (is_null($cpu_percent_used)) {
            throw new \InvalidArgumentException('non-nullable cpu_percent_used cannot be null');
        }
        $this->container['cpu_percent_used'] = $cpu_percent_used;

        return $this;
    }

    /**
     * Gets mem_free
     *
     * @return int|null
     */
    public function getMemFree()
    {
        return $this->container['mem_free'];
    }

    /**
     * Sets mem_free
     *
     * @param int|null $mem_free Memory that is not yet in use by the system.
     *
     * @return self
     */
    public function setMemFree($mem_free)
    {
        if (is_null($mem_free)) {
            throw new \InvalidArgumentException('non-nullable mem_free cannot be null');
        }
        $this->container['mem_free'] = $mem_free;

        return $this;
    }

    /**
     * Gets mem_wired
     *
     * @return int|null
     */
    public function getMemWired()
    {
        return $this->container['mem_wired'];
    }

    /**
     * Sets mem_wired
     *
     * @param int|null $mem_wired Memory used for core OS functions on the device.
     *
     * @return self
     */
    public function setMemWired($mem_wired)
    {
        if (is_null($mem_wired)) {
            throw new \InvalidArgumentException('non-nullable mem_wired cannot be null');
        }
        $this->container['mem_wired'] = $mem_wired;

        return $this;
    }

    /**
     * Gets mem_active
     *
     * @return int|null
     */
    public function getMemActive()
    {
        return $this->container['mem_active'];
    }

    /**
     * Sets mem_active
     *
     * @param int|null $mem_active The active RAM on the device.
     *
     * @return self
     */
    public function setMemActive($mem_active)
    {
        if (is_null($mem_active)) {
            throw new \InvalidArgumentException('non-nullable mem_active cannot be null');
        }
        $this->container['mem_active'] = $mem_active;

        return $this;
    }

    /**
     * Gets mem_inactive
     *
     * @return int|null
     */
    public function getMemInactive()
    {
        return $this->container['mem_inactive'];
    }

    /**
     * Sets mem_inactive
     *
     * @param int|null $mem_inactive The inactive RAM on the device.
     *
     * @return self
     */
    public function setMemInactive($mem_inactive)
    {
        if (is_null($mem_inactive)) {
            throw new \InvalidArgumentException('non-nullable mem_inactive cannot be null');
        }
        $this->container['mem_inactive'] = $mem_inactive;

        return $this;
    }

    /**
     * Gets network_sent
     *
     * @return int|null
     */
    public function getNetworkSent()
    {
        return $this->container['network_sent'];
    }

    /**
     * Sets network_sent
     *
     * @param int|null $network_sent Network bandwith transmitted.
     *
     * @return self
     */
    public function setNetworkSent($network_sent)
    {
        if (is_null($network_sent)) {
            throw new \InvalidArgumentException('non-nullable network_sent cannot be null');
        }
        $this->container['network_sent'] = $network_sent;

        return $this;
    }

    /**
     * Gets network_received
     *
     * @return int|null
     */
    public function getNetworkReceived()
    {
        return $this->container['network_received'];
    }

    /**
     * Sets network_received
     *
     * @param int|null $network_received Network bandwith received.
     *
     * @return self
     */
    public function setNetworkReceived($network_received)
    {
        if (is_null($network_received)) {
            throw new \InvalidArgumentException('non-nullable network_received cannot be null');
        }
        $this->container['network_received'] = $network_received;

        return $this;
    }

    /**
     * Gets swap_used
     *
     * @return int|null
     */
    public function getSwapUsed()
    {
        return $this->container['swap_used'];
    }

    /**
     * Sets swap_used
     *
     * @param int|null $swap_used The amount of space being used on the startup disk to swap unused files to and from RAM.
     *
     * @return self
     */
    public function setSwapUsed($swap_used)
    {
        if (is_null($swap_used)) {
            throw new \InvalidArgumentException('non-nullable swap_used cannot be null');
        }
        $this->container['swap_used'] = $swap_used;

        return $this;
    }

    /**
     * Gets disk_usage
     *
     * @return \Meraki\Model\GetNetworkSmDevicePerformanceHistory200ResponseInnerDiskUsage|null
     */
    public function getDiskUsage()
    {
        return $this->container['disk_usage'];
    }

    /**
     * Sets disk_usage
     *
     * @param \Meraki\Model\GetNetworkSmDevicePerformanceHistory200ResponseInnerDiskUsage|null $disk_usage disk_usage
     *
     * @return self
     */
    public function setDiskUsage($disk_usage)
    {
        if (is_null($disk_usage)) {
            throw new \InvalidArgumentException('non-nullable disk_usage cannot be null');
        }
        $this->container['disk_usage'] = $disk_usage;

        return $this;
    }

    /**
     * Gets ts
     *
     * @return string|null
     */
    public function getTs()
    {
        return $this->container['ts'];
    }

    /**
     * Sets ts
     *
     * @param string|null $ts The time at which the performance was measured.
     *
     * @return self
     */
    public function setTs($ts)
    {
        if (is_null($ts)) {
            throw new \InvalidArgumentException('non-nullable ts cannot be null');
        }
        $this->container['ts'] = $ts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


