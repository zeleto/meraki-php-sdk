<?php
/**
 * UpdateDeviceSwitchRoutingStaticRouteRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * UpdateDeviceSwitchRoutingStaticRouteRequest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateDeviceSwitchRoutingStaticRouteRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'updateDeviceSwitchRoutingStaticRoute_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'subnet' => 'string',
        'next_hop_ip' => 'string',
        'management_next_hop' => 'string',
        'advertise_via_ospf_enabled' => 'bool',
        'prefer_over_ospf_routes_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'subnet' => null,
        'next_hop_ip' => null,
        'management_next_hop' => null,
        'advertise_via_ospf_enabled' => null,
        'prefer_over_ospf_routes_enabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'subnet' => false,
        'next_hop_ip' => false,
        'management_next_hop' => false,
        'advertise_via_ospf_enabled' => false,
        'prefer_over_ospf_routes_enabled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'subnet' => 'subnet',
        'next_hop_ip' => 'nextHopIp',
        'management_next_hop' => 'managementNextHop',
        'advertise_via_ospf_enabled' => 'advertiseViaOspfEnabled',
        'prefer_over_ospf_routes_enabled' => 'preferOverOspfRoutesEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'subnet' => 'setSubnet',
        'next_hop_ip' => 'setNextHopIp',
        'management_next_hop' => 'setManagementNextHop',
        'advertise_via_ospf_enabled' => 'setAdvertiseViaOspfEnabled',
        'prefer_over_ospf_routes_enabled' => 'setPreferOverOspfRoutesEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'subnet' => 'getSubnet',
        'next_hop_ip' => 'getNextHopIp',
        'management_next_hop' => 'getManagementNextHop',
        'advertise_via_ospf_enabled' => 'getAdvertiseViaOspfEnabled',
        'prefer_over_ospf_routes_enabled' => 'getPreferOverOspfRoutesEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('subnet', $data ?? [], null);
        $this->setIfExists('next_hop_ip', $data ?? [], null);
        $this->setIfExists('management_next_hop', $data ?? [], null);
        $this->setIfExists('advertise_via_ospf_enabled', $data ?? [], null);
        $this->setIfExists('prefer_over_ospf_routes_enabled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name or description for layer 3 static route
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets subnet
     *
     * @return string|null
     */
    public function getSubnet()
    {
        return $this->container['subnet'];
    }

    /**
     * Sets subnet
     *
     * @param string|null $subnet The subnet which is routed via this static route and should be specified in CIDR notation (ex. 1.2.3.0/24)
     *
     * @return self
     */
    public function setSubnet($subnet)
    {
        if (is_null($subnet)) {
            throw new \InvalidArgumentException('non-nullable subnet cannot be null');
        }
        $this->container['subnet'] = $subnet;

        return $this;
    }

    /**
     * Gets next_hop_ip
     *
     * @return string|null
     */
    public function getNextHopIp()
    {
        return $this->container['next_hop_ip'];
    }

    /**
     * Sets next_hop_ip
     *
     * @param string|null $next_hop_ip IP address of the next hop device to which the device sends its traffic for the subnet
     *
     * @return self
     */
    public function setNextHopIp($next_hop_ip)
    {
        if (is_null($next_hop_ip)) {
            throw new \InvalidArgumentException('non-nullable next_hop_ip cannot be null');
        }
        $this->container['next_hop_ip'] = $next_hop_ip;

        return $this;
    }

    /**
     * Gets management_next_hop
     *
     * @return string|null
     */
    public function getManagementNextHop()
    {
        return $this->container['management_next_hop'];
    }

    /**
     * Sets management_next_hop
     *
     * @param string|null $management_next_hop Optional fallback IP address for management traffic
     *
     * @return self
     */
    public function setManagementNextHop($management_next_hop)
    {
        if (is_null($management_next_hop)) {
            throw new \InvalidArgumentException('non-nullable management_next_hop cannot be null');
        }
        $this->container['management_next_hop'] = $management_next_hop;

        return $this;
    }

    /**
     * Gets advertise_via_ospf_enabled
     *
     * @return bool|null
     */
    public function getAdvertiseViaOspfEnabled()
    {
        return $this->container['advertise_via_ospf_enabled'];
    }

    /**
     * Sets advertise_via_ospf_enabled
     *
     * @param bool|null $advertise_via_ospf_enabled Option to advertise static route via OSPF
     *
     * @return self
     */
    public function setAdvertiseViaOspfEnabled($advertise_via_ospf_enabled)
    {
        if (is_null($advertise_via_ospf_enabled)) {
            throw new \InvalidArgumentException('non-nullable advertise_via_ospf_enabled cannot be null');
        }
        $this->container['advertise_via_ospf_enabled'] = $advertise_via_ospf_enabled;

        return $this;
    }

    /**
     * Gets prefer_over_ospf_routes_enabled
     *
     * @return bool|null
     */
    public function getPreferOverOspfRoutesEnabled()
    {
        return $this->container['prefer_over_ospf_routes_enabled'];
    }

    /**
     * Sets prefer_over_ospf_routes_enabled
     *
     * @param bool|null $prefer_over_ospf_routes_enabled Option to prefer static route over OSPF routes
     *
     * @return self
     */
    public function setPreferOverOspfRoutesEnabled($prefer_over_ospf_routes_enabled)
    {
        if (is_null($prefer_over_ospf_routes_enabled)) {
            throw new \InvalidArgumentException('non-nullable prefer_over_ospf_routes_enabled cannot be null');
        }
        $this->container['prefer_over_ospf_routes_enabled'] = $prefer_over_ospf_routes_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


