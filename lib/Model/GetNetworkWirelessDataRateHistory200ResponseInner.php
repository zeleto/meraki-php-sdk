<?php
/**
 * GetNetworkWirelessDataRateHistory200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetNetworkWirelessDataRateHistory200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetNetworkWirelessDataRateHistory200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getNetworkWirelessDataRateHistory_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'start_ts' => '\DateTime',
        'end_ts' => '\DateTime',
        'average_kbps' => 'int',
        'download_kbps' => 'int',
        'upload_kbps' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'start_ts' => 'date-time',
        'end_ts' => 'date-time',
        'average_kbps' => null,
        'download_kbps' => null,
        'upload_kbps' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'start_ts' => false,
        'end_ts' => false,
        'average_kbps' => false,
        'download_kbps' => false,
        'upload_kbps' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_ts' => 'startTs',
        'end_ts' => 'endTs',
        'average_kbps' => 'averageKbps',
        'download_kbps' => 'downloadKbps',
        'upload_kbps' => 'uploadKbps'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_ts' => 'setStartTs',
        'end_ts' => 'setEndTs',
        'average_kbps' => 'setAverageKbps',
        'download_kbps' => 'setDownloadKbps',
        'upload_kbps' => 'setUploadKbps'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_ts' => 'getStartTs',
        'end_ts' => 'getEndTs',
        'average_kbps' => 'getAverageKbps',
        'download_kbps' => 'getDownloadKbps',
        'upload_kbps' => 'getUploadKbps'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('start_ts', $data ?? [], null);
        $this->setIfExists('end_ts', $data ?? [], null);
        $this->setIfExists('average_kbps', $data ?? [], null);
        $this->setIfExists('download_kbps', $data ?? [], null);
        $this->setIfExists('upload_kbps', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_ts
     *
     * @return \DateTime|null
     */
    public function getStartTs()
    {
        return $this->container['start_ts'];
    }

    /**
     * Sets start_ts
     *
     * @param \DateTime|null $start_ts The start time of the query range
     *
     * @return self
     */
    public function setStartTs($start_ts)
    {
        if (is_null($start_ts)) {
            throw new \InvalidArgumentException('non-nullable start_ts cannot be null');
        }
        $this->container['start_ts'] = $start_ts;

        return $this;
    }

    /**
     * Gets end_ts
     *
     * @return \DateTime|null
     */
    public function getEndTs()
    {
        return $this->container['end_ts'];
    }

    /**
     * Sets end_ts
     *
     * @param \DateTime|null $end_ts The end time of the query range
     *
     * @return self
     */
    public function setEndTs($end_ts)
    {
        if (is_null($end_ts)) {
            throw new \InvalidArgumentException('non-nullable end_ts cannot be null');
        }
        $this->container['end_ts'] = $end_ts;

        return $this;
    }

    /**
     * Gets average_kbps
     *
     * @return int|null
     */
    public function getAverageKbps()
    {
        return $this->container['average_kbps'];
    }

    /**
     * Sets average_kbps
     *
     * @param int|null $average_kbps Average data rate in kilobytes-per-second
     *
     * @return self
     */
    public function setAverageKbps($average_kbps)
    {
        if (is_null($average_kbps)) {
            throw new \InvalidArgumentException('non-nullable average_kbps cannot be null');
        }
        $this->container['average_kbps'] = $average_kbps;

        return $this;
    }

    /**
     * Gets download_kbps
     *
     * @return int|null
     */
    public function getDownloadKbps()
    {
        return $this->container['download_kbps'];
    }

    /**
     * Sets download_kbps
     *
     * @param int|null $download_kbps Download rate in kilobytes-per-second
     *
     * @return self
     */
    public function setDownloadKbps($download_kbps)
    {
        if (is_null($download_kbps)) {
            throw new \InvalidArgumentException('non-nullable download_kbps cannot be null');
        }
        $this->container['download_kbps'] = $download_kbps;

        return $this;
    }

    /**
     * Gets upload_kbps
     *
     * @return int|null
     */
    public function getUploadKbps()
    {
        return $this->container['upload_kbps'];
    }

    /**
     * Sets upload_kbps
     *
     * @param int|null $upload_kbps Upload rate in kilobytes-per-second
     *
     * @return self
     */
    public function setUploadKbps($upload_kbps)
    {
        if (is_null($upload_kbps)) {
            throw new \InvalidArgumentException('non-nullable upload_kbps cannot be null');
        }
        $this->container['upload_kbps'] = $upload_kbps;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


