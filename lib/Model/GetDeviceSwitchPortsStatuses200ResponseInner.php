<?php
/**
 * GetDeviceSwitchPortsStatuses200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetDeviceSwitchPortsStatuses200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetDeviceSwitchPortsStatuses200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getDeviceSwitchPortsStatuses_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'port_id' => 'string',
        'enabled' => 'bool',
        'status' => 'string',
        'is_uplink' => 'bool',
        'errors' => 'string[]',
        'warnings' => 'string[]',
        'speed' => 'string',
        'duplex' => 'string',
        'spanning_tree' => '\Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerSpanningTree',
        'poe' => '\Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerPoe',
        'usage_in_kb' => '\Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb',
        'cdp' => '\Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerCdp',
        'lldp' => '\Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerLldp',
        'client_count' => 'int',
        'power_usage_in_wh' => 'float',
        'traffic_in_kbps' => '\Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps',
        'secure_port' => '\Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'port_id' => null,
        'enabled' => null,
        'status' => null,
        'is_uplink' => null,
        'errors' => null,
        'warnings' => null,
        'speed' => null,
        'duplex' => null,
        'spanning_tree' => null,
        'poe' => null,
        'usage_in_kb' => null,
        'cdp' => null,
        'lldp' => null,
        'client_count' => null,
        'power_usage_in_wh' => 'float',
        'traffic_in_kbps' => null,
        'secure_port' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'port_id' => false,
        'enabled' => false,
        'status' => false,
        'is_uplink' => false,
        'errors' => false,
        'warnings' => false,
        'speed' => false,
        'duplex' => false,
        'spanning_tree' => false,
        'poe' => false,
        'usage_in_kb' => false,
        'cdp' => false,
        'lldp' => false,
        'client_count' => false,
        'power_usage_in_wh' => false,
        'traffic_in_kbps' => false,
        'secure_port' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'port_id' => 'portId',
        'enabled' => 'enabled',
        'status' => 'status',
        'is_uplink' => 'isUplink',
        'errors' => 'errors',
        'warnings' => 'warnings',
        'speed' => 'speed',
        'duplex' => 'duplex',
        'spanning_tree' => 'spanningTree',
        'poe' => 'poe',
        'usage_in_kb' => 'usageInKb',
        'cdp' => 'cdp',
        'lldp' => 'lldp',
        'client_count' => 'clientCount',
        'power_usage_in_wh' => 'powerUsageInWh',
        'traffic_in_kbps' => 'trafficInKbps',
        'secure_port' => 'securePort'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'port_id' => 'setPortId',
        'enabled' => 'setEnabled',
        'status' => 'setStatus',
        'is_uplink' => 'setIsUplink',
        'errors' => 'setErrors',
        'warnings' => 'setWarnings',
        'speed' => 'setSpeed',
        'duplex' => 'setDuplex',
        'spanning_tree' => 'setSpanningTree',
        'poe' => 'setPoe',
        'usage_in_kb' => 'setUsageInKb',
        'cdp' => 'setCdp',
        'lldp' => 'setLldp',
        'client_count' => 'setClientCount',
        'power_usage_in_wh' => 'setPowerUsageInWh',
        'traffic_in_kbps' => 'setTrafficInKbps',
        'secure_port' => 'setSecurePort'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'port_id' => 'getPortId',
        'enabled' => 'getEnabled',
        'status' => 'getStatus',
        'is_uplink' => 'getIsUplink',
        'errors' => 'getErrors',
        'warnings' => 'getWarnings',
        'speed' => 'getSpeed',
        'duplex' => 'getDuplex',
        'spanning_tree' => 'getSpanningTree',
        'poe' => 'getPoe',
        'usage_in_kb' => 'getUsageInKb',
        'cdp' => 'getCdp',
        'lldp' => 'getLldp',
        'client_count' => 'getClientCount',
        'power_usage_in_wh' => 'getPowerUsageInWh',
        'traffic_in_kbps' => 'getTrafficInKbps',
        'secure_port' => 'getSecurePort'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_CONNECTED = 'Connected';
    public const STATUS_DISABLED = 'Disabled';
    public const STATUS_DISCONNECTED = 'Disconnected';
    public const SPEED_EMPTY = '';
    public const SPEED__1_GBPS = '1 Gbps';
    public const SPEED__10_GBPS = '10 Gbps';
    public const SPEED__10_MBPS = '10 Mbps';
    public const SPEED__100_GBPS = '100 Gbps';
    public const SPEED__100_MBPS = '100 Mbps';
    public const SPEED__2_5_GBPS = '2.5 Gbps';
    public const SPEED__20_GBPS = '20 Gbps';
    public const SPEED__25_GBPS = '25 Gbps';
    public const SPEED__40_GBPS = '40 Gbps';
    public const SPEED__5_GBPS = '5 Gbps';
    public const SPEED__50_GBPS = '50 Gbps';
    public const DUPLEX_EMPTY = '';
    public const DUPLEX_FULL = 'full';
    public const DUPLEX_HALF = 'half';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CONNECTED,
            self::STATUS_DISABLED,
            self::STATUS_DISCONNECTED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpeedAllowableValues()
    {
        return [
            self::SPEED_EMPTY,
            self::SPEED__1_GBPS,
            self::SPEED__10_GBPS,
            self::SPEED__10_MBPS,
            self::SPEED__100_GBPS,
            self::SPEED__100_MBPS,
            self::SPEED__2_5_GBPS,
            self::SPEED__20_GBPS,
            self::SPEED__25_GBPS,
            self::SPEED__40_GBPS,
            self::SPEED__5_GBPS,
            self::SPEED__50_GBPS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDuplexAllowableValues()
    {
        return [
            self::DUPLEX_EMPTY,
            self::DUPLEX_FULL,
            self::DUPLEX_HALF,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('port_id', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('is_uplink', $data ?? [], null);
        $this->setIfExists('errors', $data ?? [], null);
        $this->setIfExists('warnings', $data ?? [], null);
        $this->setIfExists('speed', $data ?? [], null);
        $this->setIfExists('duplex', $data ?? [], null);
        $this->setIfExists('spanning_tree', $data ?? [], null);
        $this->setIfExists('poe', $data ?? [], null);
        $this->setIfExists('usage_in_kb', $data ?? [], null);
        $this->setIfExists('cdp', $data ?? [], null);
        $this->setIfExists('lldp', $data ?? [], null);
        $this->setIfExists('client_count', $data ?? [], null);
        $this->setIfExists('power_usage_in_wh', $data ?? [], null);
        $this->setIfExists('traffic_in_kbps', $data ?? [], null);
        $this->setIfExists('secure_port', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSpeedAllowableValues();
        if (!is_null($this->container['speed']) && !in_array($this->container['speed'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'speed', must be one of '%s'",
                $this->container['speed'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDuplexAllowableValues();
        if (!is_null($this->container['duplex']) && !in_array($this->container['duplex'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'duplex', must be one of '%s'",
                $this->container['duplex'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets port_id
     *
     * @return string|null
     */
    public function getPortId()
    {
        return $this->container['port_id'];
    }

    /**
     * Sets port_id
     *
     * @param string|null $port_id The string identifier of this port on the switch. This is commonly just the port number but may contain additional identifying information such as the slot and module-type if the port is located on a port module.
     *
     * @return self
     */
    public function setPortId($port_id)
    {
        if (is_null($port_id)) {
            throw new \InvalidArgumentException('non-nullable port_id cannot be null');
        }
        $this->container['port_id'] = $port_id;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled Whether the port is configured to be enabled.
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The current connection status of the port.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets is_uplink
     *
     * @return bool|null
     */
    public function getIsUplink()
    {
        return $this->container['is_uplink'];
    }

    /**
     * Sets is_uplink
     *
     * @param bool|null $is_uplink Whether the port is the switch's uplink.
     *
     * @return self
     */
    public function setIsUplink($is_uplink)
    {
        if (is_null($is_uplink)) {
            throw new \InvalidArgumentException('non-nullable is_uplink cannot be null');
        }
        $this->container['is_uplink'] = $is_uplink;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return string[]|null
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param string[]|null $errors All errors present on the port.
     *
     * @return self
     */
    public function setErrors($errors)
    {
        if (is_null($errors)) {
            throw new \InvalidArgumentException('non-nullable errors cannot be null');
        }
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return string[]|null
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param string[]|null $warnings All warnings present on the port.
     *
     * @return self
     */
    public function setWarnings($warnings)
    {
        if (is_null($warnings)) {
            throw new \InvalidArgumentException('non-nullable warnings cannot be null');
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }

    /**
     * Gets speed
     *
     * @return string|null
     */
    public function getSpeed()
    {
        return $this->container['speed'];
    }

    /**
     * Sets speed
     *
     * @param string|null $speed The current data transfer rate which the port is operating at.
     *
     * @return self
     */
    public function setSpeed($speed)
    {
        if (is_null($speed)) {
            throw new \InvalidArgumentException('non-nullable speed cannot be null');
        }
        $allowedValues = $this->getSpeedAllowableValues();
        if (!in_array($speed, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'speed', must be one of '%s'",
                    $speed,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['speed'] = $speed;

        return $this;
    }

    /**
     * Gets duplex
     *
     * @return string|null
     */
    public function getDuplex()
    {
        return $this->container['duplex'];
    }

    /**
     * Sets duplex
     *
     * @param string|null $duplex The current duplex of a connected port.
     *
     * @return self
     */
    public function setDuplex($duplex)
    {
        if (is_null($duplex)) {
            throw new \InvalidArgumentException('non-nullable duplex cannot be null');
        }
        $allowedValues = $this->getDuplexAllowableValues();
        if (!in_array($duplex, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'duplex', must be one of '%s'",
                    $duplex,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['duplex'] = $duplex;

        return $this;
    }

    /**
     * Gets spanning_tree
     *
     * @return \Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerSpanningTree|null
     */
    public function getSpanningTree()
    {
        return $this->container['spanning_tree'];
    }

    /**
     * Sets spanning_tree
     *
     * @param \Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerSpanningTree|null $spanning_tree spanning_tree
     *
     * @return self
     */
    public function setSpanningTree($spanning_tree)
    {
        if (is_null($spanning_tree)) {
            throw new \InvalidArgumentException('non-nullable spanning_tree cannot be null');
        }
        $this->container['spanning_tree'] = $spanning_tree;

        return $this;
    }

    /**
     * Gets poe
     *
     * @return \Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerPoe|null
     */
    public function getPoe()
    {
        return $this->container['poe'];
    }

    /**
     * Sets poe
     *
     * @param \Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerPoe|null $poe poe
     *
     * @return self
     */
    public function setPoe($poe)
    {
        if (is_null($poe)) {
            throw new \InvalidArgumentException('non-nullable poe cannot be null');
        }
        $this->container['poe'] = $poe;

        return $this;
    }

    /**
     * Gets usage_in_kb
     *
     * @return \Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb|null
     */
    public function getUsageInKb()
    {
        return $this->container['usage_in_kb'];
    }

    /**
     * Sets usage_in_kb
     *
     * @param \Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerUsageInKb|null $usage_in_kb usage_in_kb
     *
     * @return self
     */
    public function setUsageInKb($usage_in_kb)
    {
        if (is_null($usage_in_kb)) {
            throw new \InvalidArgumentException('non-nullable usage_in_kb cannot be null');
        }
        $this->container['usage_in_kb'] = $usage_in_kb;

        return $this;
    }

    /**
     * Gets cdp
     *
     * @return \Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerCdp|null
     */
    public function getCdp()
    {
        return $this->container['cdp'];
    }

    /**
     * Sets cdp
     *
     * @param \Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerCdp|null $cdp cdp
     *
     * @return self
     */
    public function setCdp($cdp)
    {
        if (is_null($cdp)) {
            throw new \InvalidArgumentException('non-nullable cdp cannot be null');
        }
        $this->container['cdp'] = $cdp;

        return $this;
    }

    /**
     * Gets lldp
     *
     * @return \Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerLldp|null
     */
    public function getLldp()
    {
        return $this->container['lldp'];
    }

    /**
     * Sets lldp
     *
     * @param \Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerLldp|null $lldp lldp
     *
     * @return self
     */
    public function setLldp($lldp)
    {
        if (is_null($lldp)) {
            throw new \InvalidArgumentException('non-nullable lldp cannot be null');
        }
        $this->container['lldp'] = $lldp;

        return $this;
    }

    /**
     * Gets client_count
     *
     * @return int|null
     */
    public function getClientCount()
    {
        return $this->container['client_count'];
    }

    /**
     * Sets client_count
     *
     * @param int|null $client_count The number of clients connected through this port.
     *
     * @return self
     */
    public function setClientCount($client_count)
    {
        if (is_null($client_count)) {
            throw new \InvalidArgumentException('non-nullable client_count cannot be null');
        }
        $this->container['client_count'] = $client_count;

        return $this;
    }

    /**
     * Gets power_usage_in_wh
     *
     * @return float|null
     */
    public function getPowerUsageInWh()
    {
        return $this->container['power_usage_in_wh'];
    }

    /**
     * Sets power_usage_in_wh
     *
     * @param float|null $power_usage_in_wh How much power (in watt-hours) has been delivered by this port during the timespan.
     *
     * @return self
     */
    public function setPowerUsageInWh($power_usage_in_wh)
    {
        if (is_null($power_usage_in_wh)) {
            throw new \InvalidArgumentException('non-nullable power_usage_in_wh cannot be null');
        }
        $this->container['power_usage_in_wh'] = $power_usage_in_wh;

        return $this;
    }

    /**
     * Gets traffic_in_kbps
     *
     * @return \Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps|null
     */
    public function getTrafficInKbps()
    {
        return $this->container['traffic_in_kbps'];
    }

    /**
     * Sets traffic_in_kbps
     *
     * @param \Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerTrafficInKbps|null $traffic_in_kbps traffic_in_kbps
     *
     * @return self
     */
    public function setTrafficInKbps($traffic_in_kbps)
    {
        if (is_null($traffic_in_kbps)) {
            throw new \InvalidArgumentException('non-nullable traffic_in_kbps cannot be null');
        }
        $this->container['traffic_in_kbps'] = $traffic_in_kbps;

        return $this;
    }

    /**
     * Gets secure_port
     *
     * @return \Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort|null
     */
    public function getSecurePort()
    {
        return $this->container['secure_port'];
    }

    /**
     * Sets secure_port
     *
     * @param \Meraki\Model\GetDeviceSwitchPortsStatuses200ResponseInnerSecurePort|null $secure_port secure_port
     *
     * @return self
     */
    public function setSecurePort($secure_port)
    {
        if (is_null($secure_port)) {
            throw new \InvalidArgumentException('non-nullable secure_port cannot be null');
        }
        $this->container['secure_port'] = $secure_port;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


