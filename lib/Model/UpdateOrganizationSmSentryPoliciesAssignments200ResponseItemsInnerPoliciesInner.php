<?php
/**
 * UpdateOrganizationSmSentryPoliciesAssignments200ResponseItemsInnerPoliciesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * UpdateOrganizationSmSentryPoliciesAssignments200ResponseItemsInnerPoliciesInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateOrganizationSmSentryPoliciesAssignments200ResponseItemsInnerPoliciesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'updateOrganizationSmSentryPoliciesAssignments_200_response_items_inner_policies_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'policy_id' => 'string',
        'network_id' => 'string',
        'sm_network_id' => 'string',
        'tags' => 'string[]',
        'scope' => 'string',
        'group_number' => 'string',
        'group_policy_id' => 'string',
        'priority' => 'string',
        'created_at' => 'string',
        'last_updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'policy_id' => null,
        'network_id' => null,
        'sm_network_id' => null,
        'tags' => null,
        'scope' => null,
        'group_number' => null,
        'group_policy_id' => null,
        'priority' => null,
        'created_at' => null,
        'last_updated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'policy_id' => false,
        'network_id' => false,
        'sm_network_id' => false,
        'tags' => false,
        'scope' => false,
        'group_number' => false,
        'group_policy_id' => false,
        'priority' => false,
        'created_at' => false,
        'last_updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'policy_id' => 'policyId',
        'network_id' => 'networkId',
        'sm_network_id' => 'smNetworkId',
        'tags' => 'tags',
        'scope' => 'scope',
        'group_number' => 'groupNumber',
        'group_policy_id' => 'groupPolicyId',
        'priority' => 'priority',
        'created_at' => 'createdAt',
        'last_updated_at' => 'lastUpdatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'policy_id' => 'setPolicyId',
        'network_id' => 'setNetworkId',
        'sm_network_id' => 'setSmNetworkId',
        'tags' => 'setTags',
        'scope' => 'setScope',
        'group_number' => 'setGroupNumber',
        'group_policy_id' => 'setGroupPolicyId',
        'priority' => 'setPriority',
        'created_at' => 'setCreatedAt',
        'last_updated_at' => 'setLastUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'policy_id' => 'getPolicyId',
        'network_id' => 'getNetworkId',
        'sm_network_id' => 'getSmNetworkId',
        'tags' => 'getTags',
        'scope' => 'getScope',
        'group_number' => 'getGroupNumber',
        'group_policy_id' => 'getGroupPolicyId',
        'priority' => 'getPriority',
        'created_at' => 'getCreatedAt',
        'last_updated_at' => 'getLastUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SCOPE_ALL = 'all';
    public const SCOPE_NONE = 'none';
    public const SCOPE_WITH_ALL = 'withAll';
    public const SCOPE_WITH_ANY = 'withAny';
    public const SCOPE_WITHOUT_ALL = 'withoutAll';
    public const SCOPE_WITHOUT_ANY = 'withoutAny';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScopeAllowableValues()
    {
        return [
            self::SCOPE_ALL,
            self::SCOPE_NONE,
            self::SCOPE_WITH_ALL,
            self::SCOPE_WITH_ANY,
            self::SCOPE_WITHOUT_ALL,
            self::SCOPE_WITHOUT_ANY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('policy_id', $data ?? [], null);
        $this->setIfExists('network_id', $data ?? [], null);
        $this->setIfExists('sm_network_id', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('scope', $data ?? [], null);
        $this->setIfExists('group_number', $data ?? [], null);
        $this->setIfExists('group_policy_id', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('last_updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getScopeAllowableValues();
        if (!is_null($this->container['scope']) && !in_array($this->container['scope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'scope', must be one of '%s'",
                $this->container['scope'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets policy_id
     *
     * @return string|null
     */
    public function getPolicyId()
    {
        return $this->container['policy_id'];
    }

    /**
     * Sets policy_id
     *
     * @param string|null $policy_id The Id of the Sentry Policy
     *
     * @return self
     */
    public function setPolicyId($policy_id)
    {
        if (is_null($policy_id)) {
            throw new \InvalidArgumentException('non-nullable policy_id cannot be null');
        }
        $this->container['policy_id'] = $policy_id;

        return $this;
    }

    /**
     * Gets network_id
     *
     * @return string|null
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param string|null $network_id The Id of the Network the Sentry Policy is associated with. In a locale, this should be the Wireless Group if present, otherwise the Wired Group.
     *
     * @return self
     */
    public function setNetworkId($network_id)
    {
        if (is_null($network_id)) {
            throw new \InvalidArgumentException('non-nullable network_id cannot be null');
        }
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets sm_network_id
     *
     * @return string|null
     */
    public function getSmNetworkId()
    {
        return $this->container['sm_network_id'];
    }

    /**
     * Sets sm_network_id
     *
     * @param string|null $sm_network_id The Id of the Systems Manager Network the Sentry Policy is assigned to
     *
     * @return self
     */
    public function setSmNetworkId($sm_network_id)
    {
        if (is_null($sm_network_id)) {
            throw new \InvalidArgumentException('non-nullable sm_network_id cannot be null');
        }
        $this->container['sm_network_id'] = $sm_network_id;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags The tags of the Sentry Policy
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string|null
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string|null $scope The scope of the Sentry Policy
     *
     * @return self
     */
    public function setScope($scope)
    {
        if (is_null($scope)) {
            throw new \InvalidArgumentException('non-nullable scope cannot be null');
        }
        $allowedValues = $this->getScopeAllowableValues();
        if (!in_array($scope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'scope', must be one of '%s'",
                    $scope,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets group_number
     *
     * @return string|null
     */
    public function getGroupNumber()
    {
        return $this->container['group_number'];
    }

    /**
     * Sets group_number
     *
     * @param string|null $group_number The number of the Group Policy
     *
     * @return self
     */
    public function setGroupNumber($group_number)
    {
        if (is_null($group_number)) {
            throw new \InvalidArgumentException('non-nullable group_number cannot be null');
        }
        $this->container['group_number'] = $group_number;

        return $this;
    }

    /**
     * Gets group_policy_id
     *
     * @return string|null
     */
    public function getGroupPolicyId()
    {
        return $this->container['group_policy_id'];
    }

    /**
     * Sets group_policy_id
     *
     * @param string|null $group_policy_id The Id of the Group Policy. This is associated with the network specified by the networkId.
     *
     * @return self
     */
    public function setGroupPolicyId($group_policy_id)
    {
        if (is_null($group_policy_id)) {
            throw new \InvalidArgumentException('non-nullable group_policy_id cannot be null');
        }
        $this->container['group_policy_id'] = $group_policy_id;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string|null $priority The priority of the Sentry Policy
     *
     * @return self
     */
    public function setPriority($priority)
    {
        if (is_null($priority)) {
            throw new \InvalidArgumentException('non-nullable priority cannot be null');
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The creation time of the Sentry Policy
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets last_updated_at
     *
     * @return string|null
     */
    public function getLastUpdatedAt()
    {
        return $this->container['last_updated_at'];
    }

    /**
     * Sets last_updated_at
     *
     * @param string|null $last_updated_at The last update time of the Sentry Policy
     *
     * @return self
     */
    public function setLastUpdatedAt($last_updated_at)
    {
        if (is_null($last_updated_at)) {
            throw new \InvalidArgumentException('non-nullable last_updated_at cannot be null');
        }
        $this->container['last_updated_at'] = $last_updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


