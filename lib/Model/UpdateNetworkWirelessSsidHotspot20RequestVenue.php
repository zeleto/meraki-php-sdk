<?php
/**
 * UpdateNetworkWirelessSsidHotspot20RequestVenue
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * UpdateNetworkWirelessSsidHotspot20RequestVenue Class Doc Comment
 *
 * @category Class
 * @description Venue settings for this SSID
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateNetworkWirelessSsidHotspot20RequestVenue implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'updateNetworkWirelessSsidHotspot20_request_venue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_AIRPLANE = 'Airplane';
    public const TYPE_ALCOHOL_AND_DRUG_REHABILITATION_CENTER = 'Alcohol and Drug Rehabilitation Center';
    public const TYPE_AMPHITHEATER = 'Amphitheater';
    public const TYPE_AMUSEMENT_PARK = 'Amusement Park';
    public const TYPE_ARENA = 'Arena';
    public const TYPE_ATTORNEY_OFFICE = 'Attorney Office';
    public const TYPE_AUTOMOBILE_OR_TRUCK = 'Automobile or Truck';
    public const TYPE_AUTOMOTIVE_SERVICE_STATION = 'Automotive Service Station';
    public const TYPE_BANK = 'Bank';
    public const TYPE_BAR = 'Bar';
    public const TYPE_BOARDING_HOUSE = 'Boarding House';
    public const TYPE_BUS = 'Bus';
    public const TYPE_BUS_STOP = 'Bus Stop';
    public const TYPE_CITY_PARK = 'City Park';
    public const TYPE_COFFEE_SHOP = 'Coffee Shop';
    public const TYPE_CONVENTION_CENTER = 'Convention Center';
    public const TYPE_DOCTOR_OR_DENTIST_OFFICE = 'Doctor or Dentist office';
    public const TYPE_DORMITORY = 'Dormitory';
    public const TYPE_EMERGENCY_COORDINATION_CENTER = 'Emergency Coordination Center';
    public const TYPE_FACTORY = 'Factory';
    public const TYPE_FERRY = 'Ferry';
    public const TYPE_FIRE_STATION = 'Fire Station';
    public const TYPE_GAS_STATION = 'Gas Station';
    public const TYPE_GROCERY_MARKET = 'Grocery Market';
    public const TYPE_GROUP_HOME = 'Group Home';
    public const TYPE_HOSPITAL = 'Hospital';
    public const TYPE_HOTEL_OR_MOTEL = 'Hotel or Motel';
    public const TYPE_KIOSK = 'Kiosk';
    public const TYPE_LIBRARY = 'Library';
    public const TYPE_LONG_TERM_CARE_FACILITY = 'Long-Term Care Facility';
    public const TYPE_MOTOR_BIKE = 'Motor Bike';
    public const TYPE_MUNI_MESH_NETWORK = 'Muni-mesh Network';
    public const TYPE_MUSEUM = 'Museum';
    public const TYPE_PASSENGER_TERMINAL = 'Passenger Terminal';
    public const TYPE_PLACE_OF_WORSHIP = 'Place of Worship';
    public const TYPE_POLICE_STATION = 'Police Station';
    public const TYPE_POST_OFFICE = 'Post Office';
    public const TYPE_PRISON_OR_JAIL = 'Prison or Jail';
    public const TYPE_PRIVATE_RESIDENCE = 'Private Residence';
    public const TYPE_PROFESSIONAL_OFFICE = 'Professional Office';
    public const TYPE_RESEARCH_AND_DEVELOPMENT_FACILITY = 'Research and Development Facility';
    public const TYPE_REST_AREA = 'Rest Area';
    public const TYPE_RESTAURANT = 'Restaurant';
    public const TYPE_RETAIL_STORE = 'Retail Store';
    public const TYPE_SCHOOL_PRIMARY = 'School, Primary';
    public const TYPE_SCHOOL_SECONDARY = 'School, Secondary';
    public const TYPE_SHIP_OR_BOAT = 'Ship or Boat';
    public const TYPE_SHOPPING_MALL = 'Shopping Mall';
    public const TYPE_STADIUM = 'Stadium';
    public const TYPE_THEATER = 'Theater';
    public const TYPE_TRAFFIC_CONTROL = 'Traffic Control';
    public const TYPE_TRAIN = 'Train';
    public const TYPE_UNIVERSITY_OR_COLLEGE = 'University or College';
    public const TYPE_UNSPECIFIED = 'Unspecified';
    public const TYPE_UNSPECIFIED_ASSEMBLY = 'Unspecified Assembly';
    public const TYPE_UNSPECIFIED_BUSINESS = 'Unspecified Business';
    public const TYPE_UNSPECIFIED_EDUCATIONAL = 'Unspecified Educational';
    public const TYPE_UNSPECIFIED_FACTORY_AND_INDUSTRIAL = 'Unspecified Factory and Industrial';
    public const TYPE_UNSPECIFIED_INSTITUTIONAL = 'Unspecified Institutional';
    public const TYPE_UNSPECIFIED_MERCANTILE = 'Unspecified Mercantile';
    public const TYPE_UNSPECIFIED_OUTDOOR = 'Unspecified Outdoor';
    public const TYPE_UNSPECIFIED_RESIDENTIAL = 'Unspecified Residential';
    public const TYPE_UNSPECIFIED_STORAGE = 'Unspecified Storage';
    public const TYPE_UNSPECIFIED_UTILITY_AND_MISCELLANEOUS = 'Unspecified Utility and Miscellaneous';
    public const TYPE_UNSPECIFIED_VEHICULAR = 'Unspecified Vehicular';
    public const TYPE_ZOO_OR_AQUARIUM = 'Zoo or Aquarium';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_AIRPLANE,
            self::TYPE_ALCOHOL_AND_DRUG_REHABILITATION_CENTER,
            self::TYPE_AMPHITHEATER,
            self::TYPE_AMUSEMENT_PARK,
            self::TYPE_ARENA,
            self::TYPE_ATTORNEY_OFFICE,
            self::TYPE_AUTOMOBILE_OR_TRUCK,
            self::TYPE_AUTOMOTIVE_SERVICE_STATION,
            self::TYPE_BANK,
            self::TYPE_BAR,
            self::TYPE_BOARDING_HOUSE,
            self::TYPE_BUS,
            self::TYPE_BUS_STOP,
            self::TYPE_CITY_PARK,
            self::TYPE_COFFEE_SHOP,
            self::TYPE_CONVENTION_CENTER,
            self::TYPE_DOCTOR_OR_DENTIST_OFFICE,
            self::TYPE_DORMITORY,
            self::TYPE_EMERGENCY_COORDINATION_CENTER,
            self::TYPE_FACTORY,
            self::TYPE_FERRY,
            self::TYPE_FIRE_STATION,
            self::TYPE_GAS_STATION,
            self::TYPE_GROCERY_MARKET,
            self::TYPE_GROUP_HOME,
            self::TYPE_HOSPITAL,
            self::TYPE_HOTEL_OR_MOTEL,
            self::TYPE_KIOSK,
            self::TYPE_LIBRARY,
            self::TYPE_LONG_TERM_CARE_FACILITY,
            self::TYPE_MOTOR_BIKE,
            self::TYPE_MUNI_MESH_NETWORK,
            self::TYPE_MUSEUM,
            self::TYPE_PASSENGER_TERMINAL,
            self::TYPE_PLACE_OF_WORSHIP,
            self::TYPE_POLICE_STATION,
            self::TYPE_POST_OFFICE,
            self::TYPE_PRISON_OR_JAIL,
            self::TYPE_PRIVATE_RESIDENCE,
            self::TYPE_PROFESSIONAL_OFFICE,
            self::TYPE_RESEARCH_AND_DEVELOPMENT_FACILITY,
            self::TYPE_REST_AREA,
            self::TYPE_RESTAURANT,
            self::TYPE_RETAIL_STORE,
            self::TYPE_SCHOOL_PRIMARY,
            self::TYPE_SCHOOL_SECONDARY,
            self::TYPE_SHIP_OR_BOAT,
            self::TYPE_SHOPPING_MALL,
            self::TYPE_STADIUM,
            self::TYPE_THEATER,
            self::TYPE_TRAFFIC_CONTROL,
            self::TYPE_TRAIN,
            self::TYPE_UNIVERSITY_OR_COLLEGE,
            self::TYPE_UNSPECIFIED,
            self::TYPE_UNSPECIFIED_ASSEMBLY,
            self::TYPE_UNSPECIFIED_BUSINESS,
            self::TYPE_UNSPECIFIED_EDUCATIONAL,
            self::TYPE_UNSPECIFIED_FACTORY_AND_INDUSTRIAL,
            self::TYPE_UNSPECIFIED_INSTITUTIONAL,
            self::TYPE_UNSPECIFIED_MERCANTILE,
            self::TYPE_UNSPECIFIED_OUTDOOR,
            self::TYPE_UNSPECIFIED_RESIDENTIAL,
            self::TYPE_UNSPECIFIED_STORAGE,
            self::TYPE_UNSPECIFIED_UTILITY_AND_MISCELLANEOUS,
            self::TYPE_UNSPECIFIED_VEHICULAR,
            self::TYPE_ZOO_OR_AQUARIUM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Venue name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Venue type ('Unspecified', 'Unspecified Assembly', 'Arena', 'Stadium', 'Passenger Terminal', 'Amphitheater', 'Amusement Park', 'Place of Worship', 'Convention Center', 'Library', 'Museum', 'Restaurant', 'Theater', 'Bar', 'Coffee Shop', 'Zoo or Aquarium', 'Emergency Coordination Center', 'Unspecified Business', 'Doctor or Dentist office', 'Bank', 'Fire Station', 'Police Station', 'Post Office', 'Professional Office', 'Research and Development Facility', 'Attorney Office', 'Unspecified Educational', 'School, Primary', 'School, Secondary', 'University or College', 'Unspecified Factory and Industrial', 'Factory', 'Unspecified Institutional', 'Hospital', 'Long-Term Care Facility', 'Alcohol and Drug Rehabilitation Center', 'Group Home', 'Prison or Jail', 'Unspecified Mercantile', 'Retail Store', 'Grocery Market', 'Automotive Service Station', 'Shopping Mall', 'Gas Station', 'Unspecified Residential', 'Private Residence', 'Hotel or Motel', 'Dormitory', 'Boarding House', 'Unspecified Storage', 'Unspecified Utility and Miscellaneous', 'Unspecified Vehicular', 'Automobile or Truck', 'Airplane', 'Bus', 'Ferry', 'Ship or Boat', 'Train', 'Motor Bike', 'Unspecified Outdoor', 'Muni-mesh Network', 'City Park', 'Rest Area', 'Traffic Control', 'Bus Stop', 'Kiosk')
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


