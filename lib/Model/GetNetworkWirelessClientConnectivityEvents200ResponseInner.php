<?php
/**
 * GetNetworkWirelessClientConnectivityEvents200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetNetworkWirelessClientConnectivityEvents200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetNetworkWirelessClientConnectivityEvents200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getNetworkWirelessClientConnectivityEvents_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'occurred_at' => '\DateTime',
        'band' => 'string',
        'ssid_number' => 'int',
        'type' => 'string',
        'subtype' => 'string',
        'severity' => 'string',
        'duration_ms' => 'int',
        'channel' => 'int',
        'rssi' => 'int',
        'event_data' => 'array<string,mixed>',
        'device_serial' => 'string',
        'capture_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'occurred_at' => 'date-time',
        'band' => null,
        'ssid_number' => null,
        'type' => null,
        'subtype' => null,
        'severity' => null,
        'duration_ms' => null,
        'channel' => null,
        'rssi' => null,
        'event_data' => null,
        'device_serial' => null,
        'capture_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'occurred_at' => false,
        'band' => false,
        'ssid_number' => false,
        'type' => false,
        'subtype' => false,
        'severity' => false,
        'duration_ms' => false,
        'channel' => false,
        'rssi' => false,
        'event_data' => false,
        'device_serial' => false,
        'capture_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'occurred_at' => 'occurredAt',
        'band' => 'band',
        'ssid_number' => 'ssidNumber',
        'type' => 'type',
        'subtype' => 'subtype',
        'severity' => 'severity',
        'duration_ms' => 'durationMs',
        'channel' => 'channel',
        'rssi' => 'rssi',
        'event_data' => 'eventData',
        'device_serial' => 'deviceSerial',
        'capture_id' => 'captureId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'occurred_at' => 'setOccurredAt',
        'band' => 'setBand',
        'ssid_number' => 'setSsidNumber',
        'type' => 'setType',
        'subtype' => 'setSubtype',
        'severity' => 'setSeverity',
        'duration_ms' => 'setDurationMs',
        'channel' => 'setChannel',
        'rssi' => 'setRssi',
        'event_data' => 'setEventData',
        'device_serial' => 'setDeviceSerial',
        'capture_id' => 'setCaptureId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'occurred_at' => 'getOccurredAt',
        'band' => 'getBand',
        'ssid_number' => 'getSsidNumber',
        'type' => 'getType',
        'subtype' => 'getSubtype',
        'severity' => 'getSeverity',
        'duration_ms' => 'getDurationMs',
        'channel' => 'getChannel',
        'rssi' => 'getRssi',
        'event_data' => 'getEventData',
        'device_serial' => 'getDeviceSerial',
        'capture_id' => 'getCaptureId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BAND__2_4 = '2.4';
    public const BAND__5 = '5';
    public const BAND__6 = '6';
    public const SSID_NUMBER_NUMBER_0 = 0;
    public const SSID_NUMBER_NUMBER_1 = 1;
    public const SSID_NUMBER_NUMBER_2 = 2;
    public const SSID_NUMBER_NUMBER_3 = 3;
    public const SSID_NUMBER_NUMBER_4 = 4;
    public const SSID_NUMBER_NUMBER_5 = 5;
    public const SSID_NUMBER_NUMBER_6 = 6;
    public const SSID_NUMBER_NUMBER_7 = 7;
    public const SSID_NUMBER_NUMBER_8 = 8;
    public const SSID_NUMBER_NUMBER_9 = 9;
    public const SSID_NUMBER_NUMBER_10 = 10;
    public const SSID_NUMBER_NUMBER_11 = 11;
    public const SSID_NUMBER_NUMBER_12 = 12;
    public const SSID_NUMBER_NUMBER_13 = 13;
    public const SSID_NUMBER_NUMBER_14 = 14;
    public const TYPE_ASSOC = 'assoc';
    public const TYPE_AUTH = 'auth';
    public const TYPE_CONNECTION = 'connection';
    public const TYPE_DEAUTH = 'deauth';
    public const TYPE_DHCP = 'dhcp';
    public const TYPE_DISASSOC = 'disassoc';
    public const TYPE_DNS = 'dns';
    public const TYPE_ROAM = 'roam';
    public const TYPE_STICKY = 'sticky';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBandAllowableValues()
    {
        return [
            self::BAND__2_4,
            self::BAND__5,
            self::BAND__6,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSsidNumberAllowableValues()
    {
        return [
            self::SSID_NUMBER_NUMBER_0,
            self::SSID_NUMBER_NUMBER_1,
            self::SSID_NUMBER_NUMBER_2,
            self::SSID_NUMBER_NUMBER_3,
            self::SSID_NUMBER_NUMBER_4,
            self::SSID_NUMBER_NUMBER_5,
            self::SSID_NUMBER_NUMBER_6,
            self::SSID_NUMBER_NUMBER_7,
            self::SSID_NUMBER_NUMBER_8,
            self::SSID_NUMBER_NUMBER_9,
            self::SSID_NUMBER_NUMBER_10,
            self::SSID_NUMBER_NUMBER_11,
            self::SSID_NUMBER_NUMBER_12,
            self::SSID_NUMBER_NUMBER_13,
            self::SSID_NUMBER_NUMBER_14,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ASSOC,
            self::TYPE_AUTH,
            self::TYPE_CONNECTION,
            self::TYPE_DEAUTH,
            self::TYPE_DHCP,
            self::TYPE_DISASSOC,
            self::TYPE_DNS,
            self::TYPE_ROAM,
            self::TYPE_STICKY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('occurred_at', $data ?? [], null);
        $this->setIfExists('band', $data ?? [], null);
        $this->setIfExists('ssid_number', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('subtype', $data ?? [], null);
        $this->setIfExists('severity', $data ?? [], null);
        $this->setIfExists('duration_ms', $data ?? [], null);
        $this->setIfExists('channel', $data ?? [], null);
        $this->setIfExists('rssi', $data ?? [], null);
        $this->setIfExists('event_data', $data ?? [], null);
        $this->setIfExists('device_serial', $data ?? [], null);
        $this->setIfExists('capture_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBandAllowableValues();
        if (!is_null($this->container['band']) && !in_array($this->container['band'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'band', must be one of '%s'",
                $this->container['band'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSsidNumberAllowableValues();
        if (!is_null($this->container['ssid_number']) && !in_array($this->container['ssid_number'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssid_number', must be one of '%s'",
                $this->container['ssid_number'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets occurred_at
     *
     * @return \DateTime|null
     */
    public function getOccurredAt()
    {
        return $this->container['occurred_at'];
    }

    /**
     * Sets occurred_at
     *
     * @param \DateTime|null $occurred_at Timestamp at which the event occurred
     *
     * @return self
     */
    public function setOccurredAt($occurred_at)
    {
        if (is_null($occurred_at)) {
            throw new \InvalidArgumentException('non-nullable occurred_at cannot be null');
        }
        $this->container['occurred_at'] = $occurred_at;

        return $this;
    }

    /**
     * Gets band
     *
     * @return string|null
     */
    public function getBand()
    {
        return $this->container['band'];
    }

    /**
     * Sets band
     *
     * @param string|null $band Wireless band the event occurred on
     *
     * @return self
     */
    public function setBand($band)
    {
        if (is_null($band)) {
            throw new \InvalidArgumentException('non-nullable band cannot be null');
        }
        $allowedValues = $this->getBandAllowableValues();
        if (!in_array($band, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'band', must be one of '%s'",
                    $band,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['band'] = $band;

        return $this;
    }

    /**
     * Gets ssid_number
     *
     * @return int|null
     */
    public function getSsidNumber()
    {
        return $this->container['ssid_number'];
    }

    /**
     * Sets ssid_number
     *
     * @param int|null $ssid_number Number of the SSID the event occurred in
     *
     * @return self
     */
    public function setSsidNumber($ssid_number)
    {
        if (is_null($ssid_number)) {
            throw new \InvalidArgumentException('non-nullable ssid_number cannot be null');
        }
        $allowedValues = $this->getSsidNumberAllowableValues();
        if (!in_array($ssid_number, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssid_number', must be one of '%s'",
                    $ssid_number,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ssid_number'] = $ssid_number;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Event type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets subtype
     *
     * @return string|null
     */
    public function getSubtype()
    {
        return $this->container['subtype'];
    }

    /**
     * Sets subtype
     *
     * @param string|null $subtype Event subtype
     *
     * @return self
     */
    public function setSubtype($subtype)
    {
        if (is_null($subtype)) {
            throw new \InvalidArgumentException('non-nullable subtype cannot be null');
        }
        $this->container['subtype'] = $subtype;

        return $this;
    }

    /**
     * Gets severity
     *
     * @return string|null
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param string|null $severity Event severity
     *
     * @return self
     */
    public function setSeverity($severity)
    {
        if (is_null($severity)) {
            throw new \InvalidArgumentException('non-nullable severity cannot be null');
        }
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets duration_ms
     *
     * @return int|null
     */
    public function getDurationMs()
    {
        return $this->container['duration_ms'];
    }

    /**
     * Sets duration_ms
     *
     * @param int|null $duration_ms Duration of the event in milliseconds
     *
     * @return self
     */
    public function setDurationMs($duration_ms)
    {
        if (is_null($duration_ms)) {
            throw new \InvalidArgumentException('non-nullable duration_ms cannot be null');
        }
        $this->container['duration_ms'] = $duration_ms;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return int|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param int|null $channel Wireless channel the event occurred over
     *
     * @return self
     */
    public function setChannel($channel)
    {
        if (is_null($channel)) {
            throw new \InvalidArgumentException('non-nullable channel cannot be null');
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets rssi
     *
     * @return int|null
     */
    public function getRssi()
    {
        return $this->container['rssi'];
    }

    /**
     * Sets rssi
     *
     * @param int|null $rssi RSSI recorded at the time of the event
     *
     * @return self
     */
    public function setRssi($rssi)
    {
        if (is_null($rssi)) {
            throw new \InvalidArgumentException('non-nullable rssi cannot be null');
        }
        $this->container['rssi'] = $rssi;

        return $this;
    }

    /**
     * Gets event_data
     *
     * @return array<string,mixed>|null
     */
    public function getEventData()
    {
        return $this->container['event_data'];
    }

    /**
     * Sets event_data
     *
     * @param array<string,mixed>|null $event_data Additional information relevant to the given event. Properties vary based on event type.
     *
     * @return self
     */
    public function setEventData($event_data)
    {
        if (is_null($event_data)) {
            throw new \InvalidArgumentException('non-nullable event_data cannot be null');
        }
        $this->container['event_data'] = $event_data;

        return $this;
    }

    /**
     * Gets device_serial
     *
     * @return string|null
     */
    public function getDeviceSerial()
    {
        return $this->container['device_serial'];
    }

    /**
     * Sets device_serial
     *
     * @param string|null $device_serial Serial number of the device the event occurred for
     *
     * @return self
     */
    public function setDeviceSerial($device_serial)
    {
        if (is_null($device_serial)) {
            throw new \InvalidArgumentException('non-nullable device_serial cannot be null');
        }
        $this->container['device_serial'] = $device_serial;

        return $this;
    }

    /**
     * Gets capture_id
     *
     * @return string|null
     */
    public function getCaptureId()
    {
        return $this->container['capture_id'];
    }

    /**
     * Sets capture_id
     *
     * @param string|null $capture_id Id of the packet capture triggered for the event, if any
     *
     * @return self
     */
    public function setCaptureId($capture_id)
    {
        if (is_null($capture_id)) {
            throw new \InvalidArgumentException('non-nullable capture_id cannot be null');
        }
        $this->container['capture_id'] = $capture_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


