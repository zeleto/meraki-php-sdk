<?php
/**
 * GetNetworkApplianceVpnBgp200ResponseNeighborsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetNetworkApplianceVpnBgp200ResponseNeighborsInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetNetworkApplianceVpnBgp200ResponseNeighborsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getNetworkApplianceVpnBgp_200_response_neighbors_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ip' => 'string',
        'ipv6' => '\Meraki\Model\GetNetworkApplianceVpnBgp200ResponseNeighborsInnerIpv6',
        'remote_as_number' => 'int',
        'receive_limit' => 'int',
        'allow_transit' => 'bool',
        'ebgp_hold_timer' => 'int',
        'ebgp_multihop' => 'int',
        'source_interface' => 'string',
        'next_hop_ip' => 'string',
        'ttl_security' => '\Meraki\Model\GetNetworkApplianceVpnBgp200ResponseNeighborsInnerTtlSecurity',
        'authentication' => '\Meraki\Model\GetNetworkApplianceVpnBgp200ResponseNeighborsInnerAuthentication'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ip' => null,
        'ipv6' => null,
        'remote_as_number' => null,
        'receive_limit' => null,
        'allow_transit' => null,
        'ebgp_hold_timer' => null,
        'ebgp_multihop' => null,
        'source_interface' => null,
        'next_hop_ip' => null,
        'ttl_security' => null,
        'authentication' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ip' => false,
        'ipv6' => false,
        'remote_as_number' => false,
        'receive_limit' => false,
        'allow_transit' => false,
        'ebgp_hold_timer' => false,
        'ebgp_multihop' => false,
        'source_interface' => false,
        'next_hop_ip' => false,
        'ttl_security' => false,
        'authentication' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ip' => 'ip',
        'ipv6' => 'ipv6',
        'remote_as_number' => 'remoteAsNumber',
        'receive_limit' => 'receiveLimit',
        'allow_transit' => 'allowTransit',
        'ebgp_hold_timer' => 'ebgpHoldTimer',
        'ebgp_multihop' => 'ebgpMultihop',
        'source_interface' => 'sourceInterface',
        'next_hop_ip' => 'nextHopIp',
        'ttl_security' => 'ttlSecurity',
        'authentication' => 'authentication'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ip' => 'setIp',
        'ipv6' => 'setIpv6',
        'remote_as_number' => 'setRemoteAsNumber',
        'receive_limit' => 'setReceiveLimit',
        'allow_transit' => 'setAllowTransit',
        'ebgp_hold_timer' => 'setEbgpHoldTimer',
        'ebgp_multihop' => 'setEbgpMultihop',
        'source_interface' => 'setSourceInterface',
        'next_hop_ip' => 'setNextHopIp',
        'ttl_security' => 'setTtlSecurity',
        'authentication' => 'setAuthentication'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ip' => 'getIp',
        'ipv6' => 'getIpv6',
        'remote_as_number' => 'getRemoteAsNumber',
        'receive_limit' => 'getReceiveLimit',
        'allow_transit' => 'getAllowTransit',
        'ebgp_hold_timer' => 'getEbgpHoldTimer',
        'ebgp_multihop' => 'getEbgpMultihop',
        'source_interface' => 'getSourceInterface',
        'next_hop_ip' => 'getNextHopIp',
        'ttl_security' => 'getTtlSecurity',
        'authentication' => 'getAuthentication'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('ip', $data ?? [], null);
        $this->setIfExists('ipv6', $data ?? [], null);
        $this->setIfExists('remote_as_number', $data ?? [], null);
        $this->setIfExists('receive_limit', $data ?? [], null);
        $this->setIfExists('allow_transit', $data ?? [], null);
        $this->setIfExists('ebgp_hold_timer', $data ?? [], null);
        $this->setIfExists('ebgp_multihop', $data ?? [], null);
        $this->setIfExists('source_interface', $data ?? [], null);
        $this->setIfExists('next_hop_ip', $data ?? [], null);
        $this->setIfExists('ttl_security', $data ?? [], null);
        $this->setIfExists('authentication', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip The IPv4 address of the neighbor
     *
     * @return self
     */
    public function setIp($ip)
    {
        if (is_null($ip)) {
            throw new \InvalidArgumentException('non-nullable ip cannot be null');
        }
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets ipv6
     *
     * @return \Meraki\Model\GetNetworkApplianceVpnBgp200ResponseNeighborsInnerIpv6|null
     */
    public function getIpv6()
    {
        return $this->container['ipv6'];
    }

    /**
     * Sets ipv6
     *
     * @param \Meraki\Model\GetNetworkApplianceVpnBgp200ResponseNeighborsInnerIpv6|null $ipv6 ipv6
     *
     * @return self
     */
    public function setIpv6($ipv6)
    {
        if (is_null($ipv6)) {
            throw new \InvalidArgumentException('non-nullable ipv6 cannot be null');
        }
        $this->container['ipv6'] = $ipv6;

        return $this;
    }

    /**
     * Gets remote_as_number
     *
     * @return int|null
     */
    public function getRemoteAsNumber()
    {
        return $this->container['remote_as_number'];
    }

    /**
     * Sets remote_as_number
     *
     * @param int|null $remote_as_number Remote AS number of the neighbor
     *
     * @return self
     */
    public function setRemoteAsNumber($remote_as_number)
    {
        if (is_null($remote_as_number)) {
            throw new \InvalidArgumentException('non-nullable remote_as_number cannot be null');
        }
        $this->container['remote_as_number'] = $remote_as_number;

        return $this;
    }

    /**
     * Gets receive_limit
     *
     * @return int|null
     */
    public function getReceiveLimit()
    {
        return $this->container['receive_limit'];
    }

    /**
     * Sets receive_limit
     *
     * @param int|null $receive_limit The maximum number of routes that the appliance can receive from the neighbor
     *
     * @return self
     */
    public function setReceiveLimit($receive_limit)
    {
        if (is_null($receive_limit)) {
            throw new \InvalidArgumentException('non-nullable receive_limit cannot be null');
        }
        $this->container['receive_limit'] = $receive_limit;

        return $this;
    }

    /**
     * Gets allow_transit
     *
     * @return bool|null
     */
    public function getAllowTransit()
    {
        return $this->container['allow_transit'];
    }

    /**
     * Sets allow_transit
     *
     * @param bool|null $allow_transit Whether the appliance will advertise routes learned from other Autonomous Systems
     *
     * @return self
     */
    public function setAllowTransit($allow_transit)
    {
        if (is_null($allow_transit)) {
            throw new \InvalidArgumentException('non-nullable allow_transit cannot be null');
        }
        $this->container['allow_transit'] = $allow_transit;

        return $this;
    }

    /**
     * Gets ebgp_hold_timer
     *
     * @return int|null
     */
    public function getEbgpHoldTimer()
    {
        return $this->container['ebgp_hold_timer'];
    }

    /**
     * Sets ebgp_hold_timer
     *
     * @param int|null $ebgp_hold_timer The eBGP hold time in seconds for the neighbor
     *
     * @return self
     */
    public function setEbgpHoldTimer($ebgp_hold_timer)
    {
        if (is_null($ebgp_hold_timer)) {
            throw new \InvalidArgumentException('non-nullable ebgp_hold_timer cannot be null');
        }
        $this->container['ebgp_hold_timer'] = $ebgp_hold_timer;

        return $this;
    }

    /**
     * Gets ebgp_multihop
     *
     * @return int|null
     */
    public function getEbgpMultihop()
    {
        return $this->container['ebgp_multihop'];
    }

    /**
     * Sets ebgp_multihop
     *
     * @param int|null $ebgp_multihop The number of hops the appliance must traverse to establish a peering relationship with the neighbor
     *
     * @return self
     */
    public function setEbgpMultihop($ebgp_multihop)
    {
        if (is_null($ebgp_multihop)) {
            throw new \InvalidArgumentException('non-nullable ebgp_multihop cannot be null');
        }
        $this->container['ebgp_multihop'] = $ebgp_multihop;

        return $this;
    }

    /**
     * Gets source_interface
     *
     * @return string|null
     */
    public function getSourceInterface()
    {
        return $this->container['source_interface'];
    }

    /**
     * Sets source_interface
     *
     * @param string|null $source_interface The output interface the appliance uses to establish a peering relationship with the neighbor
     *
     * @return self
     */
    public function setSourceInterface($source_interface)
    {
        if (is_null($source_interface)) {
            throw new \InvalidArgumentException('non-nullable source_interface cannot be null');
        }
        $this->container['source_interface'] = $source_interface;

        return $this;
    }

    /**
     * Gets next_hop_ip
     *
     * @return string|null
     */
    public function getNextHopIp()
    {
        return $this->container['next_hop_ip'];
    }

    /**
     * Sets next_hop_ip
     *
     * @param string|null $next_hop_ip The IPv4 address of the neighbor that will establish a TCP session with the appliance
     *
     * @return self
     */
    public function setNextHopIp($next_hop_ip)
    {
        if (is_null($next_hop_ip)) {
            throw new \InvalidArgumentException('non-nullable next_hop_ip cannot be null');
        }
        $this->container['next_hop_ip'] = $next_hop_ip;

        return $this;
    }

    /**
     * Gets ttl_security
     *
     * @return \Meraki\Model\GetNetworkApplianceVpnBgp200ResponseNeighborsInnerTtlSecurity|null
     */
    public function getTtlSecurity()
    {
        return $this->container['ttl_security'];
    }

    /**
     * Sets ttl_security
     *
     * @param \Meraki\Model\GetNetworkApplianceVpnBgp200ResponseNeighborsInnerTtlSecurity|null $ttl_security ttl_security
     *
     * @return self
     */
    public function setTtlSecurity($ttl_security)
    {
        if (is_null($ttl_security)) {
            throw new \InvalidArgumentException('non-nullable ttl_security cannot be null');
        }
        $this->container['ttl_security'] = $ttl_security;

        return $this;
    }

    /**
     * Gets authentication
     *
     * @return \Meraki\Model\GetNetworkApplianceVpnBgp200ResponseNeighborsInnerAuthentication|null
     */
    public function getAuthentication()
    {
        return $this->container['authentication'];
    }

    /**
     * Sets authentication
     *
     * @param \Meraki\Model\GetNetworkApplianceVpnBgp200ResponseNeighborsInnerAuthentication|null $authentication authentication
     *
     * @return self
     */
    public function setAuthentication($authentication)
    {
        if (is_null($authentication)) {
            throw new \InvalidArgumentException('non-nullable authentication cannot be null');
        }
        $this->container['authentication'] = $authentication;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


