<?php
/**
 * GetOrganizationSensorReadingsHistory200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetOrganizationSensorReadingsHistory200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetOrganizationSensorReadingsHistory200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getOrganizationSensorReadingsHistory_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'serial' => 'string',
        'network' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerNetwork',
        'ts' => 'string',
        'metric' => 'string',
        'apparent_power' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerApparentPower',
        'battery' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerBattery',
        'button' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerButton',
        'co2' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerCo2',
        'current' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerCurrent',
        'door' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerDoor',
        'downstream_power' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerDownstreamPower',
        'frequency' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerFrequency',
        'humidity' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerHumidity',
        'indoor_air_quality' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerIndoorAirQuality',
        'noise' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerNoise',
        'pm25' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerPm25',
        'power_factor' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerPowerFactor',
        'real_power' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerRealPower',
        'remote_lockout_switch' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerRemoteLockoutSwitch',
        'temperature' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerTemperature',
        'tvoc' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerTvoc',
        'voltage' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerVoltage',
        'water' => '\Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerWater'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'serial' => null,
        'network' => null,
        'ts' => null,
        'metric' => null,
        'apparent_power' => null,
        'battery' => null,
        'button' => null,
        'co2' => null,
        'current' => null,
        'door' => null,
        'downstream_power' => null,
        'frequency' => null,
        'humidity' => null,
        'indoor_air_quality' => null,
        'noise' => null,
        'pm25' => null,
        'power_factor' => null,
        'real_power' => null,
        'remote_lockout_switch' => null,
        'temperature' => null,
        'tvoc' => null,
        'voltage' => null,
        'water' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'serial' => false,
        'network' => false,
        'ts' => false,
        'metric' => false,
        'apparent_power' => false,
        'battery' => false,
        'button' => false,
        'co2' => false,
        'current' => false,
        'door' => false,
        'downstream_power' => false,
        'frequency' => false,
        'humidity' => false,
        'indoor_air_quality' => false,
        'noise' => false,
        'pm25' => false,
        'power_factor' => false,
        'real_power' => false,
        'remote_lockout_switch' => false,
        'temperature' => false,
        'tvoc' => false,
        'voltage' => false,
        'water' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'serial' => 'serial',
        'network' => 'network',
        'ts' => 'ts',
        'metric' => 'metric',
        'apparent_power' => 'apparentPower',
        'battery' => 'battery',
        'button' => 'button',
        'co2' => 'co2',
        'current' => 'current',
        'door' => 'door',
        'downstream_power' => 'downstreamPower',
        'frequency' => 'frequency',
        'humidity' => 'humidity',
        'indoor_air_quality' => 'indoorAirQuality',
        'noise' => 'noise',
        'pm25' => 'pm25',
        'power_factor' => 'powerFactor',
        'real_power' => 'realPower',
        'remote_lockout_switch' => 'remoteLockoutSwitch',
        'temperature' => 'temperature',
        'tvoc' => 'tvoc',
        'voltage' => 'voltage',
        'water' => 'water'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'serial' => 'setSerial',
        'network' => 'setNetwork',
        'ts' => 'setTs',
        'metric' => 'setMetric',
        'apparent_power' => 'setApparentPower',
        'battery' => 'setBattery',
        'button' => 'setButton',
        'co2' => 'setCo2',
        'current' => 'setCurrent',
        'door' => 'setDoor',
        'downstream_power' => 'setDownstreamPower',
        'frequency' => 'setFrequency',
        'humidity' => 'setHumidity',
        'indoor_air_quality' => 'setIndoorAirQuality',
        'noise' => 'setNoise',
        'pm25' => 'setPm25',
        'power_factor' => 'setPowerFactor',
        'real_power' => 'setRealPower',
        'remote_lockout_switch' => 'setRemoteLockoutSwitch',
        'temperature' => 'setTemperature',
        'tvoc' => 'setTvoc',
        'voltage' => 'setVoltage',
        'water' => 'setWater'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'serial' => 'getSerial',
        'network' => 'getNetwork',
        'ts' => 'getTs',
        'metric' => 'getMetric',
        'apparent_power' => 'getApparentPower',
        'battery' => 'getBattery',
        'button' => 'getButton',
        'co2' => 'getCo2',
        'current' => 'getCurrent',
        'door' => 'getDoor',
        'downstream_power' => 'getDownstreamPower',
        'frequency' => 'getFrequency',
        'humidity' => 'getHumidity',
        'indoor_air_quality' => 'getIndoorAirQuality',
        'noise' => 'getNoise',
        'pm25' => 'getPm25',
        'power_factor' => 'getPowerFactor',
        'real_power' => 'getRealPower',
        'remote_lockout_switch' => 'getRemoteLockoutSwitch',
        'temperature' => 'getTemperature',
        'tvoc' => 'getTvoc',
        'voltage' => 'getVoltage',
        'water' => 'getWater'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const METRIC_APPARENT_POWER = 'apparentPower';
    public const METRIC_BATTERY = 'battery';
    public const METRIC_BUTTON = 'button';
    public const METRIC_CO2 = 'co2';
    public const METRIC_CURRENT = 'current';
    public const METRIC_DOOR = 'door';
    public const METRIC_DOWNSTREAM_POWER = 'downstreamPower';
    public const METRIC_FREQUENCY = 'frequency';
    public const METRIC_HUMIDITY = 'humidity';
    public const METRIC_INDOOR_AIR_QUALITY = 'indoorAirQuality';
    public const METRIC_NOISE = 'noise';
    public const METRIC_PM25 = 'pm25';
    public const METRIC_POWER_FACTOR = 'powerFactor';
    public const METRIC_REAL_POWER = 'realPower';
    public const METRIC_REMOTE_LOCKOUT_SWITCH = 'remoteLockoutSwitch';
    public const METRIC_TEMPERATURE = 'temperature';
    public const METRIC_TVOC = 'tvoc';
    public const METRIC_VOLTAGE = 'voltage';
    public const METRIC_WATER = 'water';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMetricAllowableValues()
    {
        return [
            self::METRIC_APPARENT_POWER,
            self::METRIC_BATTERY,
            self::METRIC_BUTTON,
            self::METRIC_CO2,
            self::METRIC_CURRENT,
            self::METRIC_DOOR,
            self::METRIC_DOWNSTREAM_POWER,
            self::METRIC_FREQUENCY,
            self::METRIC_HUMIDITY,
            self::METRIC_INDOOR_AIR_QUALITY,
            self::METRIC_NOISE,
            self::METRIC_PM25,
            self::METRIC_POWER_FACTOR,
            self::METRIC_REAL_POWER,
            self::METRIC_REMOTE_LOCKOUT_SWITCH,
            self::METRIC_TEMPERATURE,
            self::METRIC_TVOC,
            self::METRIC_VOLTAGE,
            self::METRIC_WATER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('serial', $data ?? [], null);
        $this->setIfExists('network', $data ?? [], null);
        $this->setIfExists('ts', $data ?? [], null);
        $this->setIfExists('metric', $data ?? [], null);
        $this->setIfExists('apparent_power', $data ?? [], null);
        $this->setIfExists('battery', $data ?? [], null);
        $this->setIfExists('button', $data ?? [], null);
        $this->setIfExists('co2', $data ?? [], null);
        $this->setIfExists('current', $data ?? [], null);
        $this->setIfExists('door', $data ?? [], null);
        $this->setIfExists('downstream_power', $data ?? [], null);
        $this->setIfExists('frequency', $data ?? [], null);
        $this->setIfExists('humidity', $data ?? [], null);
        $this->setIfExists('indoor_air_quality', $data ?? [], null);
        $this->setIfExists('noise', $data ?? [], null);
        $this->setIfExists('pm25', $data ?? [], null);
        $this->setIfExists('power_factor', $data ?? [], null);
        $this->setIfExists('real_power', $data ?? [], null);
        $this->setIfExists('remote_lockout_switch', $data ?? [], null);
        $this->setIfExists('temperature', $data ?? [], null);
        $this->setIfExists('tvoc', $data ?? [], null);
        $this->setIfExists('voltage', $data ?? [], null);
        $this->setIfExists('water', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMetricAllowableValues();
        if (!is_null($this->container['metric']) && !in_array($this->container['metric'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'metric', must be one of '%s'",
                $this->container['metric'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets serial
     *
     * @return string|null
     */
    public function getSerial()
    {
        return $this->container['serial'];
    }

    /**
     * Sets serial
     *
     * @param string|null $serial Serial number of the sensor that took the reading.
     *
     * @return self
     */
    public function setSerial($serial)
    {
        if (is_null($serial)) {
            throw new \InvalidArgumentException('non-nullable serial cannot be null');
        }
        $this->container['serial'] = $serial;

        return $this;
    }

    /**
     * Gets network
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerNetwork|null
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerNetwork|null $network network
     *
     * @return self
     */
    public function setNetwork($network)
    {
        if (is_null($network)) {
            throw new \InvalidArgumentException('non-nullable network cannot be null');
        }
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets ts
     *
     * @return string|null
     */
    public function getTs()
    {
        return $this->container['ts'];
    }

    /**
     * Sets ts
     *
     * @param string|null $ts Time at which the reading occurred, in ISO8601 format.
     *
     * @return self
     */
    public function setTs($ts)
    {
        if (is_null($ts)) {
            throw new \InvalidArgumentException('non-nullable ts cannot be null');
        }
        $this->container['ts'] = $ts;

        return $this;
    }

    /**
     * Gets metric
     *
     * @return string|null
     */
    public function getMetric()
    {
        return $this->container['metric'];
    }

    /**
     * Sets metric
     *
     * @param string|null $metric Type of sensor reading.
     *
     * @return self
     */
    public function setMetric($metric)
    {
        if (is_null($metric)) {
            throw new \InvalidArgumentException('non-nullable metric cannot be null');
        }
        $allowedValues = $this->getMetricAllowableValues();
        if (!in_array($metric, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'metric', must be one of '%s'",
                    $metric,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['metric'] = $metric;

        return $this;
    }

    /**
     * Gets apparent_power
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerApparentPower|null
     */
    public function getApparentPower()
    {
        return $this->container['apparent_power'];
    }

    /**
     * Sets apparent_power
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerApparentPower|null $apparent_power apparent_power
     *
     * @return self
     */
    public function setApparentPower($apparent_power)
    {
        if (is_null($apparent_power)) {
            throw new \InvalidArgumentException('non-nullable apparent_power cannot be null');
        }
        $this->container['apparent_power'] = $apparent_power;

        return $this;
    }

    /**
     * Gets battery
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerBattery|null
     */
    public function getBattery()
    {
        return $this->container['battery'];
    }

    /**
     * Sets battery
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerBattery|null $battery battery
     *
     * @return self
     */
    public function setBattery($battery)
    {
        if (is_null($battery)) {
            throw new \InvalidArgumentException('non-nullable battery cannot be null');
        }
        $this->container['battery'] = $battery;

        return $this;
    }

    /**
     * Gets button
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerButton|null
     */
    public function getButton()
    {
        return $this->container['button'];
    }

    /**
     * Sets button
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerButton|null $button button
     *
     * @return self
     */
    public function setButton($button)
    {
        if (is_null($button)) {
            throw new \InvalidArgumentException('non-nullable button cannot be null');
        }
        $this->container['button'] = $button;

        return $this;
    }

    /**
     * Gets co2
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerCo2|null
     */
    public function getCo2()
    {
        return $this->container['co2'];
    }

    /**
     * Sets co2
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerCo2|null $co2 co2
     *
     * @return self
     */
    public function setCo2($co2)
    {
        if (is_null($co2)) {
            throw new \InvalidArgumentException('non-nullable co2 cannot be null');
        }
        $this->container['co2'] = $co2;

        return $this;
    }

    /**
     * Gets current
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerCurrent|null
     */
    public function getCurrent()
    {
        return $this->container['current'];
    }

    /**
     * Sets current
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerCurrent|null $current current
     *
     * @return self
     */
    public function setCurrent($current)
    {
        if (is_null($current)) {
            throw new \InvalidArgumentException('non-nullable current cannot be null');
        }
        $this->container['current'] = $current;

        return $this;
    }

    /**
     * Gets door
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerDoor|null
     */
    public function getDoor()
    {
        return $this->container['door'];
    }

    /**
     * Sets door
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerDoor|null $door door
     *
     * @return self
     */
    public function setDoor($door)
    {
        if (is_null($door)) {
            throw new \InvalidArgumentException('non-nullable door cannot be null');
        }
        $this->container['door'] = $door;

        return $this;
    }

    /**
     * Gets downstream_power
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerDownstreamPower|null
     */
    public function getDownstreamPower()
    {
        return $this->container['downstream_power'];
    }

    /**
     * Sets downstream_power
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerDownstreamPower|null $downstream_power downstream_power
     *
     * @return self
     */
    public function setDownstreamPower($downstream_power)
    {
        if (is_null($downstream_power)) {
            throw new \InvalidArgumentException('non-nullable downstream_power cannot be null');
        }
        $this->container['downstream_power'] = $downstream_power;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerFrequency|null
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerFrequency|null $frequency frequency
     *
     * @return self
     */
    public function setFrequency($frequency)
    {
        if (is_null($frequency)) {
            throw new \InvalidArgumentException('non-nullable frequency cannot be null');
        }
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets humidity
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerHumidity|null
     */
    public function getHumidity()
    {
        return $this->container['humidity'];
    }

    /**
     * Sets humidity
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerHumidity|null $humidity humidity
     *
     * @return self
     */
    public function setHumidity($humidity)
    {
        if (is_null($humidity)) {
            throw new \InvalidArgumentException('non-nullable humidity cannot be null');
        }
        $this->container['humidity'] = $humidity;

        return $this;
    }

    /**
     * Gets indoor_air_quality
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerIndoorAirQuality|null
     */
    public function getIndoorAirQuality()
    {
        return $this->container['indoor_air_quality'];
    }

    /**
     * Sets indoor_air_quality
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerIndoorAirQuality|null $indoor_air_quality indoor_air_quality
     *
     * @return self
     */
    public function setIndoorAirQuality($indoor_air_quality)
    {
        if (is_null($indoor_air_quality)) {
            throw new \InvalidArgumentException('non-nullable indoor_air_quality cannot be null');
        }
        $this->container['indoor_air_quality'] = $indoor_air_quality;

        return $this;
    }

    /**
     * Gets noise
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerNoise|null
     */
    public function getNoise()
    {
        return $this->container['noise'];
    }

    /**
     * Sets noise
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerNoise|null $noise noise
     *
     * @return self
     */
    public function setNoise($noise)
    {
        if (is_null($noise)) {
            throw new \InvalidArgumentException('non-nullable noise cannot be null');
        }
        $this->container['noise'] = $noise;

        return $this;
    }

    /**
     * Gets pm25
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerPm25|null
     */
    public function getPm25()
    {
        return $this->container['pm25'];
    }

    /**
     * Sets pm25
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerPm25|null $pm25 pm25
     *
     * @return self
     */
    public function setPm25($pm25)
    {
        if (is_null($pm25)) {
            throw new \InvalidArgumentException('non-nullable pm25 cannot be null');
        }
        $this->container['pm25'] = $pm25;

        return $this;
    }

    /**
     * Gets power_factor
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerPowerFactor|null
     */
    public function getPowerFactor()
    {
        return $this->container['power_factor'];
    }

    /**
     * Sets power_factor
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerPowerFactor|null $power_factor power_factor
     *
     * @return self
     */
    public function setPowerFactor($power_factor)
    {
        if (is_null($power_factor)) {
            throw new \InvalidArgumentException('non-nullable power_factor cannot be null');
        }
        $this->container['power_factor'] = $power_factor;

        return $this;
    }

    /**
     * Gets real_power
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerRealPower|null
     */
    public function getRealPower()
    {
        return $this->container['real_power'];
    }

    /**
     * Sets real_power
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerRealPower|null $real_power real_power
     *
     * @return self
     */
    public function setRealPower($real_power)
    {
        if (is_null($real_power)) {
            throw new \InvalidArgumentException('non-nullable real_power cannot be null');
        }
        $this->container['real_power'] = $real_power;

        return $this;
    }

    /**
     * Gets remote_lockout_switch
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerRemoteLockoutSwitch|null
     */
    public function getRemoteLockoutSwitch()
    {
        return $this->container['remote_lockout_switch'];
    }

    /**
     * Sets remote_lockout_switch
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerRemoteLockoutSwitch|null $remote_lockout_switch remote_lockout_switch
     *
     * @return self
     */
    public function setRemoteLockoutSwitch($remote_lockout_switch)
    {
        if (is_null($remote_lockout_switch)) {
            throw new \InvalidArgumentException('non-nullable remote_lockout_switch cannot be null');
        }
        $this->container['remote_lockout_switch'] = $remote_lockout_switch;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerTemperature|null
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerTemperature|null $temperature temperature
     *
     * @return self
     */
    public function setTemperature($temperature)
    {
        if (is_null($temperature)) {
            throw new \InvalidArgumentException('non-nullable temperature cannot be null');
        }
        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets tvoc
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerTvoc|null
     */
    public function getTvoc()
    {
        return $this->container['tvoc'];
    }

    /**
     * Sets tvoc
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerTvoc|null $tvoc tvoc
     *
     * @return self
     */
    public function setTvoc($tvoc)
    {
        if (is_null($tvoc)) {
            throw new \InvalidArgumentException('non-nullable tvoc cannot be null');
        }
        $this->container['tvoc'] = $tvoc;

        return $this;
    }

    /**
     * Gets voltage
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerVoltage|null
     */
    public function getVoltage()
    {
        return $this->container['voltage'];
    }

    /**
     * Sets voltage
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerVoltage|null $voltage voltage
     *
     * @return self
     */
    public function setVoltage($voltage)
    {
        if (is_null($voltage)) {
            throw new \InvalidArgumentException('non-nullable voltage cannot be null');
        }
        $this->container['voltage'] = $voltage;

        return $this;
    }

    /**
     * Gets water
     *
     * @return \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerWater|null
     */
    public function getWater()
    {
        return $this->container['water'];
    }

    /**
     * Sets water
     *
     * @param \Meraki\Model\GetOrganizationSensorReadingsHistory200ResponseInnerWater|null $water water
     *
     * @return self
     */
    public function setWater($water)
    {
        if (is_null($water)) {
            throw new \InvalidArgumentException('non-nullable water cannot be null');
        }
        $this->container['water'] = $water;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


