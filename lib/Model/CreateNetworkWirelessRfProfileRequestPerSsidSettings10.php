<?php
/**
 * CreateNetworkWirelessRfProfileRequestPerSsidSettings10
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * CreateNetworkWirelessRfProfileRequestPerSsidSettings10 Class Doc Comment
 *
 * @category Class
 * @description Settings for SSID 10
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateNetworkWirelessRfProfileRequestPerSsidSettings10 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'createNetworkWirelessRfProfile_request_perSsidSettings_10';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'min_bitrate' => 'float',
        'band_operation_mode' => 'string',
        'bands' => '\Meraki\Model\CreateNetworkWirelessRfProfileRequestApBandSettingsBands',
        'band_steering_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'min_bitrate' => 'float',
        'band_operation_mode' => null,
        'bands' => null,
        'band_steering_enabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'min_bitrate' => false,
        'band_operation_mode' => false,
        'bands' => false,
        'band_steering_enabled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'min_bitrate' => 'minBitrate',
        'band_operation_mode' => 'bandOperationMode',
        'bands' => 'bands',
        'band_steering_enabled' => 'bandSteeringEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'min_bitrate' => 'setMinBitrate',
        'band_operation_mode' => 'setBandOperationMode',
        'bands' => 'setBands',
        'band_steering_enabled' => 'setBandSteeringEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'min_bitrate' => 'getMinBitrate',
        'band_operation_mode' => 'getBandOperationMode',
        'bands' => 'getBands',
        'band_steering_enabled' => 'getBandSteeringEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BAND_OPERATION_MODE__2_4GHZ = '2.4ghz';
    public const BAND_OPERATION_MODE__5GHZ = '5ghz';
    public const BAND_OPERATION_MODE__6GHZ = '6ghz';
    public const BAND_OPERATION_MODE_DUAL = 'dual';
    public const BAND_OPERATION_MODE_MULTI = 'multi';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBandOperationModeAllowableValues()
    {
        return [
            self::BAND_OPERATION_MODE__2_4GHZ,
            self::BAND_OPERATION_MODE__5GHZ,
            self::BAND_OPERATION_MODE__6GHZ,
            self::BAND_OPERATION_MODE_DUAL,
            self::BAND_OPERATION_MODE_MULTI,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('min_bitrate', $data ?? [], null);
        $this->setIfExists('band_operation_mode', $data ?? [], null);
        $this->setIfExists('bands', $data ?? [], null);
        $this->setIfExists('band_steering_enabled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBandOperationModeAllowableValues();
        if (!is_null($this->container['band_operation_mode']) && !in_array($this->container['band_operation_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'band_operation_mode', must be one of '%s'",
                $this->container['band_operation_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets min_bitrate
     *
     * @return float|null
     */
    public function getMinBitrate()
    {
        return $this->container['min_bitrate'];
    }

    /**
     * Sets min_bitrate
     *
     * @param float|null $min_bitrate Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
     *
     * @return self
     */
    public function setMinBitrate($min_bitrate)
    {
        if (is_null($min_bitrate)) {
            throw new \InvalidArgumentException('non-nullable min_bitrate cannot be null');
        }
        $this->container['min_bitrate'] = $min_bitrate;

        return $this;
    }

    /**
     * Gets band_operation_mode
     *
     * @return string|null
     */
    public function getBandOperationMode()
    {
        return $this->container['band_operation_mode'];
    }

    /**
     * Sets band_operation_mode
     *
     * @param string|null $band_operation_mode Choice between 'dual', '2.4ghz', '5ghz', '6ghz' or 'multi'.
     *
     * @return self
     */
    public function setBandOperationMode($band_operation_mode)
    {
        if (is_null($band_operation_mode)) {
            throw new \InvalidArgumentException('non-nullable band_operation_mode cannot be null');
        }
        $allowedValues = $this->getBandOperationModeAllowableValues();
        if (!in_array($band_operation_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'band_operation_mode', must be one of '%s'",
                    $band_operation_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['band_operation_mode'] = $band_operation_mode;

        return $this;
    }

    /**
     * Gets bands
     *
     * @return \Meraki\Model\CreateNetworkWirelessRfProfileRequestApBandSettingsBands|null
     */
    public function getBands()
    {
        return $this->container['bands'];
    }

    /**
     * Sets bands
     *
     * @param \Meraki\Model\CreateNetworkWirelessRfProfileRequestApBandSettingsBands|null $bands bands
     *
     * @return self
     */
    public function setBands($bands)
    {
        if (is_null($bands)) {
            throw new \InvalidArgumentException('non-nullable bands cannot be null');
        }
        $this->container['bands'] = $bands;

        return $this;
    }

    /**
     * Gets band_steering_enabled
     *
     * @return bool|null
     */
    public function getBandSteeringEnabled()
    {
        return $this->container['band_steering_enabled'];
    }

    /**
     * Sets band_steering_enabled
     *
     * @param bool|null $band_steering_enabled Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
     *
     * @return self
     */
    public function setBandSteeringEnabled($band_steering_enabled)
    {
        if (is_null($band_steering_enabled)) {
            throw new \InvalidArgumentException('non-nullable band_steering_enabled cannot be null');
        }
        $this->container['band_steering_enabled'] = $band_steering_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


