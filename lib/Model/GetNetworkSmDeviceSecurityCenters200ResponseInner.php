<?php
/**
 * GetNetworkSmDeviceSecurityCenters200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetNetworkSmDeviceSecurityCenters200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetNetworkSmDeviceSecurityCenters200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getNetworkSmDeviceSecurityCenters_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_rooted' => 'bool',
        'has_anti_virus' => 'bool',
        'anti_virus_name' => 'string',
        'is_fire_wall_enabled' => 'bool',
        'has_fire_wall_installed' => 'bool',
        'fire_wall_name' => 'string',
        'is_disk_encrypted' => 'bool',
        'is_auto_login_disabled' => 'bool',
        'id' => 'string',
        'running_procs' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_rooted' => null,
        'has_anti_virus' => null,
        'anti_virus_name' => null,
        'is_fire_wall_enabled' => null,
        'has_fire_wall_installed' => null,
        'fire_wall_name' => null,
        'is_disk_encrypted' => null,
        'is_auto_login_disabled' => null,
        'id' => null,
        'running_procs' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_rooted' => false,
        'has_anti_virus' => false,
        'anti_virus_name' => false,
        'is_fire_wall_enabled' => false,
        'has_fire_wall_installed' => false,
        'fire_wall_name' => false,
        'is_disk_encrypted' => false,
        'is_auto_login_disabled' => false,
        'id' => false,
        'running_procs' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_rooted' => 'isRooted',
        'has_anti_virus' => 'hasAntiVirus',
        'anti_virus_name' => 'antiVirusName',
        'is_fire_wall_enabled' => 'isFireWallEnabled',
        'has_fire_wall_installed' => 'hasFireWallInstalled',
        'fire_wall_name' => 'fireWallName',
        'is_disk_encrypted' => 'isDiskEncrypted',
        'is_auto_login_disabled' => 'isAutoLoginDisabled',
        'id' => 'id',
        'running_procs' => 'runningProcs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_rooted' => 'setIsRooted',
        'has_anti_virus' => 'setHasAntiVirus',
        'anti_virus_name' => 'setAntiVirusName',
        'is_fire_wall_enabled' => 'setIsFireWallEnabled',
        'has_fire_wall_installed' => 'setHasFireWallInstalled',
        'fire_wall_name' => 'setFireWallName',
        'is_disk_encrypted' => 'setIsDiskEncrypted',
        'is_auto_login_disabled' => 'setIsAutoLoginDisabled',
        'id' => 'setId',
        'running_procs' => 'setRunningProcs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_rooted' => 'getIsRooted',
        'has_anti_virus' => 'getHasAntiVirus',
        'anti_virus_name' => 'getAntiVirusName',
        'is_fire_wall_enabled' => 'getIsFireWallEnabled',
        'has_fire_wall_installed' => 'getHasFireWallInstalled',
        'fire_wall_name' => 'getFireWallName',
        'is_disk_encrypted' => 'getIsDiskEncrypted',
        'is_auto_login_disabled' => 'getIsAutoLoginDisabled',
        'id' => 'getId',
        'running_procs' => 'getRunningProcs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('is_rooted', $data ?? [], null);
        $this->setIfExists('has_anti_virus', $data ?? [], null);
        $this->setIfExists('anti_virus_name', $data ?? [], null);
        $this->setIfExists('is_fire_wall_enabled', $data ?? [], null);
        $this->setIfExists('has_fire_wall_installed', $data ?? [], null);
        $this->setIfExists('fire_wall_name', $data ?? [], null);
        $this->setIfExists('is_disk_encrypted', $data ?? [], null);
        $this->setIfExists('is_auto_login_disabled', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('running_procs', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_rooted
     *
     * @return bool|null
     */
    public function getIsRooted()
    {
        return $this->container['is_rooted'];
    }

    /**
     * Sets is_rooted
     *
     * @param bool|null $is_rooted Boolean indicating if the device is rooted.
     *
     * @return self
     */
    public function setIsRooted($is_rooted)
    {
        if (is_null($is_rooted)) {
            throw new \InvalidArgumentException('non-nullable is_rooted cannot be null');
        }
        $this->container['is_rooted'] = $is_rooted;

        return $this;
    }

    /**
     * Gets has_anti_virus
     *
     * @return bool|null
     */
    public function getHasAntiVirus()
    {
        return $this->container['has_anti_virus'];
    }

    /**
     * Sets has_anti_virus
     *
     * @param bool|null $has_anti_virus Boolean indicating if the device has Antivirus.
     *
     * @return self
     */
    public function setHasAntiVirus($has_anti_virus)
    {
        if (is_null($has_anti_virus)) {
            throw new \InvalidArgumentException('non-nullable has_anti_virus cannot be null');
        }
        $this->container['has_anti_virus'] = $has_anti_virus;

        return $this;
    }

    /**
     * Gets anti_virus_name
     *
     * @return string|null
     */
    public function getAntiVirusName()
    {
        return $this->container['anti_virus_name'];
    }

    /**
     * Sets anti_virus_name
     *
     * @param string|null $anti_virus_name The name of the Antivirus.
     *
     * @return self
     */
    public function setAntiVirusName($anti_virus_name)
    {
        if (is_null($anti_virus_name)) {
            throw new \InvalidArgumentException('non-nullable anti_virus_name cannot be null');
        }
        $this->container['anti_virus_name'] = $anti_virus_name;

        return $this;
    }

    /**
     * Gets is_fire_wall_enabled
     *
     * @return bool|null
     */
    public function getIsFireWallEnabled()
    {
        return $this->container['is_fire_wall_enabled'];
    }

    /**
     * Sets is_fire_wall_enabled
     *
     * @param bool|null $is_fire_wall_enabled Boolean indicating if the device has a Firewall enabled.
     *
     * @return self
     */
    public function setIsFireWallEnabled($is_fire_wall_enabled)
    {
        if (is_null($is_fire_wall_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_fire_wall_enabled cannot be null');
        }
        $this->container['is_fire_wall_enabled'] = $is_fire_wall_enabled;

        return $this;
    }

    /**
     * Gets has_fire_wall_installed
     *
     * @return bool|null
     */
    public function getHasFireWallInstalled()
    {
        return $this->container['has_fire_wall_installed'];
    }

    /**
     * Sets has_fire_wall_installed
     *
     * @param bool|null $has_fire_wall_installed Boolean indicating if the device has a Firewall installed.
     *
     * @return self
     */
    public function setHasFireWallInstalled($has_fire_wall_installed)
    {
        if (is_null($has_fire_wall_installed)) {
            throw new \InvalidArgumentException('non-nullable has_fire_wall_installed cannot be null');
        }
        $this->container['has_fire_wall_installed'] = $has_fire_wall_installed;

        return $this;
    }

    /**
     * Gets fire_wall_name
     *
     * @return string|null
     */
    public function getFireWallName()
    {
        return $this->container['fire_wall_name'];
    }

    /**
     * Sets fire_wall_name
     *
     * @param string|null $fire_wall_name The name of the Firewall.
     *
     * @return self
     */
    public function setFireWallName($fire_wall_name)
    {
        if (is_null($fire_wall_name)) {
            throw new \InvalidArgumentException('non-nullable fire_wall_name cannot be null');
        }
        $this->container['fire_wall_name'] = $fire_wall_name;

        return $this;
    }

    /**
     * Gets is_disk_encrypted
     *
     * @return bool|null
     */
    public function getIsDiskEncrypted()
    {
        return $this->container['is_disk_encrypted'];
    }

    /**
     * Sets is_disk_encrypted
     *
     * @param bool|null $is_disk_encrypted Boolean indicating if the device has disk encryption.
     *
     * @return self
     */
    public function setIsDiskEncrypted($is_disk_encrypted)
    {
        if (is_null($is_disk_encrypted)) {
            throw new \InvalidArgumentException('non-nullable is_disk_encrypted cannot be null');
        }
        $this->container['is_disk_encrypted'] = $is_disk_encrypted;

        return $this;
    }

    /**
     * Gets is_auto_login_disabled
     *
     * @return bool|null
     */
    public function getIsAutoLoginDisabled()
    {
        return $this->container['is_auto_login_disabled'];
    }

    /**
     * Sets is_auto_login_disabled
     *
     * @param bool|null $is_auto_login_disabled Boolean indicating if the device has auto login disabled.
     *
     * @return self
     */
    public function setIsAutoLoginDisabled($is_auto_login_disabled)
    {
        if (is_null($is_auto_login_disabled)) {
            throw new \InvalidArgumentException('non-nullable is_auto_login_disabled cannot be null');
        }
        $this->container['is_auto_login_disabled'] = $is_auto_login_disabled;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The Meraki identifier for the security center record.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets running_procs
     *
     * @return string|null
     */
    public function getRunningProcs()
    {
        return $this->container['running_procs'];
    }

    /**
     * Sets running_procs
     *
     * @param string|null $running_procs A comma seperated list of procs running on the device.
     *
     * @return self
     */
    public function setRunningProcs($running_procs)
    {
        if (is_null($running_procs)) {
            throw new \InvalidArgumentException('non-nullable running_procs cannot be null');
        }
        $this->container['running_procs'] = $running_procs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


