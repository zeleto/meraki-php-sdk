<?php
/**
 * GetNetworkSwitchDhcpServerPolicy200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetNetworkSwitchDhcpServerPolicy200Response Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetNetworkSwitchDhcpServerPolicy200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getNetworkSwitchDhcpServerPolicy_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'alerts' => '\Meraki\Model\GetNetworkSwitchDhcpServerPolicy200ResponseAlerts',
        'default_policy' => 'string',
        'blocked_servers' => 'string[]',
        'allowed_servers' => 'string[]',
        'arp_inspection' => '\Meraki\Model\GetNetworkSwitchDhcpServerPolicy200ResponseArpInspection'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'alerts' => null,
        'default_policy' => null,
        'blocked_servers' => null,
        'allowed_servers' => null,
        'arp_inspection' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'alerts' => false,
        'default_policy' => false,
        'blocked_servers' => false,
        'allowed_servers' => false,
        'arp_inspection' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alerts' => 'alerts',
        'default_policy' => 'defaultPolicy',
        'blocked_servers' => 'blockedServers',
        'allowed_servers' => 'allowedServers',
        'arp_inspection' => 'arpInspection'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alerts' => 'setAlerts',
        'default_policy' => 'setDefaultPolicy',
        'blocked_servers' => 'setBlockedServers',
        'allowed_servers' => 'setAllowedServers',
        'arp_inspection' => 'setArpInspection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alerts' => 'getAlerts',
        'default_policy' => 'getDefaultPolicy',
        'blocked_servers' => 'getBlockedServers',
        'allowed_servers' => 'getAllowedServers',
        'arp_inspection' => 'getArpInspection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DEFAULT_POLICY_ALLOW = 'allow';
    public const DEFAULT_POLICY_BLOCK = 'block';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultPolicyAllowableValues()
    {
        return [
            self::DEFAULT_POLICY_ALLOW,
            self::DEFAULT_POLICY_BLOCK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('alerts', $data ?? [], null);
        $this->setIfExists('default_policy', $data ?? [], null);
        $this->setIfExists('blocked_servers', $data ?? [], null);
        $this->setIfExists('allowed_servers', $data ?? [], null);
        $this->setIfExists('arp_inspection', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDefaultPolicyAllowableValues();
        if (!is_null($this->container['default_policy']) && !in_array($this->container['default_policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_policy', must be one of '%s'",
                $this->container['default_policy'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alerts
     *
     * @return \Meraki\Model\GetNetworkSwitchDhcpServerPolicy200ResponseAlerts|null
     */
    public function getAlerts()
    {
        return $this->container['alerts'];
    }

    /**
     * Sets alerts
     *
     * @param \Meraki\Model\GetNetworkSwitchDhcpServerPolicy200ResponseAlerts|null $alerts alerts
     *
     * @return self
     */
    public function setAlerts($alerts)
    {
        if (is_null($alerts)) {
            throw new \InvalidArgumentException('non-nullable alerts cannot be null');
        }
        $this->container['alerts'] = $alerts;

        return $this;
    }

    /**
     * Gets default_policy
     *
     * @return string|null
     */
    public function getDefaultPolicy()
    {
        return $this->container['default_policy'];
    }

    /**
     * Sets default_policy
     *
     * @param string|null $default_policy 'allow' or 'block' new DHCP servers. Default value is 'allow'.
     *
     * @return self
     */
    public function setDefaultPolicy($default_policy)
    {
        if (is_null($default_policy)) {
            throw new \InvalidArgumentException('non-nullable default_policy cannot be null');
        }
        $allowedValues = $this->getDefaultPolicyAllowableValues();
        if (!in_array($default_policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_policy', must be one of '%s'",
                    $default_policy,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_policy'] = $default_policy;

        return $this;
    }

    /**
     * Gets blocked_servers
     *
     * @return string[]|null
     */
    public function getBlockedServers()
    {
        return $this->container['blocked_servers'];
    }

    /**
     * Sets blocked_servers
     *
     * @param string[]|null $blocked_servers List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set       to allow.An empty array will clear the entries.
     *
     * @return self
     */
    public function setBlockedServers($blocked_servers)
    {
        if (is_null($blocked_servers)) {
            throw new \InvalidArgumentException('non-nullable blocked_servers cannot be null');
        }
        $this->container['blocked_servers'] = $blocked_servers;

        return $this;
    }

    /**
     * Gets allowed_servers
     *
     * @return string[]|null
     */
    public function getAllowedServers()
    {
        return $this->container['allowed_servers'];
    }

    /**
     * Sets allowed_servers
     *
     * @param string[]|null $allowed_servers List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set       to block.An empty array will clear the entries.
     *
     * @return self
     */
    public function setAllowedServers($allowed_servers)
    {
        if (is_null($allowed_servers)) {
            throw new \InvalidArgumentException('non-nullable allowed_servers cannot be null');
        }
        $this->container['allowed_servers'] = $allowed_servers;

        return $this;
    }

    /**
     * Gets arp_inspection
     *
     * @return \Meraki\Model\GetNetworkSwitchDhcpServerPolicy200ResponseArpInspection|null
     */
    public function getArpInspection()
    {
        return $this->container['arp_inspection'];
    }

    /**
     * Sets arp_inspection
     *
     * @param \Meraki\Model\GetNetworkSwitchDhcpServerPolicy200ResponseArpInspection|null $arp_inspection arp_inspection
     *
     * @return self
     */
    public function setArpInspection($arp_inspection)
    {
        if (is_null($arp_inspection)) {
            throw new \InvalidArgumentException('non-nullable arp_inspection cannot be null');
        }
        $this->container['arp_inspection'] = $arp_inspection;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


