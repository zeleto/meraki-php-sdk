<?php
/**
 * CreateOrganizationAlertsProfileRequestAlertCondition
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * CreateOrganizationAlertsProfileRequestAlertCondition Class Doc Comment
 *
 * @category Class
 * @description The conditions that determine if the alert triggers
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateOrganizationAlertsProfileRequestAlertCondition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'createOrganizationAlertsProfile_request_alertCondition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'duration' => 'int',
        'window' => 'int',
        'bit_rate_bps' => 'int',
        'loss_ratio' => 'float',
        'latency_ms' => 'int',
        'jitter_ms' => 'int',
        'mos' => 'float',
        'interface' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'duration' => null,
        'window' => null,
        'bit_rate_bps' => null,
        'loss_ratio' => 'float',
        'latency_ms' => null,
        'jitter_ms' => null,
        'mos' => 'float',
        'interface' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'duration' => false,
        'window' => false,
        'bit_rate_bps' => false,
        'loss_ratio' => false,
        'latency_ms' => false,
        'jitter_ms' => false,
        'mos' => false,
        'interface' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'duration' => 'duration',
        'window' => 'window',
        'bit_rate_bps' => 'bit_rate_bps',
        'loss_ratio' => 'loss_ratio',
        'latency_ms' => 'latency_ms',
        'jitter_ms' => 'jitter_ms',
        'mos' => 'mos',
        'interface' => 'interface'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'duration' => 'setDuration',
        'window' => 'setWindow',
        'bit_rate_bps' => 'setBitRateBps',
        'loss_ratio' => 'setLossRatio',
        'latency_ms' => 'setLatencyMs',
        'jitter_ms' => 'setJitterMs',
        'mos' => 'setMos',
        'interface' => 'setInterface'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'duration' => 'getDuration',
        'window' => 'getWindow',
        'bit_rate_bps' => 'getBitRateBps',
        'loss_ratio' => 'getLossRatio',
        'latency_ms' => 'getLatencyMs',
        'jitter_ms' => 'getJitterMs',
        'mos' => 'getMos',
        'interface' => 'getInterface'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MODEL_INTERFACE_CELLULAR = 'cellular';
    public const MODEL_INTERFACE_WAN1 = 'wan1';
    public const MODEL_INTERFACE_WAN2 = 'wan2';
    public const MODEL_INTERFACE_WAN3 = 'wan3';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterfaceAllowableValues()
    {
        return [
            self::MODEL_INTERFACE_CELLULAR,
            self::MODEL_INTERFACE_WAN1,
            self::MODEL_INTERFACE_WAN2,
            self::MODEL_INTERFACE_WAN3,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('window', $data ?? [], null);
        $this->setIfExists('bit_rate_bps', $data ?? [], null);
        $this->setIfExists('loss_ratio', $data ?? [], null);
        $this->setIfExists('latency_ms', $data ?? [], null);
        $this->setIfExists('jitter_ms', $data ?? [], null);
        $this->setIfExists('mos', $data ?? [], null);
        $this->setIfExists('interface', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInterfaceAllowableValues();
        if (!is_null($this->container['interface']) && !in_array($this->container['interface'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interface', must be one of '%s'",
                $this->container['interface'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets duration
     *
     * @return int|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int|null $duration The total duration in seconds that the threshold should be crossed before alerting
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets window
     *
     * @return int|null
     */
    public function getWindow()
    {
        return $this->container['window'];
    }

    /**
     * Sets window
     *
     * @param int|null $window The look back period in seconds for sensing the alert
     *
     * @return self
     */
    public function setWindow($window)
    {
        if (is_null($window)) {
            throw new \InvalidArgumentException('non-nullable window cannot be null');
        }
        $this->container['window'] = $window;

        return $this;
    }

    /**
     * Gets bit_rate_bps
     *
     * @return int|null
     */
    public function getBitRateBps()
    {
        return $this->container['bit_rate_bps'];
    }

    /**
     * Sets bit_rate_bps
     *
     * @param int|null $bit_rate_bps The threshold the metric must cross to be valid for alerting. Used only for WAN Utilization alerts.
     *
     * @return self
     */
    public function setBitRateBps($bit_rate_bps)
    {
        if (is_null($bit_rate_bps)) {
            throw new \InvalidArgumentException('non-nullable bit_rate_bps cannot be null');
        }
        $this->container['bit_rate_bps'] = $bit_rate_bps;

        return $this;
    }

    /**
     * Gets loss_ratio
     *
     * @return float|null
     */
    public function getLossRatio()
    {
        return $this->container['loss_ratio'];
    }

    /**
     * Sets loss_ratio
     *
     * @param float|null $loss_ratio The threshold the metric must cross to be valid for alerting. Used only for Packet Loss alerts.
     *
     * @return self
     */
    public function setLossRatio($loss_ratio)
    {
        if (is_null($loss_ratio)) {
            throw new \InvalidArgumentException('non-nullable loss_ratio cannot be null');
        }
        $this->container['loss_ratio'] = $loss_ratio;

        return $this;
    }

    /**
     * Gets latency_ms
     *
     * @return int|null
     */
    public function getLatencyMs()
    {
        return $this->container['latency_ms'];
    }

    /**
     * Sets latency_ms
     *
     * @param int|null $latency_ms The threshold the metric must cross to be valid for alerting. Used only for WAN Latency alerts.
     *
     * @return self
     */
    public function setLatencyMs($latency_ms)
    {
        if (is_null($latency_ms)) {
            throw new \InvalidArgumentException('non-nullable latency_ms cannot be null');
        }
        $this->container['latency_ms'] = $latency_ms;

        return $this;
    }

    /**
     * Gets jitter_ms
     *
     * @return int|null
     */
    public function getJitterMs()
    {
        return $this->container['jitter_ms'];
    }

    /**
     * Sets jitter_ms
     *
     * @param int|null $jitter_ms The threshold the metric must cross to be valid for alerting. Used only for VoIP Jitter alerts.
     *
     * @return self
     */
    public function setJitterMs($jitter_ms)
    {
        if (is_null($jitter_ms)) {
            throw new \InvalidArgumentException('non-nullable jitter_ms cannot be null');
        }
        $this->container['jitter_ms'] = $jitter_ms;

        return $this;
    }

    /**
     * Gets mos
     *
     * @return float|null
     */
    public function getMos()
    {
        return $this->container['mos'];
    }

    /**
     * Sets mos
     *
     * @param float|null $mos The threshold the metric must drop below to be valid for alerting. Used only for VoIP MOS alerts.
     *
     * @return self
     */
    public function setMos($mos)
    {
        if (is_null($mos)) {
            throw new \InvalidArgumentException('non-nullable mos cannot be null');
        }
        $this->container['mos'] = $mos;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string|null
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string|null $interface The uplink observed for the alert.  interface must be one of the following: wan1, wan2, wan3, cellular
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (is_null($interface)) {
            throw new \InvalidArgumentException('non-nullable interface cannot be null');
        }
        $allowedValues = $this->getInterfaceAllowableValues();
        if (!in_array($interface, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interface', must be one of '%s'",
                    $interface,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interface'] = $interface;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


