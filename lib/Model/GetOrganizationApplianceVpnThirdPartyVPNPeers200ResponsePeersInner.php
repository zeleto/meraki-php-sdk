<?php
/**
 * GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getOrganizationApplianceVpnThirdPartyVPNPeers_200_response_peers_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'public_ip' => 'string',
        'remote_id' => 'string',
        'local_id' => 'string',
        'secret' => 'string',
        'private_subnets' => 'string[]',
        'ipsec_policies' => '\Meraki\Model\GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies',
        'ipsec_policies_preset' => 'string',
        'ike_version' => 'string',
        'network_tags' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'public_ip' => null,
        'remote_id' => null,
        'local_id' => null,
        'secret' => null,
        'private_subnets' => null,
        'ipsec_policies' => null,
        'ipsec_policies_preset' => null,
        'ike_version' => null,
        'network_tags' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'public_ip' => false,
        'remote_id' => false,
        'local_id' => false,
        'secret' => false,
        'private_subnets' => false,
        'ipsec_policies' => false,
        'ipsec_policies_preset' => false,
        'ike_version' => false,
        'network_tags' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'public_ip' => 'publicIp',
        'remote_id' => 'remoteId',
        'local_id' => 'localId',
        'secret' => 'secret',
        'private_subnets' => 'privateSubnets',
        'ipsec_policies' => 'ipsecPolicies',
        'ipsec_policies_preset' => 'ipsecPoliciesPreset',
        'ike_version' => 'ikeVersion',
        'network_tags' => 'networkTags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'public_ip' => 'setPublicIp',
        'remote_id' => 'setRemoteId',
        'local_id' => 'setLocalId',
        'secret' => 'setSecret',
        'private_subnets' => 'setPrivateSubnets',
        'ipsec_policies' => 'setIpsecPolicies',
        'ipsec_policies_preset' => 'setIpsecPoliciesPreset',
        'ike_version' => 'setIkeVersion',
        'network_tags' => 'setNetworkTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'public_ip' => 'getPublicIp',
        'remote_id' => 'getRemoteId',
        'local_id' => 'getLocalId',
        'secret' => 'getSecret',
        'private_subnets' => 'getPrivateSubnets',
        'ipsec_policies' => 'getIpsecPolicies',
        'ipsec_policies_preset' => 'getIpsecPoliciesPreset',
        'ike_version' => 'getIkeVersion',
        'network_tags' => 'getNetworkTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const IKE_VERSION__1 = '1';
    public const IKE_VERSION__2 = '2';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIkeVersionAllowableValues()
    {
        return [
            self::IKE_VERSION__1,
            self::IKE_VERSION__2,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('public_ip', $data ?? [], null);
        $this->setIfExists('remote_id', $data ?? [], null);
        $this->setIfExists('local_id', $data ?? [], null);
        $this->setIfExists('secret', $data ?? [], null);
        $this->setIfExists('private_subnets', $data ?? [], null);
        $this->setIfExists('ipsec_policies', $data ?? [], null);
        $this->setIfExists('ipsec_policies_preset', $data ?? [], null);
        $this->setIfExists('ike_version', $data ?? [], '1');
        $this->setIfExists('network_tags', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIkeVersionAllowableValues();
        if (!is_null($this->container['ike_version']) && !in_array($this->container['ike_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ike_version', must be one of '%s'",
                $this->container['ike_version'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the VPN peer
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets public_ip
     *
     * @return string|null
     */
    public function getPublicIp()
    {
        return $this->container['public_ip'];
    }

    /**
     * Sets public_ip
     *
     * @param string|null $public_ip [optional] The public IP of the VPN peer
     *
     * @return self
     */
    public function setPublicIp($public_ip)
    {
        if (is_null($public_ip)) {
            throw new \InvalidArgumentException('non-nullable public_ip cannot be null');
        }
        $this->container['public_ip'] = $public_ip;

        return $this;
    }

    /**
     * Gets remote_id
     *
     * @return string|null
     */
    public function getRemoteId()
    {
        return $this->container['remote_id'];
    }

    /**
     * Sets remote_id
     *
     * @param string|null $remote_id [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
     *
     * @return self
     */
    public function setRemoteId($remote_id)
    {
        if (is_null($remote_id)) {
            throw new \InvalidArgumentException('non-nullable remote_id cannot be null');
        }
        $this->container['remote_id'] = $remote_id;

        return $this;
    }

    /**
     * Gets local_id
     *
     * @return string|null
     */
    public function getLocalId()
    {
        return $this->container['local_id'];
    }

    /**
     * Sets local_id
     *
     * @param string|null $local_id [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
     *
     * @return self
     */
    public function setLocalId($local_id)
    {
        if (is_null($local_id)) {
            throw new \InvalidArgumentException('non-nullable local_id cannot be null');
        }
        $this->container['local_id'] = $local_id;

        return $this;
    }

    /**
     * Gets secret
     *
     * @return string|null
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param string|null $secret The shared secret with the VPN peer
     *
     * @return self
     */
    public function setSecret($secret)
    {
        if (is_null($secret)) {
            throw new \InvalidArgumentException('non-nullable secret cannot be null');
        }
        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets private_subnets
     *
     * @return string[]|null
     */
    public function getPrivateSubnets()
    {
        return $this->container['private_subnets'];
    }

    /**
     * Sets private_subnets
     *
     * @param string[]|null $private_subnets The list of the private subnets of the VPN peer
     *
     * @return self
     */
    public function setPrivateSubnets($private_subnets)
    {
        if (is_null($private_subnets)) {
            throw new \InvalidArgumentException('non-nullable private_subnets cannot be null');
        }
        $this->container['private_subnets'] = $private_subnets;

        return $this;
    }

    /**
     * Gets ipsec_policies
     *
     * @return \Meraki\Model\GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies|null
     */
    public function getIpsecPolicies()
    {
        return $this->container['ipsec_policies'];
    }

    /**
     * Sets ipsec_policies
     *
     * @param \Meraki\Model\GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies|null $ipsec_policies ipsec_policies
     *
     * @return self
     */
    public function setIpsecPolicies($ipsec_policies)
    {
        if (is_null($ipsec_policies)) {
            throw new \InvalidArgumentException('non-nullable ipsec_policies cannot be null');
        }
        $this->container['ipsec_policies'] = $ipsec_policies;

        return $this;
    }

    /**
     * Gets ipsec_policies_preset
     *
     * @return string|null
     */
    public function getIpsecPoliciesPreset()
    {
        return $this->container['ipsec_policies_preset'];
    }

    /**
     * Sets ipsec_policies_preset
     *
     * @param string|null $ipsec_policies_preset One of the following available presets: 'default', 'aws', 'azure', 'umbrella', 'zscaler'. If this is provided, the 'ipsecPolicies' parameter is ignored.
     *
     * @return self
     */
    public function setIpsecPoliciesPreset($ipsec_policies_preset)
    {
        if (is_null($ipsec_policies_preset)) {
            throw new \InvalidArgumentException('non-nullable ipsec_policies_preset cannot be null');
        }
        $this->container['ipsec_policies_preset'] = $ipsec_policies_preset;

        return $this;
    }

    /**
     * Gets ike_version
     *
     * @return string|null
     */
    public function getIkeVersion()
    {
        return $this->container['ike_version'];
    }

    /**
     * Sets ike_version
     *
     * @param string|null $ike_version [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
     *
     * @return self
     */
    public function setIkeVersion($ike_version)
    {
        if (is_null($ike_version)) {
            throw new \InvalidArgumentException('non-nullable ike_version cannot be null');
        }
        $allowedValues = $this->getIkeVersionAllowableValues();
        if (!in_array($ike_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ike_version', must be one of '%s'",
                    $ike_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ike_version'] = $ike_version;

        return $this;
    }

    /**
     * Gets network_tags
     *
     * @return string[]|null
     */
    public function getNetworkTags()
    {
        return $this->container['network_tags'];
    }

    /**
     * Sets network_tags
     *
     * @param string[]|null $network_tags A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
     *
     * @return self
     */
    public function setNetworkTags($network_tags)
    {
        if (is_null($network_tags)) {
            throw new \InvalidArgumentException('non-nullable network_tags cannot be null');
        }
        $this->container['network_tags'] = $network_tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


