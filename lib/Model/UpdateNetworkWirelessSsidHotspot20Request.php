<?php
/**
 * UpdateNetworkWirelessSsidHotspot20Request
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * UpdateNetworkWirelessSsidHotspot20Request Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateNetworkWirelessSsidHotspot20Request implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'updateNetworkWirelessSsidHotspot20_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enabled' => 'bool',
        'operator' => '\Meraki\Model\UpdateNetworkWirelessSsidHotspot20RequestOperator',
        'venue' => '\Meraki\Model\UpdateNetworkWirelessSsidHotspot20RequestVenue',
        'network_access_type' => 'string',
        'domains' => 'string[]',
        'roam_consort_ois' => 'string[]',
        'mcc_mncs' => '\Meraki\Model\UpdateNetworkWirelessSsidHotspot20RequestMccMncsInner[]',
        'nai_realms' => '\Meraki\Model\UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enabled' => null,
        'operator' => null,
        'venue' => null,
        'network_access_type' => null,
        'domains' => null,
        'roam_consort_ois' => null,
        'mcc_mncs' => null,
        'nai_realms' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'enabled' => false,
        'operator' => false,
        'venue' => false,
        'network_access_type' => false,
        'domains' => false,
        'roam_consort_ois' => false,
        'mcc_mncs' => false,
        'nai_realms' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'operator' => 'operator',
        'venue' => 'venue',
        'network_access_type' => 'networkAccessType',
        'domains' => 'domains',
        'roam_consort_ois' => 'roamConsortOis',
        'mcc_mncs' => 'mccMncs',
        'nai_realms' => 'naiRealms'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'operator' => 'setOperator',
        'venue' => 'setVenue',
        'network_access_type' => 'setNetworkAccessType',
        'domains' => 'setDomains',
        'roam_consort_ois' => 'setRoamConsortOis',
        'mcc_mncs' => 'setMccMncs',
        'nai_realms' => 'setNaiRealms'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'operator' => 'getOperator',
        'venue' => 'getVenue',
        'network_access_type' => 'getNetworkAccessType',
        'domains' => 'getDomains',
        'roam_consort_ois' => 'getRoamConsortOis',
        'mcc_mncs' => 'getMccMncs',
        'nai_realms' => 'getNaiRealms'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const NETWORK_ACCESS_TYPE_CHARGEABLE_PUBLIC_NETWORK = 'Chargeable public network';
    public const NETWORK_ACCESS_TYPE_EMERGENCY_SERVICES_ONLY_NETWORK = 'Emergency services only network';
    public const NETWORK_ACCESS_TYPE_FREE_PUBLIC_NETWORK = 'Free public network';
    public const NETWORK_ACCESS_TYPE_PERSONAL_DEVICE_NETWORK = 'Personal device network';
    public const NETWORK_ACCESS_TYPE_PRIVATE_NETWORK = 'Private network';
    public const NETWORK_ACCESS_TYPE_PRIVATE_NETWORK_WITH_GUEST_ACCESS = 'Private network with guest access';
    public const NETWORK_ACCESS_TYPE_TEST_OR_EXPERIMENTAL = 'Test or experimental';
    public const NETWORK_ACCESS_TYPE_WILDCARD = 'Wildcard';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetworkAccessTypeAllowableValues()
    {
        return [
            self::NETWORK_ACCESS_TYPE_CHARGEABLE_PUBLIC_NETWORK,
            self::NETWORK_ACCESS_TYPE_EMERGENCY_SERVICES_ONLY_NETWORK,
            self::NETWORK_ACCESS_TYPE_FREE_PUBLIC_NETWORK,
            self::NETWORK_ACCESS_TYPE_PERSONAL_DEVICE_NETWORK,
            self::NETWORK_ACCESS_TYPE_PRIVATE_NETWORK,
            self::NETWORK_ACCESS_TYPE_PRIVATE_NETWORK_WITH_GUEST_ACCESS,
            self::NETWORK_ACCESS_TYPE_TEST_OR_EXPERIMENTAL,
            self::NETWORK_ACCESS_TYPE_WILDCARD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('operator', $data ?? [], null);
        $this->setIfExists('venue', $data ?? [], null);
        $this->setIfExists('network_access_type', $data ?? [], null);
        $this->setIfExists('domains', $data ?? [], null);
        $this->setIfExists('roam_consort_ois', $data ?? [], null);
        $this->setIfExists('mcc_mncs', $data ?? [], null);
        $this->setIfExists('nai_realms', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNetworkAccessTypeAllowableValues();
        if (!is_null($this->container['network_access_type']) && !in_array($this->container['network_access_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'network_access_type', must be one of '%s'",
                $this->container['network_access_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled Whether or not Hotspot 2.0 for this SSID is enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return \Meraki\Model\UpdateNetworkWirelessSsidHotspot20RequestOperator|null
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param \Meraki\Model\UpdateNetworkWirelessSsidHotspot20RequestOperator|null $operator operator
     *
     * @return self
     */
    public function setOperator($operator)
    {
        if (is_null($operator)) {
            throw new \InvalidArgumentException('non-nullable operator cannot be null');
        }
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets venue
     *
     * @return \Meraki\Model\UpdateNetworkWirelessSsidHotspot20RequestVenue|null
     */
    public function getVenue()
    {
        return $this->container['venue'];
    }

    /**
     * Sets venue
     *
     * @param \Meraki\Model\UpdateNetworkWirelessSsidHotspot20RequestVenue|null $venue venue
     *
     * @return self
     */
    public function setVenue($venue)
    {
        if (is_null($venue)) {
            throw new \InvalidArgumentException('non-nullable venue cannot be null');
        }
        $this->container['venue'] = $venue;

        return $this;
    }

    /**
     * Gets network_access_type
     *
     * @return string|null
     */
    public function getNetworkAccessType()
    {
        return $this->container['network_access_type'];
    }

    /**
     * Sets network_access_type
     *
     * @param string|null $network_access_type The network type of this SSID ('Private network', 'Private network with guest access', 'Chargeable public network', 'Free public network', 'Personal device network', 'Emergency services only network', 'Test or experimental', 'Wildcard')
     *
     * @return self
     */
    public function setNetworkAccessType($network_access_type)
    {
        if (is_null($network_access_type)) {
            throw new \InvalidArgumentException('non-nullable network_access_type cannot be null');
        }
        $allowedValues = $this->getNetworkAccessTypeAllowableValues();
        if (!in_array($network_access_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'network_access_type', must be one of '%s'",
                    $network_access_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['network_access_type'] = $network_access_type;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return string[]|null
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param string[]|null $domains An array of domain names
     *
     * @return self
     */
    public function setDomains($domains)
    {
        if (is_null($domains)) {
            throw new \InvalidArgumentException('non-nullable domains cannot be null');
        }
        $this->container['domains'] = $domains;

        return $this;
    }

    /**
     * Gets roam_consort_ois
     *
     * @return string[]|null
     */
    public function getRoamConsortOis()
    {
        return $this->container['roam_consort_ois'];
    }

    /**
     * Sets roam_consort_ois
     *
     * @param string[]|null $roam_consort_ois An array of roaming consortium OIs (hexadecimal number 3-5 octets in length)
     *
     * @return self
     */
    public function setRoamConsortOis($roam_consort_ois)
    {
        if (is_null($roam_consort_ois)) {
            throw new \InvalidArgumentException('non-nullable roam_consort_ois cannot be null');
        }
        $this->container['roam_consort_ois'] = $roam_consort_ois;

        return $this;
    }

    /**
     * Gets mcc_mncs
     *
     * @return \Meraki\Model\UpdateNetworkWirelessSsidHotspot20RequestMccMncsInner[]|null
     */
    public function getMccMncs()
    {
        return $this->container['mcc_mncs'];
    }

    /**
     * Sets mcc_mncs
     *
     * @param \Meraki\Model\UpdateNetworkWirelessSsidHotspot20RequestMccMncsInner[]|null $mcc_mncs An array of MCC/MNC pairs
     *
     * @return self
     */
    public function setMccMncs($mcc_mncs)
    {
        if (is_null($mcc_mncs)) {
            throw new \InvalidArgumentException('non-nullable mcc_mncs cannot be null');
        }
        $this->container['mcc_mncs'] = $mcc_mncs;

        return $this;
    }

    /**
     * Gets nai_realms
     *
     * @return \Meraki\Model\UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInner[]|null
     */
    public function getNaiRealms()
    {
        return $this->container['nai_realms'];
    }

    /**
     * Sets nai_realms
     *
     * @param \Meraki\Model\UpdateNetworkWirelessSsidHotspot20RequestNaiRealmsInner[]|null $nai_realms An array of NAI realms
     *
     * @return self
     */
    public function setNaiRealms($nai_realms)
    {
        if (is_null($nai_realms)) {
            throw new \InvalidArgumentException('non-nullable nai_realms cannot be null');
        }
        $this->container['nai_realms'] = $nai_realms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


