<?php
/**
 * UpdateOrganizationConfigTemplateSwitchProfilePortRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * UpdateOrganizationConfigTemplateSwitchProfilePortRequest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateOrganizationConfigTemplateSwitchProfilePortRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'updateOrganizationConfigTemplateSwitchProfilePort_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'tags' => 'string[]',
        'enabled' => 'bool',
        'poe_enabled' => 'bool',
        'type' => 'string',
        'vlan' => 'int',
        'voice_vlan' => 'int',
        'allowed_vlans' => 'string',
        'isolation_enabled' => 'bool',
        'rstp_enabled' => 'bool',
        'stp_guard' => 'string',
        'link_negotiation' => 'string',
        'port_schedule_id' => 'string',
        'udld' => 'string',
        'access_policy_type' => 'string',
        'access_policy_number' => 'int',
        'mac_allow_list' => 'string[]',
        'sticky_mac_allow_list' => 'string[]',
        'sticky_mac_allow_list_limit' => 'int',
        'storm_control_enabled' => 'bool',
        'flexible_stacking_enabled' => 'bool',
        'dai_trusted' => 'bool',
        'profile' => '\Meraki\Model\GetDeviceSwitchPorts200ResponseInnerProfile',
        'dot3az' => '\Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInnerDot3az'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'tags' => null,
        'enabled' => null,
        'poe_enabled' => null,
        'type' => null,
        'vlan' => null,
        'voice_vlan' => null,
        'allowed_vlans' => null,
        'isolation_enabled' => null,
        'rstp_enabled' => null,
        'stp_guard' => null,
        'link_negotiation' => null,
        'port_schedule_id' => null,
        'udld' => null,
        'access_policy_type' => null,
        'access_policy_number' => null,
        'mac_allow_list' => null,
        'sticky_mac_allow_list' => null,
        'sticky_mac_allow_list_limit' => null,
        'storm_control_enabled' => null,
        'flexible_stacking_enabled' => null,
        'dai_trusted' => null,
        'profile' => null,
        'dot3az' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'tags' => false,
        'enabled' => false,
        'poe_enabled' => false,
        'type' => false,
        'vlan' => false,
        'voice_vlan' => false,
        'allowed_vlans' => false,
        'isolation_enabled' => false,
        'rstp_enabled' => false,
        'stp_guard' => false,
        'link_negotiation' => false,
        'port_schedule_id' => false,
        'udld' => false,
        'access_policy_type' => false,
        'access_policy_number' => false,
        'mac_allow_list' => false,
        'sticky_mac_allow_list' => false,
        'sticky_mac_allow_list_limit' => false,
        'storm_control_enabled' => false,
        'flexible_stacking_enabled' => false,
        'dai_trusted' => false,
        'profile' => false,
        'dot3az' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'tags' => 'tags',
        'enabled' => 'enabled',
        'poe_enabled' => 'poeEnabled',
        'type' => 'type',
        'vlan' => 'vlan',
        'voice_vlan' => 'voiceVlan',
        'allowed_vlans' => 'allowedVlans',
        'isolation_enabled' => 'isolationEnabled',
        'rstp_enabled' => 'rstpEnabled',
        'stp_guard' => 'stpGuard',
        'link_negotiation' => 'linkNegotiation',
        'port_schedule_id' => 'portScheduleId',
        'udld' => 'udld',
        'access_policy_type' => 'accessPolicyType',
        'access_policy_number' => 'accessPolicyNumber',
        'mac_allow_list' => 'macAllowList',
        'sticky_mac_allow_list' => 'stickyMacAllowList',
        'sticky_mac_allow_list_limit' => 'stickyMacAllowListLimit',
        'storm_control_enabled' => 'stormControlEnabled',
        'flexible_stacking_enabled' => 'flexibleStackingEnabled',
        'dai_trusted' => 'daiTrusted',
        'profile' => 'profile',
        'dot3az' => 'dot3az'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'tags' => 'setTags',
        'enabled' => 'setEnabled',
        'poe_enabled' => 'setPoeEnabled',
        'type' => 'setType',
        'vlan' => 'setVlan',
        'voice_vlan' => 'setVoiceVlan',
        'allowed_vlans' => 'setAllowedVlans',
        'isolation_enabled' => 'setIsolationEnabled',
        'rstp_enabled' => 'setRstpEnabled',
        'stp_guard' => 'setStpGuard',
        'link_negotiation' => 'setLinkNegotiation',
        'port_schedule_id' => 'setPortScheduleId',
        'udld' => 'setUdld',
        'access_policy_type' => 'setAccessPolicyType',
        'access_policy_number' => 'setAccessPolicyNumber',
        'mac_allow_list' => 'setMacAllowList',
        'sticky_mac_allow_list' => 'setStickyMacAllowList',
        'sticky_mac_allow_list_limit' => 'setStickyMacAllowListLimit',
        'storm_control_enabled' => 'setStormControlEnabled',
        'flexible_stacking_enabled' => 'setFlexibleStackingEnabled',
        'dai_trusted' => 'setDaiTrusted',
        'profile' => 'setProfile',
        'dot3az' => 'setDot3az'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'tags' => 'getTags',
        'enabled' => 'getEnabled',
        'poe_enabled' => 'getPoeEnabled',
        'type' => 'getType',
        'vlan' => 'getVlan',
        'voice_vlan' => 'getVoiceVlan',
        'allowed_vlans' => 'getAllowedVlans',
        'isolation_enabled' => 'getIsolationEnabled',
        'rstp_enabled' => 'getRstpEnabled',
        'stp_guard' => 'getStpGuard',
        'link_negotiation' => 'getLinkNegotiation',
        'port_schedule_id' => 'getPortScheduleId',
        'udld' => 'getUdld',
        'access_policy_type' => 'getAccessPolicyType',
        'access_policy_number' => 'getAccessPolicyNumber',
        'mac_allow_list' => 'getMacAllowList',
        'sticky_mac_allow_list' => 'getStickyMacAllowList',
        'sticky_mac_allow_list_limit' => 'getStickyMacAllowListLimit',
        'storm_control_enabled' => 'getStormControlEnabled',
        'flexible_stacking_enabled' => 'getFlexibleStackingEnabled',
        'dai_trusted' => 'getDaiTrusted',
        'profile' => 'getProfile',
        'dot3az' => 'getDot3az'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_ACCESS = 'access';
    public const TYPE_ROUTED = 'routed';
    public const TYPE_STACK = 'stack';
    public const TYPE_TRUNK = 'trunk';
    public const STP_GUARD_BPDU_GUARD = 'bpdu guard';
    public const STP_GUARD_DISABLED = 'disabled';
    public const STP_GUARD_LOOP_GUARD = 'loop guard';
    public const STP_GUARD_ROOT_GUARD = 'root guard';
    public const UDLD_ALERT_ONLY = 'Alert only';
    public const UDLD_ENFORCE = 'Enforce';
    public const ACCESS_POLICY_TYPE_CUSTOM_ACCESS_POLICY = 'Custom access policy';
    public const ACCESS_POLICY_TYPE_MAC_ALLOW_LIST = 'MAC allow list';
    public const ACCESS_POLICY_TYPE_OPEN = 'Open';
    public const ACCESS_POLICY_TYPE_STICKY_MAC_ALLOW_LIST = 'Sticky MAC allow list';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ACCESS,
            self::TYPE_ROUTED,
            self::TYPE_STACK,
            self::TYPE_TRUNK,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStpGuardAllowableValues()
    {
        return [
            self::STP_GUARD_BPDU_GUARD,
            self::STP_GUARD_DISABLED,
            self::STP_GUARD_LOOP_GUARD,
            self::STP_GUARD_ROOT_GUARD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUdldAllowableValues()
    {
        return [
            self::UDLD_ALERT_ONLY,
            self::UDLD_ENFORCE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessPolicyTypeAllowableValues()
    {
        return [
            self::ACCESS_POLICY_TYPE_CUSTOM_ACCESS_POLICY,
            self::ACCESS_POLICY_TYPE_MAC_ALLOW_LIST,
            self::ACCESS_POLICY_TYPE_OPEN,
            self::ACCESS_POLICY_TYPE_STICKY_MAC_ALLOW_LIST,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('poe_enabled', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('vlan', $data ?? [], null);
        $this->setIfExists('voice_vlan', $data ?? [], null);
        $this->setIfExists('allowed_vlans', $data ?? [], null);
        $this->setIfExists('isolation_enabled', $data ?? [], null);
        $this->setIfExists('rstp_enabled', $data ?? [], null);
        $this->setIfExists('stp_guard', $data ?? [], null);
        $this->setIfExists('link_negotiation', $data ?? [], null);
        $this->setIfExists('port_schedule_id', $data ?? [], null);
        $this->setIfExists('udld', $data ?? [], null);
        $this->setIfExists('access_policy_type', $data ?? [], null);
        $this->setIfExists('access_policy_number', $data ?? [], null);
        $this->setIfExists('mac_allow_list', $data ?? [], null);
        $this->setIfExists('sticky_mac_allow_list', $data ?? [], null);
        $this->setIfExists('sticky_mac_allow_list_limit', $data ?? [], null);
        $this->setIfExists('storm_control_enabled', $data ?? [], null);
        $this->setIfExists('flexible_stacking_enabled', $data ?? [], null);
        $this->setIfExists('dai_trusted', $data ?? [], null);
        $this->setIfExists('profile', $data ?? [], null);
        $this->setIfExists('dot3az', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStpGuardAllowableValues();
        if (!is_null($this->container['stp_guard']) && !in_array($this->container['stp_guard'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'stp_guard', must be one of '%s'",
                $this->container['stp_guard'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUdldAllowableValues();
        if (!is_null($this->container['udld']) && !in_array($this->container['udld'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'udld', must be one of '%s'",
                $this->container['udld'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccessPolicyTypeAllowableValues();
        if (!is_null($this->container['access_policy_type']) && !in_array($this->container['access_policy_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'access_policy_type', must be one of '%s'",
                $this->container['access_policy_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the switch template port.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags The list of tags of the switch template port.
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled The status of the switch template port.
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets poe_enabled
     *
     * @return bool|null
     */
    public function getPoeEnabled()
    {
        return $this->container['poe_enabled'];
    }

    /**
     * Sets poe_enabled
     *
     * @param bool|null $poe_enabled The PoE status of the switch template port.
     *
     * @return self
     */
    public function setPoeEnabled($poe_enabled)
    {
        if (is_null($poe_enabled)) {
            throw new \InvalidArgumentException('non-nullable poe_enabled cannot be null');
        }
        $this->container['poe_enabled'] = $poe_enabled;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of the switch template port ('trunk', 'access', 'stack' or 'routed').
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets vlan
     *
     * @return int|null
     */
    public function getVlan()
    {
        return $this->container['vlan'];
    }

    /**
     * Sets vlan
     *
     * @param int|null $vlan The VLAN of the switch template port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
     *
     * @return self
     */
    public function setVlan($vlan)
    {
        if (is_null($vlan)) {
            throw new \InvalidArgumentException('non-nullable vlan cannot be null');
        }
        $this->container['vlan'] = $vlan;

        return $this;
    }

    /**
     * Gets voice_vlan
     *
     * @return int|null
     */
    public function getVoiceVlan()
    {
        return $this->container['voice_vlan'];
    }

    /**
     * Sets voice_vlan
     *
     * @param int|null $voice_vlan The voice VLAN of the switch template port. Only applicable to access ports.
     *
     * @return self
     */
    public function setVoiceVlan($voice_vlan)
    {
        if (is_null($voice_vlan)) {
            throw new \InvalidArgumentException('non-nullable voice_vlan cannot be null');
        }
        $this->container['voice_vlan'] = $voice_vlan;

        return $this;
    }

    /**
     * Gets allowed_vlans
     *
     * @return string|null
     */
    public function getAllowedVlans()
    {
        return $this->container['allowed_vlans'];
    }

    /**
     * Sets allowed_vlans
     *
     * @param string|null $allowed_vlans The VLANs allowed on the switch template port. Only applicable to trunk ports.
     *
     * @return self
     */
    public function setAllowedVlans($allowed_vlans)
    {
        if (is_null($allowed_vlans)) {
            throw new \InvalidArgumentException('non-nullable allowed_vlans cannot be null');
        }
        $this->container['allowed_vlans'] = $allowed_vlans;

        return $this;
    }

    /**
     * Gets isolation_enabled
     *
     * @return bool|null
     */
    public function getIsolationEnabled()
    {
        return $this->container['isolation_enabled'];
    }

    /**
     * Sets isolation_enabled
     *
     * @param bool|null $isolation_enabled The isolation status of the switch template port.
     *
     * @return self
     */
    public function setIsolationEnabled($isolation_enabled)
    {
        if (is_null($isolation_enabled)) {
            throw new \InvalidArgumentException('non-nullable isolation_enabled cannot be null');
        }
        $this->container['isolation_enabled'] = $isolation_enabled;

        return $this;
    }

    /**
     * Gets rstp_enabled
     *
     * @return bool|null
     */
    public function getRstpEnabled()
    {
        return $this->container['rstp_enabled'];
    }

    /**
     * Sets rstp_enabled
     *
     * @param bool|null $rstp_enabled The rapid spanning tree protocol status.
     *
     * @return self
     */
    public function setRstpEnabled($rstp_enabled)
    {
        if (is_null($rstp_enabled)) {
            throw new \InvalidArgumentException('non-nullable rstp_enabled cannot be null');
        }
        $this->container['rstp_enabled'] = $rstp_enabled;

        return $this;
    }

    /**
     * Gets stp_guard
     *
     * @return string|null
     */
    public function getStpGuard()
    {
        return $this->container['stp_guard'];
    }

    /**
     * Sets stp_guard
     *
     * @param string|null $stp_guard The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
     *
     * @return self
     */
    public function setStpGuard($stp_guard)
    {
        if (is_null($stp_guard)) {
            throw new \InvalidArgumentException('non-nullable stp_guard cannot be null');
        }
        $allowedValues = $this->getStpGuardAllowableValues();
        if (!in_array($stp_guard, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'stp_guard', must be one of '%s'",
                    $stp_guard,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stp_guard'] = $stp_guard;

        return $this;
    }

    /**
     * Gets link_negotiation
     *
     * @return string|null
     */
    public function getLinkNegotiation()
    {
        return $this->container['link_negotiation'];
    }

    /**
     * Sets link_negotiation
     *
     * @param string|null $link_negotiation The link speed for the switch template port.
     *
     * @return self
     */
    public function setLinkNegotiation($link_negotiation)
    {
        if (is_null($link_negotiation)) {
            throw new \InvalidArgumentException('non-nullable link_negotiation cannot be null');
        }
        $this->container['link_negotiation'] = $link_negotiation;

        return $this;
    }

    /**
     * Gets port_schedule_id
     *
     * @return string|null
     */
    public function getPortScheduleId()
    {
        return $this->container['port_schedule_id'];
    }

    /**
     * Sets port_schedule_id
     *
     * @param string|null $port_schedule_id The ID of the port schedule. A value of null will clear the port schedule.
     *
     * @return self
     */
    public function setPortScheduleId($port_schedule_id)
    {
        if (is_null($port_schedule_id)) {
            throw new \InvalidArgumentException('non-nullable port_schedule_id cannot be null');
        }
        $this->container['port_schedule_id'] = $port_schedule_id;

        return $this;
    }

    /**
     * Gets udld
     *
     * @return string|null
     */
    public function getUdld()
    {
        return $this->container['udld'];
    }

    /**
     * Sets udld
     *
     * @param string|null $udld The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
     *
     * @return self
     */
    public function setUdld($udld)
    {
        if (is_null($udld)) {
            throw new \InvalidArgumentException('non-nullable udld cannot be null');
        }
        $allowedValues = $this->getUdldAllowableValues();
        if (!in_array($udld, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'udld', must be one of '%s'",
                    $udld,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['udld'] = $udld;

        return $this;
    }

    /**
     * Gets access_policy_type
     *
     * @return string|null
     */
    public function getAccessPolicyType()
    {
        return $this->container['access_policy_type'];
    }

    /**
     * Sets access_policy_type
     *
     * @param string|null $access_policy_type The type of the access policy of the switch template port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
     *
     * @return self
     */
    public function setAccessPolicyType($access_policy_type)
    {
        if (is_null($access_policy_type)) {
            throw new \InvalidArgumentException('non-nullable access_policy_type cannot be null');
        }
        $allowedValues = $this->getAccessPolicyTypeAllowableValues();
        if (!in_array($access_policy_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'access_policy_type', must be one of '%s'",
                    $access_policy_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access_policy_type'] = $access_policy_type;

        return $this;
    }

    /**
     * Gets access_policy_number
     *
     * @return int|null
     */
    public function getAccessPolicyNumber()
    {
        return $this->container['access_policy_number'];
    }

    /**
     * Sets access_policy_number
     *
     * @param int|null $access_policy_number The number of a custom access policy to configure on the switch template port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
     *
     * @return self
     */
    public function setAccessPolicyNumber($access_policy_number)
    {
        if (is_null($access_policy_number)) {
            throw new \InvalidArgumentException('non-nullable access_policy_number cannot be null');
        }
        $this->container['access_policy_number'] = $access_policy_number;

        return $this;
    }

    /**
     * Gets mac_allow_list
     *
     * @return string[]|null
     */
    public function getMacAllowList()
    {
        return $this->container['mac_allow_list'];
    }

    /**
     * Sets mac_allow_list
     *
     * @param string[]|null $mac_allow_list Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
     *
     * @return self
     */
    public function setMacAllowList($mac_allow_list)
    {
        if (is_null($mac_allow_list)) {
            throw new \InvalidArgumentException('non-nullable mac_allow_list cannot be null');
        }
        $this->container['mac_allow_list'] = $mac_allow_list;

        return $this;
    }

    /**
     * Gets sticky_mac_allow_list
     *
     * @return string[]|null
     */
    public function getStickyMacAllowList()
    {
        return $this->container['sticky_mac_allow_list'];
    }

    /**
     * Sets sticky_mac_allow_list
     *
     * @param string[]|null $sticky_mac_allow_list The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
     *
     * @return self
     */
    public function setStickyMacAllowList($sticky_mac_allow_list)
    {
        if (is_null($sticky_mac_allow_list)) {
            throw new \InvalidArgumentException('non-nullable sticky_mac_allow_list cannot be null');
        }
        $this->container['sticky_mac_allow_list'] = $sticky_mac_allow_list;

        return $this;
    }

    /**
     * Gets sticky_mac_allow_list_limit
     *
     * @return int|null
     */
    public function getStickyMacAllowListLimit()
    {
        return $this->container['sticky_mac_allow_list_limit'];
    }

    /**
     * Sets sticky_mac_allow_list_limit
     *
     * @param int|null $sticky_mac_allow_list_limit The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
     *
     * @return self
     */
    public function setStickyMacAllowListLimit($sticky_mac_allow_list_limit)
    {
        if (is_null($sticky_mac_allow_list_limit)) {
            throw new \InvalidArgumentException('non-nullable sticky_mac_allow_list_limit cannot be null');
        }
        $this->container['sticky_mac_allow_list_limit'] = $sticky_mac_allow_list_limit;

        return $this;
    }

    /**
     * Gets storm_control_enabled
     *
     * @return bool|null
     */
    public function getStormControlEnabled()
    {
        return $this->container['storm_control_enabled'];
    }

    /**
     * Sets storm_control_enabled
     *
     * @param bool|null $storm_control_enabled The storm control status of the switch template port.
     *
     * @return self
     */
    public function setStormControlEnabled($storm_control_enabled)
    {
        if (is_null($storm_control_enabled)) {
            throw new \InvalidArgumentException('non-nullable storm_control_enabled cannot be null');
        }
        $this->container['storm_control_enabled'] = $storm_control_enabled;

        return $this;
    }

    /**
     * Gets flexible_stacking_enabled
     *
     * @return bool|null
     */
    public function getFlexibleStackingEnabled()
    {
        return $this->container['flexible_stacking_enabled'];
    }

    /**
     * Sets flexible_stacking_enabled
     *
     * @param bool|null $flexible_stacking_enabled For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
     *
     * @return self
     */
    public function setFlexibleStackingEnabled($flexible_stacking_enabled)
    {
        if (is_null($flexible_stacking_enabled)) {
            throw new \InvalidArgumentException('non-nullable flexible_stacking_enabled cannot be null');
        }
        $this->container['flexible_stacking_enabled'] = $flexible_stacking_enabled;

        return $this;
    }

    /**
     * Gets dai_trusted
     *
     * @return bool|null
     */
    public function getDaiTrusted()
    {
        return $this->container['dai_trusted'];
    }

    /**
     * Sets dai_trusted
     *
     * @param bool|null $dai_trusted If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
     *
     * @return self
     */
    public function setDaiTrusted($dai_trusted)
    {
        if (is_null($dai_trusted)) {
            throw new \InvalidArgumentException('non-nullable dai_trusted cannot be null');
        }
        $this->container['dai_trusted'] = $dai_trusted;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return \Meraki\Model\GetDeviceSwitchPorts200ResponseInnerProfile|null
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param \Meraki\Model\GetDeviceSwitchPorts200ResponseInnerProfile|null $profile profile
     *
     * @return self
     */
    public function setProfile($profile)
    {
        if (is_null($profile)) {
            throw new \InvalidArgumentException('non-nullable profile cannot be null');
        }
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets dot3az
     *
     * @return \Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInnerDot3az|null
     */
    public function getDot3az()
    {
        return $this->container['dot3az'];
    }

    /**
     * Sets dot3az
     *
     * @param \Meraki\Model\GetOrganizationConfigTemplateSwitchProfilePorts200ResponseInnerDot3az|null $dot3az dot3az
     *
     * @return self
     */
    public function setDot3az($dot3az)
    {
        if (is_null($dot3az)) {
            throw new \InvalidArgumentException('non-nullable dot3az cannot be null');
        }
        $this->container['dot3az'] = $dot3az;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


