<?php
/**
 * GetNetworkWirelessRfProfiles200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetNetworkWirelessRfProfiles200Response Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetNetworkWirelessRfProfiles200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getNetworkWirelessRfProfiles_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'network_id' => 'string',
        'name' => 'string',
        'client_balancing_enabled' => 'bool',
        'min_bitrate_type' => 'string',
        'band_selection_type' => 'string',
        'ap_band_settings' => '\Meraki\Model\GetNetworkWirelessRfProfiles200ResponseApBandSettings',
        'two_four_ghz_settings' => '\Meraki\Model\GetNetworkWirelessRfProfiles200ResponseTwoFourGhzSettings',
        'five_ghz_settings' => '\Meraki\Model\GetNetworkWirelessRfProfiles200ResponseFiveGhzSettings',
        'six_ghz_settings' => '\Meraki\Model\GetNetworkWirelessRfProfiles200ResponseSixGhzSettings',
        'transmission' => '\Meraki\Model\GetNetworkWirelessRfProfiles200ResponseTransmission',
        'per_ssid_settings' => '\Meraki\Model\GetNetworkWirelessRfProfiles200ResponsePerSsidSettings',
        'is_indoor_default' => 'bool',
        'is_outdoor_default' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'network_id' => null,
        'name' => null,
        'client_balancing_enabled' => null,
        'min_bitrate_type' => null,
        'band_selection_type' => null,
        'ap_band_settings' => null,
        'two_four_ghz_settings' => null,
        'five_ghz_settings' => null,
        'six_ghz_settings' => null,
        'transmission' => null,
        'per_ssid_settings' => null,
        'is_indoor_default' => null,
        'is_outdoor_default' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'network_id' => false,
        'name' => false,
        'client_balancing_enabled' => false,
        'min_bitrate_type' => false,
        'band_selection_type' => false,
        'ap_band_settings' => false,
        'two_four_ghz_settings' => false,
        'five_ghz_settings' => false,
        'six_ghz_settings' => false,
        'transmission' => false,
        'per_ssid_settings' => false,
        'is_indoor_default' => false,
        'is_outdoor_default' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'network_id' => 'networkId',
        'name' => 'name',
        'client_balancing_enabled' => 'clientBalancingEnabled',
        'min_bitrate_type' => 'minBitrateType',
        'band_selection_type' => 'bandSelectionType',
        'ap_band_settings' => 'apBandSettings',
        'two_four_ghz_settings' => 'twoFourGhzSettings',
        'five_ghz_settings' => 'fiveGhzSettings',
        'six_ghz_settings' => 'sixGhzSettings',
        'transmission' => 'transmission',
        'per_ssid_settings' => 'perSsidSettings',
        'is_indoor_default' => 'isIndoorDefault',
        'is_outdoor_default' => 'isOutdoorDefault'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'network_id' => 'setNetworkId',
        'name' => 'setName',
        'client_balancing_enabled' => 'setClientBalancingEnabled',
        'min_bitrate_type' => 'setMinBitrateType',
        'band_selection_type' => 'setBandSelectionType',
        'ap_band_settings' => 'setApBandSettings',
        'two_four_ghz_settings' => 'setTwoFourGhzSettings',
        'five_ghz_settings' => 'setFiveGhzSettings',
        'six_ghz_settings' => 'setSixGhzSettings',
        'transmission' => 'setTransmission',
        'per_ssid_settings' => 'setPerSsidSettings',
        'is_indoor_default' => 'setIsIndoorDefault',
        'is_outdoor_default' => 'setIsOutdoorDefault'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'network_id' => 'getNetworkId',
        'name' => 'getName',
        'client_balancing_enabled' => 'getClientBalancingEnabled',
        'min_bitrate_type' => 'getMinBitrateType',
        'band_selection_type' => 'getBandSelectionType',
        'ap_band_settings' => 'getApBandSettings',
        'two_four_ghz_settings' => 'getTwoFourGhzSettings',
        'five_ghz_settings' => 'getFiveGhzSettings',
        'six_ghz_settings' => 'getSixGhzSettings',
        'transmission' => 'getTransmission',
        'per_ssid_settings' => 'getPerSsidSettings',
        'is_indoor_default' => 'getIsIndoorDefault',
        'is_outdoor_default' => 'getIsOutdoorDefault'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('network_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('client_balancing_enabled', $data ?? [], null);
        $this->setIfExists('min_bitrate_type', $data ?? [], null);
        $this->setIfExists('band_selection_type', $data ?? [], null);
        $this->setIfExists('ap_band_settings', $data ?? [], null);
        $this->setIfExists('two_four_ghz_settings', $data ?? [], null);
        $this->setIfExists('five_ghz_settings', $data ?? [], null);
        $this->setIfExists('six_ghz_settings', $data ?? [], null);
        $this->setIfExists('transmission', $data ?? [], null);
        $this->setIfExists('per_ssid_settings', $data ?? [], null);
        $this->setIfExists('is_indoor_default', $data ?? [], null);
        $this->setIfExists('is_outdoor_default', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The name of the new profile. Must be unique.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets network_id
     *
     * @return string|null
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param string|null $network_id The network ID of the RF Profile
     *
     * @return self
     */
    public function setNetworkId($network_id)
    {
        if (is_null($network_id)) {
            throw new \InvalidArgumentException('non-nullable network_id cannot be null');
        }
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the new profile. Must be unique. This param is required on creation.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets client_balancing_enabled
     *
     * @return bool|null
     */
    public function getClientBalancingEnabled()
    {
        return $this->container['client_balancing_enabled'];
    }

    /**
     * Sets client_balancing_enabled
     *
     * @param bool|null $client_balancing_enabled Steers client to best available access point. Can be either true or false. Defaults to true.
     *
     * @return self
     */
    public function setClientBalancingEnabled($client_balancing_enabled)
    {
        if (is_null($client_balancing_enabled)) {
            throw new \InvalidArgumentException('non-nullable client_balancing_enabled cannot be null');
        }
        $this->container['client_balancing_enabled'] = $client_balancing_enabled;

        return $this;
    }

    /**
     * Gets min_bitrate_type
     *
     * @return string|null
     */
    public function getMinBitrateType()
    {
        return $this->container['min_bitrate_type'];
    }

    /**
     * Sets min_bitrate_type
     *
     * @param string|null $min_bitrate_type Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band.
     *
     * @return self
     */
    public function setMinBitrateType($min_bitrate_type)
    {
        if (is_null($min_bitrate_type)) {
            throw new \InvalidArgumentException('non-nullable min_bitrate_type cannot be null');
        }
        $this->container['min_bitrate_type'] = $min_bitrate_type;

        return $this;
    }

    /**
     * Gets band_selection_type
     *
     * @return string|null
     */
    public function getBandSelectionType()
    {
        return $this->container['band_selection_type'];
    }

    /**
     * Sets band_selection_type
     *
     * @param string|null $band_selection_type Band selection can be set to either 'ssid' or 'ap'. This param is required on creation.
     *
     * @return self
     */
    public function setBandSelectionType($band_selection_type)
    {
        if (is_null($band_selection_type)) {
            throw new \InvalidArgumentException('non-nullable band_selection_type cannot be null');
        }
        $this->container['band_selection_type'] = $band_selection_type;

        return $this;
    }

    /**
     * Gets ap_band_settings
     *
     * @return \Meraki\Model\GetNetworkWirelessRfProfiles200ResponseApBandSettings|null
     */
    public function getApBandSettings()
    {
        return $this->container['ap_band_settings'];
    }

    /**
     * Sets ap_band_settings
     *
     * @param \Meraki\Model\GetNetworkWirelessRfProfiles200ResponseApBandSettings|null $ap_band_settings ap_band_settings
     *
     * @return self
     */
    public function setApBandSettings($ap_band_settings)
    {
        if (is_null($ap_band_settings)) {
            throw new \InvalidArgumentException('non-nullable ap_band_settings cannot be null');
        }
        $this->container['ap_band_settings'] = $ap_band_settings;

        return $this;
    }

    /**
     * Gets two_four_ghz_settings
     *
     * @return \Meraki\Model\GetNetworkWirelessRfProfiles200ResponseTwoFourGhzSettings|null
     */
    public function getTwoFourGhzSettings()
    {
        return $this->container['two_four_ghz_settings'];
    }

    /**
     * Sets two_four_ghz_settings
     *
     * @param \Meraki\Model\GetNetworkWirelessRfProfiles200ResponseTwoFourGhzSettings|null $two_four_ghz_settings two_four_ghz_settings
     *
     * @return self
     */
    public function setTwoFourGhzSettings($two_four_ghz_settings)
    {
        if (is_null($two_four_ghz_settings)) {
            throw new \InvalidArgumentException('non-nullable two_four_ghz_settings cannot be null');
        }
        $this->container['two_four_ghz_settings'] = $two_four_ghz_settings;

        return $this;
    }

    /**
     * Gets five_ghz_settings
     *
     * @return \Meraki\Model\GetNetworkWirelessRfProfiles200ResponseFiveGhzSettings|null
     */
    public function getFiveGhzSettings()
    {
        return $this->container['five_ghz_settings'];
    }

    /**
     * Sets five_ghz_settings
     *
     * @param \Meraki\Model\GetNetworkWirelessRfProfiles200ResponseFiveGhzSettings|null $five_ghz_settings five_ghz_settings
     *
     * @return self
     */
    public function setFiveGhzSettings($five_ghz_settings)
    {
        if (is_null($five_ghz_settings)) {
            throw new \InvalidArgumentException('non-nullable five_ghz_settings cannot be null');
        }
        $this->container['five_ghz_settings'] = $five_ghz_settings;

        return $this;
    }

    /**
     * Gets six_ghz_settings
     *
     * @return \Meraki\Model\GetNetworkWirelessRfProfiles200ResponseSixGhzSettings|null
     */
    public function getSixGhzSettings()
    {
        return $this->container['six_ghz_settings'];
    }

    /**
     * Sets six_ghz_settings
     *
     * @param \Meraki\Model\GetNetworkWirelessRfProfiles200ResponseSixGhzSettings|null $six_ghz_settings six_ghz_settings
     *
     * @return self
     */
    public function setSixGhzSettings($six_ghz_settings)
    {
        if (is_null($six_ghz_settings)) {
            throw new \InvalidArgumentException('non-nullable six_ghz_settings cannot be null');
        }
        $this->container['six_ghz_settings'] = $six_ghz_settings;

        return $this;
    }

    /**
     * Gets transmission
     *
     * @return \Meraki\Model\GetNetworkWirelessRfProfiles200ResponseTransmission|null
     */
    public function getTransmission()
    {
        return $this->container['transmission'];
    }

    /**
     * Sets transmission
     *
     * @param \Meraki\Model\GetNetworkWirelessRfProfiles200ResponseTransmission|null $transmission transmission
     *
     * @return self
     */
    public function setTransmission($transmission)
    {
        if (is_null($transmission)) {
            throw new \InvalidArgumentException('non-nullable transmission cannot be null');
        }
        $this->container['transmission'] = $transmission;

        return $this;
    }

    /**
     * Gets per_ssid_settings
     *
     * @return \Meraki\Model\GetNetworkWirelessRfProfiles200ResponsePerSsidSettings|null
     */
    public function getPerSsidSettings()
    {
        return $this->container['per_ssid_settings'];
    }

    /**
     * Sets per_ssid_settings
     *
     * @param \Meraki\Model\GetNetworkWirelessRfProfiles200ResponsePerSsidSettings|null $per_ssid_settings per_ssid_settings
     *
     * @return self
     */
    public function setPerSsidSettings($per_ssid_settings)
    {
        if (is_null($per_ssid_settings)) {
            throw new \InvalidArgumentException('non-nullable per_ssid_settings cannot be null');
        }
        $this->container['per_ssid_settings'] = $per_ssid_settings;

        return $this;
    }

    /**
     * Gets is_indoor_default
     *
     * @return bool|null
     */
    public function getIsIndoorDefault()
    {
        return $this->container['is_indoor_default'];
    }

    /**
     * Sets is_indoor_default
     *
     * @param bool|null $is_indoor_default Set this profile as the default indoor rf profile. If the profile ID is one of 'indoor' or 'outdoor',   then a new profile will be created from the respective ID and set as the default
     *
     * @return self
     */
    public function setIsIndoorDefault($is_indoor_default)
    {
        if (is_null($is_indoor_default)) {
            throw new \InvalidArgumentException('non-nullable is_indoor_default cannot be null');
        }
        $this->container['is_indoor_default'] = $is_indoor_default;

        return $this;
    }

    /**
     * Gets is_outdoor_default
     *
     * @return bool|null
     */
    public function getIsOutdoorDefault()
    {
        return $this->container['is_outdoor_default'];
    }

    /**
     * Sets is_outdoor_default
     *
     * @param bool|null $is_outdoor_default Set this profile as the default outdoor rf profile. If the profile ID is one of 'indoor' or 'outdoor',   then a new profile will be created from the respective ID and set as the default
     *
     * @return self
     */
    public function setIsOutdoorDefault($is_outdoor_default)
    {
        if (is_null($is_outdoor_default)) {
            throw new \InvalidArgumentException('non-nullable is_outdoor_default cannot be null');
        }
        $this->container['is_outdoor_default'] = $is_outdoor_default;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


