<?php
/**
 * GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetAdministeredLicensingSubscriptionSubscriptions200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getAdministeredLicensingSubscriptionSubscriptions_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'subscription_id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'status' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'last_updated_at' => '\DateTime',
        'web_order_id' => 'string',
        'type' => 'string',
        'smart_account' => '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInnerSmartAccount',
        'renewal_requested' => 'bool',
        'product_types' => 'string[]',
        'entitlements' => '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInnerEntitlementsInner[]',
        'counts' => '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInnerCounts',
        'enterprise_agreement' => '\Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInnerEnterpriseAgreement'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'subscription_id' => null,
        'name' => null,
        'description' => null,
        'status' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'last_updated_at' => 'date-time',
        'web_order_id' => null,
        'type' => null,
        'smart_account' => null,
        'renewal_requested' => null,
        'product_types' => null,
        'entitlements' => null,
        'counts' => null,
        'enterprise_agreement' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'subscription_id' => false,
        'name' => false,
        'description' => false,
        'status' => false,
        'start_date' => false,
        'end_date' => false,
        'last_updated_at' => false,
        'web_order_id' => false,
        'type' => false,
        'smart_account' => false,
        'renewal_requested' => false,
        'product_types' => false,
        'entitlements' => false,
        'counts' => false,
        'enterprise_agreement' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subscription_id' => 'subscriptionId',
        'name' => 'name',
        'description' => 'description',
        'status' => 'status',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'last_updated_at' => 'lastUpdatedAt',
        'web_order_id' => 'webOrderId',
        'type' => 'type',
        'smart_account' => 'smartAccount',
        'renewal_requested' => 'renewalRequested',
        'product_types' => 'productTypes',
        'entitlements' => 'entitlements',
        'counts' => 'counts',
        'enterprise_agreement' => 'enterpriseAgreement'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subscription_id' => 'setSubscriptionId',
        'name' => 'setName',
        'description' => 'setDescription',
        'status' => 'setStatus',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'last_updated_at' => 'setLastUpdatedAt',
        'web_order_id' => 'setWebOrderId',
        'type' => 'setType',
        'smart_account' => 'setSmartAccount',
        'renewal_requested' => 'setRenewalRequested',
        'product_types' => 'setProductTypes',
        'entitlements' => 'setEntitlements',
        'counts' => 'setCounts',
        'enterprise_agreement' => 'setEnterpriseAgreement'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subscription_id' => 'getSubscriptionId',
        'name' => 'getName',
        'description' => 'getDescription',
        'status' => 'getStatus',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'last_updated_at' => 'getLastUpdatedAt',
        'web_order_id' => 'getWebOrderId',
        'type' => 'getType',
        'smart_account' => 'getSmartAccount',
        'renewal_requested' => 'getRenewalRequested',
        'product_types' => 'getProductTypes',
        'entitlements' => 'getEntitlements',
        'counts' => 'getCounts',
        'enterprise_agreement' => 'getEnterpriseAgreement'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_ACTIVE = 'active';
    public const STATUS_CANCELED = 'canceled';
    public const STATUS_EXPIRED = 'expired';
    public const STATUS_INACTIVE = 'inactive';
    public const STATUS_OUT_OF_COMPLIANCE = 'out_of_compliance';
    public const TYPE_ENTERPRISE_AGREEMENT = 'enterpriseAgreement';
    public const TYPE_TERMED = 'termed';
    public const PRODUCT_TYPES_APPLIANCE = 'appliance';
    public const PRODUCT_TYPES_CAMERA = 'camera';
    public const PRODUCT_TYPES_CELLULAR_GATEWAY = 'cellularGateway';
    public const PRODUCT_TYPES_SENSOR = 'sensor';
    public const PRODUCT_TYPES__SWITCH = 'switch';
    public const PRODUCT_TYPES_SYSTEMS_MANAGER = 'systemsManager';
    public const PRODUCT_TYPES_WIRELESS = 'wireless';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_CANCELED,
            self::STATUS_EXPIRED,
            self::STATUS_INACTIVE,
            self::STATUS_OUT_OF_COMPLIANCE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ENTERPRISE_AGREEMENT,
            self::TYPE_TERMED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductTypesAllowableValues()
    {
        return [
            self::PRODUCT_TYPES_APPLIANCE,
            self::PRODUCT_TYPES_CAMERA,
            self::PRODUCT_TYPES_CELLULAR_GATEWAY,
            self::PRODUCT_TYPES_SENSOR,
            self::PRODUCT_TYPES__SWITCH,
            self::PRODUCT_TYPES_SYSTEMS_MANAGER,
            self::PRODUCT_TYPES_WIRELESS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('subscription_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('last_updated_at', $data ?? [], null);
        $this->setIfExists('web_order_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('smart_account', $data ?? [], null);
        $this->setIfExists('renewal_requested', $data ?? [], null);
        $this->setIfExists('product_types', $data ?? [], null);
        $this->setIfExists('entitlements', $data ?? [], null);
        $this->setIfExists('counts', $data ?? [], null);
        $this->setIfExists('enterprise_agreement', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subscription_id
     *
     * @return string|null
     */
    public function getSubscriptionId()
    {
        return $this->container['subscription_id'];
    }

    /**
     * Sets subscription_id
     *
     * @param string|null $subscription_id Subscription's ID
     *
     * @return self
     */
    public function setSubscriptionId($subscription_id)
    {
        if (is_null($subscription_id)) {
            throw new \InvalidArgumentException('non-nullable subscription_id cannot be null');
        }
        $this->container['subscription_id'] = $subscription_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Subscription name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Subscription description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Subscription status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date Subscription start date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date Subscription expiration date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets last_updated_at
     *
     * @return \DateTime|null
     */
    public function getLastUpdatedAt()
    {
        return $this->container['last_updated_at'];
    }

    /**
     * Sets last_updated_at
     *
     * @param \DateTime|null $last_updated_at When the subscription was last changed
     *
     * @return self
     */
    public function setLastUpdatedAt($last_updated_at)
    {
        if (is_null($last_updated_at)) {
            throw new \InvalidArgumentException('non-nullable last_updated_at cannot be null');
        }
        $this->container['last_updated_at'] = $last_updated_at;

        return $this;
    }

    /**
     * Gets web_order_id
     *
     * @return string|null
     */
    public function getWebOrderId()
    {
        return $this->container['web_order_id'];
    }

    /**
     * Sets web_order_id
     *
     * @param string|null $web_order_id Web order id
     *
     * @return self
     */
    public function setWebOrderId($web_order_id)
    {
        if (is_null($web_order_id)) {
            throw new \InvalidArgumentException('non-nullable web_order_id cannot be null');
        }
        $this->container['web_order_id'] = $web_order_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Subscription type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets smart_account
     *
     * @return \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInnerSmartAccount|null
     */
    public function getSmartAccount()
    {
        return $this->container['smart_account'];
    }

    /**
     * Sets smart_account
     *
     * @param \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInnerSmartAccount|null $smart_account smart_account
     *
     * @return self
     */
    public function setSmartAccount($smart_account)
    {
        if (is_null($smart_account)) {
            throw new \InvalidArgumentException('non-nullable smart_account cannot be null');
        }
        $this->container['smart_account'] = $smart_account;

        return $this;
    }

    /**
     * Gets renewal_requested
     *
     * @return bool|null
     */
    public function getRenewalRequested()
    {
        return $this->container['renewal_requested'];
    }

    /**
     * Sets renewal_requested
     *
     * @param bool|null $renewal_requested Whether a renewal has been requested for the subscription
     *
     * @return self
     */
    public function setRenewalRequested($renewal_requested)
    {
        if (is_null($renewal_requested)) {
            throw new \InvalidArgumentException('non-nullable renewal_requested cannot be null');
        }
        $this->container['renewal_requested'] = $renewal_requested;

        return $this;
    }

    /**
     * Gets product_types
     *
     * @return string[]|null
     */
    public function getProductTypes()
    {
        return $this->container['product_types'];
    }

    /**
     * Sets product_types
     *
     * @param string[]|null $product_types Products the subscription has entitlements for
     *
     * @return self
     */
    public function setProductTypes($product_types)
    {
        if (is_null($product_types)) {
            throw new \InvalidArgumentException('non-nullable product_types cannot be null');
        }
        $allowedValues = $this->getProductTypesAllowableValues();
        if (array_diff($product_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'product_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_types'] = $product_types;

        return $this;
    }

    /**
     * Gets entitlements
     *
     * @return \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInnerEntitlementsInner[]|null
     */
    public function getEntitlements()
    {
        return $this->container['entitlements'];
    }

    /**
     * Sets entitlements
     *
     * @param \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInnerEntitlementsInner[]|null $entitlements Entitlement info
     *
     * @return self
     */
    public function setEntitlements($entitlements)
    {
        if (is_null($entitlements)) {
            throw new \InvalidArgumentException('non-nullable entitlements cannot be null');
        }
        $this->container['entitlements'] = $entitlements;

        return $this;
    }

    /**
     * Gets counts
     *
     * @return \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInnerCounts|null
     */
    public function getCounts()
    {
        return $this->container['counts'];
    }

    /**
     * Sets counts
     *
     * @param \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInnerCounts|null $counts counts
     *
     * @return self
     */
    public function setCounts($counts)
    {
        if (is_null($counts)) {
            throw new \InvalidArgumentException('non-nullable counts cannot be null');
        }
        $this->container['counts'] = $counts;

        return $this;
    }

    /**
     * Gets enterprise_agreement
     *
     * @return \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInnerEnterpriseAgreement|null
     */
    public function getEnterpriseAgreement()
    {
        return $this->container['enterprise_agreement'];
    }

    /**
     * Sets enterprise_agreement
     *
     * @param \Meraki\Model\GetAdministeredLicensingSubscriptionSubscriptions200ResponseInnerEnterpriseAgreement|null $enterprise_agreement enterprise_agreement
     *
     * @return self
     */
    public function setEnterpriseAgreement($enterprise_agreement)
    {
        if (is_null($enterprise_agreement)) {
            throw new \InvalidArgumentException('non-nullable enterprise_agreement cannot be null');
        }
        $this->container['enterprise_agreement'] = $enterprise_agreement;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


