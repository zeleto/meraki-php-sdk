<?php
/**
 * GetNetworkWirelessClientLatencyHistory200ResponseInnerLatencyBinsByCategoryVideoTraffic
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetNetworkWirelessClientLatencyHistory200ResponseInnerLatencyBinsByCategoryVideoTraffic Class Doc Comment
 *
 * @category Class
 * @description The time bucket&#39;s video traffic latency history
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetNetworkWirelessClientLatencyHistory200ResponseInnerLatencyBinsByCategoryVideoTraffic implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getNetworkWirelessClientLatencyHistory_200_response_inner_latencyBinsByCategory_videoTraffic';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_0_5' => 'int',
        '_1_0' => 'int',
        '_2_0' => 'int',
        '_4_0' => 'int',
        '_8_0' => 'int',
        '_16_0' => 'int',
        '_32_0' => 'int',
        '_64_0' => 'int',
        '_128_0' => 'int',
        '_256_0' => 'int',
        '_512_0' => 'int',
        '_1024_0' => 'int',
        '_2048_0' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_0_5' => null,
        '_1_0' => null,
        '_2_0' => null,
        '_4_0' => null,
        '_8_0' => null,
        '_16_0' => null,
        '_32_0' => null,
        '_64_0' => null,
        '_128_0' => null,
        '_256_0' => null,
        '_512_0' => null,
        '_1024_0' => null,
        '_2048_0' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_0_5' => false,
        '_1_0' => false,
        '_2_0' => false,
        '_4_0' => false,
        '_8_0' => false,
        '_16_0' => false,
        '_32_0' => false,
        '_64_0' => false,
        '_128_0' => false,
        '_256_0' => false,
        '_512_0' => false,
        '_1024_0' => false,
        '_2048_0' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_0_5' => '0.5',
        '_1_0' => '1.0',
        '_2_0' => '2.0',
        '_4_0' => '4.0',
        '_8_0' => '8.0',
        '_16_0' => '16.0',
        '_32_0' => '32.0',
        '_64_0' => '64.0',
        '_128_0' => '128.0',
        '_256_0' => '256.0',
        '_512_0' => '512.0',
        '_1024_0' => '1024.0',
        '_2048_0' => '2048.0'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_0_5' => 'set05',
        '_1_0' => 'set10',
        '_2_0' => 'set20',
        '_4_0' => 'set40',
        '_8_0' => 'set80',
        '_16_0' => 'set160',
        '_32_0' => 'set320',
        '_64_0' => 'set640',
        '_128_0' => 'set1280',
        '_256_0' => 'set2560',
        '_512_0' => 'set5120',
        '_1024_0' => 'set10240',
        '_2048_0' => 'set20480'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_0_5' => 'get05',
        '_1_0' => 'get10',
        '_2_0' => 'get20',
        '_4_0' => 'get40',
        '_8_0' => 'get80',
        '_16_0' => 'get160',
        '_32_0' => 'get320',
        '_64_0' => 'get640',
        '_128_0' => 'get1280',
        '_256_0' => 'get2560',
        '_512_0' => 'get5120',
        '_1024_0' => 'get10240',
        '_2048_0' => 'get20480'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('_0_5', $data ?? [], null);
        $this->setIfExists('_1_0', $data ?? [], null);
        $this->setIfExists('_2_0', $data ?? [], null);
        $this->setIfExists('_4_0', $data ?? [], null);
        $this->setIfExists('_8_0', $data ?? [], null);
        $this->setIfExists('_16_0', $data ?? [], null);
        $this->setIfExists('_32_0', $data ?? [], null);
        $this->setIfExists('_64_0', $data ?? [], null);
        $this->setIfExists('_128_0', $data ?? [], null);
        $this->setIfExists('_256_0', $data ?? [], null);
        $this->setIfExists('_512_0', $data ?? [], null);
        $this->setIfExists('_1024_0', $data ?? [], null);
        $this->setIfExists('_2048_0', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _0_5
     *
     * @return int|null
     */
    public function get05()
    {
        return $this->container['_0_5'];
    }

    /**
     * Sets _0_5
     *
     * @param int|null $_0_5 The latency bucket for video traffic in 0.5 seconds
     *
     * @return self
     */
    public function set05($_0_5)
    {
        if (is_null($_0_5)) {
            throw new \InvalidArgumentException('non-nullable _0_5 cannot be null');
        }
        $this->container['_0_5'] = $_0_5;

        return $this;
    }

    /**
     * Gets _1_0
     *
     * @return int|null
     */
    public function get10()
    {
        return $this->container['_1_0'];
    }

    /**
     * Sets _1_0
     *
     * @param int|null $_1_0 The latency bucket for video traffic in 1.0 seconds
     *
     * @return self
     */
    public function set10($_1_0)
    {
        if (is_null($_1_0)) {
            throw new \InvalidArgumentException('non-nullable _1_0 cannot be null');
        }
        $this->container['_1_0'] = $_1_0;

        return $this;
    }

    /**
     * Gets _2_0
     *
     * @return int|null
     */
    public function get20()
    {
        return $this->container['_2_0'];
    }

    /**
     * Sets _2_0
     *
     * @param int|null $_2_0 The latency bucket for video traffic in 2.0 seconds
     *
     * @return self
     */
    public function set20($_2_0)
    {
        if (is_null($_2_0)) {
            throw new \InvalidArgumentException('non-nullable _2_0 cannot be null');
        }
        $this->container['_2_0'] = $_2_0;

        return $this;
    }

    /**
     * Gets _4_0
     *
     * @return int|null
     */
    public function get40()
    {
        return $this->container['_4_0'];
    }

    /**
     * Sets _4_0
     *
     * @param int|null $_4_0 The latency bucket for video traffic in 4.0 seconds
     *
     * @return self
     */
    public function set40($_4_0)
    {
        if (is_null($_4_0)) {
            throw new \InvalidArgumentException('non-nullable _4_0 cannot be null');
        }
        $this->container['_4_0'] = $_4_0;

        return $this;
    }

    /**
     * Gets _8_0
     *
     * @return int|null
     */
    public function get80()
    {
        return $this->container['_8_0'];
    }

    /**
     * Sets _8_0
     *
     * @param int|null $_8_0 The latency bucket for video traffic in 8.0 seconds
     *
     * @return self
     */
    public function set80($_8_0)
    {
        if (is_null($_8_0)) {
            throw new \InvalidArgumentException('non-nullable _8_0 cannot be null');
        }
        $this->container['_8_0'] = $_8_0;

        return $this;
    }

    /**
     * Gets _16_0
     *
     * @return int|null
     */
    public function get160()
    {
        return $this->container['_16_0'];
    }

    /**
     * Sets _16_0
     *
     * @param int|null $_16_0 The latency bucket for video traffic in 16.0 seconds
     *
     * @return self
     */
    public function set160($_16_0)
    {
        if (is_null($_16_0)) {
            throw new \InvalidArgumentException('non-nullable _16_0 cannot be null');
        }
        $this->container['_16_0'] = $_16_0;

        return $this;
    }

    /**
     * Gets _32_0
     *
     * @return int|null
     */
    public function get320()
    {
        return $this->container['_32_0'];
    }

    /**
     * Sets _32_0
     *
     * @param int|null $_32_0 The latency bucket for video traffic in 32.0 seconds
     *
     * @return self
     */
    public function set320($_32_0)
    {
        if (is_null($_32_0)) {
            throw new \InvalidArgumentException('non-nullable _32_0 cannot be null');
        }
        $this->container['_32_0'] = $_32_0;

        return $this;
    }

    /**
     * Gets _64_0
     *
     * @return int|null
     */
    public function get640()
    {
        return $this->container['_64_0'];
    }

    /**
     * Sets _64_0
     *
     * @param int|null $_64_0 The latency bucket for video traffic in 64.0 seconds
     *
     * @return self
     */
    public function set640($_64_0)
    {
        if (is_null($_64_0)) {
            throw new \InvalidArgumentException('non-nullable _64_0 cannot be null');
        }
        $this->container['_64_0'] = $_64_0;

        return $this;
    }

    /**
     * Gets _128_0
     *
     * @return int|null
     */
    public function get1280()
    {
        return $this->container['_128_0'];
    }

    /**
     * Sets _128_0
     *
     * @param int|null $_128_0 The latency bucket for video traffic in 128.0 seconds
     *
     * @return self
     */
    public function set1280($_128_0)
    {
        if (is_null($_128_0)) {
            throw new \InvalidArgumentException('non-nullable _128_0 cannot be null');
        }
        $this->container['_128_0'] = $_128_0;

        return $this;
    }

    /**
     * Gets _256_0
     *
     * @return int|null
     */
    public function get2560()
    {
        return $this->container['_256_0'];
    }

    /**
     * Sets _256_0
     *
     * @param int|null $_256_0 The latency bucket for video traffic in 256.0 seconds
     *
     * @return self
     */
    public function set2560($_256_0)
    {
        if (is_null($_256_0)) {
            throw new \InvalidArgumentException('non-nullable _256_0 cannot be null');
        }
        $this->container['_256_0'] = $_256_0;

        return $this;
    }

    /**
     * Gets _512_0
     *
     * @return int|null
     */
    public function get5120()
    {
        return $this->container['_512_0'];
    }

    /**
     * Sets _512_0
     *
     * @param int|null $_512_0 The latency bucket for video traffic in 512.0 seconds
     *
     * @return self
     */
    public function set5120($_512_0)
    {
        if (is_null($_512_0)) {
            throw new \InvalidArgumentException('non-nullable _512_0 cannot be null');
        }
        $this->container['_512_0'] = $_512_0;

        return $this;
    }

    /**
     * Gets _1024_0
     *
     * @return int|null
     */
    public function get10240()
    {
        return $this->container['_1024_0'];
    }

    /**
     * Sets _1024_0
     *
     * @param int|null $_1024_0 The latency bucket for video traffic in 1024.0 seconds
     *
     * @return self
     */
    public function set10240($_1024_0)
    {
        if (is_null($_1024_0)) {
            throw new \InvalidArgumentException('non-nullable _1024_0 cannot be null');
        }
        $this->container['_1024_0'] = $_1024_0;

        return $this;
    }

    /**
     * Gets _2048_0
     *
     * @return int|null
     */
    public function get20480()
    {
        return $this->container['_2048_0'];
    }

    /**
     * Sets _2048_0
     *
     * @param int|null $_2048_0 The latency bucket for video traffic in 2048.0 seconds
     *
     * @return self
     */
    public function set20480($_2048_0)
    {
        if (is_null($_2048_0)) {
            throw new \InvalidArgumentException('non-nullable _2048_0 cannot be null');
        }
        $this->container['_2048_0'] = $_2048_0;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


