<?php
/**
 * UpdateNetworkSwitchAccessPolicyRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * UpdateNetworkSwitchAccessPolicyRequest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateNetworkSwitchAccessPolicyRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'updateNetworkSwitchAccessPolicy_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'radius_servers' => '\Meraki\Model\UpdateNetworkSwitchAccessPolicyRequestRadiusServersInner[]',
        'radius' => '\Meraki\Model\GetNetworkSwitchAccessPolicies200ResponseInnerRadius',
        'guest_port_bouncing' => 'bool',
        'radius_testing_enabled' => 'bool',
        'radius_coa_support_enabled' => 'bool',
        'radius_accounting_enabled' => 'bool',
        'radius_accounting_servers' => '\Meraki\Model\UpdateNetworkSwitchAccessPolicyRequestRadiusAccountingServersInner[]',
        'radius_group_attribute' => 'string',
        'host_mode' => 'string',
        'access_policy_type' => 'string',
        'increase_access_speed' => 'bool',
        'guest_vlan_id' => 'int',
        'dot1x' => '\Meraki\Model\GetNetworkSwitchAccessPolicies200ResponseInnerDot1x',
        'voice_vlan_clients' => 'bool',
        'url_redirect_walled_garden_enabled' => 'bool',
        'url_redirect_walled_garden_ranges' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'radius_servers' => null,
        'radius' => null,
        'guest_port_bouncing' => null,
        'radius_testing_enabled' => null,
        'radius_coa_support_enabled' => null,
        'radius_accounting_enabled' => null,
        'radius_accounting_servers' => null,
        'radius_group_attribute' => null,
        'host_mode' => null,
        'access_policy_type' => null,
        'increase_access_speed' => null,
        'guest_vlan_id' => null,
        'dot1x' => null,
        'voice_vlan_clients' => null,
        'url_redirect_walled_garden_enabled' => null,
        'url_redirect_walled_garden_ranges' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'radius_servers' => false,
        'radius' => false,
        'guest_port_bouncing' => false,
        'radius_testing_enabled' => false,
        'radius_coa_support_enabled' => false,
        'radius_accounting_enabled' => false,
        'radius_accounting_servers' => false,
        'radius_group_attribute' => false,
        'host_mode' => false,
        'access_policy_type' => false,
        'increase_access_speed' => false,
        'guest_vlan_id' => false,
        'dot1x' => false,
        'voice_vlan_clients' => false,
        'url_redirect_walled_garden_enabled' => false,
        'url_redirect_walled_garden_ranges' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'radius_servers' => 'radiusServers',
        'radius' => 'radius',
        'guest_port_bouncing' => 'guestPortBouncing',
        'radius_testing_enabled' => 'radiusTestingEnabled',
        'radius_coa_support_enabled' => 'radiusCoaSupportEnabled',
        'radius_accounting_enabled' => 'radiusAccountingEnabled',
        'radius_accounting_servers' => 'radiusAccountingServers',
        'radius_group_attribute' => 'radiusGroupAttribute',
        'host_mode' => 'hostMode',
        'access_policy_type' => 'accessPolicyType',
        'increase_access_speed' => 'increaseAccessSpeed',
        'guest_vlan_id' => 'guestVlanId',
        'dot1x' => 'dot1x',
        'voice_vlan_clients' => 'voiceVlanClients',
        'url_redirect_walled_garden_enabled' => 'urlRedirectWalledGardenEnabled',
        'url_redirect_walled_garden_ranges' => 'urlRedirectWalledGardenRanges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'radius_servers' => 'setRadiusServers',
        'radius' => 'setRadius',
        'guest_port_bouncing' => 'setGuestPortBouncing',
        'radius_testing_enabled' => 'setRadiusTestingEnabled',
        'radius_coa_support_enabled' => 'setRadiusCoaSupportEnabled',
        'radius_accounting_enabled' => 'setRadiusAccountingEnabled',
        'radius_accounting_servers' => 'setRadiusAccountingServers',
        'radius_group_attribute' => 'setRadiusGroupAttribute',
        'host_mode' => 'setHostMode',
        'access_policy_type' => 'setAccessPolicyType',
        'increase_access_speed' => 'setIncreaseAccessSpeed',
        'guest_vlan_id' => 'setGuestVlanId',
        'dot1x' => 'setDot1x',
        'voice_vlan_clients' => 'setVoiceVlanClients',
        'url_redirect_walled_garden_enabled' => 'setUrlRedirectWalledGardenEnabled',
        'url_redirect_walled_garden_ranges' => 'setUrlRedirectWalledGardenRanges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'radius_servers' => 'getRadiusServers',
        'radius' => 'getRadius',
        'guest_port_bouncing' => 'getGuestPortBouncing',
        'radius_testing_enabled' => 'getRadiusTestingEnabled',
        'radius_coa_support_enabled' => 'getRadiusCoaSupportEnabled',
        'radius_accounting_enabled' => 'getRadiusAccountingEnabled',
        'radius_accounting_servers' => 'getRadiusAccountingServers',
        'radius_group_attribute' => 'getRadiusGroupAttribute',
        'host_mode' => 'getHostMode',
        'access_policy_type' => 'getAccessPolicyType',
        'increase_access_speed' => 'getIncreaseAccessSpeed',
        'guest_vlan_id' => 'getGuestVlanId',
        'dot1x' => 'getDot1x',
        'voice_vlan_clients' => 'getVoiceVlanClients',
        'url_redirect_walled_garden_enabled' => 'getUrlRedirectWalledGardenEnabled',
        'url_redirect_walled_garden_ranges' => 'getUrlRedirectWalledGardenRanges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const HOST_MODE_MULTI_AUTH = 'Multi-Auth';
    public const HOST_MODE_MULTI_DOMAIN = 'Multi-Domain';
    public const HOST_MODE_MULTI_HOST = 'Multi-Host';
    public const HOST_MODE_SINGLE_HOST = 'Single-Host';
    public const ACCESS_POLICY_TYPE__802_1X = '802.1x';
    public const ACCESS_POLICY_TYPE_HYBRID_AUTHENTICATION = 'Hybrid authentication';
    public const ACCESS_POLICY_TYPE_MAC_AUTHENTICATION_BYPASS = 'MAC authentication bypass';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHostModeAllowableValues()
    {
        return [
            self::HOST_MODE_MULTI_AUTH,
            self::HOST_MODE_MULTI_DOMAIN,
            self::HOST_MODE_MULTI_HOST,
            self::HOST_MODE_SINGLE_HOST,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessPolicyTypeAllowableValues()
    {
        return [
            self::ACCESS_POLICY_TYPE__802_1X,
            self::ACCESS_POLICY_TYPE_HYBRID_AUTHENTICATION,
            self::ACCESS_POLICY_TYPE_MAC_AUTHENTICATION_BYPASS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('radius_servers', $data ?? [], null);
        $this->setIfExists('radius', $data ?? [], null);
        $this->setIfExists('guest_port_bouncing', $data ?? [], null);
        $this->setIfExists('radius_testing_enabled', $data ?? [], null);
        $this->setIfExists('radius_coa_support_enabled', $data ?? [], null);
        $this->setIfExists('radius_accounting_enabled', $data ?? [], null);
        $this->setIfExists('radius_accounting_servers', $data ?? [], null);
        $this->setIfExists('radius_group_attribute', $data ?? [], null);
        $this->setIfExists('host_mode', $data ?? [], null);
        $this->setIfExists('access_policy_type', $data ?? [], null);
        $this->setIfExists('increase_access_speed', $data ?? [], null);
        $this->setIfExists('guest_vlan_id', $data ?? [], null);
        $this->setIfExists('dot1x', $data ?? [], null);
        $this->setIfExists('voice_vlan_clients', $data ?? [], null);
        $this->setIfExists('url_redirect_walled_garden_enabled', $data ?? [], null);
        $this->setIfExists('url_redirect_walled_garden_ranges', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getHostModeAllowableValues();
        if (!is_null($this->container['host_mode']) && !in_array($this->container['host_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'host_mode', must be one of '%s'",
                $this->container['host_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccessPolicyTypeAllowableValues();
        if (!is_null($this->container['access_policy_type']) && !in_array($this->container['access_policy_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'access_policy_type', must be one of '%s'",
                $this->container['access_policy_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the access policy
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets radius_servers
     *
     * @return \Meraki\Model\UpdateNetworkSwitchAccessPolicyRequestRadiusServersInner[]|null
     */
    public function getRadiusServers()
    {
        return $this->container['radius_servers'];
    }

    /**
     * Sets radius_servers
     *
     * @param \Meraki\Model\UpdateNetworkSwitchAccessPolicyRequestRadiusServersInner[]|null $radius_servers List of RADIUS servers to require connecting devices to authenticate against before granting network access
     *
     * @return self
     */
    public function setRadiusServers($radius_servers)
    {
        if (is_null($radius_servers)) {
            throw new \InvalidArgumentException('non-nullable radius_servers cannot be null');
        }
        $this->container['radius_servers'] = $radius_servers;

        return $this;
    }

    /**
     * Gets radius
     *
     * @return \Meraki\Model\GetNetworkSwitchAccessPolicies200ResponseInnerRadius|null
     */
    public function getRadius()
    {
        return $this->container['radius'];
    }

    /**
     * Sets radius
     *
     * @param \Meraki\Model\GetNetworkSwitchAccessPolicies200ResponseInnerRadius|null $radius radius
     *
     * @return self
     */
    public function setRadius($radius)
    {
        if (is_null($radius)) {
            throw new \InvalidArgumentException('non-nullable radius cannot be null');
        }
        $this->container['radius'] = $radius;

        return $this;
    }

    /**
     * Gets guest_port_bouncing
     *
     * @return bool|null
     */
    public function getGuestPortBouncing()
    {
        return $this->container['guest_port_bouncing'];
    }

    /**
     * Sets guest_port_bouncing
     *
     * @param bool|null $guest_port_bouncing If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers
     *
     * @return self
     */
    public function setGuestPortBouncing($guest_port_bouncing)
    {
        if (is_null($guest_port_bouncing)) {
            throw new \InvalidArgumentException('non-nullable guest_port_bouncing cannot be null');
        }
        $this->container['guest_port_bouncing'] = $guest_port_bouncing;

        return $this;
    }

    /**
     * Gets radius_testing_enabled
     *
     * @return bool|null
     */
    public function getRadiusTestingEnabled()
    {
        return $this->container['radius_testing_enabled'];
    }

    /**
     * Sets radius_testing_enabled
     *
     * @param bool|null $radius_testing_enabled If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers
     *
     * @return self
     */
    public function setRadiusTestingEnabled($radius_testing_enabled)
    {
        if (is_null($radius_testing_enabled)) {
            throw new \InvalidArgumentException('non-nullable radius_testing_enabled cannot be null');
        }
        $this->container['radius_testing_enabled'] = $radius_testing_enabled;

        return $this;
    }

    /**
     * Gets radius_coa_support_enabled
     *
     * @return bool|null
     */
    public function getRadiusCoaSupportEnabled()
    {
        return $this->container['radius_coa_support_enabled'];
    }

    /**
     * Sets radius_coa_support_enabled
     *
     * @param bool|null $radius_coa_support_enabled Change of authentication for RADIUS re-authentication and disconnection
     *
     * @return self
     */
    public function setRadiusCoaSupportEnabled($radius_coa_support_enabled)
    {
        if (is_null($radius_coa_support_enabled)) {
            throw new \InvalidArgumentException('non-nullable radius_coa_support_enabled cannot be null');
        }
        $this->container['radius_coa_support_enabled'] = $radius_coa_support_enabled;

        return $this;
    }

    /**
     * Gets radius_accounting_enabled
     *
     * @return bool|null
     */
    public function getRadiusAccountingEnabled()
    {
        return $this->container['radius_accounting_enabled'];
    }

    /**
     * Sets radius_accounting_enabled
     *
     * @param bool|null $radius_accounting_enabled Enable to send start, interim-update and stop messages to a configured RADIUS accounting server for tracking connected clients
     *
     * @return self
     */
    public function setRadiusAccountingEnabled($radius_accounting_enabled)
    {
        if (is_null($radius_accounting_enabled)) {
            throw new \InvalidArgumentException('non-nullable radius_accounting_enabled cannot be null');
        }
        $this->container['radius_accounting_enabled'] = $radius_accounting_enabled;

        return $this;
    }

    /**
     * Gets radius_accounting_servers
     *
     * @return \Meraki\Model\UpdateNetworkSwitchAccessPolicyRequestRadiusAccountingServersInner[]|null
     */
    public function getRadiusAccountingServers()
    {
        return $this->container['radius_accounting_servers'];
    }

    /**
     * Sets radius_accounting_servers
     *
     * @param \Meraki\Model\UpdateNetworkSwitchAccessPolicyRequestRadiusAccountingServersInner[]|null $radius_accounting_servers List of RADIUS accounting servers to require connecting devices to authenticate against before granting network access
     *
     * @return self
     */
    public function setRadiusAccountingServers($radius_accounting_servers)
    {
        if (is_null($radius_accounting_servers)) {
            throw new \InvalidArgumentException('non-nullable radius_accounting_servers cannot be null');
        }
        $this->container['radius_accounting_servers'] = $radius_accounting_servers;

        return $this;
    }

    /**
     * Gets radius_group_attribute
     *
     * @return string|null
     */
    public function getRadiusGroupAttribute()
    {
        return $this->container['radius_group_attribute'];
    }

    /**
     * Sets radius_group_attribute
     *
     * @param string|null $radius_group_attribute Acceptable values are `\"\"` for None, or `\"11\"` for Group Policies ACL
     *
     * @return self
     */
    public function setRadiusGroupAttribute($radius_group_attribute)
    {
        if (is_null($radius_group_attribute)) {
            throw new \InvalidArgumentException('non-nullable radius_group_attribute cannot be null');
        }
        $this->container['radius_group_attribute'] = $radius_group_attribute;

        return $this;
    }

    /**
     * Gets host_mode
     *
     * @return string|null
     */
    public function getHostMode()
    {
        return $this->container['host_mode'];
    }

    /**
     * Sets host_mode
     *
     * @param string|null $host_mode Choose the Host Mode for the access policy.
     *
     * @return self
     */
    public function setHostMode($host_mode)
    {
        if (is_null($host_mode)) {
            throw new \InvalidArgumentException('non-nullable host_mode cannot be null');
        }
        $allowedValues = $this->getHostModeAllowableValues();
        if (!in_array($host_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'host_mode', must be one of '%s'",
                    $host_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['host_mode'] = $host_mode;

        return $this;
    }

    /**
     * Gets access_policy_type
     *
     * @return string|null
     */
    public function getAccessPolicyType()
    {
        return $this->container['access_policy_type'];
    }

    /**
     * Sets access_policy_type
     *
     * @param string|null $access_policy_type Access Type of the policy. Automatically 'Hybrid authentication' when hostMode is 'Multi-Domain'.
     *
     * @return self
     */
    public function setAccessPolicyType($access_policy_type)
    {
        if (is_null($access_policy_type)) {
            throw new \InvalidArgumentException('non-nullable access_policy_type cannot be null');
        }
        $allowedValues = $this->getAccessPolicyTypeAllowableValues();
        if (!in_array($access_policy_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'access_policy_type', must be one of '%s'",
                    $access_policy_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access_policy_type'] = $access_policy_type;

        return $this;
    }

    /**
     * Gets increase_access_speed
     *
     * @return bool|null
     */
    public function getIncreaseAccessSpeed()
    {
        return $this->container['increase_access_speed'];
    }

    /**
     * Sets increase_access_speed
     *
     * @param bool|null $increase_access_speed Enabling this option will make switches execute 802.1X and MAC-bypass authentication simultaneously so that clients authenticate faster. Only required when accessPolicyType is 'Hybrid Authentication.
     *
     * @return self
     */
    public function setIncreaseAccessSpeed($increase_access_speed)
    {
        if (is_null($increase_access_speed)) {
            throw new \InvalidArgumentException('non-nullable increase_access_speed cannot be null');
        }
        $this->container['increase_access_speed'] = $increase_access_speed;

        return $this;
    }

    /**
     * Gets guest_vlan_id
     *
     * @return int|null
     */
    public function getGuestVlanId()
    {
        return $this->container['guest_vlan_id'];
    }

    /**
     * Sets guest_vlan_id
     *
     * @param int|null $guest_vlan_id ID for the guest VLAN allow unauthorized devices access to limited network resources
     *
     * @return self
     */
    public function setGuestVlanId($guest_vlan_id)
    {
        if (is_null($guest_vlan_id)) {
            throw new \InvalidArgumentException('non-nullable guest_vlan_id cannot be null');
        }
        $this->container['guest_vlan_id'] = $guest_vlan_id;

        return $this;
    }

    /**
     * Gets dot1x
     *
     * @return \Meraki\Model\GetNetworkSwitchAccessPolicies200ResponseInnerDot1x|null
     */
    public function getDot1x()
    {
        return $this->container['dot1x'];
    }

    /**
     * Sets dot1x
     *
     * @param \Meraki\Model\GetNetworkSwitchAccessPolicies200ResponseInnerDot1x|null $dot1x dot1x
     *
     * @return self
     */
    public function setDot1x($dot1x)
    {
        if (is_null($dot1x)) {
            throw new \InvalidArgumentException('non-nullable dot1x cannot be null');
        }
        $this->container['dot1x'] = $dot1x;

        return $this;
    }

    /**
     * Gets voice_vlan_clients
     *
     * @return bool|null
     */
    public function getVoiceVlanClients()
    {
        return $this->container['voice_vlan_clients'];
    }

    /**
     * Sets voice_vlan_clients
     *
     * @param bool|null $voice_vlan_clients CDP/LLDP capable voice clients will be able to use this VLAN. Automatically true when hostMode is 'Multi-Domain'.
     *
     * @return self
     */
    public function setVoiceVlanClients($voice_vlan_clients)
    {
        if (is_null($voice_vlan_clients)) {
            throw new \InvalidArgumentException('non-nullable voice_vlan_clients cannot be null');
        }
        $this->container['voice_vlan_clients'] = $voice_vlan_clients;

        return $this;
    }

    /**
     * Gets url_redirect_walled_garden_enabled
     *
     * @return bool|null
     */
    public function getUrlRedirectWalledGardenEnabled()
    {
        return $this->container['url_redirect_walled_garden_enabled'];
    }

    /**
     * Sets url_redirect_walled_garden_enabled
     *
     * @param bool|null $url_redirect_walled_garden_enabled Enable to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication
     *
     * @return self
     */
    public function setUrlRedirectWalledGardenEnabled($url_redirect_walled_garden_enabled)
    {
        if (is_null($url_redirect_walled_garden_enabled)) {
            throw new \InvalidArgumentException('non-nullable url_redirect_walled_garden_enabled cannot be null');
        }
        $this->container['url_redirect_walled_garden_enabled'] = $url_redirect_walled_garden_enabled;

        return $this;
    }

    /**
     * Gets url_redirect_walled_garden_ranges
     *
     * @return string[]|null
     */
    public function getUrlRedirectWalledGardenRanges()
    {
        return $this->container['url_redirect_walled_garden_ranges'];
    }

    /**
     * Sets url_redirect_walled_garden_ranges
     *
     * @param string[]|null $url_redirect_walled_garden_ranges IP address ranges, in CIDR notation, to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication
     *
     * @return self
     */
    public function setUrlRedirectWalledGardenRanges($url_redirect_walled_garden_ranges)
    {
        if (is_null($url_redirect_walled_garden_ranges)) {
            throw new \InvalidArgumentException('non-nullable url_redirect_walled_garden_ranges cannot be null');
        }
        $this->container['url_redirect_walled_garden_ranges'] = $url_redirect_walled_garden_ranges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


