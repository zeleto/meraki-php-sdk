<?php
/**
 * UpdateDeviceApplianceRadioSettingsRequestFiveGhzSettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * UpdateDeviceApplianceRadioSettingsRequestFiveGhzSettings Class Doc Comment
 *
 * @category Class
 * @description Manual radio settings for 5 GHz.
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateDeviceApplianceRadioSettingsRequestFiveGhzSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'updateDeviceApplianceRadioSettings_request_fiveGhzSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channel' => 'int',
        'channel_width' => 'int',
        'target_power' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channel' => null,
        'channel_width' => null,
        'target_power' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'channel' => false,
        'channel_width' => false,
        'target_power' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel' => 'channel',
        'channel_width' => 'channelWidth',
        'target_power' => 'targetPower'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel' => 'setChannel',
        'channel_width' => 'setChannelWidth',
        'target_power' => 'setTargetPower'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel' => 'getChannel',
        'channel_width' => 'getChannelWidth',
        'target_power' => 'getTargetPower'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CHANNEL_NUMBER_36 = 36;
    public const CHANNEL_NUMBER_40 = 40;
    public const CHANNEL_NUMBER_44 = 44;
    public const CHANNEL_NUMBER_48 = 48;
    public const CHANNEL_NUMBER_52 = 52;
    public const CHANNEL_NUMBER_56 = 56;
    public const CHANNEL_NUMBER_60 = 60;
    public const CHANNEL_NUMBER_64 = 64;
    public const CHANNEL_NUMBER_100 = 100;
    public const CHANNEL_NUMBER_104 = 104;
    public const CHANNEL_NUMBER_108 = 108;
    public const CHANNEL_NUMBER_112 = 112;
    public const CHANNEL_NUMBER_116 = 116;
    public const CHANNEL_NUMBER_120 = 120;
    public const CHANNEL_NUMBER_124 = 124;
    public const CHANNEL_NUMBER_128 = 128;
    public const CHANNEL_NUMBER_132 = 132;
    public const CHANNEL_NUMBER_136 = 136;
    public const CHANNEL_NUMBER_140 = 140;
    public const CHANNEL_NUMBER_144 = 144;
    public const CHANNEL_NUMBER_149 = 149;
    public const CHANNEL_NUMBER_153 = 153;
    public const CHANNEL_NUMBER_157 = 157;
    public const CHANNEL_NUMBER_161 = 161;
    public const CHANNEL_NUMBER_165 = 165;
    public const CHANNEL_NUMBER_169 = 169;
    public const CHANNEL_NUMBER_173 = 173;
    public const CHANNEL_NUMBER_177 = 177;
    public const CHANNEL_WIDTH_NUMBER_0 = 0;
    public const CHANNEL_WIDTH_NUMBER_20 = 20;
    public const CHANNEL_WIDTH_NUMBER_40 = 40;
    public const CHANNEL_WIDTH_NUMBER_80 = 80;
    public const CHANNEL_WIDTH_NUMBER_160 = 160;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelAllowableValues()
    {
        return [
            self::CHANNEL_NUMBER_36,
            self::CHANNEL_NUMBER_40,
            self::CHANNEL_NUMBER_44,
            self::CHANNEL_NUMBER_48,
            self::CHANNEL_NUMBER_52,
            self::CHANNEL_NUMBER_56,
            self::CHANNEL_NUMBER_60,
            self::CHANNEL_NUMBER_64,
            self::CHANNEL_NUMBER_100,
            self::CHANNEL_NUMBER_104,
            self::CHANNEL_NUMBER_108,
            self::CHANNEL_NUMBER_112,
            self::CHANNEL_NUMBER_116,
            self::CHANNEL_NUMBER_120,
            self::CHANNEL_NUMBER_124,
            self::CHANNEL_NUMBER_128,
            self::CHANNEL_NUMBER_132,
            self::CHANNEL_NUMBER_136,
            self::CHANNEL_NUMBER_140,
            self::CHANNEL_NUMBER_144,
            self::CHANNEL_NUMBER_149,
            self::CHANNEL_NUMBER_153,
            self::CHANNEL_NUMBER_157,
            self::CHANNEL_NUMBER_161,
            self::CHANNEL_NUMBER_165,
            self::CHANNEL_NUMBER_169,
            self::CHANNEL_NUMBER_173,
            self::CHANNEL_NUMBER_177,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelWidthAllowableValues()
    {
        return [
            self::CHANNEL_WIDTH_NUMBER_0,
            self::CHANNEL_WIDTH_NUMBER_20,
            self::CHANNEL_WIDTH_NUMBER_40,
            self::CHANNEL_WIDTH_NUMBER_80,
            self::CHANNEL_WIDTH_NUMBER_160,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('channel', $data ?? [], null);
        $this->setIfExists('channel_width', $data ?? [], null);
        $this->setIfExists('target_power', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getChannelAllowableValues();
        if (!is_null($this->container['channel']) && !in_array($this->container['channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'channel', must be one of '%s'",
                $this->container['channel'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChannelWidthAllowableValues();
        if (!is_null($this->container['channel_width']) && !in_array($this->container['channel_width'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'channel_width', must be one of '%s'",
                $this->container['channel_width'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel
     *
     * @return int|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param int|null $channel Sets a manual channel for 5 GHz. Can be '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161', '165', '169', '173' or '177' or null for using auto channel.
     *
     * @return self
     */
    public function setChannel($channel)
    {
        if (is_null($channel)) {
            throw new \InvalidArgumentException('non-nullable channel cannot be null');
        }
        $allowedValues = $this->getChannelAllowableValues();
        if (!in_array($channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'channel', must be one of '%s'",
                    $channel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets channel_width
     *
     * @return int|null
     */
    public function getChannelWidth()
    {
        return $this->container['channel_width'];
    }

    /**
     * Sets channel_width
     *
     * @param int|null $channel_width Sets a manual channel width for 5 GHz. Can be '0', '20', '40', '80' or '160' or null for using auto channel width.
     *
     * @return self
     */
    public function setChannelWidth($channel_width)
    {
        if (is_null($channel_width)) {
            throw new \InvalidArgumentException('non-nullable channel_width cannot be null');
        }
        $allowedValues = $this->getChannelWidthAllowableValues();
        if (!in_array($channel_width, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'channel_width', must be one of '%s'",
                    $channel_width,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel_width'] = $channel_width;

        return $this;
    }

    /**
     * Gets target_power
     *
     * @return int|null
     */
    public function getTargetPower()
    {
        return $this->container['target_power'];
    }

    /**
     * Sets target_power
     *
     * @param int|null $target_power Set a manual target power for 5 GHz (dBm). Enter null for using auto power range.
     *
     * @return self
     */
    public function setTargetPower($target_power)
    {
        if (is_null($target_power)) {
            throw new \InvalidArgumentException('non-nullable target_power cannot be null');
        }
        $this->container['target_power'] = $target_power;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


