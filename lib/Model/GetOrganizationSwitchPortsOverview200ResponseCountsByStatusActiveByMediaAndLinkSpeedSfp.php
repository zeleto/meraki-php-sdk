<?php
/**
 * GetOrganizationSwitchPortsOverview200ResponseCountsByStatusActiveByMediaAndLinkSpeedSfp
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetOrganizationSwitchPortsOverview200ResponseCountsByStatusActiveByMediaAndLinkSpeedSfp Class Doc Comment
 *
 * @category Class
 * @description The count data for SFP ports, indexed by speed in Mb
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetOrganizationSwitchPortsOverview200ResponseCountsByStatusActiveByMediaAndLinkSpeedSfp implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getOrganizationSwitchPortsOverview_200_response_counts_byStatus_active_byMediaAndLinkSpeed_sfp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total' => 'int',
        '_100' => 'int',
        '_1000' => 'int',
        '_10000' => 'int',
        '_20000' => 'int',
        '_25000' => 'int',
        '_40000' => 'int',
        '_50000' => 'int',
        '_100000' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total' => null,
        '_100' => null,
        '_1000' => null,
        '_10000' => null,
        '_20000' => null,
        '_25000' => null,
        '_40000' => null,
        '_50000' => null,
        '_100000' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'total' => false,
        '_100' => false,
        '_1000' => false,
        '_10000' => false,
        '_20000' => false,
        '_25000' => false,
        '_40000' => false,
        '_50000' => false,
        '_100000' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total' => 'total',
        '_100' => '100',
        '_1000' => '1000',
        '_10000' => '10000',
        '_20000' => '20000',
        '_25000' => '25000',
        '_40000' => '40000',
        '_50000' => '50000',
        '_100000' => '100000'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total' => 'setTotal',
        '_100' => 'set100',
        '_1000' => 'set1000',
        '_10000' => 'set10000',
        '_20000' => 'set20000',
        '_25000' => 'set25000',
        '_40000' => 'set40000',
        '_50000' => 'set50000',
        '_100000' => 'set100000'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total' => 'getTotal',
        '_100' => 'get100',
        '_1000' => 'get1000',
        '_10000' => 'get10000',
        '_20000' => 'get20000',
        '_25000' => 'get25000',
        '_40000' => 'get40000',
        '_50000' => 'get50000',
        '_100000' => 'get100000'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('_100', $data ?? [], null);
        $this->setIfExists('_1000', $data ?? [], null);
        $this->setIfExists('_10000', $data ?? [], null);
        $this->setIfExists('_20000', $data ?? [], null);
        $this->setIfExists('_25000', $data ?? [], null);
        $this->setIfExists('_40000', $data ?? [], null);
        $this->setIfExists('_50000', $data ?? [], null);
        $this->setIfExists('_100000', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total
     *
     * @return int|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int|null $total The total number of active SFP ports
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets _100
     *
     * @return int|null
     */
    public function get100()
    {
        return $this->container['_100'];
    }

    /**
     * Sets _100
     *
     * @param int|null $_100 The number of active 100 Mbps SFP ports
     *
     * @return self
     */
    public function set100($_100)
    {
        if (is_null($_100)) {
            throw new \InvalidArgumentException('non-nullable _100 cannot be null');
        }
        $this->container['_100'] = $_100;

        return $this;
    }

    /**
     * Gets _1000
     *
     * @return int|null
     */
    public function get1000()
    {
        return $this->container['_1000'];
    }

    /**
     * Sets _1000
     *
     * @param int|null $_1000 The number of active 1 Gbps SFP ports
     *
     * @return self
     */
    public function set1000($_1000)
    {
        if (is_null($_1000)) {
            throw new \InvalidArgumentException('non-nullable _1000 cannot be null');
        }
        $this->container['_1000'] = $_1000;

        return $this;
    }

    /**
     * Gets _10000
     *
     * @return int|null
     */
    public function get10000()
    {
        return $this->container['_10000'];
    }

    /**
     * Sets _10000
     *
     * @param int|null $_10000 The number of active 10 Gbps SFP ports
     *
     * @return self
     */
    public function set10000($_10000)
    {
        if (is_null($_10000)) {
            throw new \InvalidArgumentException('non-nullable _10000 cannot be null');
        }
        $this->container['_10000'] = $_10000;

        return $this;
    }

    /**
     * Gets _20000
     *
     * @return int|null
     */
    public function get20000()
    {
        return $this->container['_20000'];
    }

    /**
     * Sets _20000
     *
     * @param int|null $_20000 The number of active 20 Gbps SFP ports
     *
     * @return self
     */
    public function set20000($_20000)
    {
        if (is_null($_20000)) {
            throw new \InvalidArgumentException('non-nullable _20000 cannot be null');
        }
        $this->container['_20000'] = $_20000;

        return $this;
    }

    /**
     * Gets _25000
     *
     * @return int|null
     */
    public function get25000()
    {
        return $this->container['_25000'];
    }

    /**
     * Sets _25000
     *
     * @param int|null $_25000 The number of active 25 Gbps SFP ports
     *
     * @return self
     */
    public function set25000($_25000)
    {
        if (is_null($_25000)) {
            throw new \InvalidArgumentException('non-nullable _25000 cannot be null');
        }
        $this->container['_25000'] = $_25000;

        return $this;
    }

    /**
     * Gets _40000
     *
     * @return int|null
     */
    public function get40000()
    {
        return $this->container['_40000'];
    }

    /**
     * Sets _40000
     *
     * @param int|null $_40000 The number of active 40 Gbps SFP ports
     *
     * @return self
     */
    public function set40000($_40000)
    {
        if (is_null($_40000)) {
            throw new \InvalidArgumentException('non-nullable _40000 cannot be null');
        }
        $this->container['_40000'] = $_40000;

        return $this;
    }

    /**
     * Gets _50000
     *
     * @return int|null
     */
    public function get50000()
    {
        return $this->container['_50000'];
    }

    /**
     * Sets _50000
     *
     * @param int|null $_50000 The number of active 50 Gbps SFP ports
     *
     * @return self
     */
    public function set50000($_50000)
    {
        if (is_null($_50000)) {
            throw new \InvalidArgumentException('non-nullable _50000 cannot be null');
        }
        $this->container['_50000'] = $_50000;

        return $this;
    }

    /**
     * Gets _100000
     *
     * @return int|null
     */
    public function get100000()
    {
        return $this->container['_100000'];
    }

    /**
     * Sets _100000
     *
     * @param int|null $_100000 The number of active 100 Gbps SFP ports
     *
     * @return self
     */
    public function set100000($_100000)
    {
        if (is_null($_100000)) {
            throw new \InvalidArgumentException('non-nullable _100000 cannot be null');
        }
        $this->container['_100000'] = $_100000;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


