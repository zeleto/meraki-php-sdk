<?php
/**
 * GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies Class Doc Comment
 *
 * @category Class
 * @description Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetOrganizationApplianceVpnThirdPartyVPNPeers200ResponsePeersInnerIpsecPolicies implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getOrganizationApplianceVpnThirdPartyVPNPeers_200_response_peers_inner_ipsecPolicies';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ike_cipher_algo' => 'string[]',
        'ike_auth_algo' => 'string[]',
        'ike_prf_algo' => 'string[]',
        'ike_diffie_hellman_group' => 'string[]',
        'ike_lifetime' => 'int',
        'child_cipher_algo' => 'string[]',
        'child_auth_algo' => 'string[]',
        'child_pfs_group' => 'string[]',
        'child_lifetime' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ike_cipher_algo' => null,
        'ike_auth_algo' => null,
        'ike_prf_algo' => null,
        'ike_diffie_hellman_group' => null,
        'ike_lifetime' => null,
        'child_cipher_algo' => null,
        'child_auth_algo' => null,
        'child_pfs_group' => null,
        'child_lifetime' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ike_cipher_algo' => false,
        'ike_auth_algo' => false,
        'ike_prf_algo' => false,
        'ike_diffie_hellman_group' => false,
        'ike_lifetime' => false,
        'child_cipher_algo' => false,
        'child_auth_algo' => false,
        'child_pfs_group' => false,
        'child_lifetime' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ike_cipher_algo' => 'ikeCipherAlgo',
        'ike_auth_algo' => 'ikeAuthAlgo',
        'ike_prf_algo' => 'ikePrfAlgo',
        'ike_diffie_hellman_group' => 'ikeDiffieHellmanGroup',
        'ike_lifetime' => 'ikeLifetime',
        'child_cipher_algo' => 'childCipherAlgo',
        'child_auth_algo' => 'childAuthAlgo',
        'child_pfs_group' => 'childPfsGroup',
        'child_lifetime' => 'childLifetime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ike_cipher_algo' => 'setIkeCipherAlgo',
        'ike_auth_algo' => 'setIkeAuthAlgo',
        'ike_prf_algo' => 'setIkePrfAlgo',
        'ike_diffie_hellman_group' => 'setIkeDiffieHellmanGroup',
        'ike_lifetime' => 'setIkeLifetime',
        'child_cipher_algo' => 'setChildCipherAlgo',
        'child_auth_algo' => 'setChildAuthAlgo',
        'child_pfs_group' => 'setChildPfsGroup',
        'child_lifetime' => 'setChildLifetime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ike_cipher_algo' => 'getIkeCipherAlgo',
        'ike_auth_algo' => 'getIkeAuthAlgo',
        'ike_prf_algo' => 'getIkePrfAlgo',
        'ike_diffie_hellman_group' => 'getIkeDiffieHellmanGroup',
        'ike_lifetime' => 'getIkeLifetime',
        'child_cipher_algo' => 'getChildCipherAlgo',
        'child_auth_algo' => 'getChildAuthAlgo',
        'child_pfs_group' => 'getChildPfsGroup',
        'child_lifetime' => 'getChildLifetime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const IKE_CIPHER_ALGO_AES128 = 'aes128';
    public const IKE_CIPHER_ALGO_AES192 = 'aes192';
    public const IKE_CIPHER_ALGO_AES256 = 'aes256';
    public const IKE_CIPHER_ALGO_DES = 'des';
    public const IKE_CIPHER_ALGO_TRIPLEDES = 'tripledes';
    public const IKE_AUTH_ALGO_MD5 = 'md5';
    public const IKE_AUTH_ALGO_SHA1 = 'sha1';
    public const IKE_AUTH_ALGO_SHA256 = 'sha256';
    public const IKE_PRF_ALGO__DEFAULT = 'default';
    public const IKE_PRF_ALGO_PRFMD5 = 'prfmd5';
    public const IKE_PRF_ALGO_PRFSHA1 = 'prfsha1';
    public const IKE_PRF_ALGO_PRFSHA256 = 'prfsha256';
    public const CHILD_CIPHER_ALGO_AES128 = 'aes128';
    public const CHILD_CIPHER_ALGO_AES192 = 'aes192';
    public const CHILD_CIPHER_ALGO_AES256 = 'aes256';
    public const CHILD_CIPHER_ALGO_DES = 'des';
    public const CHILD_CIPHER_ALGO_NULL = 'null';
    public const CHILD_CIPHER_ALGO_TRIPLEDES = 'tripledes';
    public const CHILD_AUTH_ALGO_MD5 = 'md5';
    public const CHILD_AUTH_ALGO_SHA1 = 'sha1';
    public const CHILD_AUTH_ALGO_SHA256 = 'sha256';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIkeCipherAlgoAllowableValues()
    {
        return [
            self::IKE_CIPHER_ALGO_AES128,
            self::IKE_CIPHER_ALGO_AES192,
            self::IKE_CIPHER_ALGO_AES256,
            self::IKE_CIPHER_ALGO_DES,
            self::IKE_CIPHER_ALGO_TRIPLEDES,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIkeAuthAlgoAllowableValues()
    {
        return [
            self::IKE_AUTH_ALGO_MD5,
            self::IKE_AUTH_ALGO_SHA1,
            self::IKE_AUTH_ALGO_SHA256,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIkePrfAlgoAllowableValues()
    {
        return [
            self::IKE_PRF_ALGO__DEFAULT,
            self::IKE_PRF_ALGO_PRFMD5,
            self::IKE_PRF_ALGO_PRFSHA1,
            self::IKE_PRF_ALGO_PRFSHA256,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChildCipherAlgoAllowableValues()
    {
        return [
            self::CHILD_CIPHER_ALGO_AES128,
            self::CHILD_CIPHER_ALGO_AES192,
            self::CHILD_CIPHER_ALGO_AES256,
            self::CHILD_CIPHER_ALGO_DES,
            self::CHILD_CIPHER_ALGO_NULL,
            self::CHILD_CIPHER_ALGO_TRIPLEDES,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChildAuthAlgoAllowableValues()
    {
        return [
            self::CHILD_AUTH_ALGO_MD5,
            self::CHILD_AUTH_ALGO_SHA1,
            self::CHILD_AUTH_ALGO_SHA256,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('ike_cipher_algo', $data ?? [], null);
        $this->setIfExists('ike_auth_algo', $data ?? [], null);
        $this->setIfExists('ike_prf_algo', $data ?? [], null);
        $this->setIfExists('ike_diffie_hellman_group', $data ?? [], null);
        $this->setIfExists('ike_lifetime', $data ?? [], null);
        $this->setIfExists('child_cipher_algo', $data ?? [], null);
        $this->setIfExists('child_auth_algo', $data ?? [], null);
        $this->setIfExists('child_pfs_group', $data ?? [], null);
        $this->setIfExists('child_lifetime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ike_cipher_algo
     *
     * @return string[]|null
     */
    public function getIkeCipherAlgo()
    {
        return $this->container['ike_cipher_algo'];
    }

    /**
     * Sets ike_cipher_algo
     *
     * @param string[]|null $ike_cipher_algo This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
     *
     * @return self
     */
    public function setIkeCipherAlgo($ike_cipher_algo)
    {
        if (is_null($ike_cipher_algo)) {
            throw new \InvalidArgumentException('non-nullable ike_cipher_algo cannot be null');
        }
        $allowedValues = $this->getIkeCipherAlgoAllowableValues();
        if (array_diff($ike_cipher_algo, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ike_cipher_algo', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ike_cipher_algo'] = $ike_cipher_algo;

        return $this;
    }

    /**
     * Gets ike_auth_algo
     *
     * @return string[]|null
     */
    public function getIkeAuthAlgo()
    {
        return $this->container['ike_auth_algo'];
    }

    /**
     * Sets ike_auth_algo
     *
     * @param string[]|null $ike_auth_algo This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
     *
     * @return self
     */
    public function setIkeAuthAlgo($ike_auth_algo)
    {
        if (is_null($ike_auth_algo)) {
            throw new \InvalidArgumentException('non-nullable ike_auth_algo cannot be null');
        }
        $allowedValues = $this->getIkeAuthAlgoAllowableValues();
        if (array_diff($ike_auth_algo, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ike_auth_algo', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ike_auth_algo'] = $ike_auth_algo;

        return $this;
    }

    /**
     * Gets ike_prf_algo
     *
     * @return string[]|null
     */
    public function getIkePrfAlgo()
    {
        return $this->container['ike_prf_algo'];
    }

    /**
     * Sets ike_prf_algo
     *
     * @param string[]|null $ike_prf_algo [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.
     *
     * @return self
     */
    public function setIkePrfAlgo($ike_prf_algo)
    {
        if (is_null($ike_prf_algo)) {
            throw new \InvalidArgumentException('non-nullable ike_prf_algo cannot be null');
        }
        $allowedValues = $this->getIkePrfAlgoAllowableValues();
        if (array_diff($ike_prf_algo, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ike_prf_algo', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ike_prf_algo'] = $ike_prf_algo;

        return $this;
    }

    /**
     * Gets ike_diffie_hellman_group
     *
     * @return string[]|null
     */
    public function getIkeDiffieHellmanGroup()
    {
        return $this->container['ike_diffie_hellman_group'];
    }

    /**
     * Sets ike_diffie_hellman_group
     *
     * @param string[]|null $ike_diffie_hellman_group This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'
     *
     * @return self
     */
    public function setIkeDiffieHellmanGroup($ike_diffie_hellman_group)
    {
        if (is_null($ike_diffie_hellman_group)) {
            throw new \InvalidArgumentException('non-nullable ike_diffie_hellman_group cannot be null');
        }
        $this->container['ike_diffie_hellman_group'] = $ike_diffie_hellman_group;

        return $this;
    }

    /**
     * Gets ike_lifetime
     *
     * @return int|null
     */
    public function getIkeLifetime()
    {
        return $this->container['ike_lifetime'];
    }

    /**
     * Sets ike_lifetime
     *
     * @param int|null $ike_lifetime The lifetime of the Phase 1 SA in seconds.
     *
     * @return self
     */
    public function setIkeLifetime($ike_lifetime)
    {
        if (is_null($ike_lifetime)) {
            throw new \InvalidArgumentException('non-nullable ike_lifetime cannot be null');
        }
        $this->container['ike_lifetime'] = $ike_lifetime;

        return $this;
    }

    /**
     * Gets child_cipher_algo
     *
     * @return string[]|null
     */
    public function getChildCipherAlgo()
    {
        return $this->container['child_cipher_algo'];
    }

    /**
     * Sets child_cipher_algo
     *
     * @param string[]|null $child_cipher_algo This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
     *
     * @return self
     */
    public function setChildCipherAlgo($child_cipher_algo)
    {
        if (is_null($child_cipher_algo)) {
            throw new \InvalidArgumentException('non-nullable child_cipher_algo cannot be null');
        }
        $allowedValues = $this->getChildCipherAlgoAllowableValues();
        if (array_diff($child_cipher_algo, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'child_cipher_algo', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['child_cipher_algo'] = $child_cipher_algo;

        return $this;
    }

    /**
     * Gets child_auth_algo
     *
     * @return string[]|null
     */
    public function getChildAuthAlgo()
    {
        return $this->container['child_auth_algo'];
    }

    /**
     * Sets child_auth_algo
     *
     * @param string[]|null $child_auth_algo This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
     *
     * @return self
     */
    public function setChildAuthAlgo($child_auth_algo)
    {
        if (is_null($child_auth_algo)) {
            throw new \InvalidArgumentException('non-nullable child_auth_algo cannot be null');
        }
        $allowedValues = $this->getChildAuthAlgoAllowableValues();
        if (array_diff($child_auth_algo, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'child_auth_algo', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['child_auth_algo'] = $child_auth_algo;

        return $this;
    }

    /**
     * Gets child_pfs_group
     *
     * @return string[]|null
     */
    public function getChildPfsGroup()
    {
        return $this->container['child_pfs_group'];
    }

    /**
     * Sets child_pfs_group
     *
     * @param string[]|null $child_pfs_group This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'
     *
     * @return self
     */
    public function setChildPfsGroup($child_pfs_group)
    {
        if (is_null($child_pfs_group)) {
            throw new \InvalidArgumentException('non-nullable child_pfs_group cannot be null');
        }
        $this->container['child_pfs_group'] = $child_pfs_group;

        return $this;
    }

    /**
     * Gets child_lifetime
     *
     * @return int|null
     */
    public function getChildLifetime()
    {
        return $this->container['child_lifetime'];
    }

    /**
     * Sets child_lifetime
     *
     * @param int|null $child_lifetime The lifetime of the Phase 2 SA in seconds.
     *
     * @return self
     */
    public function setChildLifetime($child_lifetime)
    {
        if (is_null($child_lifetime)) {
            throw new \InvalidArgumentException('non-nullable child_lifetime cannot be null');
        }
        $this->container['child_lifetime'] = $child_lifetime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


