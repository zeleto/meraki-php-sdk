<?php
/**
 * UpdateNetworkApplianceSsidRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * UpdateNetworkApplianceSsidRequest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateNetworkApplianceSsidRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'updateNetworkApplianceSsid_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'enabled' => 'bool',
        'default_vlan_id' => 'int',
        'auth_mode' => 'string',
        'psk' => 'string',
        'radius_servers' => '\Meraki\Model\UpdateNetworkApplianceSsidRequestRadiusServersInner[]',
        'encryption_mode' => 'string',
        'wpa_encryption_mode' => 'string',
        'visible' => 'bool',
        'dhcp_enforced_deauthentication' => '\Meraki\Model\UpdateNetworkApplianceSsidRequestDhcpEnforcedDeauthentication',
        'dot11w' => '\Meraki\Model\UpdateNetworkApplianceSsidRequestDot11w'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'enabled' => null,
        'default_vlan_id' => null,
        'auth_mode' => null,
        'psk' => null,
        'radius_servers' => null,
        'encryption_mode' => null,
        'wpa_encryption_mode' => null,
        'visible' => null,
        'dhcp_enforced_deauthentication' => null,
        'dot11w' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'enabled' => false,
        'default_vlan_id' => false,
        'auth_mode' => false,
        'psk' => false,
        'radius_servers' => false,
        'encryption_mode' => false,
        'wpa_encryption_mode' => false,
        'visible' => false,
        'dhcp_enforced_deauthentication' => false,
        'dot11w' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'enabled' => 'enabled',
        'default_vlan_id' => 'defaultVlanId',
        'auth_mode' => 'authMode',
        'psk' => 'psk',
        'radius_servers' => 'radiusServers',
        'encryption_mode' => 'encryptionMode',
        'wpa_encryption_mode' => 'wpaEncryptionMode',
        'visible' => 'visible',
        'dhcp_enforced_deauthentication' => 'dhcpEnforcedDeauthentication',
        'dot11w' => 'dot11w'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'enabled' => 'setEnabled',
        'default_vlan_id' => 'setDefaultVlanId',
        'auth_mode' => 'setAuthMode',
        'psk' => 'setPsk',
        'radius_servers' => 'setRadiusServers',
        'encryption_mode' => 'setEncryptionMode',
        'wpa_encryption_mode' => 'setWpaEncryptionMode',
        'visible' => 'setVisible',
        'dhcp_enforced_deauthentication' => 'setDhcpEnforcedDeauthentication',
        'dot11w' => 'setDot11w'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'enabled' => 'getEnabled',
        'default_vlan_id' => 'getDefaultVlanId',
        'auth_mode' => 'getAuthMode',
        'psk' => 'getPsk',
        'radius_servers' => 'getRadiusServers',
        'encryption_mode' => 'getEncryptionMode',
        'wpa_encryption_mode' => 'getWpaEncryptionMode',
        'visible' => 'getVisible',
        'dhcp_enforced_deauthentication' => 'getDhcpEnforcedDeauthentication',
        'dot11w' => 'getDot11w'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const AUTH_MODE__8021X_MERAKI = '8021x-meraki';
    public const AUTH_MODE__8021X_RADIUS = '8021x-radius';
    public const AUTH_MODE_OPEN = 'open';
    public const AUTH_MODE_PSK = 'psk';
    public const ENCRYPTION_MODE_WEP = 'wep';
    public const ENCRYPTION_MODE_WPA = 'wpa';
    public const WPA_ENCRYPTION_MODE_WPA1_AND_WPA2 = 'WPA1 and WPA2';
    public const WPA_ENCRYPTION_MODE_WPA2_ONLY = 'WPA2 only';
    public const WPA_ENCRYPTION_MODE_WPA3_TRANSITION_MODE = 'WPA3 Transition Mode';
    public const WPA_ENCRYPTION_MODE_WPA3_ONLY = 'WPA3 only';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthModeAllowableValues()
    {
        return [
            self::AUTH_MODE__8021X_MERAKI,
            self::AUTH_MODE__8021X_RADIUS,
            self::AUTH_MODE_OPEN,
            self::AUTH_MODE_PSK,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEncryptionModeAllowableValues()
    {
        return [
            self::ENCRYPTION_MODE_WEP,
            self::ENCRYPTION_MODE_WPA,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWpaEncryptionModeAllowableValues()
    {
        return [
            self::WPA_ENCRYPTION_MODE_WPA1_AND_WPA2,
            self::WPA_ENCRYPTION_MODE_WPA2_ONLY,
            self::WPA_ENCRYPTION_MODE_WPA3_TRANSITION_MODE,
            self::WPA_ENCRYPTION_MODE_WPA3_ONLY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('default_vlan_id', $data ?? [], null);
        $this->setIfExists('auth_mode', $data ?? [], null);
        $this->setIfExists('psk', $data ?? [], null);
        $this->setIfExists('radius_servers', $data ?? [], null);
        $this->setIfExists('encryption_mode', $data ?? [], null);
        $this->setIfExists('wpa_encryption_mode', $data ?? [], null);
        $this->setIfExists('visible', $data ?? [], null);
        $this->setIfExists('dhcp_enforced_deauthentication', $data ?? [], null);
        $this->setIfExists('dot11w', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAuthModeAllowableValues();
        if (!is_null($this->container['auth_mode']) && !in_array($this->container['auth_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'auth_mode', must be one of '%s'",
                $this->container['auth_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEncryptionModeAllowableValues();
        if (!is_null($this->container['encryption_mode']) && !in_array($this->container['encryption_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'encryption_mode', must be one of '%s'",
                $this->container['encryption_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWpaEncryptionModeAllowableValues();
        if (!is_null($this->container['wpa_encryption_mode']) && !in_array($this->container['wpa_encryption_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'wpa_encryption_mode', must be one of '%s'",
                $this->container['wpa_encryption_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the SSID.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled Whether or not the SSID is enabled.
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets default_vlan_id
     *
     * @return int|null
     */
    public function getDefaultVlanId()
    {
        return $this->container['default_vlan_id'];
    }

    /**
     * Sets default_vlan_id
     *
     * @param int|null $default_vlan_id The VLAN ID of the VLAN associated to this SSID. This parameter is only valid if the network is in routed mode.
     *
     * @return self
     */
    public function setDefaultVlanId($default_vlan_id)
    {
        if (is_null($default_vlan_id)) {
            throw new \InvalidArgumentException('non-nullable default_vlan_id cannot be null');
        }
        $this->container['default_vlan_id'] = $default_vlan_id;

        return $this;
    }

    /**
     * Gets auth_mode
     *
     * @return string|null
     */
    public function getAuthMode()
    {
        return $this->container['auth_mode'];
    }

    /**
     * Sets auth_mode
     *
     * @param string|null $auth_mode The association control method for the SSID ('open', 'psk', '8021x-meraki' or '8021x-radius').
     *
     * @return self
     */
    public function setAuthMode($auth_mode)
    {
        if (is_null($auth_mode)) {
            throw new \InvalidArgumentException('non-nullable auth_mode cannot be null');
        }
        $allowedValues = $this->getAuthModeAllowableValues();
        if (!in_array($auth_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'auth_mode', must be one of '%s'",
                    $auth_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_mode'] = $auth_mode;

        return $this;
    }

    /**
     * Gets psk
     *
     * @return string|null
     */
    public function getPsk()
    {
        return $this->container['psk'];
    }

    /**
     * Sets psk
     *
     * @param string|null $psk The passkey for the SSID. This param is only valid if the authMode is 'psk'.
     *
     * @return self
     */
    public function setPsk($psk)
    {
        if (is_null($psk)) {
            throw new \InvalidArgumentException('non-nullable psk cannot be null');
        }
        $this->container['psk'] = $psk;

        return $this;
    }

    /**
     * Gets radius_servers
     *
     * @return \Meraki\Model\UpdateNetworkApplianceSsidRequestRadiusServersInner[]|null
     */
    public function getRadiusServers()
    {
        return $this->container['radius_servers'];
    }

    /**
     * Sets radius_servers
     *
     * @param \Meraki\Model\UpdateNetworkApplianceSsidRequestRadiusServersInner[]|null $radius_servers The RADIUS 802.1x servers to be used for authentication. This param is only valid if the authMode is '8021x-radius'.
     *
     * @return self
     */
    public function setRadiusServers($radius_servers)
    {
        if (is_null($radius_servers)) {
            throw new \InvalidArgumentException('non-nullable radius_servers cannot be null');
        }
        $this->container['radius_servers'] = $radius_servers;

        return $this;
    }

    /**
     * Gets encryption_mode
     *
     * @return string|null
     */
    public function getEncryptionMode()
    {
        return $this->container['encryption_mode'];
    }

    /**
     * Sets encryption_mode
     *
     * @param string|null $encryption_mode The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'.
     *
     * @return self
     */
    public function setEncryptionMode($encryption_mode)
    {
        if (is_null($encryption_mode)) {
            throw new \InvalidArgumentException('non-nullable encryption_mode cannot be null');
        }
        $allowedValues = $this->getEncryptionModeAllowableValues();
        if (!in_array($encryption_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'encryption_mode', must be one of '%s'",
                    $encryption_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['encryption_mode'] = $encryption_mode;

        return $this;
    }

    /**
     * Gets wpa_encryption_mode
     *
     * @return string|null
     */
    public function getWpaEncryptionMode()
    {
        return $this->container['wpa_encryption_mode'];
    }

    /**
     * Sets wpa_encryption_mode
     *
     * @param string|null $wpa_encryption_mode The types of WPA encryption. ('WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode' or 'WPA3 only'). This param is only valid if (1) the authMode is 'psk' & the encryptionMode is 'wpa' OR (2) the authMode is '8021x-meraki' OR (3) the authMode is '8021x-radius'
     *
     * @return self
     */
    public function setWpaEncryptionMode($wpa_encryption_mode)
    {
        if (is_null($wpa_encryption_mode)) {
            throw new \InvalidArgumentException('non-nullable wpa_encryption_mode cannot be null');
        }
        $allowedValues = $this->getWpaEncryptionModeAllowableValues();
        if (!in_array($wpa_encryption_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'wpa_encryption_mode', must be one of '%s'",
                    $wpa_encryption_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wpa_encryption_mode'] = $wpa_encryption_mode;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return bool|null
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param bool|null $visible Boolean indicating whether the MX should advertise or hide this SSID.
     *
     * @return self
     */
    public function setVisible($visible)
    {
        if (is_null($visible)) {
            throw new \InvalidArgumentException('non-nullable visible cannot be null');
        }
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets dhcp_enforced_deauthentication
     *
     * @return \Meraki\Model\UpdateNetworkApplianceSsidRequestDhcpEnforcedDeauthentication|null
     */
    public function getDhcpEnforcedDeauthentication()
    {
        return $this->container['dhcp_enforced_deauthentication'];
    }

    /**
     * Sets dhcp_enforced_deauthentication
     *
     * @param \Meraki\Model\UpdateNetworkApplianceSsidRequestDhcpEnforcedDeauthentication|null $dhcp_enforced_deauthentication dhcp_enforced_deauthentication
     *
     * @return self
     */
    public function setDhcpEnforcedDeauthentication($dhcp_enforced_deauthentication)
    {
        if (is_null($dhcp_enforced_deauthentication)) {
            throw new \InvalidArgumentException('non-nullable dhcp_enforced_deauthentication cannot be null');
        }
        $this->container['dhcp_enforced_deauthentication'] = $dhcp_enforced_deauthentication;

        return $this;
    }

    /**
     * Gets dot11w
     *
     * @return \Meraki\Model\UpdateNetworkApplianceSsidRequestDot11w|null
     */
    public function getDot11w()
    {
        return $this->container['dot11w'];
    }

    /**
     * Sets dot11w
     *
     * @param \Meraki\Model\UpdateNetworkApplianceSsidRequestDot11w|null $dot11w dot11w
     *
     * @return self
     */
    public function setDot11w($dot11w)
    {
        if (is_null($dot11w)) {
            throw new \InvalidArgumentException('non-nullable dot11w cannot be null');
        }
        $this->container['dot11w'] = $dot11w;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


