<?php
/**
 * GetNetworkFirmwareUpgrades200ResponseUpgradeWindow
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetNetworkFirmwareUpgrades200ResponseUpgradeWindow Class Doc Comment
 *
 * @category Class
 * @description Upgrade window for devices in network
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetNetworkFirmwareUpgrades200ResponseUpgradeWindow implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getNetworkFirmwareUpgrades_200_response_upgradeWindow';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'day_of_week' => 'string',
        'hour_of_day' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'day_of_week' => null,
        'hour_of_day' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'day_of_week' => false,
        'hour_of_day' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'day_of_week' => 'dayOfWeek',
        'hour_of_day' => 'hourOfDay'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'day_of_week' => 'setDayOfWeek',
        'hour_of_day' => 'setHourOfDay'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'day_of_week' => 'getDayOfWeek',
        'hour_of_day' => 'getHourOfDay'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DAY_OF_WEEK_FRI = 'fri';
    public const DAY_OF_WEEK_FRIDAY = 'friday';
    public const DAY_OF_WEEK_MON = 'mon';
    public const DAY_OF_WEEK_MONDAY = 'monday';
    public const DAY_OF_WEEK_SAT = 'sat';
    public const DAY_OF_WEEK_SATURDAY = 'saturday';
    public const DAY_OF_WEEK_SUN = 'sun';
    public const DAY_OF_WEEK_SUNDAY = 'sunday';
    public const DAY_OF_WEEK_THU = 'thu';
    public const DAY_OF_WEEK_THURSDAY = 'thursday';
    public const DAY_OF_WEEK_TUE = 'tue';
    public const DAY_OF_WEEK_TUESDAY = 'tuesday';
    public const DAY_OF_WEEK_WED = 'wed';
    public const DAY_OF_WEEK_WEDNESDAY = 'wednesday';
    public const HOUR_OF_DAY__0_00 = '0:00';
    public const HOUR_OF_DAY__10_00 = '10:00';
    public const HOUR_OF_DAY__11_00 = '11:00';
    public const HOUR_OF_DAY__12_00 = '12:00';
    public const HOUR_OF_DAY__13_00 = '13:00';
    public const HOUR_OF_DAY__14_00 = '14:00';
    public const HOUR_OF_DAY__15_00 = '15:00';
    public const HOUR_OF_DAY__16_00 = '16:00';
    public const HOUR_OF_DAY__17_00 = '17:00';
    public const HOUR_OF_DAY__18_00 = '18:00';
    public const HOUR_OF_DAY__19_00 = '19:00';
    public const HOUR_OF_DAY__1_00 = '1:00';
    public const HOUR_OF_DAY__20_00 = '20:00';
    public const HOUR_OF_DAY__21_00 = '21:00';
    public const HOUR_OF_DAY__22_00 = '22:00';
    public const HOUR_OF_DAY__23_00 = '23:00';
    public const HOUR_OF_DAY__2_00 = '2:00';
    public const HOUR_OF_DAY__3_00 = '3:00';
    public const HOUR_OF_DAY__4_00 = '4:00';
    public const HOUR_OF_DAY__5_00 = '5:00';
    public const HOUR_OF_DAY__6_00 = '6:00';
    public const HOUR_OF_DAY__7_00 = '7:00';
    public const HOUR_OF_DAY__8_00 = '8:00';
    public const HOUR_OF_DAY__9_00 = '9:00';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDayOfWeekAllowableValues()
    {
        return [
            self::DAY_OF_WEEK_FRI,
            self::DAY_OF_WEEK_FRIDAY,
            self::DAY_OF_WEEK_MON,
            self::DAY_OF_WEEK_MONDAY,
            self::DAY_OF_WEEK_SAT,
            self::DAY_OF_WEEK_SATURDAY,
            self::DAY_OF_WEEK_SUN,
            self::DAY_OF_WEEK_SUNDAY,
            self::DAY_OF_WEEK_THU,
            self::DAY_OF_WEEK_THURSDAY,
            self::DAY_OF_WEEK_TUE,
            self::DAY_OF_WEEK_TUESDAY,
            self::DAY_OF_WEEK_WED,
            self::DAY_OF_WEEK_WEDNESDAY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHourOfDayAllowableValues()
    {
        return [
            self::HOUR_OF_DAY__0_00,
            self::HOUR_OF_DAY__10_00,
            self::HOUR_OF_DAY__11_00,
            self::HOUR_OF_DAY__12_00,
            self::HOUR_OF_DAY__13_00,
            self::HOUR_OF_DAY__14_00,
            self::HOUR_OF_DAY__15_00,
            self::HOUR_OF_DAY__16_00,
            self::HOUR_OF_DAY__17_00,
            self::HOUR_OF_DAY__18_00,
            self::HOUR_OF_DAY__19_00,
            self::HOUR_OF_DAY__1_00,
            self::HOUR_OF_DAY__20_00,
            self::HOUR_OF_DAY__21_00,
            self::HOUR_OF_DAY__22_00,
            self::HOUR_OF_DAY__23_00,
            self::HOUR_OF_DAY__2_00,
            self::HOUR_OF_DAY__3_00,
            self::HOUR_OF_DAY__4_00,
            self::HOUR_OF_DAY__5_00,
            self::HOUR_OF_DAY__6_00,
            self::HOUR_OF_DAY__7_00,
            self::HOUR_OF_DAY__8_00,
            self::HOUR_OF_DAY__9_00,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('day_of_week', $data ?? [], null);
        $this->setIfExists('hour_of_day', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDayOfWeekAllowableValues();
        if (!is_null($this->container['day_of_week']) && !in_array($this->container['day_of_week'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'day_of_week', must be one of '%s'",
                $this->container['day_of_week'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHourOfDayAllowableValues();
        if (!is_null($this->container['hour_of_day']) && !in_array($this->container['hour_of_day'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'hour_of_day', must be one of '%s'",
                $this->container['hour_of_day'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets day_of_week
     *
     * @return string|null
     */
    public function getDayOfWeek()
    {
        return $this->container['day_of_week'];
    }

    /**
     * Sets day_of_week
     *
     * @param string|null $day_of_week Day of the week
     *
     * @return self
     */
    public function setDayOfWeek($day_of_week)
    {
        if (is_null($day_of_week)) {
            throw new \InvalidArgumentException('non-nullable day_of_week cannot be null');
        }
        $allowedValues = $this->getDayOfWeekAllowableValues();
        if (!in_array($day_of_week, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'day_of_week', must be one of '%s'",
                    $day_of_week,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['day_of_week'] = $day_of_week;

        return $this;
    }

    /**
     * Gets hour_of_day
     *
     * @return string|null
     */
    public function getHourOfDay()
    {
        return $this->container['hour_of_day'];
    }

    /**
     * Sets hour_of_day
     *
     * @param string|null $hour_of_day Hour of the day
     *
     * @return self
     */
    public function setHourOfDay($hour_of_day)
    {
        if (is_null($hour_of_day)) {
            throw new \InvalidArgumentException('non-nullable hour_of_day cannot be null');
        }
        $allowedValues = $this->getHourOfDayAllowableValues();
        if (!in_array($hour_of_day, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'hour_of_day', must be one of '%s'",
                    $hour_of_day,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['hour_of_day'] = $hour_of_day;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


