<?php
/**
 * GetNetworkAlertsSettings200ResponseAlertsInnerFilters
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetNetworkAlertsSettings200ResponseAlertsInnerFilters Class Doc Comment
 *
 * @category Class
 * @description A hash of specific configuration data for the alert. Only filters specific to the alert will be updated.
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetNetworkAlertsSettings200ResponseAlertsInnerFilters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getNetworkAlertsSettings_200_response_alerts_inner_filters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'conditions' => '\Meraki\Model\GetNetworkAlertsSettings200ResponseAlertsInnerFiltersConditionsInner[]',
        'failure_type' => 'string',
        'lookback_window' => 'int',
        'min_duration' => 'int',
        'name' => 'string',
        'period' => 'int',
        'priority' => 'string',
        'regex' => 'string',
        'selector' => 'string',
        'serials' => 'string[]',
        'ssid_num' => 'int',
        'tag' => 'string',
        'threshold' => 'int',
        'timeout' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'conditions' => null,
        'failure_type' => null,
        'lookback_window' => null,
        'min_duration' => null,
        'name' => null,
        'period' => null,
        'priority' => null,
        'regex' => null,
        'selector' => null,
        'serials' => null,
        'ssid_num' => null,
        'tag' => null,
        'threshold' => null,
        'timeout' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'conditions' => false,
        'failure_type' => false,
        'lookback_window' => false,
        'min_duration' => false,
        'name' => false,
        'period' => false,
        'priority' => false,
        'regex' => false,
        'selector' => false,
        'serials' => false,
        'ssid_num' => false,
        'tag' => false,
        'threshold' => false,
        'timeout' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conditions' => 'conditions',
        'failure_type' => 'failureType',
        'lookback_window' => 'lookbackWindow',
        'min_duration' => 'minDuration',
        'name' => 'name',
        'period' => 'period',
        'priority' => 'priority',
        'regex' => 'regex',
        'selector' => 'selector',
        'serials' => 'serials',
        'ssid_num' => 'ssidNum',
        'tag' => 'tag',
        'threshold' => 'threshold',
        'timeout' => 'timeout'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conditions' => 'setConditions',
        'failure_type' => 'setFailureType',
        'lookback_window' => 'setLookbackWindow',
        'min_duration' => 'setMinDuration',
        'name' => 'setName',
        'period' => 'setPeriod',
        'priority' => 'setPriority',
        'regex' => 'setRegex',
        'selector' => 'setSelector',
        'serials' => 'setSerials',
        'ssid_num' => 'setSsidNum',
        'tag' => 'setTag',
        'threshold' => 'setThreshold',
        'timeout' => 'setTimeout'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conditions' => 'getConditions',
        'failure_type' => 'getFailureType',
        'lookback_window' => 'getLookbackWindow',
        'min_duration' => 'getMinDuration',
        'name' => 'getName',
        'period' => 'getPeriod',
        'priority' => 'getPriority',
        'regex' => 'getRegex',
        'selector' => 'getSelector',
        'serials' => 'getSerials',
        'ssid_num' => 'getSsidNum',
        'tag' => 'getTag',
        'threshold' => 'getThreshold',
        'timeout' => 'getTimeout'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('conditions', $data ?? [], null);
        $this->setIfExists('failure_type', $data ?? [], null);
        $this->setIfExists('lookback_window', $data ?? [], null);
        $this->setIfExists('min_duration', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('period', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('regex', $data ?? [], null);
        $this->setIfExists('selector', $data ?? [], null);
        $this->setIfExists('serials', $data ?? [], null);
        $this->setIfExists('ssid_num', $data ?? [], null);
        $this->setIfExists('tag', $data ?? [], null);
        $this->setIfExists('threshold', $data ?? [], null);
        $this->setIfExists('timeout', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets conditions
     *
     * @return \Meraki\Model\GetNetworkAlertsSettings200ResponseAlertsInnerFiltersConditionsInner[]|null
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \Meraki\Model\GetNetworkAlertsSettings200ResponseAlertsInnerFiltersConditionsInner[]|null $conditions Conditions
     *
     * @return self
     */
    public function setConditions($conditions)
    {
        if (is_null($conditions)) {
            throw new \InvalidArgumentException('non-nullable conditions cannot be null');
        }
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets failure_type
     *
     * @return string|null
     */
    public function getFailureType()
    {
        return $this->container['failure_type'];
    }

    /**
     * Sets failure_type
     *
     * @param string|null $failure_type Failure Type
     *
     * @return self
     */
    public function setFailureType($failure_type)
    {
        if (is_null($failure_type)) {
            throw new \InvalidArgumentException('non-nullable failure_type cannot be null');
        }
        $this->container['failure_type'] = $failure_type;

        return $this;
    }

    /**
     * Gets lookback_window
     *
     * @return int|null
     */
    public function getLookbackWindow()
    {
        return $this->container['lookback_window'];
    }

    /**
     * Sets lookback_window
     *
     * @param int|null $lookback_window Loopback Window (in sec)
     *
     * @return self
     */
    public function setLookbackWindow($lookback_window)
    {
        if (is_null($lookback_window)) {
            throw new \InvalidArgumentException('non-nullable lookback_window cannot be null');
        }
        $this->container['lookback_window'] = $lookback_window;

        return $this;
    }

    /**
     * Gets min_duration
     *
     * @return int|null
     */
    public function getMinDuration()
    {
        return $this->container['min_duration'];
    }

    /**
     * Sets min_duration
     *
     * @param int|null $min_duration Min Duration
     *
     * @return self
     */
    public function setMinDuration($min_duration)
    {
        if (is_null($min_duration)) {
            throw new \InvalidArgumentException('non-nullable min_duration cannot be null');
        }
        $this->container['min_duration'] = $min_duration;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets period
     *
     * @return int|null
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param int|null $period Period
     *
     * @return self
     */
    public function setPeriod($period)
    {
        if (is_null($period)) {
            throw new \InvalidArgumentException('non-nullable period cannot be null');
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return string|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param string|null $priority Priority
     *
     * @return self
     */
    public function setPriority($priority)
    {
        if (is_null($priority)) {
            throw new \InvalidArgumentException('non-nullable priority cannot be null');
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets regex
     *
     * @return string|null
     */
    public function getRegex()
    {
        return $this->container['regex'];
    }

    /**
     * Sets regex
     *
     * @param string|null $regex Regex
     *
     * @return self
     */
    public function setRegex($regex)
    {
        if (is_null($regex)) {
            throw new \InvalidArgumentException('non-nullable regex cannot be null');
        }
        $this->container['regex'] = $regex;

        return $this;
    }

    /**
     * Gets selector
     *
     * @return string|null
     */
    public function getSelector()
    {
        return $this->container['selector'];
    }

    /**
     * Sets selector
     *
     * @param string|null $selector Selector
     *
     * @return self
     */
    public function setSelector($selector)
    {
        if (is_null($selector)) {
            throw new \InvalidArgumentException('non-nullable selector cannot be null');
        }
        $this->container['selector'] = $selector;

        return $this;
    }

    /**
     * Gets serials
     *
     * @return string[]|null
     */
    public function getSerials()
    {
        return $this->container['serials'];
    }

    /**
     * Sets serials
     *
     * @param string[]|null $serials Serials
     *
     * @return self
     */
    public function setSerials($serials)
    {
        if (is_null($serials)) {
            throw new \InvalidArgumentException('non-nullable serials cannot be null');
        }
        $this->container['serials'] = $serials;

        return $this;
    }

    /**
     * Gets ssid_num
     *
     * @return int|null
     */
    public function getSsidNum()
    {
        return $this->container['ssid_num'];
    }

    /**
     * Sets ssid_num
     *
     * @param int|null $ssid_num SSID Number
     *
     * @return self
     */
    public function setSsidNum($ssid_num)
    {
        if (is_null($ssid_num)) {
            throw new \InvalidArgumentException('non-nullable ssid_num cannot be null');
        }
        $this->container['ssid_num'] = $ssid_num;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string|null
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string|null $tag Tag
     *
     * @return self
     */
    public function setTag($tag)
    {
        if (is_null($tag)) {
            throw new \InvalidArgumentException('non-nullable tag cannot be null');
        }
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets threshold
     *
     * @return int|null
     */
    public function getThreshold()
    {
        return $this->container['threshold'];
    }

    /**
     * Sets threshold
     *
     * @param int|null $threshold Threshold
     *
     * @return self
     */
    public function setThreshold($threshold)
    {
        if (is_null($threshold)) {
            throw new \InvalidArgumentException('non-nullable threshold cannot be null');
        }
        $this->container['threshold'] = $threshold;

        return $this;
    }

    /**
     * Gets timeout
     *
     * @return int|null
     */
    public function getTimeout()
    {
        return $this->container['timeout'];
    }

    /**
     * Sets timeout
     *
     * @param int|null $timeout Timeout
     *
     * @return self
     */
    public function setTimeout($timeout)
    {
        if (is_null($timeout)) {
            throw new \InvalidArgumentException('non-nullable timeout cannot be null');
        }
        $this->container['timeout'] = $timeout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


