<?php
/**
 * GetDeviceClients200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetDeviceClients200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetDeviceClients200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getDeviceClients_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'mac' => 'string',
        'description' => 'string',
        'mdns_name' => 'string',
        'dhcp_hostname' => 'string',
        'user' => 'string',
        'ip' => 'string',
        'vlan' => 'string',
        'named_vlan' => 'string',
        'switchport' => 'string',
        'adaptive_policy_group' => 'string',
        'usage' => '\Meraki\Model\GetDeviceClients200ResponseInnerUsage'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'mac' => null,
        'description' => null,
        'mdns_name' => null,
        'dhcp_hostname' => null,
        'user' => null,
        'ip' => null,
        'vlan' => null,
        'named_vlan' => null,
        'switchport' => null,
        'adaptive_policy_group' => null,
        'usage' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'mac' => false,
        'description' => false,
        'mdns_name' => false,
        'dhcp_hostname' => false,
        'user' => false,
        'ip' => false,
        'vlan' => false,
        'named_vlan' => false,
        'switchport' => false,
        'adaptive_policy_group' => false,
        'usage' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'mac' => 'mac',
        'description' => 'description',
        'mdns_name' => 'mdnsName',
        'dhcp_hostname' => 'dhcpHostname',
        'user' => 'user',
        'ip' => 'ip',
        'vlan' => 'vlan',
        'named_vlan' => 'namedVlan',
        'switchport' => 'switchport',
        'adaptive_policy_group' => 'adaptivePolicyGroup',
        'usage' => 'usage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'mac' => 'setMac',
        'description' => 'setDescription',
        'mdns_name' => 'setMdnsName',
        'dhcp_hostname' => 'setDhcpHostname',
        'user' => 'setUser',
        'ip' => 'setIp',
        'vlan' => 'setVlan',
        'named_vlan' => 'setNamedVlan',
        'switchport' => 'setSwitchport',
        'adaptive_policy_group' => 'setAdaptivePolicyGroup',
        'usage' => 'setUsage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'mac' => 'getMac',
        'description' => 'getDescription',
        'mdns_name' => 'getMdnsName',
        'dhcp_hostname' => 'getDhcpHostname',
        'user' => 'getUser',
        'ip' => 'getIp',
        'vlan' => 'getVlan',
        'named_vlan' => 'getNamedVlan',
        'switchport' => 'getSwitchport',
        'adaptive_policy_group' => 'getAdaptivePolicyGroup',
        'usage' => 'getUsage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('mac', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('mdns_name', $data ?? [], null);
        $this->setIfExists('dhcp_hostname', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('ip', $data ?? [], null);
        $this->setIfExists('vlan', $data ?? [], null);
        $this->setIfExists('named_vlan', $data ?? [], null);
        $this->setIfExists('switchport', $data ?? [], null);
        $this->setIfExists('adaptive_policy_group', $data ?? [], null);
        $this->setIfExists('usage', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The ID of the client
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets mac
     *
     * @return string|null
     */
    public function getMac()
    {
        return $this->container['mac'];
    }

    /**
     * Sets mac
     *
     * @param string|null $mac The MAC address of the client
     *
     * @return self
     */
    public function setMac($mac)
    {
        if (is_null($mac)) {
            throw new \InvalidArgumentException('non-nullable mac cannot be null');
        }
        $this->container['mac'] = $mac;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Short description of the client
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets mdns_name
     *
     * @return string|null
     */
    public function getMdnsName()
    {
        return $this->container['mdns_name'];
    }

    /**
     * Sets mdns_name
     *
     * @param string|null $mdns_name The client's MDNS name
     *
     * @return self
     */
    public function setMdnsName($mdns_name)
    {
        if (is_null($mdns_name)) {
            throw new \InvalidArgumentException('non-nullable mdns_name cannot be null');
        }
        $this->container['mdns_name'] = $mdns_name;

        return $this;
    }

    /**
     * Gets dhcp_hostname
     *
     * @return string|null
     */
    public function getDhcpHostname()
    {
        return $this->container['dhcp_hostname'];
    }

    /**
     * Sets dhcp_hostname
     *
     * @param string|null $dhcp_hostname The client's DHCP hostname
     *
     * @return self
     */
    public function setDhcpHostname($dhcp_hostname)
    {
        if (is_null($dhcp_hostname)) {
            throw new \InvalidArgumentException('non-nullable dhcp_hostname cannot be null');
        }
        $this->container['dhcp_hostname'] = $dhcp_hostname;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user The client user's name
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip The IP address of the client
     *
     * @return self
     */
    public function setIp($ip)
    {
        if (is_null($ip)) {
            throw new \InvalidArgumentException('non-nullable ip cannot be null');
        }
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets vlan
     *
     * @return string|null
     */
    public function getVlan()
    {
        return $this->container['vlan'];
    }

    /**
     * Sets vlan
     *
     * @param string|null $vlan The client-assigned name of the VLAN the client is connected to
     *
     * @return self
     */
    public function setVlan($vlan)
    {
        if (is_null($vlan)) {
            throw new \InvalidArgumentException('non-nullable vlan cannot be null');
        }
        $this->container['vlan'] = $vlan;

        return $this;
    }

    /**
     * Gets named_vlan
     *
     * @return string|null
     */
    public function getNamedVlan()
    {
        return $this->container['named_vlan'];
    }

    /**
     * Sets named_vlan
     *
     * @param string|null $named_vlan The owner-assigned name of the VLAN the client is connected to
     *
     * @return self
     */
    public function setNamedVlan($named_vlan)
    {
        if (is_null($named_vlan)) {
            throw new \InvalidArgumentException('non-nullable named_vlan cannot be null');
        }
        $this->container['named_vlan'] = $named_vlan;

        return $this;
    }

    /**
     * Gets switchport
     *
     * @return string|null
     */
    public function getSwitchport()
    {
        return $this->container['switchport'];
    }

    /**
     * Sets switchport
     *
     * @param string|null $switchport The name of the switchport with clients on it, if the device is a switch
     *
     * @return self
     */
    public function setSwitchport($switchport)
    {
        if (is_null($switchport)) {
            throw new \InvalidArgumentException('non-nullable switchport cannot be null');
        }
        $this->container['switchport'] = $switchport;

        return $this;
    }

    /**
     * Gets adaptive_policy_group
     *
     * @return string|null
     */
    public function getAdaptivePolicyGroup()
    {
        return $this->container['adaptive_policy_group'];
    }

    /**
     * Sets adaptive_policy_group
     *
     * @param string|null $adaptive_policy_group A description of the adaptive policy group
     *
     * @return self
     */
    public function setAdaptivePolicyGroup($adaptive_policy_group)
    {
        if (is_null($adaptive_policy_group)) {
            throw new \InvalidArgumentException('non-nullable adaptive_policy_group cannot be null');
        }
        $this->container['adaptive_policy_group'] = $adaptive_policy_group;

        return $this;
    }

    /**
     * Gets usage
     *
     * @return \Meraki\Model\GetDeviceClients200ResponseInnerUsage|null
     */
    public function getUsage()
    {
        return $this->container['usage'];
    }

    /**
     * Sets usage
     *
     * @param \Meraki\Model\GetDeviceClients200ResponseInnerUsage|null $usage usage
     *
     * @return self
     */
    public function setUsage($usage)
    {
        if (is_null($usage)) {
            throw new \InvalidArgumentException('non-nullable usage cannot be null');
        }
        $this->container['usage'] = $usage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


