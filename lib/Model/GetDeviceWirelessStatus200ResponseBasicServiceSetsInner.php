<?php
/**
 * GetDeviceWirelessStatus200ResponseBasicServiceSetsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetDeviceWirelessStatus200ResponseBasicServiceSetsInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetDeviceWirelessStatus200ResponseBasicServiceSetsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getDeviceWirelessStatus_200_response_basicServiceSets_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ssid_name' => 'string',
        'ssid_number' => 'int',
        'enabled' => 'bool',
        'band' => 'string',
        'bssid' => 'string',
        'channel' => 'int',
        'channel_width' => 'string',
        'power' => 'string',
        'visible' => 'bool',
        'broadcasting' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ssid_name' => null,
        'ssid_number' => null,
        'enabled' => null,
        'band' => null,
        'bssid' => null,
        'channel' => null,
        'channel_width' => null,
        'power' => null,
        'visible' => null,
        'broadcasting' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ssid_name' => false,
        'ssid_number' => false,
        'enabled' => false,
        'band' => false,
        'bssid' => false,
        'channel' => false,
        'channel_width' => false,
        'power' => false,
        'visible' => false,
        'broadcasting' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ssid_name' => 'ssidName',
        'ssid_number' => 'ssidNumber',
        'enabled' => 'enabled',
        'band' => 'band',
        'bssid' => 'bssid',
        'channel' => 'channel',
        'channel_width' => 'channelWidth',
        'power' => 'power',
        'visible' => 'visible',
        'broadcasting' => 'broadcasting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ssid_name' => 'setSsidName',
        'ssid_number' => 'setSsidNumber',
        'enabled' => 'setEnabled',
        'band' => 'setBand',
        'bssid' => 'setBssid',
        'channel' => 'setChannel',
        'channel_width' => 'setChannelWidth',
        'power' => 'setPower',
        'visible' => 'setVisible',
        'broadcasting' => 'setBroadcasting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ssid_name' => 'getSsidName',
        'ssid_number' => 'getSsidNumber',
        'enabled' => 'getEnabled',
        'band' => 'getBand',
        'bssid' => 'getBssid',
        'channel' => 'getChannel',
        'channel_width' => 'getChannelWidth',
        'power' => 'getPower',
        'visible' => 'getVisible',
        'broadcasting' => 'getBroadcasting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('ssid_name', $data ?? [], null);
        $this->setIfExists('ssid_number', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('band', $data ?? [], null);
        $this->setIfExists('bssid', $data ?? [], null);
        $this->setIfExists('channel', $data ?? [], null);
        $this->setIfExists('channel_width', $data ?? [], null);
        $this->setIfExists('power', $data ?? [], null);
        $this->setIfExists('visible', $data ?? [], null);
        $this->setIfExists('broadcasting', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ssid_name
     *
     * @return string|null
     */
    public function getSsidName()
    {
        return $this->container['ssid_name'];
    }

    /**
     * Sets ssid_name
     *
     * @param string|null $ssid_name Name of wireless network
     *
     * @return self
     */
    public function setSsidName($ssid_name)
    {
        if (is_null($ssid_name)) {
            throw new \InvalidArgumentException('non-nullable ssid_name cannot be null');
        }
        $this->container['ssid_name'] = $ssid_name;

        return $this;
    }

    /**
     * Gets ssid_number
     *
     * @return int|null
     */
    public function getSsidNumber()
    {
        return $this->container['ssid_number'];
    }

    /**
     * Sets ssid_number
     *
     * @param int|null $ssid_number Unique identifier of wireless network
     *
     * @return self
     */
    public function setSsidNumber($ssid_number)
    {
        if (is_null($ssid_number)) {
            throw new \InvalidArgumentException('non-nullable ssid_number cannot be null');
        }
        $this->container['ssid_number'] = $ssid_number;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled Status of wireless network
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets band
     *
     * @return string|null
     */
    public function getBand()
    {
        return $this->container['band'];
    }

    /**
     * Sets band
     *
     * @param string|null $band Frequency range used by wireless network
     *
     * @return self
     */
    public function setBand($band)
    {
        if (is_null($band)) {
            throw new \InvalidArgumentException('non-nullable band cannot be null');
        }
        $this->container['band'] = $band;

        return $this;
    }

    /**
     * Gets bssid
     *
     * @return string|null
     */
    public function getBssid()
    {
        return $this->container['bssid'];
    }

    /**
     * Sets bssid
     *
     * @param string|null $bssid Unique identifier of wireless access point
     *
     * @return self
     */
    public function setBssid($bssid)
    {
        if (is_null($bssid)) {
            throw new \InvalidArgumentException('non-nullable bssid cannot be null');
        }
        $this->container['bssid'] = $bssid;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return int|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param int|null $channel Frequency channel used by wireless network
     *
     * @return self
     */
    public function setChannel($channel)
    {
        if (is_null($channel)) {
            throw new \InvalidArgumentException('non-nullable channel cannot be null');
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets channel_width
     *
     * @return string|null
     */
    public function getChannelWidth()
    {
        return $this->container['channel_width'];
    }

    /**
     * Sets channel_width
     *
     * @param string|null $channel_width Width of frequency channel used by wireless network
     *
     * @return self
     */
    public function setChannelWidth($channel_width)
    {
        if (is_null($channel_width)) {
            throw new \InvalidArgumentException('non-nullable channel_width cannot be null');
        }
        $this->container['channel_width'] = $channel_width;

        return $this;
    }

    /**
     * Gets power
     *
     * @return string|null
     */
    public function getPower()
    {
        return $this->container['power'];
    }

    /**
     * Sets power
     *
     * @param string|null $power Strength of wireless signal
     *
     * @return self
     */
    public function setPower($power)
    {
        if (is_null($power)) {
            throw new \InvalidArgumentException('non-nullable power cannot be null');
        }
        $this->container['power'] = $power;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return bool|null
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param bool|null $visible Whether the SSID is advertised or hidden
     *
     * @return self
     */
    public function setVisible($visible)
    {
        if (is_null($visible)) {
            throw new \InvalidArgumentException('non-nullable visible cannot be null');
        }
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets broadcasting
     *
     * @return bool|null
     */
    public function getBroadcasting()
    {
        return $this->container['broadcasting'];
    }

    /**
     * Sets broadcasting
     *
     * @param bool|null $broadcasting Whether the SSID is broadcasting based on an availability schedule
     *
     * @return self
     */
    public function setBroadcasting($broadcasting)
    {
        if (is_null($broadcasting)) {
            throw new \InvalidArgumentException('non-nullable broadcasting cannot be null');
        }
        $this->container['broadcasting'] = $broadcasting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


