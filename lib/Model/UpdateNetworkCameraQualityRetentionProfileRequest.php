<?php
/**
 * UpdateNetworkCameraQualityRetentionProfileRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * UpdateNetworkCameraQualityRetentionProfileRequest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateNetworkCameraQualityRetentionProfileRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'updateNetworkCameraQualityRetentionProfile_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'motion_based_retention_enabled' => 'bool',
        'restricted_bandwidth_mode_enabled' => 'bool',
        'audio_recording_enabled' => 'bool',
        'cloud_archive_enabled' => 'bool',
        'motion_detector_version' => 'int',
        'smart_retention' => '\Meraki\Model\CreateNetworkCameraQualityRetentionProfileRequestSmartRetention',
        'schedule_id' => 'string',
        'max_retention_days' => 'int',
        'video_settings' => '\Meraki\Model\CreateNetworkCameraQualityRetentionProfileRequestVideoSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'motion_based_retention_enabled' => null,
        'restricted_bandwidth_mode_enabled' => null,
        'audio_recording_enabled' => null,
        'cloud_archive_enabled' => null,
        'motion_detector_version' => null,
        'smart_retention' => null,
        'schedule_id' => null,
        'max_retention_days' => null,
        'video_settings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'motion_based_retention_enabled' => false,
        'restricted_bandwidth_mode_enabled' => false,
        'audio_recording_enabled' => false,
        'cloud_archive_enabled' => false,
        'motion_detector_version' => false,
        'smart_retention' => false,
        'schedule_id' => false,
        'max_retention_days' => false,
        'video_settings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'motion_based_retention_enabled' => 'motionBasedRetentionEnabled',
        'restricted_bandwidth_mode_enabled' => 'restrictedBandwidthModeEnabled',
        'audio_recording_enabled' => 'audioRecordingEnabled',
        'cloud_archive_enabled' => 'cloudArchiveEnabled',
        'motion_detector_version' => 'motionDetectorVersion',
        'smart_retention' => 'smartRetention',
        'schedule_id' => 'scheduleId',
        'max_retention_days' => 'maxRetentionDays',
        'video_settings' => 'videoSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'motion_based_retention_enabled' => 'setMotionBasedRetentionEnabled',
        'restricted_bandwidth_mode_enabled' => 'setRestrictedBandwidthModeEnabled',
        'audio_recording_enabled' => 'setAudioRecordingEnabled',
        'cloud_archive_enabled' => 'setCloudArchiveEnabled',
        'motion_detector_version' => 'setMotionDetectorVersion',
        'smart_retention' => 'setSmartRetention',
        'schedule_id' => 'setScheduleId',
        'max_retention_days' => 'setMaxRetentionDays',
        'video_settings' => 'setVideoSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'motion_based_retention_enabled' => 'getMotionBasedRetentionEnabled',
        'restricted_bandwidth_mode_enabled' => 'getRestrictedBandwidthModeEnabled',
        'audio_recording_enabled' => 'getAudioRecordingEnabled',
        'cloud_archive_enabled' => 'getCloudArchiveEnabled',
        'motion_detector_version' => 'getMotionDetectorVersion',
        'smart_retention' => 'getSmartRetention',
        'schedule_id' => 'getScheduleId',
        'max_retention_days' => 'getMaxRetentionDays',
        'video_settings' => 'getVideoSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('motion_based_retention_enabled', $data ?? [], null);
        $this->setIfExists('restricted_bandwidth_mode_enabled', $data ?? [], null);
        $this->setIfExists('audio_recording_enabled', $data ?? [], null);
        $this->setIfExists('cloud_archive_enabled', $data ?? [], null);
        $this->setIfExists('motion_detector_version', $data ?? [], null);
        $this->setIfExists('smart_retention', $data ?? [], null);
        $this->setIfExists('schedule_id', $data ?? [], null);
        $this->setIfExists('max_retention_days', $data ?? [], null);
        $this->setIfExists('video_settings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the new profile. Must be unique.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets motion_based_retention_enabled
     *
     * @return bool|null
     */
    public function getMotionBasedRetentionEnabled()
    {
        return $this->container['motion_based_retention_enabled'];
    }

    /**
     * Sets motion_based_retention_enabled
     *
     * @param bool|null $motion_based_retention_enabled Deletes footage older than 3 days in which no motion was detected. Can be either true or false. Defaults to false. This setting does not apply to MV2 cameras.
     *
     * @return self
     */
    public function setMotionBasedRetentionEnabled($motion_based_retention_enabled)
    {
        if (is_null($motion_based_retention_enabled)) {
            throw new \InvalidArgumentException('non-nullable motion_based_retention_enabled cannot be null');
        }
        $this->container['motion_based_retention_enabled'] = $motion_based_retention_enabled;

        return $this;
    }

    /**
     * Gets restricted_bandwidth_mode_enabled
     *
     * @return bool|null
     */
    public function getRestrictedBandwidthModeEnabled()
    {
        return $this->container['restricted_bandwidth_mode_enabled'];
    }

    /**
     * Sets restricted_bandwidth_mode_enabled
     *
     * @param bool|null $restricted_bandwidth_mode_enabled Disable features that require additional bandwidth such as Motion Recap. Can be either true or false. Defaults to false. This setting does not apply to MV2 cameras.
     *
     * @return self
     */
    public function setRestrictedBandwidthModeEnabled($restricted_bandwidth_mode_enabled)
    {
        if (is_null($restricted_bandwidth_mode_enabled)) {
            throw new \InvalidArgumentException('non-nullable restricted_bandwidth_mode_enabled cannot be null');
        }
        $this->container['restricted_bandwidth_mode_enabled'] = $restricted_bandwidth_mode_enabled;

        return $this;
    }

    /**
     * Gets audio_recording_enabled
     *
     * @return bool|null
     */
    public function getAudioRecordingEnabled()
    {
        return $this->container['audio_recording_enabled'];
    }

    /**
     * Sets audio_recording_enabled
     *
     * @param bool|null $audio_recording_enabled Whether or not to record audio. Can be either true or false. Defaults to false.
     *
     * @return self
     */
    public function setAudioRecordingEnabled($audio_recording_enabled)
    {
        if (is_null($audio_recording_enabled)) {
            throw new \InvalidArgumentException('non-nullable audio_recording_enabled cannot be null');
        }
        $this->container['audio_recording_enabled'] = $audio_recording_enabled;

        return $this;
    }

    /**
     * Gets cloud_archive_enabled
     *
     * @return bool|null
     */
    public function getCloudArchiveEnabled()
    {
        return $this->container['cloud_archive_enabled'];
    }

    /**
     * Sets cloud_archive_enabled
     *
     * @param bool|null $cloud_archive_enabled Create redundant video backup using Cloud Archive. Can be either true or false. Defaults to false.
     *
     * @return self
     */
    public function setCloudArchiveEnabled($cloud_archive_enabled)
    {
        if (is_null($cloud_archive_enabled)) {
            throw new \InvalidArgumentException('non-nullable cloud_archive_enabled cannot be null');
        }
        $this->container['cloud_archive_enabled'] = $cloud_archive_enabled;

        return $this;
    }

    /**
     * Gets motion_detector_version
     *
     * @return int|null
     */
    public function getMotionDetectorVersion()
    {
        return $this->container['motion_detector_version'];
    }

    /**
     * Sets motion_detector_version
     *
     * @param int|null $motion_detector_version The version of the motion detector that will be used by the camera. Only applies to Gen 2 cameras. Defaults to v2.
     *
     * @return self
     */
    public function setMotionDetectorVersion($motion_detector_version)
    {
        if (is_null($motion_detector_version)) {
            throw new \InvalidArgumentException('non-nullable motion_detector_version cannot be null');
        }
        $this->container['motion_detector_version'] = $motion_detector_version;

        return $this;
    }

    /**
     * Gets smart_retention
     *
     * @return \Meraki\Model\CreateNetworkCameraQualityRetentionProfileRequestSmartRetention|null
     */
    public function getSmartRetention()
    {
        return $this->container['smart_retention'];
    }

    /**
     * Sets smart_retention
     *
     * @param \Meraki\Model\CreateNetworkCameraQualityRetentionProfileRequestSmartRetention|null $smart_retention smart_retention
     *
     * @return self
     */
    public function setSmartRetention($smart_retention)
    {
        if (is_null($smart_retention)) {
            throw new \InvalidArgumentException('non-nullable smart_retention cannot be null');
        }
        $this->container['smart_retention'] = $smart_retention;

        return $this;
    }

    /**
     * Gets schedule_id
     *
     * @return string|null
     */
    public function getScheduleId()
    {
        return $this->container['schedule_id'];
    }

    /**
     * Sets schedule_id
     *
     * @param string|null $schedule_id Schedule for which this camera will record video, or 'null' to always record.
     *
     * @return self
     */
    public function setScheduleId($schedule_id)
    {
        if (is_null($schedule_id)) {
            throw new \InvalidArgumentException('non-nullable schedule_id cannot be null');
        }
        $this->container['schedule_id'] = $schedule_id;

        return $this;
    }

    /**
     * Gets max_retention_days
     *
     * @return int|null
     */
    public function getMaxRetentionDays()
    {
        return $this->container['max_retention_days'];
    }

    /**
     * Sets max_retention_days
     *
     * @param int|null $max_retention_days The maximum number of days for which the data will be stored, or 'null' to keep data until storage space runs out. If the former, it can be in the range of one to ninety days.
     *
     * @return self
     */
    public function setMaxRetentionDays($max_retention_days)
    {
        if (is_null($max_retention_days)) {
            throw new \InvalidArgumentException('non-nullable max_retention_days cannot be null');
        }
        $this->container['max_retention_days'] = $max_retention_days;

        return $this;
    }

    /**
     * Gets video_settings
     *
     * @return \Meraki\Model\CreateNetworkCameraQualityRetentionProfileRequestVideoSettings|null
     */
    public function getVideoSettings()
    {
        return $this->container['video_settings'];
    }

    /**
     * Sets video_settings
     *
     * @param \Meraki\Model\CreateNetworkCameraQualityRetentionProfileRequestVideoSettings|null $video_settings video_settings
     *
     * @return self
     */
    public function setVideoSettings($video_settings)
    {
        if (is_null($video_settings)) {
            throw new \InvalidArgumentException('non-nullable video_settings cannot be null');
        }
        $this->container['video_settings'] = $video_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


