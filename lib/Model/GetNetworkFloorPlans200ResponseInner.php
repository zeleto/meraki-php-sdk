<?php
/**
 * GetNetworkFloorPlans200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetNetworkFloorPlans200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetNetworkFloorPlans200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getNetworkFloorPlans_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'floor_plan_id' => 'string',
        'image_url' => 'string',
        'image_url_expires_at' => 'string',
        'image_extension' => 'string',
        'image_md5' => 'string',
        'name' => 'string',
        'devices' => '\Meraki\Model\VmxNetworkDevicesClaim200Response[]',
        'width' => 'float',
        'height' => 'float',
        'center' => '\Meraki\Model\GetNetworkFloorPlans200ResponseInnerCenter',
        'bottom_left_corner' => '\Meraki\Model\GetNetworkFloorPlans200ResponseInnerBottomLeftCorner',
        'bottom_right_corner' => '\Meraki\Model\GetNetworkFloorPlans200ResponseInnerBottomRightCorner',
        'top_left_corner' => '\Meraki\Model\GetNetworkFloorPlans200ResponseInnerTopLeftCorner',
        'top_right_corner' => '\Meraki\Model\GetNetworkFloorPlans200ResponseInnerTopRightCorner',
        'floor_number' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'floor_plan_id' => null,
        'image_url' => null,
        'image_url_expires_at' => null,
        'image_extension' => null,
        'image_md5' => 'byte',
        'name' => null,
        'devices' => null,
        'width' => 'float',
        'height' => 'float',
        'center' => null,
        'bottom_left_corner' => null,
        'bottom_right_corner' => null,
        'top_left_corner' => null,
        'top_right_corner' => null,
        'floor_number' => 'float'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'floor_plan_id' => false,
        'image_url' => false,
        'image_url_expires_at' => false,
        'image_extension' => false,
        'image_md5' => false,
        'name' => false,
        'devices' => false,
        'width' => false,
        'height' => false,
        'center' => false,
        'bottom_left_corner' => false,
        'bottom_right_corner' => false,
        'top_left_corner' => false,
        'top_right_corner' => false,
        'floor_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'floor_plan_id' => 'floorPlanId',
        'image_url' => 'imageUrl',
        'image_url_expires_at' => 'imageUrlExpiresAt',
        'image_extension' => 'imageExtension',
        'image_md5' => 'imageMd5',
        'name' => 'name',
        'devices' => 'devices',
        'width' => 'width',
        'height' => 'height',
        'center' => 'center',
        'bottom_left_corner' => 'bottomLeftCorner',
        'bottom_right_corner' => 'bottomRightCorner',
        'top_left_corner' => 'topLeftCorner',
        'top_right_corner' => 'topRightCorner',
        'floor_number' => 'floorNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'floor_plan_id' => 'setFloorPlanId',
        'image_url' => 'setImageUrl',
        'image_url_expires_at' => 'setImageUrlExpiresAt',
        'image_extension' => 'setImageExtension',
        'image_md5' => 'setImageMd5',
        'name' => 'setName',
        'devices' => 'setDevices',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'center' => 'setCenter',
        'bottom_left_corner' => 'setBottomLeftCorner',
        'bottom_right_corner' => 'setBottomRightCorner',
        'top_left_corner' => 'setTopLeftCorner',
        'top_right_corner' => 'setTopRightCorner',
        'floor_number' => 'setFloorNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'floor_plan_id' => 'getFloorPlanId',
        'image_url' => 'getImageUrl',
        'image_url_expires_at' => 'getImageUrlExpiresAt',
        'image_extension' => 'getImageExtension',
        'image_md5' => 'getImageMd5',
        'name' => 'getName',
        'devices' => 'getDevices',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'center' => 'getCenter',
        'bottom_left_corner' => 'getBottomLeftCorner',
        'bottom_right_corner' => 'getBottomRightCorner',
        'top_left_corner' => 'getTopLeftCorner',
        'top_right_corner' => 'getTopRightCorner',
        'floor_number' => 'getFloorNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('floor_plan_id', $data ?? [], null);
        $this->setIfExists('image_url', $data ?? [], null);
        $this->setIfExists('image_url_expires_at', $data ?? [], null);
        $this->setIfExists('image_extension', $data ?? [], null);
        $this->setIfExists('image_md5', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('devices', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('center', $data ?? [], null);
        $this->setIfExists('bottom_left_corner', $data ?? [], null);
        $this->setIfExists('bottom_right_corner', $data ?? [], null);
        $this->setIfExists('top_left_corner', $data ?? [], null);
        $this->setIfExists('top_right_corner', $data ?? [], null);
        $this->setIfExists('floor_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets floor_plan_id
     *
     * @return string|null
     */
    public function getFloorPlanId()
    {
        return $this->container['floor_plan_id'];
    }

    /**
     * Sets floor_plan_id
     *
     * @param string|null $floor_plan_id Floor plan ID
     *
     * @return self
     */
    public function setFloorPlanId($floor_plan_id)
    {
        if (is_null($floor_plan_id)) {
            throw new \InvalidArgumentException('non-nullable floor_plan_id cannot be null');
        }
        $this->container['floor_plan_id'] = $floor_plan_id;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string|null
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string|null $image_url The url link for the floor plan image.
     *
     * @return self
     */
    public function setImageUrl($image_url)
    {
        if (is_null($image_url)) {
            throw new \InvalidArgumentException('non-nullable image_url cannot be null');
        }
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets image_url_expires_at
     *
     * @return string|null
     */
    public function getImageUrlExpiresAt()
    {
        return $this->container['image_url_expires_at'];
    }

    /**
     * Sets image_url_expires_at
     *
     * @param string|null $image_url_expires_at The time the image url link will expire.
     *
     * @return self
     */
    public function setImageUrlExpiresAt($image_url_expires_at)
    {
        if (is_null($image_url_expires_at)) {
            throw new \InvalidArgumentException('non-nullable image_url_expires_at cannot be null');
        }
        $this->container['image_url_expires_at'] = $image_url_expires_at;

        return $this;
    }

    /**
     * Gets image_extension
     *
     * @return string|null
     */
    public function getImageExtension()
    {
        return $this->container['image_extension'];
    }

    /**
     * Sets image_extension
     *
     * @param string|null $image_extension The format type of the image.
     *
     * @return self
     */
    public function setImageExtension($image_extension)
    {
        if (is_null($image_extension)) {
            throw new \InvalidArgumentException('non-nullable image_extension cannot be null');
        }
        $this->container['image_extension'] = $image_extension;

        return $this;
    }

    /**
     * Gets image_md5
     *
     * @return string|null
     */
    public function getImageMd5()
    {
        return $this->container['image_md5'];
    }

    /**
     * Sets image_md5
     *
     * @param string|null $image_md5 The file contents (a base 64 encoded string) of your new image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in. If you upload a new image, and you do NOT specify any new geolocation fields ('center, 'topLeftCorner', etc), the floor plan will be recentered with no rotation in order to maintain the aspect ratio of your new image.
     *
     * @return self
     */
    public function setImageMd5($image_md5)
    {
        if (is_null($image_md5)) {
            throw new \InvalidArgumentException('non-nullable image_md5 cannot be null');
        }
        $this->container['image_md5'] = $image_md5;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of your floor plan.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets devices
     *
     * @return \Meraki\Model\VmxNetworkDevicesClaim200Response[]|null
     */
    public function getDevices()
    {
        return $this->container['devices'];
    }

    /**
     * Sets devices
     *
     * @param \Meraki\Model\VmxNetworkDevicesClaim200Response[]|null $devices List of devices for the floorplan
     *
     * @return self
     */
    public function setDevices($devices)
    {
        if (is_null($devices)) {
            throw new \InvalidArgumentException('non-nullable devices cannot be null');
        }
        $this->container['devices'] = $devices;

        return $this;
    }

    /**
     * Gets width
     *
     * @return float|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param float|null $width The width of your floor plan.
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float|null $height The height of your floor plan.
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets center
     *
     * @return \Meraki\Model\GetNetworkFloorPlans200ResponseInnerCenter|null
     */
    public function getCenter()
    {
        return $this->container['center'];
    }

    /**
     * Sets center
     *
     * @param \Meraki\Model\GetNetworkFloorPlans200ResponseInnerCenter|null $center center
     *
     * @return self
     */
    public function setCenter($center)
    {
        if (is_null($center)) {
            throw new \InvalidArgumentException('non-nullable center cannot be null');
        }
        $this->container['center'] = $center;

        return $this;
    }

    /**
     * Gets bottom_left_corner
     *
     * @return \Meraki\Model\GetNetworkFloorPlans200ResponseInnerBottomLeftCorner|null
     */
    public function getBottomLeftCorner()
    {
        return $this->container['bottom_left_corner'];
    }

    /**
     * Sets bottom_left_corner
     *
     * @param \Meraki\Model\GetNetworkFloorPlans200ResponseInnerBottomLeftCorner|null $bottom_left_corner bottom_left_corner
     *
     * @return self
     */
    public function setBottomLeftCorner($bottom_left_corner)
    {
        if (is_null($bottom_left_corner)) {
            throw new \InvalidArgumentException('non-nullable bottom_left_corner cannot be null');
        }
        $this->container['bottom_left_corner'] = $bottom_left_corner;

        return $this;
    }

    /**
     * Gets bottom_right_corner
     *
     * @return \Meraki\Model\GetNetworkFloorPlans200ResponseInnerBottomRightCorner|null
     */
    public function getBottomRightCorner()
    {
        return $this->container['bottom_right_corner'];
    }

    /**
     * Sets bottom_right_corner
     *
     * @param \Meraki\Model\GetNetworkFloorPlans200ResponseInnerBottomRightCorner|null $bottom_right_corner bottom_right_corner
     *
     * @return self
     */
    public function setBottomRightCorner($bottom_right_corner)
    {
        if (is_null($bottom_right_corner)) {
            throw new \InvalidArgumentException('non-nullable bottom_right_corner cannot be null');
        }
        $this->container['bottom_right_corner'] = $bottom_right_corner;

        return $this;
    }

    /**
     * Gets top_left_corner
     *
     * @return \Meraki\Model\GetNetworkFloorPlans200ResponseInnerTopLeftCorner|null
     */
    public function getTopLeftCorner()
    {
        return $this->container['top_left_corner'];
    }

    /**
     * Sets top_left_corner
     *
     * @param \Meraki\Model\GetNetworkFloorPlans200ResponseInnerTopLeftCorner|null $top_left_corner top_left_corner
     *
     * @return self
     */
    public function setTopLeftCorner($top_left_corner)
    {
        if (is_null($top_left_corner)) {
            throw new \InvalidArgumentException('non-nullable top_left_corner cannot be null');
        }
        $this->container['top_left_corner'] = $top_left_corner;

        return $this;
    }

    /**
     * Gets top_right_corner
     *
     * @return \Meraki\Model\GetNetworkFloorPlans200ResponseInnerTopRightCorner|null
     */
    public function getTopRightCorner()
    {
        return $this->container['top_right_corner'];
    }

    /**
     * Sets top_right_corner
     *
     * @param \Meraki\Model\GetNetworkFloorPlans200ResponseInnerTopRightCorner|null $top_right_corner top_right_corner
     *
     * @return self
     */
    public function setTopRightCorner($top_right_corner)
    {
        if (is_null($top_right_corner)) {
            throw new \InvalidArgumentException('non-nullable top_right_corner cannot be null');
        }
        $this->container['top_right_corner'] = $top_right_corner;

        return $this;
    }

    /**
     * Gets floor_number
     *
     * @return float|null
     */
    public function getFloorNumber()
    {
        return $this->container['floor_number'];
    }

    /**
     * Sets floor_number
     *
     * @param float|null $floor_number The floor number of the floor within the building.
     *
     * @return self
     */
    public function setFloorNumber($floor_number)
    {
        if (is_null($floor_number)) {
            throw new \InvalidArgumentException('non-nullable floor_number cannot be null');
        }
        $this->container['floor_number'] = $floor_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


