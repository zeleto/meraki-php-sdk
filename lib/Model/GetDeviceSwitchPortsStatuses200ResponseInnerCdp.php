<?php
/**
 * GetDeviceSwitchPortsStatuses200ResponseInnerCdp
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetDeviceSwitchPortsStatuses200ResponseInnerCdp Class Doc Comment
 *
 * @category Class
 * @description The Cisco Discovery Protocol (CDP) information of the connected device.
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetDeviceSwitchPortsStatuses200ResponseInnerCdp implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getDeviceSwitchPortsStatuses_200_response_inner_cdp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'system_name' => 'string',
        'platform' => 'string',
        'device_id' => 'string',
        'port_id' => 'string',
        'native_vlan' => 'int',
        'address' => 'string',
        'management_address' => 'string',
        'version' => 'string',
        'vtp_management_domain' => 'string',
        'capabilities' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'system_name' => null,
        'platform' => null,
        'device_id' => null,
        'port_id' => null,
        'native_vlan' => null,
        'address' => null,
        'management_address' => null,
        'version' => null,
        'vtp_management_domain' => null,
        'capabilities' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'system_name' => false,
        'platform' => false,
        'device_id' => false,
        'port_id' => false,
        'native_vlan' => false,
        'address' => false,
        'management_address' => false,
        'version' => false,
        'vtp_management_domain' => false,
        'capabilities' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'system_name' => 'systemName',
        'platform' => 'platform',
        'device_id' => 'deviceId',
        'port_id' => 'portId',
        'native_vlan' => 'nativeVlan',
        'address' => 'address',
        'management_address' => 'managementAddress',
        'version' => 'version',
        'vtp_management_domain' => 'vtpManagementDomain',
        'capabilities' => 'capabilities'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'system_name' => 'setSystemName',
        'platform' => 'setPlatform',
        'device_id' => 'setDeviceId',
        'port_id' => 'setPortId',
        'native_vlan' => 'setNativeVlan',
        'address' => 'setAddress',
        'management_address' => 'setManagementAddress',
        'version' => 'setVersion',
        'vtp_management_domain' => 'setVtpManagementDomain',
        'capabilities' => 'setCapabilities'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'system_name' => 'getSystemName',
        'platform' => 'getPlatform',
        'device_id' => 'getDeviceId',
        'port_id' => 'getPortId',
        'native_vlan' => 'getNativeVlan',
        'address' => 'getAddress',
        'management_address' => 'getManagementAddress',
        'version' => 'getVersion',
        'vtp_management_domain' => 'getVtpManagementDomain',
        'capabilities' => 'getCapabilities'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('system_name', $data ?? [], null);
        $this->setIfExists('platform', $data ?? [], null);
        $this->setIfExists('device_id', $data ?? [], null);
        $this->setIfExists('port_id', $data ?? [], null);
        $this->setIfExists('native_vlan', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('management_address', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('vtp_management_domain', $data ?? [], null);
        $this->setIfExists('capabilities', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets system_name
     *
     * @return string|null
     */
    public function getSystemName()
    {
        return $this->container['system_name'];
    }

    /**
     * Sets system_name
     *
     * @param string|null $system_name The system name.
     *
     * @return self
     */
    public function setSystemName($system_name)
    {
        if (is_null($system_name)) {
            throw new \InvalidArgumentException('non-nullable system_name cannot be null');
        }
        $this->container['system_name'] = $system_name;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string|null
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string|null $platform Identifies the hardware platform of the device.
     *
     * @return self
     */
    public function setPlatform($platform)
    {
        if (is_null($platform)) {
            throw new \InvalidArgumentException('non-nullable platform cannot be null');
        }
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return string|null
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param string|null $device_id Identifies the device name.
     *
     * @return self
     */
    public function setDeviceId($device_id)
    {
        if (is_null($device_id)) {
            throw new \InvalidArgumentException('non-nullable device_id cannot be null');
        }
        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets port_id
     *
     * @return string|null
     */
    public function getPortId()
    {
        return $this->container['port_id'];
    }

    /**
     * Sets port_id
     *
     * @param string|null $port_id Identifies the port from which the CDP packet was sent.
     *
     * @return self
     */
    public function setPortId($port_id)
    {
        if (is_null($port_id)) {
            throw new \InvalidArgumentException('non-nullable port_id cannot be null');
        }
        $this->container['port_id'] = $port_id;

        return $this;
    }

    /**
     * Gets native_vlan
     *
     * @return int|null
     */
    public function getNativeVlan()
    {
        return $this->container['native_vlan'];
    }

    /**
     * Sets native_vlan
     *
     * @param int|null $native_vlan Indicates, per interface, the assumed VLAN for untagged packets on the interface.
     *
     * @return self
     */
    public function setNativeVlan($native_vlan)
    {
        if (is_null($native_vlan)) {
            throw new \InvalidArgumentException('non-nullable native_vlan cannot be null');
        }
        $this->container['native_vlan'] = $native_vlan;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address Contains network addresses of both receiving and sending devices.
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets management_address
     *
     * @return string|null
     */
    public function getManagementAddress()
    {
        return $this->container['management_address'];
    }

    /**
     * Sets management_address
     *
     * @param string|null $management_address The device's management IP.
     *
     * @return self
     */
    public function setManagementAddress($management_address)
    {
        if (is_null($management_address)) {
            throw new \InvalidArgumentException('non-nullable management_address cannot be null');
        }
        $this->container['management_address'] = $management_address;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version Contains the device software release information.
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets vtp_management_domain
     *
     * @return string|null
     */
    public function getVtpManagementDomain()
    {
        return $this->container['vtp_management_domain'];
    }

    /**
     * Sets vtp_management_domain
     *
     * @param string|null $vtp_management_domain Advertises the configured VLAN Trunking Protocl (VTP)-management-domain name of the system.
     *
     * @return self
     */
    public function setVtpManagementDomain($vtp_management_domain)
    {
        if (is_null($vtp_management_domain)) {
            throw new \InvalidArgumentException('non-nullable vtp_management_domain cannot be null');
        }
        $this->container['vtp_management_domain'] = $vtp_management_domain;

        return $this;
    }

    /**
     * Gets capabilities
     *
     * @return string|null
     */
    public function getCapabilities()
    {
        return $this->container['capabilities'];
    }

    /**
     * Sets capabilities
     *
     * @param string|null $capabilities Identifies the device type, which indicates the functional capabilities of the device.
     *
     * @return self
     */
    public function setCapabilities($capabilities)
    {
        if (is_null($capabilities)) {
            throw new \InvalidArgumentException('non-nullable capabilities cannot be null');
        }
        $this->container['capabilities'] = $capabilities;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


