<?php
/**
 * GetOrganizationWirelessControllerDevicesInterfacesL2ByDevice200ResponseItemsInnerInterfacesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetOrganizationWirelessControllerDevicesInterfacesL2ByDevice200ResponseItemsInnerInterfacesInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetOrganizationWirelessControllerDevicesInterfacesL2ByDevice200ResponseItemsInnerInterfacesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getOrganizationWirelessControllerDevicesInterfacesL2ByDevice_200_response_items_inner_interfaces_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'enabled' => 'bool',
        'mac' => 'string',
        'status' => 'string',
        'speed' => 'string',
        'is_uplink' => 'bool',
        'vlan' => 'int',
        'is_redundancy_port' => 'bool',
        'link_negotiation' => 'string',
        'channel_group' => '\Meraki\Model\GetOrganizationWirelessControllerDevicesInterfacesL2ByDevice200ResponseItemsInnerInterfacesInnerChannelGroup',
        'module' => '\Meraki\Model\GetOrganizationWirelessControllerDevicesInterfacesL2ByDevice200ResponseItemsInnerInterfacesInnerModule'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'enabled' => null,
        'mac' => null,
        'status' => null,
        'speed' => null,
        'is_uplink' => null,
        'vlan' => null,
        'is_redundancy_port' => null,
        'link_negotiation' => null,
        'channel_group' => null,
        'module' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'description' => false,
        'enabled' => false,
        'mac' => false,
        'status' => false,
        'speed' => false,
        'is_uplink' => false,
        'vlan' => false,
        'is_redundancy_port' => false,
        'link_negotiation' => false,
        'channel_group' => false,
        'module' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'enabled' => 'enabled',
        'mac' => 'mac',
        'status' => 'status',
        'speed' => 'speed',
        'is_uplink' => 'isUplink',
        'vlan' => 'vlan',
        'is_redundancy_port' => 'isRedundancyPort',
        'link_negotiation' => 'linkNegotiation',
        'channel_group' => 'channelGroup',
        'module' => 'module'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'enabled' => 'setEnabled',
        'mac' => 'setMac',
        'status' => 'setStatus',
        'speed' => 'setSpeed',
        'is_uplink' => 'setIsUplink',
        'vlan' => 'setVlan',
        'is_redundancy_port' => 'setIsRedundancyPort',
        'link_negotiation' => 'setLinkNegotiation',
        'channel_group' => 'setChannelGroup',
        'module' => 'setModule'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'enabled' => 'getEnabled',
        'mac' => 'getMac',
        'status' => 'getStatus',
        'speed' => 'getSpeed',
        'is_uplink' => 'getIsUplink',
        'vlan' => 'getVlan',
        'is_redundancy_port' => 'getIsRedundancyPort',
        'link_negotiation' => 'getLinkNegotiation',
        'channel_group' => 'getChannelGroup',
        'module' => 'getModule'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('mac', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('speed', $data ?? [], null);
        $this->setIfExists('is_uplink', $data ?? [], null);
        $this->setIfExists('vlan', $data ?? [], null);
        $this->setIfExists('is_redundancy_port', $data ?? [], null);
        $this->setIfExists('link_negotiation', $data ?? [], null);
        $this->setIfExists('channel_group', $data ?? [], null);
        $this->setIfExists('module', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the wireless LAN controller interface
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the wireless LAN controller interface
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled The status of the wireless LAN controller interface
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets mac
     *
     * @return string|null
     */
    public function getMac()
    {
        return $this->container['mac'];
    }

    /**
     * Sets mac
     *
     * @param string|null $mac The MAC address of the wireless LAN controller interface
     *
     * @return self
     */
    public function setMac($mac)
    {
        if (is_null($mac)) {
            throw new \InvalidArgumentException('non-nullable mac cannot be null');
        }
        $this->container['mac'] = $mac;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the wireless LAN controller interface
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets speed
     *
     * @return string|null
     */
    public function getSpeed()
    {
        return $this->container['speed'];
    }

    /**
     * Sets speed
     *
     * @param string|null $speed The current data transfer rate which the interface is operating at. enum = [1 Gbps, 2 Gbps, 5 Gbps, 10 Gbps, 20 Gbps, 40 Gbps, 100 Gbps]
     *
     * @return self
     */
    public function setSpeed($speed)
    {
        if (is_null($speed)) {
            throw new \InvalidArgumentException('non-nullable speed cannot be null');
        }
        $this->container['speed'] = $speed;

        return $this;
    }

    /**
     * Gets is_uplink
     *
     * @return bool|null
     */
    public function getIsUplink()
    {
        return $this->container['is_uplink'];
    }

    /**
     * Sets is_uplink
     *
     * @param bool|null $is_uplink Indicate whether the interface is uplink
     *
     * @return self
     */
    public function setIsUplink($is_uplink)
    {
        if (is_null($is_uplink)) {
            throw new \InvalidArgumentException('non-nullable is_uplink cannot be null');
        }
        $this->container['is_uplink'] = $is_uplink;

        return $this;
    }

    /**
     * Gets vlan
     *
     * @return int|null
     */
    public function getVlan()
    {
        return $this->container['vlan'];
    }

    /**
     * Sets vlan
     *
     * @param int|null $vlan The VLAN of the switch port. For a trunk port, this is the native VLAN. A null value will clear the value set for trunk ports.
     *
     * @return self
     */
    public function setVlan($vlan)
    {
        if (is_null($vlan)) {
            throw new \InvalidArgumentException('non-nullable vlan cannot be null');
        }
        $this->container['vlan'] = $vlan;

        return $this;
    }

    /**
     * Gets is_redundancy_port
     *
     * @return bool|null
     */
    public function getIsRedundancyPort()
    {
        return $this->container['is_redundancy_port'];
    }

    /**
     * Sets is_redundancy_port
     *
     * @param bool|null $is_redundancy_port Indicate whether the interface is a redundancy port used to perform HA role negotiation
     *
     * @return self
     */
    public function setIsRedundancyPort($is_redundancy_port)
    {
        if (is_null($is_redundancy_port)) {
            throw new \InvalidArgumentException('non-nullable is_redundancy_port cannot be null');
        }
        $this->container['is_redundancy_port'] = $is_redundancy_port;

        return $this;
    }

    /**
     * Gets link_negotiation
     *
     * @return string|null
     */
    public function getLinkNegotiation()
    {
        return $this->container['link_negotiation'];
    }

    /**
     * Sets link_negotiation
     *
     * @param string|null $link_negotiation The interface negotiation mode
     *
     * @return self
     */
    public function setLinkNegotiation($link_negotiation)
    {
        if (is_null($link_negotiation)) {
            throw new \InvalidArgumentException('non-nullable link_negotiation cannot be null');
        }
        $this->container['link_negotiation'] = $link_negotiation;

        return $this;
    }

    /**
     * Gets channel_group
     *
     * @return \Meraki\Model\GetOrganizationWirelessControllerDevicesInterfacesL2ByDevice200ResponseItemsInnerInterfacesInnerChannelGroup|null
     */
    public function getChannelGroup()
    {
        return $this->container['channel_group'];
    }

    /**
     * Sets channel_group
     *
     * @param \Meraki\Model\GetOrganizationWirelessControllerDevicesInterfacesL2ByDevice200ResponseItemsInnerInterfacesInnerChannelGroup|null $channel_group channel_group
     *
     * @return self
     */
    public function setChannelGroup($channel_group)
    {
        if (is_null($channel_group)) {
            throw new \InvalidArgumentException('non-nullable channel_group cannot be null');
        }
        $this->container['channel_group'] = $channel_group;

        return $this;
    }

    /**
     * Gets module
     *
     * @return \Meraki\Model\GetOrganizationWirelessControllerDevicesInterfacesL2ByDevice200ResponseItemsInnerInterfacesInnerModule|null
     */
    public function getModule()
    {
        return $this->container['module'];
    }

    /**
     * Sets module
     *
     * @param \Meraki\Model\GetOrganizationWirelessControllerDevicesInterfacesL2ByDevice200ResponseItemsInnerInterfacesInnerModule|null $module module
     *
     * @return self
     */
    public function setModule($module)
    {
        if (is_null($module)) {
            throw new \InvalidArgumentException('non-nullable module cannot be null');
        }
        $this->container['module'] = $module;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


