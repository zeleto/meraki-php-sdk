<?php
/**
 * UpdateNetworkWirelessSsidSplashSettingsRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * UpdateNetworkWirelessSsidSplashSettingsRequest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateNetworkWirelessSsidSplashSettingsRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'updateNetworkWirelessSsidSplashSettings_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'splash_url' => 'string',
        'use_splash_url' => 'bool',
        'splash_timeout' => 'int',
        'redirect_url' => 'string',
        'use_redirect_url' => 'bool',
        'welcome_message' => 'string',
        'theme_id' => 'string',
        'splash_logo' => '\Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo',
        'splash_image' => '\Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestSplashImage',
        'splash_prepaid_front' => '\Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestSplashPrepaidFront',
        'block_all_traffic_before_sign_on' => 'bool',
        'controller_disconnection_behavior' => 'string',
        'allow_simultaneous_logins' => 'bool',
        'guest_sponsorship' => '\Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestGuestSponsorship',
        'billing' => '\Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestBilling',
        'sentry_enrollment' => '\Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment',
        'self_registration' => '\Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestSelfRegistration'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'splash_url' => null,
        'use_splash_url' => null,
        'splash_timeout' => null,
        'redirect_url' => null,
        'use_redirect_url' => null,
        'welcome_message' => null,
        'theme_id' => null,
        'splash_logo' => null,
        'splash_image' => null,
        'splash_prepaid_front' => null,
        'block_all_traffic_before_sign_on' => null,
        'controller_disconnection_behavior' => null,
        'allow_simultaneous_logins' => null,
        'guest_sponsorship' => null,
        'billing' => null,
        'sentry_enrollment' => null,
        'self_registration' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'splash_url' => false,
        'use_splash_url' => false,
        'splash_timeout' => false,
        'redirect_url' => false,
        'use_redirect_url' => false,
        'welcome_message' => false,
        'theme_id' => false,
        'splash_logo' => false,
        'splash_image' => false,
        'splash_prepaid_front' => false,
        'block_all_traffic_before_sign_on' => false,
        'controller_disconnection_behavior' => false,
        'allow_simultaneous_logins' => false,
        'guest_sponsorship' => false,
        'billing' => false,
        'sentry_enrollment' => false,
        'self_registration' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'splash_url' => 'splashUrl',
        'use_splash_url' => 'useSplashUrl',
        'splash_timeout' => 'splashTimeout',
        'redirect_url' => 'redirectUrl',
        'use_redirect_url' => 'useRedirectUrl',
        'welcome_message' => 'welcomeMessage',
        'theme_id' => 'themeId',
        'splash_logo' => 'splashLogo',
        'splash_image' => 'splashImage',
        'splash_prepaid_front' => 'splashPrepaidFront',
        'block_all_traffic_before_sign_on' => 'blockAllTrafficBeforeSignOn',
        'controller_disconnection_behavior' => 'controllerDisconnectionBehavior',
        'allow_simultaneous_logins' => 'allowSimultaneousLogins',
        'guest_sponsorship' => 'guestSponsorship',
        'billing' => 'billing',
        'sentry_enrollment' => 'sentryEnrollment',
        'self_registration' => 'selfRegistration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'splash_url' => 'setSplashUrl',
        'use_splash_url' => 'setUseSplashUrl',
        'splash_timeout' => 'setSplashTimeout',
        'redirect_url' => 'setRedirectUrl',
        'use_redirect_url' => 'setUseRedirectUrl',
        'welcome_message' => 'setWelcomeMessage',
        'theme_id' => 'setThemeId',
        'splash_logo' => 'setSplashLogo',
        'splash_image' => 'setSplashImage',
        'splash_prepaid_front' => 'setSplashPrepaidFront',
        'block_all_traffic_before_sign_on' => 'setBlockAllTrafficBeforeSignOn',
        'controller_disconnection_behavior' => 'setControllerDisconnectionBehavior',
        'allow_simultaneous_logins' => 'setAllowSimultaneousLogins',
        'guest_sponsorship' => 'setGuestSponsorship',
        'billing' => 'setBilling',
        'sentry_enrollment' => 'setSentryEnrollment',
        'self_registration' => 'setSelfRegistration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'splash_url' => 'getSplashUrl',
        'use_splash_url' => 'getUseSplashUrl',
        'splash_timeout' => 'getSplashTimeout',
        'redirect_url' => 'getRedirectUrl',
        'use_redirect_url' => 'getUseRedirectUrl',
        'welcome_message' => 'getWelcomeMessage',
        'theme_id' => 'getThemeId',
        'splash_logo' => 'getSplashLogo',
        'splash_image' => 'getSplashImage',
        'splash_prepaid_front' => 'getSplashPrepaidFront',
        'block_all_traffic_before_sign_on' => 'getBlockAllTrafficBeforeSignOn',
        'controller_disconnection_behavior' => 'getControllerDisconnectionBehavior',
        'allow_simultaneous_logins' => 'getAllowSimultaneousLogins',
        'guest_sponsorship' => 'getGuestSponsorship',
        'billing' => 'getBilling',
        'sentry_enrollment' => 'getSentryEnrollment',
        'self_registration' => 'getSelfRegistration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SPLASH_TIMEOUT_NUMBER_30 = 30;
    public const SPLASH_TIMEOUT_NUMBER_60 = 60;
    public const SPLASH_TIMEOUT_NUMBER_120 = 120;
    public const SPLASH_TIMEOUT_NUMBER_240 = 240;
    public const SPLASH_TIMEOUT_NUMBER_480 = 480;
    public const SPLASH_TIMEOUT_NUMBER_720 = 720;
    public const SPLASH_TIMEOUT_NUMBER_1080 = 1080;
    public const SPLASH_TIMEOUT_NUMBER_1440 = 1440;
    public const SPLASH_TIMEOUT_NUMBER_2880 = 2880;
    public const SPLASH_TIMEOUT_NUMBER_5760 = 5760;
    public const SPLASH_TIMEOUT_NUMBER_7200 = 7200;
    public const SPLASH_TIMEOUT_NUMBER_10080 = 10080;
    public const SPLASH_TIMEOUT_NUMBER_20160 = 20160;
    public const SPLASH_TIMEOUT_NUMBER_43200 = 43200;
    public const SPLASH_TIMEOUT_NUMBER_86400 = 86400;
    public const SPLASH_TIMEOUT_NUMBER_129600 = 129600;
    public const CONTROLLER_DISCONNECTION_BEHAVIOR__DEFAULT = 'default';
    public const CONTROLLER_DISCONNECTION_BEHAVIOR_OPEN = 'open';
    public const CONTROLLER_DISCONNECTION_BEHAVIOR_RESTRICTED = 'restricted';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSplashTimeoutAllowableValues()
    {
        return [
            self::SPLASH_TIMEOUT_NUMBER_30,
            self::SPLASH_TIMEOUT_NUMBER_60,
            self::SPLASH_TIMEOUT_NUMBER_120,
            self::SPLASH_TIMEOUT_NUMBER_240,
            self::SPLASH_TIMEOUT_NUMBER_480,
            self::SPLASH_TIMEOUT_NUMBER_720,
            self::SPLASH_TIMEOUT_NUMBER_1080,
            self::SPLASH_TIMEOUT_NUMBER_1440,
            self::SPLASH_TIMEOUT_NUMBER_2880,
            self::SPLASH_TIMEOUT_NUMBER_5760,
            self::SPLASH_TIMEOUT_NUMBER_7200,
            self::SPLASH_TIMEOUT_NUMBER_10080,
            self::SPLASH_TIMEOUT_NUMBER_20160,
            self::SPLASH_TIMEOUT_NUMBER_43200,
            self::SPLASH_TIMEOUT_NUMBER_86400,
            self::SPLASH_TIMEOUT_NUMBER_129600,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getControllerDisconnectionBehaviorAllowableValues()
    {
        return [
            self::CONTROLLER_DISCONNECTION_BEHAVIOR__DEFAULT,
            self::CONTROLLER_DISCONNECTION_BEHAVIOR_OPEN,
            self::CONTROLLER_DISCONNECTION_BEHAVIOR_RESTRICTED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('splash_url', $data ?? [], null);
        $this->setIfExists('use_splash_url', $data ?? [], null);
        $this->setIfExists('splash_timeout', $data ?? [], null);
        $this->setIfExists('redirect_url', $data ?? [], null);
        $this->setIfExists('use_redirect_url', $data ?? [], null);
        $this->setIfExists('welcome_message', $data ?? [], null);
        $this->setIfExists('theme_id', $data ?? [], null);
        $this->setIfExists('splash_logo', $data ?? [], null);
        $this->setIfExists('splash_image', $data ?? [], null);
        $this->setIfExists('splash_prepaid_front', $data ?? [], null);
        $this->setIfExists('block_all_traffic_before_sign_on', $data ?? [], null);
        $this->setIfExists('controller_disconnection_behavior', $data ?? [], null);
        $this->setIfExists('allow_simultaneous_logins', $data ?? [], null);
        $this->setIfExists('guest_sponsorship', $data ?? [], null);
        $this->setIfExists('billing', $data ?? [], null);
        $this->setIfExists('sentry_enrollment', $data ?? [], null);
        $this->setIfExists('self_registration', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSplashTimeoutAllowableValues();
        if (!is_null($this->container['splash_timeout']) && !in_array($this->container['splash_timeout'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'splash_timeout', must be one of '%s'",
                $this->container['splash_timeout'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getControllerDisconnectionBehaviorAllowableValues();
        if (!is_null($this->container['controller_disconnection_behavior']) && !in_array($this->container['controller_disconnection_behavior'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'controller_disconnection_behavior', must be one of '%s'",
                $this->container['controller_disconnection_behavior'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets splash_url
     *
     * @return string|null
     */
    public function getSplashUrl()
    {
        return $this->container['splash_url'];
    }

    /**
     * Sets splash_url
     *
     * @param string|null $splash_url [optional] The custom splash URL of the click-through splash page. Note that the URL can be configured without necessarily being used. In order to enable the custom URL, see 'useSplashUrl'
     *
     * @return self
     */
    public function setSplashUrl($splash_url)
    {
        if (is_null($splash_url)) {
            throw new \InvalidArgumentException('non-nullable splash_url cannot be null');
        }
        $this->container['splash_url'] = $splash_url;

        return $this;
    }

    /**
     * Gets use_splash_url
     *
     * @return bool|null
     */
    public function getUseSplashUrl()
    {
        return $this->container['use_splash_url'];
    }

    /**
     * Sets use_splash_url
     *
     * @param bool|null $use_splash_url [optional] Boolean indicating whether the users will be redirected to the custom splash url. A custom splash URL must be set if this is true. Note that depending on your SSID's access control settings, it may not be possible to use the custom splash URL.
     *
     * @return self
     */
    public function setUseSplashUrl($use_splash_url)
    {
        if (is_null($use_splash_url)) {
            throw new \InvalidArgumentException('non-nullable use_splash_url cannot be null');
        }
        $this->container['use_splash_url'] = $use_splash_url;

        return $this;
    }

    /**
     * Gets splash_timeout
     *
     * @return int|null
     */
    public function getSplashTimeout()
    {
        return $this->container['splash_timeout'];
    }

    /**
     * Sets splash_timeout
     *
     * @param int|null $splash_timeout Splash timeout in minutes. This will determine how often users will see the splash page.
     *
     * @return self
     */
    public function setSplashTimeout($splash_timeout)
    {
        if (is_null($splash_timeout)) {
            throw new \InvalidArgumentException('non-nullable splash_timeout cannot be null');
        }
        $allowedValues = $this->getSplashTimeoutAllowableValues();
        if (!in_array($splash_timeout, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'splash_timeout', must be one of '%s'",
                    $splash_timeout,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['splash_timeout'] = $splash_timeout;

        return $this;
    }

    /**
     * Gets redirect_url
     *
     * @return string|null
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param string|null $redirect_url The custom redirect URL where the users will go after the splash page.
     *
     * @return self
     */
    public function setRedirectUrl($redirect_url)
    {
        if (is_null($redirect_url)) {
            throw new \InvalidArgumentException('non-nullable redirect_url cannot be null');
        }
        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets use_redirect_url
     *
     * @return bool|null
     */
    public function getUseRedirectUrl()
    {
        return $this->container['use_redirect_url'];
    }

    /**
     * Sets use_redirect_url
     *
     * @param bool|null $use_redirect_url The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page. A custom redirect URL must be set if this is true.
     *
     * @return self
     */
    public function setUseRedirectUrl($use_redirect_url)
    {
        if (is_null($use_redirect_url)) {
            throw new \InvalidArgumentException('non-nullable use_redirect_url cannot be null');
        }
        $this->container['use_redirect_url'] = $use_redirect_url;

        return $this;
    }

    /**
     * Gets welcome_message
     *
     * @return string|null
     */
    public function getWelcomeMessage()
    {
        return $this->container['welcome_message'];
    }

    /**
     * Sets welcome_message
     *
     * @param string|null $welcome_message The welcome message for the users on the splash page.
     *
     * @return self
     */
    public function setWelcomeMessage($welcome_message)
    {
        if (is_null($welcome_message)) {
            throw new \InvalidArgumentException('non-nullable welcome_message cannot be null');
        }
        $this->container['welcome_message'] = $welcome_message;

        return $this;
    }

    /**
     * Gets theme_id
     *
     * @return string|null
     */
    public function getThemeId()
    {
        return $this->container['theme_id'];
    }

    /**
     * Sets theme_id
     *
     * @param string|null $theme_id The id of the selected splash theme.
     *
     * @return self
     */
    public function setThemeId($theme_id)
    {
        if (is_null($theme_id)) {
            throw new \InvalidArgumentException('non-nullable theme_id cannot be null');
        }
        $this->container['theme_id'] = $theme_id;

        return $this;
    }

    /**
     * Gets splash_logo
     *
     * @return \Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo|null
     */
    public function getSplashLogo()
    {
        return $this->container['splash_logo'];
    }

    /**
     * Sets splash_logo
     *
     * @param \Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestSplashLogo|null $splash_logo splash_logo
     *
     * @return self
     */
    public function setSplashLogo($splash_logo)
    {
        if (is_null($splash_logo)) {
            throw new \InvalidArgumentException('non-nullable splash_logo cannot be null');
        }
        $this->container['splash_logo'] = $splash_logo;

        return $this;
    }

    /**
     * Gets splash_image
     *
     * @return \Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestSplashImage|null
     */
    public function getSplashImage()
    {
        return $this->container['splash_image'];
    }

    /**
     * Sets splash_image
     *
     * @param \Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestSplashImage|null $splash_image splash_image
     *
     * @return self
     */
    public function setSplashImage($splash_image)
    {
        if (is_null($splash_image)) {
            throw new \InvalidArgumentException('non-nullable splash_image cannot be null');
        }
        $this->container['splash_image'] = $splash_image;

        return $this;
    }

    /**
     * Gets splash_prepaid_front
     *
     * @return \Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestSplashPrepaidFront|null
     */
    public function getSplashPrepaidFront()
    {
        return $this->container['splash_prepaid_front'];
    }

    /**
     * Sets splash_prepaid_front
     *
     * @param \Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestSplashPrepaidFront|null $splash_prepaid_front splash_prepaid_front
     *
     * @return self
     */
    public function setSplashPrepaidFront($splash_prepaid_front)
    {
        if (is_null($splash_prepaid_front)) {
            throw new \InvalidArgumentException('non-nullable splash_prepaid_front cannot be null');
        }
        $this->container['splash_prepaid_front'] = $splash_prepaid_front;

        return $this;
    }

    /**
     * Gets block_all_traffic_before_sign_on
     *
     * @return bool|null
     */
    public function getBlockAllTrafficBeforeSignOn()
    {
        return $this->container['block_all_traffic_before_sign_on'];
    }

    /**
     * Sets block_all_traffic_before_sign_on
     *
     * @param bool|null $block_all_traffic_before_sign_on How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
     *
     * @return self
     */
    public function setBlockAllTrafficBeforeSignOn($block_all_traffic_before_sign_on)
    {
        if (is_null($block_all_traffic_before_sign_on)) {
            throw new \InvalidArgumentException('non-nullable block_all_traffic_before_sign_on cannot be null');
        }
        $this->container['block_all_traffic_before_sign_on'] = $block_all_traffic_before_sign_on;

        return $this;
    }

    /**
     * Gets controller_disconnection_behavior
     *
     * @return string|null
     */
    public function getControllerDisconnectionBehavior()
    {
        return $this->container['controller_disconnection_behavior'];
    }

    /**
     * Sets controller_disconnection_behavior
     *
     * @param string|null $controller_disconnection_behavior How login attempts should be handled when the controller is unreachable. Can be either 'open', 'restricted', or 'default'.
     *
     * @return self
     */
    public function setControllerDisconnectionBehavior($controller_disconnection_behavior)
    {
        if (is_null($controller_disconnection_behavior)) {
            throw new \InvalidArgumentException('non-nullable controller_disconnection_behavior cannot be null');
        }
        $allowedValues = $this->getControllerDisconnectionBehaviorAllowableValues();
        if (!in_array($controller_disconnection_behavior, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'controller_disconnection_behavior', must be one of '%s'",
                    $controller_disconnection_behavior,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['controller_disconnection_behavior'] = $controller_disconnection_behavior;

        return $this;
    }

    /**
     * Gets allow_simultaneous_logins
     *
     * @return bool|null
     */
    public function getAllowSimultaneousLogins()
    {
        return $this->container['allow_simultaneous_logins'];
    }

    /**
     * Sets allow_simultaneous_logins
     *
     * @param bool|null $allow_simultaneous_logins Whether or not to allow simultaneous logins from different devices.
     *
     * @return self
     */
    public function setAllowSimultaneousLogins($allow_simultaneous_logins)
    {
        if (is_null($allow_simultaneous_logins)) {
            throw new \InvalidArgumentException('non-nullable allow_simultaneous_logins cannot be null');
        }
        $this->container['allow_simultaneous_logins'] = $allow_simultaneous_logins;

        return $this;
    }

    /**
     * Gets guest_sponsorship
     *
     * @return \Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestGuestSponsorship|null
     */
    public function getGuestSponsorship()
    {
        return $this->container['guest_sponsorship'];
    }

    /**
     * Sets guest_sponsorship
     *
     * @param \Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestGuestSponsorship|null $guest_sponsorship guest_sponsorship
     *
     * @return self
     */
    public function setGuestSponsorship($guest_sponsorship)
    {
        if (is_null($guest_sponsorship)) {
            throw new \InvalidArgumentException('non-nullable guest_sponsorship cannot be null');
        }
        $this->container['guest_sponsorship'] = $guest_sponsorship;

        return $this;
    }

    /**
     * Gets billing
     *
     * @return \Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestBilling|null
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     *
     * @param \Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestBilling|null $billing billing
     *
     * @return self
     */
    public function setBilling($billing)
    {
        if (is_null($billing)) {
            throw new \InvalidArgumentException('non-nullable billing cannot be null');
        }
        $this->container['billing'] = $billing;

        return $this;
    }

    /**
     * Gets sentry_enrollment
     *
     * @return \Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment|null
     */
    public function getSentryEnrollment()
    {
        return $this->container['sentry_enrollment'];
    }

    /**
     * Sets sentry_enrollment
     *
     * @param \Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestSentryEnrollment|null $sentry_enrollment sentry_enrollment
     *
     * @return self
     */
    public function setSentryEnrollment($sentry_enrollment)
    {
        if (is_null($sentry_enrollment)) {
            throw new \InvalidArgumentException('non-nullable sentry_enrollment cannot be null');
        }
        $this->container['sentry_enrollment'] = $sentry_enrollment;

        return $this;
    }

    /**
     * Gets self_registration
     *
     * @return \Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestSelfRegistration|null
     */
    public function getSelfRegistration()
    {
        return $this->container['self_registration'];
    }

    /**
     * Sets self_registration
     *
     * @param \Meraki\Model\UpdateNetworkWirelessSsidSplashSettingsRequestSelfRegistration|null $self_registration self_registration
     *
     * @return self
     */
    public function setSelfRegistration($self_registration)
    {
        if (is_null($self_registration)) {
            throw new \InvalidArgumentException('non-nullable self_registration cannot be null');
        }
        $this->container['self_registration'] = $self_registration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


