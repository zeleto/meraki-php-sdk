<?php
/**
 * GetDeviceCellularGatewayLan200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetDeviceCellularGatewayLan200Response Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetDeviceCellularGatewayLan200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getDeviceCellularGatewayLan_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'device_name' => 'string',
        'device_lan_ip' => 'string',
        'device_subnet' => 'string',
        'fixed_ip_assignments' => '\Meraki\Model\GetDeviceCellularGatewayLan200ResponseFixedIpAssignmentsInner[]',
        'reserved_ip_ranges' => '\Meraki\Model\GetDeviceCellularGatewayLan200ResponseReservedIpRangesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'device_name' => null,
        'device_lan_ip' => null,
        'device_subnet' => null,
        'fixed_ip_assignments' => null,
        'reserved_ip_ranges' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'device_name' => false,
        'device_lan_ip' => false,
        'device_subnet' => false,
        'fixed_ip_assignments' => false,
        'reserved_ip_ranges' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'device_name' => 'deviceName',
        'device_lan_ip' => 'deviceLanIp',
        'device_subnet' => 'deviceSubnet',
        'fixed_ip_assignments' => 'fixedIpAssignments',
        'reserved_ip_ranges' => 'reservedIpRanges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'device_name' => 'setDeviceName',
        'device_lan_ip' => 'setDeviceLanIp',
        'device_subnet' => 'setDeviceSubnet',
        'fixed_ip_assignments' => 'setFixedIpAssignments',
        'reserved_ip_ranges' => 'setReservedIpRanges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'device_name' => 'getDeviceName',
        'device_lan_ip' => 'getDeviceLanIp',
        'device_subnet' => 'getDeviceSubnet',
        'fixed_ip_assignments' => 'getFixedIpAssignments',
        'reserved_ip_ranges' => 'getReservedIpRanges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('device_name', $data ?? [], null);
        $this->setIfExists('device_lan_ip', $data ?? [], null);
        $this->setIfExists('device_subnet', $data ?? [], null);
        $this->setIfExists('fixed_ip_assignments', $data ?? [], null);
        $this->setIfExists('reserved_ip_ranges', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets device_name
     *
     * @return string|null
     */
    public function getDeviceName()
    {
        return $this->container['device_name'];
    }

    /**
     * Sets device_name
     *
     * @param string|null $device_name Name of the MG.
     *
     * @return self
     */
    public function setDeviceName($device_name)
    {
        if (is_null($device_name)) {
            throw new \InvalidArgumentException('non-nullable device_name cannot be null');
        }
        $this->container['device_name'] = $device_name;

        return $this;
    }

    /**
     * Gets device_lan_ip
     *
     * @return string|null
     */
    public function getDeviceLanIp()
    {
        return $this->container['device_lan_ip'];
    }

    /**
     * Sets device_lan_ip
     *
     * @param string|null $device_lan_ip Lan IP of the MG
     *
     * @return self
     */
    public function setDeviceLanIp($device_lan_ip)
    {
        if (is_null($device_lan_ip)) {
            throw new \InvalidArgumentException('non-nullable device_lan_ip cannot be null');
        }
        $this->container['device_lan_ip'] = $device_lan_ip;

        return $this;
    }

    /**
     * Gets device_subnet
     *
     * @return string|null
     */
    public function getDeviceSubnet()
    {
        return $this->container['device_subnet'];
    }

    /**
     * Sets device_subnet
     *
     * @param string|null $device_subnet Subnet configuration of the MG.
     *
     * @return self
     */
    public function setDeviceSubnet($device_subnet)
    {
        if (is_null($device_subnet)) {
            throw new \InvalidArgumentException('non-nullable device_subnet cannot be null');
        }
        $this->container['device_subnet'] = $device_subnet;

        return $this;
    }

    /**
     * Gets fixed_ip_assignments
     *
     * @return \Meraki\Model\GetDeviceCellularGatewayLan200ResponseFixedIpAssignmentsInner[]|null
     */
    public function getFixedIpAssignments()
    {
        return $this->container['fixed_ip_assignments'];
    }

    /**
     * Sets fixed_ip_assignments
     *
     * @param \Meraki\Model\GetDeviceCellularGatewayLan200ResponseFixedIpAssignmentsInner[]|null $fixed_ip_assignments list of all fixed IP assignments for a single MG
     *
     * @return self
     */
    public function setFixedIpAssignments($fixed_ip_assignments)
    {
        if (is_null($fixed_ip_assignments)) {
            throw new \InvalidArgumentException('non-nullable fixed_ip_assignments cannot be null');
        }
        $this->container['fixed_ip_assignments'] = $fixed_ip_assignments;

        return $this;
    }

    /**
     * Gets reserved_ip_ranges
     *
     * @return \Meraki\Model\GetDeviceCellularGatewayLan200ResponseReservedIpRangesInner[]|null
     */
    public function getReservedIpRanges()
    {
        return $this->container['reserved_ip_ranges'];
    }

    /**
     * Sets reserved_ip_ranges
     *
     * @param \Meraki\Model\GetDeviceCellularGatewayLan200ResponseReservedIpRangesInner[]|null $reserved_ip_ranges list of all reserved IP ranges for a single MG
     *
     * @return self
     */
    public function setReservedIpRanges($reserved_ip_ranges)
    {
        if (is_null($reserved_ip_ranges)) {
            throw new \InvalidArgumentException('non-nullable reserved_ip_ranges cannot be null');
        }
        $this->container['reserved_ip_ranges'] = $reserved_ip_ranges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


