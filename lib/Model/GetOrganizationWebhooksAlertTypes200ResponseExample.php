<?php
/**
 * GetOrganizationWebhooksAlertTypes200ResponseExample
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetOrganizationWebhooksAlertTypes200ResponseExample Class Doc Comment
 *
 * @category Class
 * @description Example alert type
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetOrganizationWebhooksAlertTypes200ResponseExample implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getOrganizationWebhooksAlertTypes_200_response_example';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'version' => 'string',
        'shared_secret' => 'string',
        'sent_at' => '\DateTime',
        'alert_id' => 'string',
        'alert_level' => 'string',
        'occurred_at' => '\DateTime',
        'alert_data' => 'array<string,mixed>',
        'organization_id' => 'string',
        'organization_name' => 'string',
        'organization_url' => 'string',
        'device_serial' => 'string',
        'device_mac' => 'string',
        'device_name' => 'string',
        'device_url' => 'string',
        'device_tags' => 'string[]',
        'device_model' => 'string',
        'network_id' => 'string',
        'network_name' => 'string',
        'network_url' => 'string',
        'enrollment_string' => 'string',
        'notes' => 'string',
        'product_types' => 'string[]',
        'encrypted_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'version' => null,
        'shared_secret' => null,
        'sent_at' => 'date-time',
        'alert_id' => null,
        'alert_level' => null,
        'occurred_at' => 'date-time',
        'alert_data' => null,
        'organization_id' => null,
        'organization_name' => null,
        'organization_url' => null,
        'device_serial' => null,
        'device_mac' => null,
        'device_name' => null,
        'device_url' => null,
        'device_tags' => null,
        'device_model' => null,
        'network_id' => null,
        'network_name' => null,
        'network_url' => null,
        'enrollment_string' => null,
        'notes' => null,
        'product_types' => null,
        'encrypted_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'version' => false,
        'shared_secret' => false,
        'sent_at' => false,
        'alert_id' => false,
        'alert_level' => false,
        'occurred_at' => false,
        'alert_data' => false,
        'organization_id' => false,
        'organization_name' => false,
        'organization_url' => false,
        'device_serial' => false,
        'device_mac' => false,
        'device_name' => false,
        'device_url' => false,
        'device_tags' => false,
        'device_model' => false,
        'network_id' => false,
        'network_name' => false,
        'network_url' => false,
        'enrollment_string' => false,
        'notes' => false,
        'product_types' => false,
        'encrypted_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version' => 'version',
        'shared_secret' => 'sharedSecret',
        'sent_at' => 'sentAt',
        'alert_id' => 'alertId',
        'alert_level' => 'alertLevel',
        'occurred_at' => 'occurredAt',
        'alert_data' => 'alertData',
        'organization_id' => 'organizationId',
        'organization_name' => 'organizationName',
        'organization_url' => 'organizationUrl',
        'device_serial' => 'deviceSerial',
        'device_mac' => 'deviceMac',
        'device_name' => 'deviceName',
        'device_url' => 'deviceUrl',
        'device_tags' => 'deviceTags',
        'device_model' => 'deviceModel',
        'network_id' => 'networkId',
        'network_name' => 'networkName',
        'network_url' => 'networkUrl',
        'enrollment_string' => 'enrollmentString',
        'notes' => 'notes',
        'product_types' => 'productTypes',
        'encrypted_id' => 'encryptedId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version' => 'setVersion',
        'shared_secret' => 'setSharedSecret',
        'sent_at' => 'setSentAt',
        'alert_id' => 'setAlertId',
        'alert_level' => 'setAlertLevel',
        'occurred_at' => 'setOccurredAt',
        'alert_data' => 'setAlertData',
        'organization_id' => 'setOrganizationId',
        'organization_name' => 'setOrganizationName',
        'organization_url' => 'setOrganizationUrl',
        'device_serial' => 'setDeviceSerial',
        'device_mac' => 'setDeviceMac',
        'device_name' => 'setDeviceName',
        'device_url' => 'setDeviceUrl',
        'device_tags' => 'setDeviceTags',
        'device_model' => 'setDeviceModel',
        'network_id' => 'setNetworkId',
        'network_name' => 'setNetworkName',
        'network_url' => 'setNetworkUrl',
        'enrollment_string' => 'setEnrollmentString',
        'notes' => 'setNotes',
        'product_types' => 'setProductTypes',
        'encrypted_id' => 'setEncryptedId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version' => 'getVersion',
        'shared_secret' => 'getSharedSecret',
        'sent_at' => 'getSentAt',
        'alert_id' => 'getAlertId',
        'alert_level' => 'getAlertLevel',
        'occurred_at' => 'getOccurredAt',
        'alert_data' => 'getAlertData',
        'organization_id' => 'getOrganizationId',
        'organization_name' => 'getOrganizationName',
        'organization_url' => 'getOrganizationUrl',
        'device_serial' => 'getDeviceSerial',
        'device_mac' => 'getDeviceMac',
        'device_name' => 'getDeviceName',
        'device_url' => 'getDeviceUrl',
        'device_tags' => 'getDeviceTags',
        'device_model' => 'getDeviceModel',
        'network_id' => 'getNetworkId',
        'network_name' => 'getNetworkName',
        'network_url' => 'getNetworkUrl',
        'enrollment_string' => 'getEnrollmentString',
        'notes' => 'getNotes',
        'product_types' => 'getProductTypes',
        'encrypted_id' => 'getEncryptedId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ALERT_LEVEL_CRITICAL = 'critical';
    public const ALERT_LEVEL_INFORMATIONAL = 'informational';
    public const ALERT_LEVEL_WARNING = 'warning';
    public const PRODUCT_TYPES_APPLIANCE = 'appliance';
    public const PRODUCT_TYPES_CAMERA = 'camera';
    public const PRODUCT_TYPES_CELLULAR_GATEWAY = 'cellularGateway';
    public const PRODUCT_TYPES_SECURE_CONNECT = 'secureConnect';
    public const PRODUCT_TYPES_SENSOR = 'sensor';
    public const PRODUCT_TYPES__SWITCH = 'switch';
    public const PRODUCT_TYPES_SYSTEMS_MANAGER = 'systemsManager';
    public const PRODUCT_TYPES_WIRELESS = 'wireless';
    public const PRODUCT_TYPES_WIRELESS_CONTROLLER = 'wirelessController';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAlertLevelAllowableValues()
    {
        return [
            self::ALERT_LEVEL_CRITICAL,
            self::ALERT_LEVEL_INFORMATIONAL,
            self::ALERT_LEVEL_WARNING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductTypesAllowableValues()
    {
        return [
            self::PRODUCT_TYPES_APPLIANCE,
            self::PRODUCT_TYPES_CAMERA,
            self::PRODUCT_TYPES_CELLULAR_GATEWAY,
            self::PRODUCT_TYPES_SECURE_CONNECT,
            self::PRODUCT_TYPES_SENSOR,
            self::PRODUCT_TYPES__SWITCH,
            self::PRODUCT_TYPES_SYSTEMS_MANAGER,
            self::PRODUCT_TYPES_WIRELESS,
            self::PRODUCT_TYPES_WIRELESS_CONTROLLER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('shared_secret', $data ?? [], null);
        $this->setIfExists('sent_at', $data ?? [], null);
        $this->setIfExists('alert_id', $data ?? [], null);
        $this->setIfExists('alert_level', $data ?? [], null);
        $this->setIfExists('occurred_at', $data ?? [], null);
        $this->setIfExists('alert_data', $data ?? [], null);
        $this->setIfExists('organization_id', $data ?? [], null);
        $this->setIfExists('organization_name', $data ?? [], null);
        $this->setIfExists('organization_url', $data ?? [], null);
        $this->setIfExists('device_serial', $data ?? [], null);
        $this->setIfExists('device_mac', $data ?? [], null);
        $this->setIfExists('device_name', $data ?? [], null);
        $this->setIfExists('device_url', $data ?? [], null);
        $this->setIfExists('device_tags', $data ?? [], null);
        $this->setIfExists('device_model', $data ?? [], null);
        $this->setIfExists('network_id', $data ?? [], null);
        $this->setIfExists('network_name', $data ?? [], null);
        $this->setIfExists('network_url', $data ?? [], null);
        $this->setIfExists('enrollment_string', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('product_types', $data ?? [], null);
        $this->setIfExists('encrypted_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAlertLevelAllowableValues();
        if (!is_null($this->container['alert_level']) && !in_array($this->container['alert_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'alert_level', must be one of '%s'",
                $this->container['alert_level'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version Version of the alert
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets shared_secret
     *
     * @return string|null
     */
    public function getSharedSecret()
    {
        return $this->container['shared_secret'];
    }

    /**
     * Sets shared_secret
     *
     * @param string|null $shared_secret Shared secret for the alert
     *
     * @return self
     */
    public function setSharedSecret($shared_secret)
    {
        if (is_null($shared_secret)) {
            throw new \InvalidArgumentException('non-nullable shared_secret cannot be null');
        }
        $this->container['shared_secret'] = $shared_secret;

        return $this;
    }

    /**
     * Gets sent_at
     *
     * @return \DateTime|null
     */
    public function getSentAt()
    {
        return $this->container['sent_at'];
    }

    /**
     * Sets sent_at
     *
     * @param \DateTime|null $sent_at When the alert notification was sent, in ISO8601 format
     *
     * @return self
     */
    public function setSentAt($sent_at)
    {
        if (is_null($sent_at)) {
            throw new \InvalidArgumentException('non-nullable sent_at cannot be null');
        }
        $this->container['sent_at'] = $sent_at;

        return $this;
    }

    /**
     * Gets alert_id
     *
     * @return string|null
     */
    public function getAlertId()
    {
        return $this->container['alert_id'];
    }

    /**
     * Sets alert_id
     *
     * @param string|null $alert_id ID for the alert instance
     *
     * @return self
     */
    public function setAlertId($alert_id)
    {
        if (is_null($alert_id)) {
            throw new \InvalidArgumentException('non-nullable alert_id cannot be null');
        }
        $this->container['alert_id'] = $alert_id;

        return $this;
    }

    /**
     * Gets alert_level
     *
     * @return string|null
     */
    public function getAlertLevel()
    {
        return $this->container['alert_level'];
    }

    /**
     * Sets alert_level
     *
     * @param string|null $alert_level Severity level of the alert
     *
     * @return self
     */
    public function setAlertLevel($alert_level)
    {
        if (is_null($alert_level)) {
            throw new \InvalidArgumentException('non-nullable alert_level cannot be null');
        }
        $allowedValues = $this->getAlertLevelAllowableValues();
        if (!in_array($alert_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'alert_level', must be one of '%s'",
                    $alert_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['alert_level'] = $alert_level;

        return $this;
    }

    /**
     * Gets occurred_at
     *
     * @return \DateTime|null
     */
    public function getOccurredAt()
    {
        return $this->container['occurred_at'];
    }

    /**
     * Sets occurred_at
     *
     * @param \DateTime|null $occurred_at When the alert occurred, in ISO8601 format
     *
     * @return self
     */
    public function setOccurredAt($occurred_at)
    {
        if (is_null($occurred_at)) {
            throw new \InvalidArgumentException('non-nullable occurred_at cannot be null');
        }
        $this->container['occurred_at'] = $occurred_at;

        return $this;
    }

    /**
     * Gets alert_data
     *
     * @return array<string,mixed>|null
     */
    public function getAlertData()
    {
        return $this->container['alert_data'];
    }

    /**
     * Sets alert_data
     *
     * @param array<string,mixed>|null $alert_data Data for the specific alert. Contents depend on the type of the alert
     *
     * @return self
     */
    public function setAlertData($alert_data)
    {
        if (is_null($alert_data)) {
            throw new \InvalidArgumentException('non-nullable alert_data cannot be null');
        }
        $this->container['alert_data'] = $alert_data;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return string|null
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string|null $organization_id ID of the organization associated with the alert
     *
     * @return self
     */
    public function setOrganizationId($organization_id)
    {
        if (is_null($organization_id)) {
            throw new \InvalidArgumentException('non-nullable organization_id cannot be null');
        }
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets organization_name
     *
     * @return string|null
     */
    public function getOrganizationName()
    {
        return $this->container['organization_name'];
    }

    /**
     * Sets organization_name
     *
     * @param string|null $organization_name Name of the organization associated with the alert
     *
     * @return self
     */
    public function setOrganizationName($organization_name)
    {
        if (is_null($organization_name)) {
            throw new \InvalidArgumentException('non-nullable organization_name cannot be null');
        }
        $this->container['organization_name'] = $organization_name;

        return $this;
    }

    /**
     * Gets organization_url
     *
     * @return string|null
     */
    public function getOrganizationUrl()
    {
        return $this->container['organization_url'];
    }

    /**
     * Sets organization_url
     *
     * @param string|null $organization_url URL of the organization associated with the alert
     *
     * @return self
     */
    public function setOrganizationUrl($organization_url)
    {
        if (is_null($organization_url)) {
            throw new \InvalidArgumentException('non-nullable organization_url cannot be null');
        }
        $this->container['organization_url'] = $organization_url;

        return $this;
    }

    /**
     * Gets device_serial
     *
     * @return string|null
     */
    public function getDeviceSerial()
    {
        return $this->container['device_serial'];
    }

    /**
     * Sets device_serial
     *
     * @param string|null $device_serial Serial for the device associated with the alert
     *
     * @return self
     */
    public function setDeviceSerial($device_serial)
    {
        if (is_null($device_serial)) {
            throw new \InvalidArgumentException('non-nullable device_serial cannot be null');
        }
        $this->container['device_serial'] = $device_serial;

        return $this;
    }

    /**
     * Gets device_mac
     *
     * @return string|null
     */
    public function getDeviceMac()
    {
        return $this->container['device_mac'];
    }

    /**
     * Sets device_mac
     *
     * @param string|null $device_mac Mac address for the device associated with the alert
     *
     * @return self
     */
    public function setDeviceMac($device_mac)
    {
        if (is_null($device_mac)) {
            throw new \InvalidArgumentException('non-nullable device_mac cannot be null');
        }
        $this->container['device_mac'] = $device_mac;

        return $this;
    }

    /**
     * Gets device_name
     *
     * @return string|null
     */
    public function getDeviceName()
    {
        return $this->container['device_name'];
    }

    /**
     * Sets device_name
     *
     * @param string|null $device_name Name of the device associated with the alert
     *
     * @return self
     */
    public function setDeviceName($device_name)
    {
        if (is_null($device_name)) {
            throw new \InvalidArgumentException('non-nullable device_name cannot be null');
        }
        $this->container['device_name'] = $device_name;

        return $this;
    }

    /**
     * Gets device_url
     *
     * @return string|null
     */
    public function getDeviceUrl()
    {
        return $this->container['device_url'];
    }

    /**
     * Sets device_url
     *
     * @param string|null $device_url URL of the device associated with the alert
     *
     * @return self
     */
    public function setDeviceUrl($device_url)
    {
        if (is_null($device_url)) {
            throw new \InvalidArgumentException('non-nullable device_url cannot be null');
        }
        $this->container['device_url'] = $device_url;

        return $this;
    }

    /**
     * Gets device_tags
     *
     * @return string[]|null
     */
    public function getDeviceTags()
    {
        return $this->container['device_tags'];
    }

    /**
     * Sets device_tags
     *
     * @param string[]|null $device_tags List of tags for the device associated with the alert
     *
     * @return self
     */
    public function setDeviceTags($device_tags)
    {
        if (is_null($device_tags)) {
            throw new \InvalidArgumentException('non-nullable device_tags cannot be null');
        }
        $this->container['device_tags'] = $device_tags;

        return $this;
    }

    /**
     * Gets device_model
     *
     * @return string|null
     */
    public function getDeviceModel()
    {
        return $this->container['device_model'];
    }

    /**
     * Sets device_model
     *
     * @param string|null $device_model Model of the device associated with the alert
     *
     * @return self
     */
    public function setDeviceModel($device_model)
    {
        if (is_null($device_model)) {
            throw new \InvalidArgumentException('non-nullable device_model cannot be null');
        }
        $this->container['device_model'] = $device_model;

        return $this;
    }

    /**
     * Gets network_id
     *
     * @return string|null
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param string|null $network_id ID of the network associated with the alert
     *
     * @return self
     */
    public function setNetworkId($network_id)
    {
        if (is_null($network_id)) {
            throw new \InvalidArgumentException('non-nullable network_id cannot be null');
        }
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets network_name
     *
     * @return string|null
     */
    public function getNetworkName()
    {
        return $this->container['network_name'];
    }

    /**
     * Sets network_name
     *
     * @param string|null $network_name Name of the network associated with the alert
     *
     * @return self
     */
    public function setNetworkName($network_name)
    {
        if (is_null($network_name)) {
            throw new \InvalidArgumentException('non-nullable network_name cannot be null');
        }
        $this->container['network_name'] = $network_name;

        return $this;
    }

    /**
     * Gets network_url
     *
     * @return string|null
     */
    public function getNetworkUrl()
    {
        return $this->container['network_url'];
    }

    /**
     * Sets network_url
     *
     * @param string|null $network_url URL of the network associated with the alert
     *
     * @return self
     */
    public function setNetworkUrl($network_url)
    {
        if (is_null($network_url)) {
            throw new \InvalidArgumentException('non-nullable network_url cannot be null');
        }
        $this->container['network_url'] = $network_url;

        return $this;
    }

    /**
     * Gets enrollment_string
     *
     * @return string|null
     */
    public function getEnrollmentString()
    {
        return $this->container['enrollment_string'];
    }

    /**
     * Sets enrollment_string
     *
     * @param string|null $enrollment_string Enrollment string of the network associated with the alert
     *
     * @return self
     */
    public function setEnrollmentString($enrollment_string)
    {
        if (is_null($enrollment_string)) {
            throw new \InvalidArgumentException('non-nullable enrollment_string cannot be null');
        }
        $this->container['enrollment_string'] = $enrollment_string;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Notes for the network associated with the alert
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets product_types
     *
     * @return string[]|null
     */
    public function getProductTypes()
    {
        return $this->container['product_types'];
    }

    /**
     * Sets product_types
     *
     * @param string[]|null $product_types List of product types that are part of the network associated with the alert
     *
     * @return self
     */
    public function setProductTypes($product_types)
    {
        if (is_null($product_types)) {
            throw new \InvalidArgumentException('non-nullable product_types cannot be null');
        }
        $allowedValues = $this->getProductTypesAllowableValues();
        if (array_diff($product_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'product_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_types'] = $product_types;

        return $this;
    }

    /**
     * Gets encrypted_id
     *
     * @return string|null
     */
    public function getEncryptedId()
    {
        return $this->container['encrypted_id'];
    }

    /**
     * Sets encrypted_id
     *
     * @param string|null $encrypted_id Encrypted ID of the network associated with the alert
     *
     * @return self
     */
    public function setEncryptedId($encrypted_id)
    {
        if (is_null($encrypted_id)) {
            throw new \InvalidArgumentException('non-nullable encrypted_id cannot be null');
        }
        $this->container['encrypted_id'] = $encrypted_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


