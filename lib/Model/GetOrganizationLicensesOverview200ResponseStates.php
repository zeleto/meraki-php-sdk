<?php
/**
 * GetOrganizationLicensesOverview200ResponseStates
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetOrganizationLicensesOverview200ResponseStates Class Doc Comment
 *
 * @category Class
 * @description Aggregated data for licenses by state (Per-device licensing only)
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetOrganizationLicensesOverview200ResponseStates implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getOrganizationLicensesOverview_200_response_states';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active' => '\Meraki\Model\GetOrganizationLicensesOverview200ResponseStatesActive',
        'expired' => '\Meraki\Model\GetOrganizationLicensesOverview200ResponseStatesExpired',
        'expiring' => '\Meraki\Model\GetOrganizationLicensesOverview200ResponseStatesExpiring',
        'recently_queued' => '\Meraki\Model\GetOrganizationLicensesOverview200ResponseStatesRecentlyQueued',
        'unused' => '\Meraki\Model\GetOrganizationLicensesOverview200ResponseStatesUnused',
        'unused_active' => '\Meraki\Model\GetOrganizationLicensesOverview200ResponseStatesUnusedActive'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active' => null,
        'expired' => null,
        'expiring' => null,
        'recently_queued' => null,
        'unused' => null,
        'unused_active' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'active' => false,
        'expired' => false,
        'expiring' => false,
        'recently_queued' => false,
        'unused' => false,
        'unused_active' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'expired' => 'expired',
        'expiring' => 'expiring',
        'recently_queued' => 'recentlyQueued',
        'unused' => 'unused',
        'unused_active' => 'unusedActive'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'expired' => 'setExpired',
        'expiring' => 'setExpiring',
        'recently_queued' => 'setRecentlyQueued',
        'unused' => 'setUnused',
        'unused_active' => 'setUnusedActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'expired' => 'getExpired',
        'expiring' => 'getExpiring',
        'recently_queued' => 'getRecentlyQueued',
        'unused' => 'getUnused',
        'unused_active' => 'getUnusedActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('expired', $data ?? [], null);
        $this->setIfExists('expiring', $data ?? [], null);
        $this->setIfExists('recently_queued', $data ?? [], null);
        $this->setIfExists('unused', $data ?? [], null);
        $this->setIfExists('unused_active', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return \Meraki\Model\GetOrganizationLicensesOverview200ResponseStatesActive|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param \Meraki\Model\GetOrganizationLicensesOverview200ResponseStatesActive|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets expired
     *
     * @return \Meraki\Model\GetOrganizationLicensesOverview200ResponseStatesExpired|null
     */
    public function getExpired()
    {
        return $this->container['expired'];
    }

    /**
     * Sets expired
     *
     * @param \Meraki\Model\GetOrganizationLicensesOverview200ResponseStatesExpired|null $expired expired
     *
     * @return self
     */
    public function setExpired($expired)
    {
        if (is_null($expired)) {
            throw new \InvalidArgumentException('non-nullable expired cannot be null');
        }
        $this->container['expired'] = $expired;

        return $this;
    }

    /**
     * Gets expiring
     *
     * @return \Meraki\Model\GetOrganizationLicensesOverview200ResponseStatesExpiring|null
     */
    public function getExpiring()
    {
        return $this->container['expiring'];
    }

    /**
     * Sets expiring
     *
     * @param \Meraki\Model\GetOrganizationLicensesOverview200ResponseStatesExpiring|null $expiring expiring
     *
     * @return self
     */
    public function setExpiring($expiring)
    {
        if (is_null($expiring)) {
            throw new \InvalidArgumentException('non-nullable expiring cannot be null');
        }
        $this->container['expiring'] = $expiring;

        return $this;
    }

    /**
     * Gets recently_queued
     *
     * @return \Meraki\Model\GetOrganizationLicensesOverview200ResponseStatesRecentlyQueued|null
     */
    public function getRecentlyQueued()
    {
        return $this->container['recently_queued'];
    }

    /**
     * Sets recently_queued
     *
     * @param \Meraki\Model\GetOrganizationLicensesOverview200ResponseStatesRecentlyQueued|null $recently_queued recently_queued
     *
     * @return self
     */
    public function setRecentlyQueued($recently_queued)
    {
        if (is_null($recently_queued)) {
            throw new \InvalidArgumentException('non-nullable recently_queued cannot be null');
        }
        $this->container['recently_queued'] = $recently_queued;

        return $this;
    }

    /**
     * Gets unused
     *
     * @return \Meraki\Model\GetOrganizationLicensesOverview200ResponseStatesUnused|null
     */
    public function getUnused()
    {
        return $this->container['unused'];
    }

    /**
     * Sets unused
     *
     * @param \Meraki\Model\GetOrganizationLicensesOverview200ResponseStatesUnused|null $unused unused
     *
     * @return self
     */
    public function setUnused($unused)
    {
        if (is_null($unused)) {
            throw new \InvalidArgumentException('non-nullable unused cannot be null');
        }
        $this->container['unused'] = $unused;

        return $this;
    }

    /**
     * Gets unused_active
     *
     * @return \Meraki\Model\GetOrganizationLicensesOverview200ResponseStatesUnusedActive|null
     */
    public function getUnusedActive()
    {
        return $this->container['unused_active'];
    }

    /**
     * Sets unused_active
     *
     * @param \Meraki\Model\GetOrganizationLicensesOverview200ResponseStatesUnusedActive|null $unused_active unused_active
     *
     * @return self
     */
    public function setUnusedActive($unused_active)
    {
        if (is_null($unused_active)) {
            throw new \InvalidArgumentException('non-nullable unused_active cannot be null');
        }
        $this->container['unused_active'] = $unused_active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


