<?php
/**
 * GetNetworkSwitchDhcpV4ServersSeen200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetNetworkSwitchDhcpV4ServersSeen200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetNetworkSwitchDhcpV4ServersSeen200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getNetworkSwitchDhcpV4ServersSeen_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mac' => 'string',
        'vlan' => 'int',
        'client_id' => 'string',
        'is_allowed' => 'bool',
        'last_seen_at' => '\DateTime',
        'seen_by' => '\Meraki\Model\GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner[]',
        'type' => 'string',
        'device' => '\Meraki\Model\GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice',
        'ipv4' => '\Meraki\Model\GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4',
        'is_configured' => 'bool',
        'last_ack' => '\Meraki\Model\GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck',
        'last_packet' => '\Meraki\Model\GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mac' => null,
        'vlan' => null,
        'client_id' => null,
        'is_allowed' => null,
        'last_seen_at' => 'date-time',
        'seen_by' => null,
        'type' => null,
        'device' => null,
        'ipv4' => null,
        'is_configured' => null,
        'last_ack' => null,
        'last_packet' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'mac' => false,
        'vlan' => false,
        'client_id' => false,
        'is_allowed' => false,
        'last_seen_at' => false,
        'seen_by' => false,
        'type' => false,
        'device' => false,
        'ipv4' => false,
        'is_configured' => false,
        'last_ack' => false,
        'last_packet' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mac' => 'mac',
        'vlan' => 'vlan',
        'client_id' => 'clientId',
        'is_allowed' => 'isAllowed',
        'last_seen_at' => 'lastSeenAt',
        'seen_by' => 'seenBy',
        'type' => 'type',
        'device' => 'device',
        'ipv4' => 'ipv4',
        'is_configured' => 'isConfigured',
        'last_ack' => 'lastAck',
        'last_packet' => 'lastPacket'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mac' => 'setMac',
        'vlan' => 'setVlan',
        'client_id' => 'setClientId',
        'is_allowed' => 'setIsAllowed',
        'last_seen_at' => 'setLastSeenAt',
        'seen_by' => 'setSeenBy',
        'type' => 'setType',
        'device' => 'setDevice',
        'ipv4' => 'setIpv4',
        'is_configured' => 'setIsConfigured',
        'last_ack' => 'setLastAck',
        'last_packet' => 'setLastPacket'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mac' => 'getMac',
        'vlan' => 'getVlan',
        'client_id' => 'getClientId',
        'is_allowed' => 'getIsAllowed',
        'last_seen_at' => 'getLastSeenAt',
        'seen_by' => 'getSeenBy',
        'type' => 'getType',
        'device' => 'getDevice',
        'ipv4' => 'getIpv4',
        'is_configured' => 'getIsConfigured',
        'last_ack' => 'getLastAck',
        'last_packet' => 'getLastPacket'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_DEVICE = 'device';
    public const TYPE_DISCOVERED = 'discovered';
    public const TYPE_STACK = 'stack';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DEVICE,
            self::TYPE_DISCOVERED,
            self::TYPE_STACK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('mac', $data ?? [], null);
        $this->setIfExists('vlan', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('is_allowed', $data ?? [], null);
        $this->setIfExists('last_seen_at', $data ?? [], null);
        $this->setIfExists('seen_by', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('device', $data ?? [], null);
        $this->setIfExists('ipv4', $data ?? [], null);
        $this->setIfExists('is_configured', $data ?? [], null);
        $this->setIfExists('last_ack', $data ?? [], null);
        $this->setIfExists('last_packet', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mac
     *
     * @return string|null
     */
    public function getMac()
    {
        return $this->container['mac'];
    }

    /**
     * Sets mac
     *
     * @param string|null $mac Mac address of the server.
     *
     * @return self
     */
    public function setMac($mac)
    {
        if (is_null($mac)) {
            throw new \InvalidArgumentException('non-nullable mac cannot be null');
        }
        $this->container['mac'] = $mac;

        return $this;
    }

    /**
     * Gets vlan
     *
     * @return int|null
     */
    public function getVlan()
    {
        return $this->container['vlan'];
    }

    /**
     * Sets vlan
     *
     * @param int|null $vlan Vlan id of the server.
     *
     * @return self
     */
    public function setVlan($vlan)
    {
        if (is_null($vlan)) {
            throw new \InvalidArgumentException('non-nullable vlan cannot be null');
        }
        $this->container['vlan'] = $vlan;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id Client id of the server if available.
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets is_allowed
     *
     * @return bool|null
     */
    public function getIsAllowed()
    {
        return $this->container['is_allowed'];
    }

    /**
     * Sets is_allowed
     *
     * @param bool|null $is_allowed Whether the server is allowed or blocked. Always true for configured servers.
     *
     * @return self
     */
    public function setIsAllowed($is_allowed)
    {
        if (is_null($is_allowed)) {
            throw new \InvalidArgumentException('non-nullable is_allowed cannot be null');
        }
        $this->container['is_allowed'] = $is_allowed;

        return $this;
    }

    /**
     * Gets last_seen_at
     *
     * @return \DateTime|null
     */
    public function getLastSeenAt()
    {
        return $this->container['last_seen_at'];
    }

    /**
     * Sets last_seen_at
     *
     * @param \DateTime|null $last_seen_at Last time the server was seen.
     *
     * @return self
     */
    public function setLastSeenAt($last_seen_at)
    {
        if (is_null($last_seen_at)) {
            throw new \InvalidArgumentException('non-nullable last_seen_at cannot be null');
        }
        $this->container['last_seen_at'] = $last_seen_at;

        return $this;
    }

    /**
     * Gets seen_by
     *
     * @return \Meraki\Model\GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner[]|null
     */
    public function getSeenBy()
    {
        return $this->container['seen_by'];
    }

    /**
     * Sets seen_by
     *
     * @param \Meraki\Model\GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerSeenByInner[]|null $seen_by Devices that saw the server.
     *
     * @return self
     */
    public function setSeenBy($seen_by)
    {
        if (is_null($seen_by)) {
            throw new \InvalidArgumentException('non-nullable seen_by cannot be null');
        }
        $this->container['seen_by'] = $seen_by;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type server type. Can be a 'device', 'stack', or 'discovered' (i.e client).
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets device
     *
     * @return \Meraki\Model\GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice|null
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param \Meraki\Model\GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerDevice|null $device device
     *
     * @return self
     */
    public function setDevice($device)
    {
        if (is_null($device)) {
            throw new \InvalidArgumentException('non-nullable device cannot be null');
        }
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets ipv4
     *
     * @return \Meraki\Model\GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4|null
     */
    public function getIpv4()
    {
        return $this->container['ipv4'];
    }

    /**
     * Sets ipv4
     *
     * @param \Meraki\Model\GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerIpv4|null $ipv4 ipv4
     *
     * @return self
     */
    public function setIpv4($ipv4)
    {
        if (is_null($ipv4)) {
            throw new \InvalidArgumentException('non-nullable ipv4 cannot be null');
        }
        $this->container['ipv4'] = $ipv4;

        return $this;
    }

    /**
     * Gets is_configured
     *
     * @return bool|null
     */
    public function getIsConfigured()
    {
        return $this->container['is_configured'];
    }

    /**
     * Sets is_configured
     *
     * @param bool|null $is_configured Whether the server is configured.
     *
     * @return self
     */
    public function setIsConfigured($is_configured)
    {
        if (is_null($is_configured)) {
            throw new \InvalidArgumentException('non-nullable is_configured cannot be null');
        }
        $this->container['is_configured'] = $is_configured;

        return $this;
    }

    /**
     * Gets last_ack
     *
     * @return \Meraki\Model\GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck|null
     */
    public function getLastAck()
    {
        return $this->container['last_ack'];
    }

    /**
     * Sets last_ack
     *
     * @param \Meraki\Model\GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastAck|null $last_ack last_ack
     *
     * @return self
     */
    public function setLastAck($last_ack)
    {
        if (is_null($last_ack)) {
            throw new \InvalidArgumentException('non-nullable last_ack cannot be null');
        }
        $this->container['last_ack'] = $last_ack;

        return $this;
    }

    /**
     * Gets last_packet
     *
     * @return \Meraki\Model\GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket|null
     */
    public function getLastPacket()
    {
        return $this->container['last_packet'];
    }

    /**
     * Sets last_packet
     *
     * @param \Meraki\Model\GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacket|null $last_packet last_packet
     *
     * @return self
     */
    public function setLastPacket($last_packet)
    {
        if (is_null($last_packet)) {
            throw new \InvalidArgumentException('non-nullable last_packet cannot be null');
        }
        $this->container['last_packet'] = $last_packet;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


