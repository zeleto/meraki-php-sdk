<?php
/**
 * GetNetworkSmDeviceSoftwares200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetNetworkSmDeviceSoftwares200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetNetworkSmDeviceSoftwares200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getNetworkSmDeviceSoftwares_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'app_id' => 'string',
        'bundle_size' => 'int',
        'created_at' => 'string',
        'device_id' => 'string',
        'dynamic_size' => 'int',
        'id' => 'string',
        'identifier' => 'string',
        'installed_at' => 'string',
        'to_install' => 'bool',
        'ios_redemption_code' => 'bool',
        'is_managed' => 'bool',
        'itunes_id' => 'string',
        'license_key' => 'string',
        'name' => 'string',
        'path' => 'string',
        'redemption_code' => 'int',
        'short_version' => 'string',
        'status' => 'string',
        'to_uninstall' => 'bool',
        'uninstalled_at' => 'string',
        'updated_at' => 'string',
        'vendor' => 'string',
        'version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'app_id' => null,
        'bundle_size' => null,
        'created_at' => null,
        'device_id' => null,
        'dynamic_size' => null,
        'id' => null,
        'identifier' => null,
        'installed_at' => null,
        'to_install' => null,
        'ios_redemption_code' => null,
        'is_managed' => null,
        'itunes_id' => null,
        'license_key' => null,
        'name' => null,
        'path' => null,
        'redemption_code' => null,
        'short_version' => null,
        'status' => null,
        'to_uninstall' => null,
        'uninstalled_at' => null,
        'updated_at' => null,
        'vendor' => null,
        'version' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'app_id' => false,
        'bundle_size' => false,
        'created_at' => false,
        'device_id' => false,
        'dynamic_size' => false,
        'id' => false,
        'identifier' => false,
        'installed_at' => false,
        'to_install' => false,
        'ios_redemption_code' => false,
        'is_managed' => false,
        'itunes_id' => false,
        'license_key' => false,
        'name' => false,
        'path' => false,
        'redemption_code' => false,
        'short_version' => false,
        'status' => false,
        'to_uninstall' => false,
        'uninstalled_at' => false,
        'updated_at' => false,
        'vendor' => false,
        'version' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_id' => 'appId',
        'bundle_size' => 'bundleSize',
        'created_at' => 'createdAt',
        'device_id' => 'deviceId',
        'dynamic_size' => 'dynamicSize',
        'id' => 'id',
        'identifier' => 'identifier',
        'installed_at' => 'installedAt',
        'to_install' => 'toInstall',
        'ios_redemption_code' => 'iosRedemptionCode',
        'is_managed' => 'isManaged',
        'itunes_id' => 'itunesId',
        'license_key' => 'licenseKey',
        'name' => 'name',
        'path' => 'path',
        'redemption_code' => 'redemptionCode',
        'short_version' => 'shortVersion',
        'status' => 'status',
        'to_uninstall' => 'toUninstall',
        'uninstalled_at' => 'uninstalledAt',
        'updated_at' => 'updatedAt',
        'vendor' => 'vendor',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_id' => 'setAppId',
        'bundle_size' => 'setBundleSize',
        'created_at' => 'setCreatedAt',
        'device_id' => 'setDeviceId',
        'dynamic_size' => 'setDynamicSize',
        'id' => 'setId',
        'identifier' => 'setIdentifier',
        'installed_at' => 'setInstalledAt',
        'to_install' => 'setToInstall',
        'ios_redemption_code' => 'setIosRedemptionCode',
        'is_managed' => 'setIsManaged',
        'itunes_id' => 'setItunesId',
        'license_key' => 'setLicenseKey',
        'name' => 'setName',
        'path' => 'setPath',
        'redemption_code' => 'setRedemptionCode',
        'short_version' => 'setShortVersion',
        'status' => 'setStatus',
        'to_uninstall' => 'setToUninstall',
        'uninstalled_at' => 'setUninstalledAt',
        'updated_at' => 'setUpdatedAt',
        'vendor' => 'setVendor',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_id' => 'getAppId',
        'bundle_size' => 'getBundleSize',
        'created_at' => 'getCreatedAt',
        'device_id' => 'getDeviceId',
        'dynamic_size' => 'getDynamicSize',
        'id' => 'getId',
        'identifier' => 'getIdentifier',
        'installed_at' => 'getInstalledAt',
        'to_install' => 'getToInstall',
        'ios_redemption_code' => 'getIosRedemptionCode',
        'is_managed' => 'getIsManaged',
        'itunes_id' => 'getItunesId',
        'license_key' => 'getLicenseKey',
        'name' => 'getName',
        'path' => 'getPath',
        'redemption_code' => 'getRedemptionCode',
        'short_version' => 'getShortVersion',
        'status' => 'getStatus',
        'to_uninstall' => 'getToUninstall',
        'uninstalled_at' => 'getUninstalledAt',
        'updated_at' => 'getUpdatedAt',
        'vendor' => 'getVendor',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('app_id', $data ?? [], null);
        $this->setIfExists('bundle_size', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('device_id', $data ?? [], null);
        $this->setIfExists('dynamic_size', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('identifier', $data ?? [], null);
        $this->setIfExists('installed_at', $data ?? [], null);
        $this->setIfExists('to_install', $data ?? [], null);
        $this->setIfExists('ios_redemption_code', $data ?? [], null);
        $this->setIfExists('is_managed', $data ?? [], null);
        $this->setIfExists('itunes_id', $data ?? [], null);
        $this->setIfExists('license_key', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('redemption_code', $data ?? [], null);
        $this->setIfExists('short_version', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('to_uninstall', $data ?? [], null);
        $this->setIfExists('uninstalled_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('vendor', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_id
     *
     * @return string|null
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param string|null $app_id The Meraki managed application Id for this record on a particular device.
     *
     * @return self
     */
    public function setAppId($app_id)
    {
        if (is_null($app_id)) {
            throw new \InvalidArgumentException('non-nullable app_id cannot be null');
        }
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets bundle_size
     *
     * @return int|null
     */
    public function getBundleSize()
    {
        return $this->container['bundle_size'];
    }

    /**
     * Sets bundle_size
     *
     * @param int|null $bundle_size The size of the software bundle.
     *
     * @return self
     */
    public function setBundleSize($bundle_size)
    {
        if (is_null($bundle_size)) {
            throw new \InvalidArgumentException('non-nullable bundle_size cannot be null');
        }
        $this->container['bundle_size'] = $bundle_size;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at When the Meraki record for the software was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return string|null
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param string|null $device_id The Meraki managed device Id.
     *
     * @return self
     */
    public function setDeviceId($device_id)
    {
        if (is_null($device_id)) {
            throw new \InvalidArgumentException('non-nullable device_id cannot be null');
        }
        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets dynamic_size
     *
     * @return int|null
     */
    public function getDynamicSize()
    {
        return $this->container['dynamic_size'];
    }

    /**
     * Sets dynamic_size
     *
     * @param int|null $dynamic_size The size of the data stored in the application.
     *
     * @return self
     */
    public function setDynamicSize($dynamic_size)
    {
        if (is_null($dynamic_size)) {
            throw new \InvalidArgumentException('non-nullable dynamic_size cannot be null');
        }
        $this->container['dynamic_size'] = $dynamic_size;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The Meraki software Id.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string|null
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string|null $identifier Software bundle identifier.
     *
     * @return self
     */
    public function setIdentifier($identifier)
    {
        if (is_null($identifier)) {
            throw new \InvalidArgumentException('non-nullable identifier cannot be null');
        }
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets installed_at
     *
     * @return string|null
     */
    public function getInstalledAt()
    {
        return $this->container['installed_at'];
    }

    /**
     * Sets installed_at
     *
     * @param string|null $installed_at When the Software was installed on the device.
     *
     * @return self
     */
    public function setInstalledAt($installed_at)
    {
        if (is_null($installed_at)) {
            throw new \InvalidArgumentException('non-nullable installed_at cannot be null');
        }
        $this->container['installed_at'] = $installed_at;

        return $this;
    }

    /**
     * Gets to_install
     *
     * @return bool|null
     */
    public function getToInstall()
    {
        return $this->container['to_install'];
    }

    /**
     * Sets to_install
     *
     * @param bool|null $to_install A boolean indicating this software record should be installed on the associated device.
     *
     * @return self
     */
    public function setToInstall($to_install)
    {
        if (is_null($to_install)) {
            throw new \InvalidArgumentException('non-nullable to_install cannot be null');
        }
        $this->container['to_install'] = $to_install;

        return $this;
    }

    /**
     * Gets ios_redemption_code
     *
     * @return bool|null
     */
    public function getIosRedemptionCode()
    {
        return $this->container['ios_redemption_code'];
    }

    /**
     * Sets ios_redemption_code
     *
     * @param bool|null $ios_redemption_code A boolean indicating whether or not an iOS redemption code was used.
     *
     * @return self
     */
    public function setIosRedemptionCode($ios_redemption_code)
    {
        if (is_null($ios_redemption_code)) {
            throw new \InvalidArgumentException('non-nullable ios_redemption_code cannot be null');
        }
        $this->container['ios_redemption_code'] = $ios_redemption_code;

        return $this;
    }

    /**
     * Gets is_managed
     *
     * @return bool|null
     */
    public function getIsManaged()
    {
        return $this->container['is_managed'];
    }

    /**
     * Sets is_managed
     *
     * @param bool|null $is_managed A boolean indicating whether or not the software is managed by Meraki.
     *
     * @return self
     */
    public function setIsManaged($is_managed)
    {
        if (is_null($is_managed)) {
            throw new \InvalidArgumentException('non-nullable is_managed cannot be null');
        }
        $this->container['is_managed'] = $is_managed;

        return $this;
    }

    /**
     * Gets itunes_id
     *
     * @return string|null
     */
    public function getItunesId()
    {
        return $this->container['itunes_id'];
    }

    /**
     * Sets itunes_id
     *
     * @param string|null $itunes_id The itunes numerical identifier.
     *
     * @return self
     */
    public function setItunesId($itunes_id)
    {
        if (is_null($itunes_id)) {
            throw new \InvalidArgumentException('non-nullable itunes_id cannot be null');
        }
        $this->container['itunes_id'] = $itunes_id;

        return $this;
    }

    /**
     * Gets license_key
     *
     * @return string|null
     */
    public function getLicenseKey()
    {
        return $this->container['license_key'];
    }

    /**
     * Sets license_key
     *
     * @param string|null $license_key The license key associated with this software installation.
     *
     * @return self
     */
    public function setLicenseKey($license_key)
    {
        if (is_null($license_key)) {
            throw new \InvalidArgumentException('non-nullable license_key cannot be null');
        }
        $this->container['license_key'] = $license_key;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the software.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path The path on the device where the software record is located.
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets redemption_code
     *
     * @return int|null
     */
    public function getRedemptionCode()
    {
        return $this->container['redemption_code'];
    }

    /**
     * Sets redemption_code
     *
     * @param int|null $redemption_code The redemption code used for this software.
     *
     * @return self
     */
    public function setRedemptionCode($redemption_code)
    {
        if (is_null($redemption_code)) {
            throw new \InvalidArgumentException('non-nullable redemption_code cannot be null');
        }
        $this->container['redemption_code'] = $redemption_code;

        return $this;
    }

    /**
     * Gets short_version
     *
     * @return string|null
     */
    public function getShortVersion()
    {
        return $this->container['short_version'];
    }

    /**
     * Sets short_version
     *
     * @param string|null $short_version Short version notation for the software.
     *
     * @return self
     */
    public function setShortVersion($short_version)
    {
        if (is_null($short_version)) {
            throw new \InvalidArgumentException('non-nullable short_version cannot be null');
        }
        $this->container['short_version'] = $short_version;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The management status of the software.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets to_uninstall
     *
     * @return bool|null
     */
    public function getToUninstall()
    {
        return $this->container['to_uninstall'];
    }

    /**
     * Sets to_uninstall
     *
     * @param bool|null $to_uninstall A boolean indicating this software record should be uninstalled on the associated device.
     *
     * @return self
     */
    public function setToUninstall($to_uninstall)
    {
        if (is_null($to_uninstall)) {
            throw new \InvalidArgumentException('non-nullable to_uninstall cannot be null');
        }
        $this->container['to_uninstall'] = $to_uninstall;

        return $this;
    }

    /**
     * Gets uninstalled_at
     *
     * @return string|null
     */
    public function getUninstalledAt()
    {
        return $this->container['uninstalled_at'];
    }

    /**
     * Sets uninstalled_at
     *
     * @param string|null $uninstalled_at When the record was uninstalled from the device.
     *
     * @return self
     */
    public function setUninstalledAt($uninstalled_at)
    {
        if (is_null($uninstalled_at)) {
            throw new \InvalidArgumentException('non-nullable uninstalled_at cannot be null');
        }
        $this->container['uninstalled_at'] = $uninstalled_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at When the record was last updated by Meraki.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return string|null
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param string|null $vendor The vendor of the software.
     *
     * @return self
     */
    public function setVendor($vendor)
    {
        if (is_null($vendor)) {
            throw new \InvalidArgumentException('non-nullable vendor cannot be null');
        }
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version Full version notation for the software.
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


