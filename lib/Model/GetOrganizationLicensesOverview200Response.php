<?php
/**
 * GetOrganizationLicensesOverview200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetOrganizationLicensesOverview200Response Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetOrganizationLicensesOverview200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getOrganizationLicensesOverview_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'expiration_date' => 'string',
        'licensed_device_counts' => 'array<string,int>',
        'license_count' => 'int',
        'states' => '\Meraki\Model\GetOrganizationLicensesOverview200ResponseStates',
        'license_types' => '\Meraki\Model\GetOrganizationLicensesOverview200ResponseLicenseTypesInner[]',
        'systems_manager' => '\Meraki\Model\GetOrganizationLicensesOverview200ResponseSystemsManager'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'expiration_date' => null,
        'licensed_device_counts' => null,
        'license_count' => null,
        'states' => null,
        'license_types' => null,
        'systems_manager' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'status' => false,
        'expiration_date' => false,
        'licensed_device_counts' => false,
        'license_count' => false,
        'states' => false,
        'license_types' => false,
        'systems_manager' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'expiration_date' => 'expirationDate',
        'licensed_device_counts' => 'licensedDeviceCounts',
        'license_count' => 'licenseCount',
        'states' => 'states',
        'license_types' => 'licenseTypes',
        'systems_manager' => 'systemsManager'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'expiration_date' => 'setExpirationDate',
        'licensed_device_counts' => 'setLicensedDeviceCounts',
        'license_count' => 'setLicenseCount',
        'states' => 'setStates',
        'license_types' => 'setLicenseTypes',
        'systems_manager' => 'setSystemsManager'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'expiration_date' => 'getExpirationDate',
        'licensed_device_counts' => 'getLicensedDeviceCounts',
        'license_count' => 'getLicenseCount',
        'states' => 'getStates',
        'license_types' => 'getLicenseTypes',
        'systems_manager' => 'getSystemsManager'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('licensed_device_counts', $data ?? [], null);
        $this->setIfExists('license_count', $data ?? [], null);
        $this->setIfExists('states', $data ?? [], null);
        $this->setIfExists('license_types', $data ?? [], null);
        $this->setIfExists('systems_manager', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status License status (Co-termination licensing only)
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string|null $expiration_date License expiration date (Co-termination licensing only)
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets licensed_device_counts
     *
     * @return array<string,int>|null
     */
    public function getLicensedDeviceCounts()
    {
        return $this->container['licensed_device_counts'];
    }

    /**
     * Sets licensed_device_counts
     *
     * @param array<string,int>|null $licensed_device_counts License counts (Co-termination licensing only)
     *
     * @return self
     */
    public function setLicensedDeviceCounts($licensed_device_counts)
    {
        if (is_null($licensed_device_counts)) {
            throw new \InvalidArgumentException('non-nullable licensed_device_counts cannot be null');
        }
        $this->container['licensed_device_counts'] = $licensed_device_counts;

        return $this;
    }

    /**
     * Gets license_count
     *
     * @return int|null
     */
    public function getLicenseCount()
    {
        return $this->container['license_count'];
    }

    /**
     * Sets license_count
     *
     * @param int|null $license_count Total number of licenses (Per-device licensing only)
     *
     * @return self
     */
    public function setLicenseCount($license_count)
    {
        if (is_null($license_count)) {
            throw new \InvalidArgumentException('non-nullable license_count cannot be null');
        }
        $this->container['license_count'] = $license_count;

        return $this;
    }

    /**
     * Gets states
     *
     * @return \Meraki\Model\GetOrganizationLicensesOverview200ResponseStates|null
     */
    public function getStates()
    {
        return $this->container['states'];
    }

    /**
     * Sets states
     *
     * @param \Meraki\Model\GetOrganizationLicensesOverview200ResponseStates|null $states states
     *
     * @return self
     */
    public function setStates($states)
    {
        if (is_null($states)) {
            throw new \InvalidArgumentException('non-nullable states cannot be null');
        }
        $this->container['states'] = $states;

        return $this;
    }

    /**
     * Gets license_types
     *
     * @return \Meraki\Model\GetOrganizationLicensesOverview200ResponseLicenseTypesInner[]|null
     */
    public function getLicenseTypes()
    {
        return $this->container['license_types'];
    }

    /**
     * Sets license_types
     *
     * @param \Meraki\Model\GetOrganizationLicensesOverview200ResponseLicenseTypesInner[]|null $license_types Data by license type (Per-device licensing only)
     *
     * @return self
     */
    public function setLicenseTypes($license_types)
    {
        if (is_null($license_types)) {
            throw new \InvalidArgumentException('non-nullable license_types cannot be null');
        }
        $this->container['license_types'] = $license_types;

        return $this;
    }

    /**
     * Gets systems_manager
     *
     * @return \Meraki\Model\GetOrganizationLicensesOverview200ResponseSystemsManager|null
     */
    public function getSystemsManager()
    {
        return $this->container['systems_manager'];
    }

    /**
     * Sets systems_manager
     *
     * @param \Meraki\Model\GetOrganizationLicensesOverview200ResponseSystemsManager|null $systems_manager systems_manager
     *
     * @return self
     */
    public function setSystemsManager($systems_manager)
    {
        if (is_null($systems_manager)) {
            throw new \InvalidArgumentException('non-nullable systems_manager cannot be null');
        }
        $this->container['systems_manager'] = $systems_manager;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


