<?php
/**
 * UpdateNetworkClientSplashAuthorizationStatusRequestSsids
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * UpdateNetworkClientSplashAuthorizationStatusRequestSsids Class Doc Comment
 *
 * @category Class
 * @description The target SSIDs. Each SSID must be enabled and must have Click-through splash enabled. For each SSID where isAuthorized is true, the expiration time will automatically be set according to the SSID&#39;s splash frequency. Not all networks support configuring all SSIDs
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateNetworkClientSplashAuthorizationStatusRequestSsids implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'updateNetworkClientSplashAuthorizationStatus_request_ssids';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_0' => '\Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids0',
        '_1' => '\Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids1',
        '_2' => '\Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids2',
        '_3' => '\Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids3',
        '_4' => '\Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids4',
        '_5' => '\Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids5',
        '_6' => '\Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids6',
        '_7' => '\Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids7',
        '_8' => '\Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids8',
        '_9' => '\Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids9',
        '_10' => '\Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids10',
        '_11' => '\Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids11',
        '_12' => '\Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids12',
        '_13' => '\Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids13',
        '_14' => '\Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids14'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_0' => null,
        '_1' => null,
        '_2' => null,
        '_3' => null,
        '_4' => null,
        '_5' => null,
        '_6' => null,
        '_7' => null,
        '_8' => null,
        '_9' => null,
        '_10' => null,
        '_11' => null,
        '_12' => null,
        '_13' => null,
        '_14' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_0' => false,
        '_1' => false,
        '_2' => false,
        '_3' => false,
        '_4' => false,
        '_5' => false,
        '_6' => false,
        '_7' => false,
        '_8' => false,
        '_9' => false,
        '_10' => false,
        '_11' => false,
        '_12' => false,
        '_13' => false,
        '_14' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_0' => '0',
        '_1' => '1',
        '_2' => '2',
        '_3' => '3',
        '_4' => '4',
        '_5' => '5',
        '_6' => '6',
        '_7' => '7',
        '_8' => '8',
        '_9' => '9',
        '_10' => '10',
        '_11' => '11',
        '_12' => '12',
        '_13' => '13',
        '_14' => '14'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_0' => 'set0',
        '_1' => 'set1',
        '_2' => 'set2',
        '_3' => 'set3',
        '_4' => 'set4',
        '_5' => 'set5',
        '_6' => 'set6',
        '_7' => 'set7',
        '_8' => 'set8',
        '_9' => 'set9',
        '_10' => 'set10',
        '_11' => 'set11',
        '_12' => 'set12',
        '_13' => 'set13',
        '_14' => 'set14'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_0' => 'get0',
        '_1' => 'get1',
        '_2' => 'get2',
        '_3' => 'get3',
        '_4' => 'get4',
        '_5' => 'get5',
        '_6' => 'get6',
        '_7' => 'get7',
        '_8' => 'get8',
        '_9' => 'get9',
        '_10' => 'get10',
        '_11' => 'get11',
        '_12' => 'get12',
        '_13' => 'get13',
        '_14' => 'get14'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('_0', $data ?? [], null);
        $this->setIfExists('_1', $data ?? [], null);
        $this->setIfExists('_2', $data ?? [], null);
        $this->setIfExists('_3', $data ?? [], null);
        $this->setIfExists('_4', $data ?? [], null);
        $this->setIfExists('_5', $data ?? [], null);
        $this->setIfExists('_6', $data ?? [], null);
        $this->setIfExists('_7', $data ?? [], null);
        $this->setIfExists('_8', $data ?? [], null);
        $this->setIfExists('_9', $data ?? [], null);
        $this->setIfExists('_10', $data ?? [], null);
        $this->setIfExists('_11', $data ?? [], null);
        $this->setIfExists('_12', $data ?? [], null);
        $this->setIfExists('_13', $data ?? [], null);
        $this->setIfExists('_14', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _0
     *
     * @return \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids0|null
     */
    public function get0()
    {
        return $this->container['_0'];
    }

    /**
     * Sets _0
     *
     * @param \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids0|null $_0 _0
     *
     * @return self
     */
    public function set0($_0)
    {
        if (is_null($_0)) {
            throw new \InvalidArgumentException('non-nullable _0 cannot be null');
        }
        $this->container['_0'] = $_0;

        return $this;
    }

    /**
     * Gets _1
     *
     * @return \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids1|null
     */
    public function get1()
    {
        return $this->container['_1'];
    }

    /**
     * Sets _1
     *
     * @param \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids1|null $_1 _1
     *
     * @return self
     */
    public function set1($_1)
    {
        if (is_null($_1)) {
            throw new \InvalidArgumentException('non-nullable _1 cannot be null');
        }
        $this->container['_1'] = $_1;

        return $this;
    }

    /**
     * Gets _2
     *
     * @return \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids2|null
     */
    public function get2()
    {
        return $this->container['_2'];
    }

    /**
     * Sets _2
     *
     * @param \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids2|null $_2 _2
     *
     * @return self
     */
    public function set2($_2)
    {
        if (is_null($_2)) {
            throw new \InvalidArgumentException('non-nullable _2 cannot be null');
        }
        $this->container['_2'] = $_2;

        return $this;
    }

    /**
     * Gets _3
     *
     * @return \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids3|null
     */
    public function get3()
    {
        return $this->container['_3'];
    }

    /**
     * Sets _3
     *
     * @param \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids3|null $_3 _3
     *
     * @return self
     */
    public function set3($_3)
    {
        if (is_null($_3)) {
            throw new \InvalidArgumentException('non-nullable _3 cannot be null');
        }
        $this->container['_3'] = $_3;

        return $this;
    }

    /**
     * Gets _4
     *
     * @return \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids4|null
     */
    public function get4()
    {
        return $this->container['_4'];
    }

    /**
     * Sets _4
     *
     * @param \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids4|null $_4 _4
     *
     * @return self
     */
    public function set4($_4)
    {
        if (is_null($_4)) {
            throw new \InvalidArgumentException('non-nullable _4 cannot be null');
        }
        $this->container['_4'] = $_4;

        return $this;
    }

    /**
     * Gets _5
     *
     * @return \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids5|null
     */
    public function get5()
    {
        return $this->container['_5'];
    }

    /**
     * Sets _5
     *
     * @param \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids5|null $_5 _5
     *
     * @return self
     */
    public function set5($_5)
    {
        if (is_null($_5)) {
            throw new \InvalidArgumentException('non-nullable _5 cannot be null');
        }
        $this->container['_5'] = $_5;

        return $this;
    }

    /**
     * Gets _6
     *
     * @return \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids6|null
     */
    public function get6()
    {
        return $this->container['_6'];
    }

    /**
     * Sets _6
     *
     * @param \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids6|null $_6 _6
     *
     * @return self
     */
    public function set6($_6)
    {
        if (is_null($_6)) {
            throw new \InvalidArgumentException('non-nullable _6 cannot be null');
        }
        $this->container['_6'] = $_6;

        return $this;
    }

    /**
     * Gets _7
     *
     * @return \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids7|null
     */
    public function get7()
    {
        return $this->container['_7'];
    }

    /**
     * Sets _7
     *
     * @param \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids7|null $_7 _7
     *
     * @return self
     */
    public function set7($_7)
    {
        if (is_null($_7)) {
            throw new \InvalidArgumentException('non-nullable _7 cannot be null');
        }
        $this->container['_7'] = $_7;

        return $this;
    }

    /**
     * Gets _8
     *
     * @return \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids8|null
     */
    public function get8()
    {
        return $this->container['_8'];
    }

    /**
     * Sets _8
     *
     * @param \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids8|null $_8 _8
     *
     * @return self
     */
    public function set8($_8)
    {
        if (is_null($_8)) {
            throw new \InvalidArgumentException('non-nullable _8 cannot be null');
        }
        $this->container['_8'] = $_8;

        return $this;
    }

    /**
     * Gets _9
     *
     * @return \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids9|null
     */
    public function get9()
    {
        return $this->container['_9'];
    }

    /**
     * Sets _9
     *
     * @param \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids9|null $_9 _9
     *
     * @return self
     */
    public function set9($_9)
    {
        if (is_null($_9)) {
            throw new \InvalidArgumentException('non-nullable _9 cannot be null');
        }
        $this->container['_9'] = $_9;

        return $this;
    }

    /**
     * Gets _10
     *
     * @return \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids10|null
     */
    public function get10()
    {
        return $this->container['_10'];
    }

    /**
     * Sets _10
     *
     * @param \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids10|null $_10 _10
     *
     * @return self
     */
    public function set10($_10)
    {
        if (is_null($_10)) {
            throw new \InvalidArgumentException('non-nullable _10 cannot be null');
        }
        $this->container['_10'] = $_10;

        return $this;
    }

    /**
     * Gets _11
     *
     * @return \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids11|null
     */
    public function get11()
    {
        return $this->container['_11'];
    }

    /**
     * Sets _11
     *
     * @param \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids11|null $_11 _11
     *
     * @return self
     */
    public function set11($_11)
    {
        if (is_null($_11)) {
            throw new \InvalidArgumentException('non-nullable _11 cannot be null');
        }
        $this->container['_11'] = $_11;

        return $this;
    }

    /**
     * Gets _12
     *
     * @return \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids12|null
     */
    public function get12()
    {
        return $this->container['_12'];
    }

    /**
     * Sets _12
     *
     * @param \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids12|null $_12 _12
     *
     * @return self
     */
    public function set12($_12)
    {
        if (is_null($_12)) {
            throw new \InvalidArgumentException('non-nullable _12 cannot be null');
        }
        $this->container['_12'] = $_12;

        return $this;
    }

    /**
     * Gets _13
     *
     * @return \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids13|null
     */
    public function get13()
    {
        return $this->container['_13'];
    }

    /**
     * Sets _13
     *
     * @param \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids13|null $_13 _13
     *
     * @return self
     */
    public function set13($_13)
    {
        if (is_null($_13)) {
            throw new \InvalidArgumentException('non-nullable _13 cannot be null');
        }
        $this->container['_13'] = $_13;

        return $this;
    }

    /**
     * Gets _14
     *
     * @return \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids14|null
     */
    public function get14()
    {
        return $this->container['_14'];
    }

    /**
     * Sets _14
     *
     * @param \Meraki\Model\UpdateNetworkClientSplashAuthorizationStatusRequestSsids14|null $_14 _14
     *
     * @return self
     */
    public function set14($_14)
    {
        if (is_null($_14)) {
            throw new \InvalidArgumentException('non-nullable _14 cannot be null');
        }
        $this->container['_14'] = $_14;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


