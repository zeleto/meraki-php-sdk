<?php
/**
 * GetOrganizationConfigurationChanges200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetOrganizationConfigurationChanges200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetOrganizationConfigurationChanges200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getOrganizationConfigurationChanges_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ts' => '\DateTime',
        'admin_name' => 'string',
        'admin_email' => 'string',
        'admin_id' => 'string',
        'network_name' => 'string',
        'network_id' => 'string',
        'network_url' => 'string',
        'ssid_name' => 'string',
        'ssid_number' => 'int',
        'page' => 'string',
        'label' => 'string',
        'old_value' => 'string',
        'new_value' => 'string',
        'client' => '\Meraki\Model\GetOrganizationConfigurationChanges200ResponseInnerClient'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ts' => 'date-time',
        'admin_name' => null,
        'admin_email' => null,
        'admin_id' => null,
        'network_name' => null,
        'network_id' => null,
        'network_url' => null,
        'ssid_name' => null,
        'ssid_number' => null,
        'page' => null,
        'label' => null,
        'old_value' => null,
        'new_value' => null,
        'client' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ts' => false,
        'admin_name' => false,
        'admin_email' => false,
        'admin_id' => false,
        'network_name' => false,
        'network_id' => false,
        'network_url' => false,
        'ssid_name' => false,
        'ssid_number' => false,
        'page' => false,
        'label' => false,
        'old_value' => false,
        'new_value' => false,
        'client' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ts' => 'ts',
        'admin_name' => 'adminName',
        'admin_email' => 'adminEmail',
        'admin_id' => 'adminId',
        'network_name' => 'networkName',
        'network_id' => 'networkId',
        'network_url' => 'networkUrl',
        'ssid_name' => 'ssidName',
        'ssid_number' => 'ssidNumber',
        'page' => 'page',
        'label' => 'label',
        'old_value' => 'oldValue',
        'new_value' => 'newValue',
        'client' => 'client'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ts' => 'setTs',
        'admin_name' => 'setAdminName',
        'admin_email' => 'setAdminEmail',
        'admin_id' => 'setAdminId',
        'network_name' => 'setNetworkName',
        'network_id' => 'setNetworkId',
        'network_url' => 'setNetworkUrl',
        'ssid_name' => 'setSsidName',
        'ssid_number' => 'setSsidNumber',
        'page' => 'setPage',
        'label' => 'setLabel',
        'old_value' => 'setOldValue',
        'new_value' => 'setNewValue',
        'client' => 'setClient'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ts' => 'getTs',
        'admin_name' => 'getAdminName',
        'admin_email' => 'getAdminEmail',
        'admin_id' => 'getAdminId',
        'network_name' => 'getNetworkName',
        'network_id' => 'getNetworkId',
        'network_url' => 'getNetworkUrl',
        'ssid_name' => 'getSsidName',
        'ssid_number' => 'getSsidNumber',
        'page' => 'getPage',
        'label' => 'getLabel',
        'old_value' => 'getOldValue',
        'new_value' => 'getNewValue',
        'client' => 'getClient'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('ts', $data ?? [], null);
        $this->setIfExists('admin_name', $data ?? [], null);
        $this->setIfExists('admin_email', $data ?? [], null);
        $this->setIfExists('admin_id', $data ?? [], null);
        $this->setIfExists('network_name', $data ?? [], null);
        $this->setIfExists('network_id', $data ?? [], null);
        $this->setIfExists('network_url', $data ?? [], null);
        $this->setIfExists('ssid_name', $data ?? [], null);
        $this->setIfExists('ssid_number', $data ?? [], null);
        $this->setIfExists('page', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('old_value', $data ?? [], null);
        $this->setIfExists('new_value', $data ?? [], null);
        $this->setIfExists('client', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ts
     *
     * @return \DateTime|null
     */
    public function getTs()
    {
        return $this->container['ts'];
    }

    /**
     * Sets ts
     *
     * @param \DateTime|null $ts Time, in ISO8601 format, when the configuration change was made.
     *
     * @return self
     */
    public function setTs($ts)
    {
        if (is_null($ts)) {
            throw new \InvalidArgumentException('non-nullable ts cannot be null');
        }
        $this->container['ts'] = $ts;

        return $this;
    }

    /**
     * Gets admin_name
     *
     * @return string|null
     */
    public function getAdminName()
    {
        return $this->container['admin_name'];
    }

    /**
     * Sets admin_name
     *
     * @param string|null $admin_name The name of the admin who made the configuration change.
     *
     * @return self
     */
    public function setAdminName($admin_name)
    {
        if (is_null($admin_name)) {
            throw new \InvalidArgumentException('non-nullable admin_name cannot be null');
        }
        $this->container['admin_name'] = $admin_name;

        return $this;
    }

    /**
     * Gets admin_email
     *
     * @return string|null
     */
    public function getAdminEmail()
    {
        return $this->container['admin_email'];
    }

    /**
     * Sets admin_email
     *
     * @param string|null $admin_email The email address of the admin who made the configuration change. This attribute may be null.
     *
     * @return self
     */
    public function setAdminEmail($admin_email)
    {
        if (is_null($admin_email)) {
            throw new \InvalidArgumentException('non-nullable admin_email cannot be null');
        }
        $this->container['admin_email'] = $admin_email;

        return $this;
    }

    /**
     * Gets admin_id
     *
     * @return string|null
     */
    public function getAdminId()
    {
        return $this->container['admin_id'];
    }

    /**
     * Sets admin_id
     *
     * @param string|null $admin_id The ID of the admin who made the configuration change. This attribute may be null.
     *
     * @return self
     */
    public function setAdminId($admin_id)
    {
        if (is_null($admin_id)) {
            throw new \InvalidArgumentException('non-nullable admin_id cannot be null');
        }
        $this->container['admin_id'] = $admin_id;

        return $this;
    }

    /**
     * Gets network_name
     *
     * @return string|null
     */
    public function getNetworkName()
    {
        return $this->container['network_name'];
    }

    /**
     * Sets network_name
     *
     * @param string|null $network_name The name of the network that the configuration change was applied to. This attribute may be null.
     *
     * @return self
     */
    public function setNetworkName($network_name)
    {
        if (is_null($network_name)) {
            throw new \InvalidArgumentException('non-nullable network_name cannot be null');
        }
        $this->container['network_name'] = $network_name;

        return $this;
    }

    /**
     * Gets network_id
     *
     * @return string|null
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param string|null $network_id The ID of the network that the configuration change was applied to. This attribute may be null.
     *
     * @return self
     */
    public function setNetworkId($network_id)
    {
        if (is_null($network_id)) {
            throw new \InvalidArgumentException('non-nullable network_id cannot be null');
        }
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets network_url
     *
     * @return string|null
     */
    public function getNetworkUrl()
    {
        return $this->container['network_url'];
    }

    /**
     * Sets network_url
     *
     * @param string|null $network_url The url of the network that the configuration change was applied to. This attribute may be null.
     *
     * @return self
     */
    public function setNetworkUrl($network_url)
    {
        if (is_null($network_url)) {
            throw new \InvalidArgumentException('non-nullable network_url cannot be null');
        }
        $this->container['network_url'] = $network_url;

        return $this;
    }

    /**
     * Gets ssid_name
     *
     * @return string|null
     */
    public function getSsidName()
    {
        return $this->container['ssid_name'];
    }

    /**
     * Sets ssid_name
     *
     * @param string|null $ssid_name The name of the ssid that the configuration change was applied to, if applicable. This attribute may be null.
     *
     * @return self
     */
    public function setSsidName($ssid_name)
    {
        if (is_null($ssid_name)) {
            throw new \InvalidArgumentException('non-nullable ssid_name cannot be null');
        }
        $this->container['ssid_name'] = $ssid_name;

        return $this;
    }

    /**
     * Gets ssid_number
     *
     * @return int|null
     */
    public function getSsidNumber()
    {
        return $this->container['ssid_number'];
    }

    /**
     * Sets ssid_number
     *
     * @param int|null $ssid_number The ssid number that the configuration change was applied to, if applicable. This attribute may be null.
     *
     * @return self
     */
    public function setSsidNumber($ssid_number)
    {
        if (is_null($ssid_number)) {
            throw new \InvalidArgumentException('non-nullable ssid_number cannot be null');
        }
        $this->container['ssid_number'] = $ssid_number;

        return $this;
    }

    /**
     * Gets page
     *
     * @return string|null
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param string|null $page The name of the Meraki Dashboard page on which the configuration change was made.
     *
     * @return self
     */
    public function setPage($page)
    {
        if (is_null($page)) {
            throw new \InvalidArgumentException('non-nullable page cannot be null');
        }
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label Description of the configuration change.
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets old_value
     *
     * @return string|null
     */
    public function getOldValue()
    {
        return $this->container['old_value'];
    }

    /**
     * Sets old_value
     *
     * @param string|null $old_value The value of the configuration, before the change was applied.
     *
     * @return self
     */
    public function setOldValue($old_value)
    {
        if (is_null($old_value)) {
            throw new \InvalidArgumentException('non-nullable old_value cannot be null');
        }
        $this->container['old_value'] = $old_value;

        return $this;
    }

    /**
     * Gets new_value
     *
     * @return string|null
     */
    public function getNewValue()
    {
        return $this->container['new_value'];
    }

    /**
     * Sets new_value
     *
     * @param string|null $new_value The value of the configuration, after the change was applied.
     *
     * @return self
     */
    public function setNewValue($new_value)
    {
        if (is_null($new_value)) {
            throw new \InvalidArgumentException('non-nullable new_value cannot be null');
        }
        $this->container['new_value'] = $new_value;

        return $this;
    }

    /**
     * Gets client
     *
     * @return \Meraki\Model\GetOrganizationConfigurationChanges200ResponseInnerClient|null
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param \Meraki\Model\GetOrganizationConfigurationChanges200ResponseInnerClient|null $client client
     *
     * @return self
     */
    public function setClient($client)
    {
        if (is_null($client)) {
            throw new \InvalidArgumentException('non-nullable client cannot be null');
        }
        $this->container['client'] = $client;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


