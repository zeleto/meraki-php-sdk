<?php
/**
 * CreateDeviceSwitchRoutingInterfaceRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * CreateDeviceSwitchRoutingInterfaceRequest Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateDeviceSwitchRoutingInterfaceRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'createDeviceSwitchRoutingInterface_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'subnet' => 'string',
        'interface_ip' => 'string',
        'multicast_routing' => 'string',
        'vlan_id' => 'int',
        'default_gateway' => 'string',
        'ospf_settings' => '\Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequestOspfSettings',
        'ipv6' => '\Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequestIpv6'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'subnet' => null,
        'interface_ip' => null,
        'multicast_routing' => null,
        'vlan_id' => null,
        'default_gateway' => null,
        'ospf_settings' => null,
        'ipv6' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'subnet' => false,
        'interface_ip' => false,
        'multicast_routing' => false,
        'vlan_id' => false,
        'default_gateway' => false,
        'ospf_settings' => false,
        'ipv6' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'subnet' => 'subnet',
        'interface_ip' => 'interfaceIp',
        'multicast_routing' => 'multicastRouting',
        'vlan_id' => 'vlanId',
        'default_gateway' => 'defaultGateway',
        'ospf_settings' => 'ospfSettings',
        'ipv6' => 'ipv6'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'subnet' => 'setSubnet',
        'interface_ip' => 'setInterfaceIp',
        'multicast_routing' => 'setMulticastRouting',
        'vlan_id' => 'setVlanId',
        'default_gateway' => 'setDefaultGateway',
        'ospf_settings' => 'setOspfSettings',
        'ipv6' => 'setIpv6'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'subnet' => 'getSubnet',
        'interface_ip' => 'getInterfaceIp',
        'multicast_routing' => 'getMulticastRouting',
        'vlan_id' => 'getVlanId',
        'default_gateway' => 'getDefaultGateway',
        'ospf_settings' => 'getOspfSettings',
        'ipv6' => 'getIpv6'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MULTICAST_ROUTING_IGMP_SNOOPING_QUERIER = 'IGMP snooping querier';
    public const MULTICAST_ROUTING_DISABLED = 'disabled';
    public const MULTICAST_ROUTING_ENABLED = 'enabled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMulticastRoutingAllowableValues()
    {
        return [
            self::MULTICAST_ROUTING_IGMP_SNOOPING_QUERIER,
            self::MULTICAST_ROUTING_DISABLED,
            self::MULTICAST_ROUTING_ENABLED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('subnet', $data ?? [], null);
        $this->setIfExists('interface_ip', $data ?? [], null);
        $this->setIfExists('multicast_routing', $data ?? [], null);
        $this->setIfExists('vlan_id', $data ?? [], null);
        $this->setIfExists('default_gateway', $data ?? [], null);
        $this->setIfExists('ospf_settings', $data ?? [], null);
        $this->setIfExists('ipv6', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getMulticastRoutingAllowableValues();
        if (!is_null($this->container['multicast_routing']) && !in_array($this->container['multicast_routing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'multicast_routing', must be one of '%s'",
                $this->container['multicast_routing'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name A friendly name or description for the interface or VLAN.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets subnet
     *
     * @return string|null
     */
    public function getSubnet()
    {
        return $this->container['subnet'];
    }

    /**
     * Sets subnet
     *
     * @param string|null $subnet The network that this L3 interface is on, in CIDR notation (ex. 10.1.1.0/24).
     *
     * @return self
     */
    public function setSubnet($subnet)
    {
        if (is_null($subnet)) {
            throw new \InvalidArgumentException('non-nullable subnet cannot be null');
        }
        $this->container['subnet'] = $subnet;

        return $this;
    }

    /**
     * Gets interface_ip
     *
     * @return string|null
     */
    public function getInterfaceIp()
    {
        return $this->container['interface_ip'];
    }

    /**
     * Sets interface_ip
     *
     * @param string|null $interface_ip The IP address that will be used for Layer 3 routing on this VLAN or subnet. This cannot be the same         as the device management IP.
     *
     * @return self
     */
    public function setInterfaceIp($interface_ip)
    {
        if (is_null($interface_ip)) {
            throw new \InvalidArgumentException('non-nullable interface_ip cannot be null');
        }
        $this->container['interface_ip'] = $interface_ip;

        return $this;
    }

    /**
     * Gets multicast_routing
     *
     * @return string|null
     */
    public function getMulticastRouting()
    {
        return $this->container['multicast_routing'];
    }

    /**
     * Sets multicast_routing
     *
     * @param string|null $multicast_routing Enable multicast support if, multicast routing between VLANs is required. Options are:         'disabled', 'enabled' or 'IGMP snooping querier'. Default is 'disabled'.
     *
     * @return self
     */
    public function setMulticastRouting($multicast_routing)
    {
        if (is_null($multicast_routing)) {
            throw new \InvalidArgumentException('non-nullable multicast_routing cannot be null');
        }
        $allowedValues = $this->getMulticastRoutingAllowableValues();
        if (!in_array($multicast_routing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'multicast_routing', must be one of '%s'",
                    $multicast_routing,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['multicast_routing'] = $multicast_routing;

        return $this;
    }

    /**
     * Gets vlan_id
     *
     * @return int|null
     */
    public function getVlanId()
    {
        return $this->container['vlan_id'];
    }

    /**
     * Sets vlan_id
     *
     * @param int|null $vlan_id The VLAN this L3 interface is on. VLAN must be between 1 and 4094.
     *
     * @return self
     */
    public function setVlanId($vlan_id)
    {
        if (is_null($vlan_id)) {
            throw new \InvalidArgumentException('non-nullable vlan_id cannot be null');
        }
        $this->container['vlan_id'] = $vlan_id;

        return $this;
    }

    /**
     * Gets default_gateway
     *
     * @return string|null
     */
    public function getDefaultGateway()
    {
        return $this->container['default_gateway'];
    }

    /**
     * Sets default_gateway
     *
     * @param string|null $default_gateway The next hop for any traffic that isn't going to a directly connected subnet or over a static route.         This IP address must exist in a subnet with a L3 interface. Required if this is the first IPv4 interface.
     *
     * @return self
     */
    public function setDefaultGateway($default_gateway)
    {
        if (is_null($default_gateway)) {
            throw new \InvalidArgumentException('non-nullable default_gateway cannot be null');
        }
        $this->container['default_gateway'] = $default_gateway;

        return $this;
    }

    /**
     * Gets ospf_settings
     *
     * @return \Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequestOspfSettings|null
     */
    public function getOspfSettings()
    {
        return $this->container['ospf_settings'];
    }

    /**
     * Sets ospf_settings
     *
     * @param \Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequestOspfSettings|null $ospf_settings ospf_settings
     *
     * @return self
     */
    public function setOspfSettings($ospf_settings)
    {
        if (is_null($ospf_settings)) {
            throw new \InvalidArgumentException('non-nullable ospf_settings cannot be null');
        }
        $this->container['ospf_settings'] = $ospf_settings;

        return $this;
    }

    /**
     * Gets ipv6
     *
     * @return \Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequestIpv6|null
     */
    public function getIpv6()
    {
        return $this->container['ipv6'];
    }

    /**
     * Sets ipv6
     *
     * @param \Meraki\Model\CreateDeviceSwitchRoutingInterfaceRequestIpv6|null $ipv6 ipv6
     *
     * @return self
     */
    public function setIpv6($ipv6)
    {
        if (is_null($ipv6)) {
            throw new \InvalidArgumentException('non-nullable ipv6 cannot be null');
        }
        $this->container['ipv6'] = $ipv6;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


