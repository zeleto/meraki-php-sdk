<?php
/**
 * GetNetworkEvents200ResponseEventsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetNetworkEvents200ResponseEventsInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetNetworkEvents200ResponseEventsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getNetworkEvents_200_response_events_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'occurred_at' => 'string',
        'network_id' => 'string',
        'type' => 'string',
        'description' => 'string',
        'category' => 'string',
        'client_id' => 'string',
        'client_description' => 'string',
        'client_mac' => 'string',
        'device_serial' => 'string',
        'device_name' => 'string',
        'ssid_number' => 'int',
        'event_data' => '\Meraki\Model\GetNetworkEvents200ResponseEventsInnerEventData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'occurred_at' => null,
        'network_id' => null,
        'type' => null,
        'description' => null,
        'category' => null,
        'client_id' => null,
        'client_description' => null,
        'client_mac' => null,
        'device_serial' => null,
        'device_name' => null,
        'ssid_number' => null,
        'event_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'occurred_at' => false,
        'network_id' => false,
        'type' => false,
        'description' => false,
        'category' => false,
        'client_id' => false,
        'client_description' => false,
        'client_mac' => false,
        'device_serial' => false,
        'device_name' => false,
        'ssid_number' => false,
        'event_data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'occurred_at' => 'occurredAt',
        'network_id' => 'networkId',
        'type' => 'type',
        'description' => 'description',
        'category' => 'category',
        'client_id' => 'clientId',
        'client_description' => 'clientDescription',
        'client_mac' => 'clientMac',
        'device_serial' => 'deviceSerial',
        'device_name' => 'deviceName',
        'ssid_number' => 'ssidNumber',
        'event_data' => 'eventData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'occurred_at' => 'setOccurredAt',
        'network_id' => 'setNetworkId',
        'type' => 'setType',
        'description' => 'setDescription',
        'category' => 'setCategory',
        'client_id' => 'setClientId',
        'client_description' => 'setClientDescription',
        'client_mac' => 'setClientMac',
        'device_serial' => 'setDeviceSerial',
        'device_name' => 'setDeviceName',
        'ssid_number' => 'setSsidNumber',
        'event_data' => 'setEventData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'occurred_at' => 'getOccurredAt',
        'network_id' => 'getNetworkId',
        'type' => 'getType',
        'description' => 'getDescription',
        'category' => 'getCategory',
        'client_id' => 'getClientId',
        'client_description' => 'getClientDescription',
        'client_mac' => 'getClientMac',
        'device_serial' => 'getDeviceSerial',
        'device_name' => 'getDeviceName',
        'ssid_number' => 'getSsidNumber',
        'event_data' => 'getEventData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('occurred_at', $data ?? [], null);
        $this->setIfExists('network_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('client_description', $data ?? [], null);
        $this->setIfExists('client_mac', $data ?? [], null);
        $this->setIfExists('device_serial', $data ?? [], null);
        $this->setIfExists('device_name', $data ?? [], null);
        $this->setIfExists('ssid_number', $data ?? [], null);
        $this->setIfExists('event_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets occurred_at
     *
     * @return string|null
     */
    public function getOccurredAt()
    {
        return $this->container['occurred_at'];
    }

    /**
     * Sets occurred_at
     *
     * @param string|null $occurred_at An UTC ISO8601 string of the time the event occurred at.
     *
     * @return self
     */
    public function setOccurredAt($occurred_at)
    {
        if (is_null($occurred_at)) {
            throw new \InvalidArgumentException('non-nullable occurred_at cannot be null');
        }
        $this->container['occurred_at'] = $occurred_at;

        return $this;
    }

    /**
     * Gets network_id
     *
     * @return string|null
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param string|null $network_id The ID of the network.
     *
     * @return self
     */
    public function setNetworkId($network_id)
    {
        if (is_null($network_id)) {
            throw new \InvalidArgumentException('non-nullable network_id cannot be null');
        }
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of event being listed.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description of the event the happened.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category The category that the event type belongs to
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id A string identifying the client. This could be a client's MAC or IP address
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets client_description
     *
     * @return string|null
     */
    public function getClientDescription()
    {
        return $this->container['client_description'];
    }

    /**
     * Sets client_description
     *
     * @param string|null $client_description A description of the client. This is usually the client's device name.
     *
     * @return self
     */
    public function setClientDescription($client_description)
    {
        if (is_null($client_description)) {
            throw new \InvalidArgumentException('non-nullable client_description cannot be null');
        }
        $this->container['client_description'] = $client_description;

        return $this;
    }

    /**
     * Gets client_mac
     *
     * @return string|null
     */
    public function getClientMac()
    {
        return $this->container['client_mac'];
    }

    /**
     * Sets client_mac
     *
     * @param string|null $client_mac The client's MAC address.
     *
     * @return self
     */
    public function setClientMac($client_mac)
    {
        if (is_null($client_mac)) {
            throw new \InvalidArgumentException('non-nullable client_mac cannot be null');
        }
        $this->container['client_mac'] = $client_mac;

        return $this;
    }

    /**
     * Gets device_serial
     *
     * @return string|null
     */
    public function getDeviceSerial()
    {
        return $this->container['device_serial'];
    }

    /**
     * Sets device_serial
     *
     * @param string|null $device_serial The serial number of the device. Only shown if the device is an access point.
     *
     * @return self
     */
    public function setDeviceSerial($device_serial)
    {
        if (is_null($device_serial)) {
            throw new \InvalidArgumentException('non-nullable device_serial cannot be null');
        }
        $this->container['device_serial'] = $device_serial;

        return $this;
    }

    /**
     * Gets device_name
     *
     * @return string|null
     */
    public function getDeviceName()
    {
        return $this->container['device_name'];
    }

    /**
     * Sets device_name
     *
     * @param string|null $device_name The name of the device. Only shown if the device is an access point.
     *
     * @return self
     */
    public function setDeviceName($device_name)
    {
        if (is_null($device_name)) {
            throw new \InvalidArgumentException('non-nullable device_name cannot be null');
        }
        $this->container['device_name'] = $device_name;

        return $this;
    }

    /**
     * Gets ssid_number
     *
     * @return int|null
     */
    public function getSsidNumber()
    {
        return $this->container['ssid_number'];
    }

    /**
     * Sets ssid_number
     *
     * @param int|null $ssid_number The SSID number of the device.
     *
     * @return self
     */
    public function setSsidNumber($ssid_number)
    {
        if (is_null($ssid_number)) {
            throw new \InvalidArgumentException('non-nullable ssid_number cannot be null');
        }
        $this->container['ssid_number'] = $ssid_number;

        return $this;
    }

    /**
     * Gets event_data
     *
     * @return \Meraki\Model\GetNetworkEvents200ResponseEventsInnerEventData|null
     */
    public function getEventData()
    {
        return $this->container['event_data'];
    }

    /**
     * Sets event_data
     *
     * @param \Meraki\Model\GetNetworkEvents200ResponseEventsInnerEventData|null $event_data event_data
     *
     * @return self
     */
    public function setEventData($event_data)
    {
        if (is_null($event_data)) {
            throw new \InvalidArgumentException('non-nullable event_data cannot be null');
        }
        $this->container['event_data'] = $event_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


