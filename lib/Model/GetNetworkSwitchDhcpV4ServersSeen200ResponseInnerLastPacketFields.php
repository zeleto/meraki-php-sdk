<?php
/**
 * GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields Class Doc Comment
 *
 * @category Class
 * @description DHCP-specific fields of the packet.
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFields implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getNetworkSwitchDhcpV4ServersSeen_200_response_inner_lastPacket_fields';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'op' => 'int',
        'htype' => 'int',
        'hlen' => 'int',
        'hops' => 'int',
        'xid' => 'string',
        'secs' => 'int',
        'flags' => 'string',
        'ciaddr' => 'string',
        'yiaddr' => 'string',
        'siaddr' => 'string',
        'giaddr' => 'string',
        'chaddr' => 'string',
        'sname' => 'string',
        'magic_cookie' => 'string',
        'options' => '\Meraki\Model\GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFieldsOptionsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'op' => null,
        'htype' => null,
        'hlen' => null,
        'hops' => null,
        'xid' => null,
        'secs' => null,
        'flags' => null,
        'ciaddr' => null,
        'yiaddr' => null,
        'siaddr' => null,
        'giaddr' => null,
        'chaddr' => null,
        'sname' => null,
        'magic_cookie' => null,
        'options' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'op' => false,
        'htype' => false,
        'hlen' => false,
        'hops' => false,
        'xid' => false,
        'secs' => false,
        'flags' => false,
        'ciaddr' => false,
        'yiaddr' => false,
        'siaddr' => false,
        'giaddr' => false,
        'chaddr' => false,
        'sname' => false,
        'magic_cookie' => false,
        'options' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'op' => 'op',
        'htype' => 'htype',
        'hlen' => 'hlen',
        'hops' => 'hops',
        'xid' => 'xid',
        'secs' => 'secs',
        'flags' => 'flags',
        'ciaddr' => 'ciaddr',
        'yiaddr' => 'yiaddr',
        'siaddr' => 'siaddr',
        'giaddr' => 'giaddr',
        'chaddr' => 'chaddr',
        'sname' => 'sname',
        'magic_cookie' => 'magicCookie',
        'options' => 'options'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'op' => 'setOp',
        'htype' => 'setHtype',
        'hlen' => 'setHlen',
        'hops' => 'setHops',
        'xid' => 'setXid',
        'secs' => 'setSecs',
        'flags' => 'setFlags',
        'ciaddr' => 'setCiaddr',
        'yiaddr' => 'setYiaddr',
        'siaddr' => 'setSiaddr',
        'giaddr' => 'setGiaddr',
        'chaddr' => 'setChaddr',
        'sname' => 'setSname',
        'magic_cookie' => 'setMagicCookie',
        'options' => 'setOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'op' => 'getOp',
        'htype' => 'getHtype',
        'hlen' => 'getHlen',
        'hops' => 'getHops',
        'xid' => 'getXid',
        'secs' => 'getSecs',
        'flags' => 'getFlags',
        'ciaddr' => 'getCiaddr',
        'yiaddr' => 'getYiaddr',
        'siaddr' => 'getSiaddr',
        'giaddr' => 'getGiaddr',
        'chaddr' => 'getChaddr',
        'sname' => 'getSname',
        'magic_cookie' => 'getMagicCookie',
        'options' => 'getOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('op', $data ?? [], null);
        $this->setIfExists('htype', $data ?? [], null);
        $this->setIfExists('hlen', $data ?? [], null);
        $this->setIfExists('hops', $data ?? [], null);
        $this->setIfExists('xid', $data ?? [], null);
        $this->setIfExists('secs', $data ?? [], null);
        $this->setIfExists('flags', $data ?? [], null);
        $this->setIfExists('ciaddr', $data ?? [], null);
        $this->setIfExists('yiaddr', $data ?? [], null);
        $this->setIfExists('siaddr', $data ?? [], null);
        $this->setIfExists('giaddr', $data ?? [], null);
        $this->setIfExists('chaddr', $data ?? [], null);
        $this->setIfExists('sname', $data ?? [], null);
        $this->setIfExists('magic_cookie', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets op
     *
     * @return int|null
     */
    public function getOp()
    {
        return $this->container['op'];
    }

    /**
     * Sets op
     *
     * @param int|null $op Operation code of the packet.
     *
     * @return self
     */
    public function setOp($op)
    {
        if (is_null($op)) {
            throw new \InvalidArgumentException('non-nullable op cannot be null');
        }
        $this->container['op'] = $op;

        return $this;
    }

    /**
     * Gets htype
     *
     * @return int|null
     */
    public function getHtype()
    {
        return $this->container['htype'];
    }

    /**
     * Sets htype
     *
     * @param int|null $htype Hardware type code of the packet.
     *
     * @return self
     */
    public function setHtype($htype)
    {
        if (is_null($htype)) {
            throw new \InvalidArgumentException('non-nullable htype cannot be null');
        }
        $this->container['htype'] = $htype;

        return $this;
    }

    /**
     * Gets hlen
     *
     * @return int|null
     */
    public function getHlen()
    {
        return $this->container['hlen'];
    }

    /**
     * Sets hlen
     *
     * @param int|null $hlen Hardware length of the packet.
     *
     * @return self
     */
    public function setHlen($hlen)
    {
        if (is_null($hlen)) {
            throw new \InvalidArgumentException('non-nullable hlen cannot be null');
        }
        $this->container['hlen'] = $hlen;

        return $this;
    }

    /**
     * Gets hops
     *
     * @return int|null
     */
    public function getHops()
    {
        return $this->container['hops'];
    }

    /**
     * Sets hops
     *
     * @param int|null $hops Number of hops the packet took.
     *
     * @return self
     */
    public function setHops($hops)
    {
        if (is_null($hops)) {
            throw new \InvalidArgumentException('non-nullable hops cannot be null');
        }
        $this->container['hops'] = $hops;

        return $this;
    }

    /**
     * Gets xid
     *
     * @return string|null
     */
    public function getXid()
    {
        return $this->container['xid'];
    }

    /**
     * Sets xid
     *
     * @param string|null $xid Transaction id of the packet.
     *
     * @return self
     */
    public function setXid($xid)
    {
        if (is_null($xid)) {
            throw new \InvalidArgumentException('non-nullable xid cannot be null');
        }
        $this->container['xid'] = $xid;

        return $this;
    }

    /**
     * Gets secs
     *
     * @return int|null
     */
    public function getSecs()
    {
        return $this->container['secs'];
    }

    /**
     * Sets secs
     *
     * @param int|null $secs Number of seconds since receiving the packet.
     *
     * @return self
     */
    public function setSecs($secs)
    {
        if (is_null($secs)) {
            throw new \InvalidArgumentException('non-nullable secs cannot be null');
        }
        $this->container['secs'] = $secs;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return string|null
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param string|null $flags Packet flags.
     *
     * @return self
     */
    public function setFlags($flags)
    {
        if (is_null($flags)) {
            throw new \InvalidArgumentException('non-nullable flags cannot be null');
        }
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets ciaddr
     *
     * @return string|null
     */
    public function getCiaddr()
    {
        return $this->container['ciaddr'];
    }

    /**
     * Sets ciaddr
     *
     * @param string|null $ciaddr Client IP address of the packet.
     *
     * @return self
     */
    public function setCiaddr($ciaddr)
    {
        if (is_null($ciaddr)) {
            throw new \InvalidArgumentException('non-nullable ciaddr cannot be null');
        }
        $this->container['ciaddr'] = $ciaddr;

        return $this;
    }

    /**
     * Gets yiaddr
     *
     * @return string|null
     */
    public function getYiaddr()
    {
        return $this->container['yiaddr'];
    }

    /**
     * Sets yiaddr
     *
     * @param string|null $yiaddr Assigned IP address of the packet.
     *
     * @return self
     */
    public function setYiaddr($yiaddr)
    {
        if (is_null($yiaddr)) {
            throw new \InvalidArgumentException('non-nullable yiaddr cannot be null');
        }
        $this->container['yiaddr'] = $yiaddr;

        return $this;
    }

    /**
     * Gets siaddr
     *
     * @return string|null
     */
    public function getSiaddr()
    {
        return $this->container['siaddr'];
    }

    /**
     * Sets siaddr
     *
     * @param string|null $siaddr Server IP address of the packet.
     *
     * @return self
     */
    public function setSiaddr($siaddr)
    {
        if (is_null($siaddr)) {
            throw new \InvalidArgumentException('non-nullable siaddr cannot be null');
        }
        $this->container['siaddr'] = $siaddr;

        return $this;
    }

    /**
     * Gets giaddr
     *
     * @return string|null
     */
    public function getGiaddr()
    {
        return $this->container['giaddr'];
    }

    /**
     * Sets giaddr
     *
     * @param string|null $giaddr Gateway IP address of the packet.
     *
     * @return self
     */
    public function setGiaddr($giaddr)
    {
        if (is_null($giaddr)) {
            throw new \InvalidArgumentException('non-nullable giaddr cannot be null');
        }
        $this->container['giaddr'] = $giaddr;

        return $this;
    }

    /**
     * Gets chaddr
     *
     * @return string|null
     */
    public function getChaddr()
    {
        return $this->container['chaddr'];
    }

    /**
     * Sets chaddr
     *
     * @param string|null $chaddr Client hardware address of the packet.
     *
     * @return self
     */
    public function setChaddr($chaddr)
    {
        if (is_null($chaddr)) {
            throw new \InvalidArgumentException('non-nullable chaddr cannot be null');
        }
        $this->container['chaddr'] = $chaddr;

        return $this;
    }

    /**
     * Gets sname
     *
     * @return string|null
     */
    public function getSname()
    {
        return $this->container['sname'];
    }

    /**
     * Sets sname
     *
     * @param string|null $sname Server identifier address of the packet.
     *
     * @return self
     */
    public function setSname($sname)
    {
        if (is_null($sname)) {
            throw new \InvalidArgumentException('non-nullable sname cannot be null');
        }
        $this->container['sname'] = $sname;

        return $this;
    }

    /**
     * Gets magic_cookie
     *
     * @return string|null
     */
    public function getMagicCookie()
    {
        return $this->container['magic_cookie'];
    }

    /**
     * Sets magic_cookie
     *
     * @param string|null $magic_cookie Magic cookie of the packet.
     *
     * @return self
     */
    public function setMagicCookie($magic_cookie)
    {
        if (is_null($magic_cookie)) {
            throw new \InvalidArgumentException('non-nullable magic_cookie cannot be null');
        }
        $this->container['magic_cookie'] = $magic_cookie;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \Meraki\Model\GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFieldsOptionsInner[]|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \Meraki\Model\GetNetworkSwitchDhcpV4ServersSeen200ResponseInnerLastPacketFieldsOptionsInner[]|null $options Additional DHCP options of the packet.
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }
        $this->container['options'] = $options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


