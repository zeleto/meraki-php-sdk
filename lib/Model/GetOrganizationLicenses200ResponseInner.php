<?php
/**
 * GetOrganizationLicenses200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Meraki Dashboard API
 *
 * A RESTful API to programmatically manage and monitor Cisco Meraki networks at scale.  > Date: 02 April, 2025 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com)
 *
 * The version of the OpenAPI document: 1.57.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Meraki\Model;

use \ArrayAccess;
use \Meraki\ObjectSerializer;

/**
 * GetOrganizationLicenses200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  Meraki
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetOrganizationLicenses200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getOrganizationLicenses_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'license_type' => 'string',
        'license_key' => 'string',
        'order_number' => 'string',
        'device_serial' => 'string',
        'network_id' => 'string',
        'state' => 'string',
        'seat_count' => 'int',
        'total_duration_in_days' => 'int',
        'duration_in_days' => 'int',
        'permanently_queued_licenses' => '\Meraki\Model\GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner[]',
        'claim_date' => 'string',
        'activation_date' => 'string',
        'expiration_date' => 'string',
        'head_license_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'license_type' => null,
        'license_key' => null,
        'order_number' => null,
        'device_serial' => null,
        'network_id' => null,
        'state' => null,
        'seat_count' => null,
        'total_duration_in_days' => null,
        'duration_in_days' => null,
        'permanently_queued_licenses' => null,
        'claim_date' => null,
        'activation_date' => null,
        'expiration_date' => null,
        'head_license_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'license_type' => false,
        'license_key' => false,
        'order_number' => false,
        'device_serial' => false,
        'network_id' => false,
        'state' => false,
        'seat_count' => false,
        'total_duration_in_days' => false,
        'duration_in_days' => false,
        'permanently_queued_licenses' => false,
        'claim_date' => false,
        'activation_date' => false,
        'expiration_date' => false,
        'head_license_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'license_type' => 'licenseType',
        'license_key' => 'licenseKey',
        'order_number' => 'orderNumber',
        'device_serial' => 'deviceSerial',
        'network_id' => 'networkId',
        'state' => 'state',
        'seat_count' => 'seatCount',
        'total_duration_in_days' => 'totalDurationInDays',
        'duration_in_days' => 'durationInDays',
        'permanently_queued_licenses' => 'permanentlyQueuedLicenses',
        'claim_date' => 'claimDate',
        'activation_date' => 'activationDate',
        'expiration_date' => 'expirationDate',
        'head_license_id' => 'headLicenseId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'license_type' => 'setLicenseType',
        'license_key' => 'setLicenseKey',
        'order_number' => 'setOrderNumber',
        'device_serial' => 'setDeviceSerial',
        'network_id' => 'setNetworkId',
        'state' => 'setState',
        'seat_count' => 'setSeatCount',
        'total_duration_in_days' => 'setTotalDurationInDays',
        'duration_in_days' => 'setDurationInDays',
        'permanently_queued_licenses' => 'setPermanentlyQueuedLicenses',
        'claim_date' => 'setClaimDate',
        'activation_date' => 'setActivationDate',
        'expiration_date' => 'setExpirationDate',
        'head_license_id' => 'setHeadLicenseId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'license_type' => 'getLicenseType',
        'license_key' => 'getLicenseKey',
        'order_number' => 'getOrderNumber',
        'device_serial' => 'getDeviceSerial',
        'network_id' => 'getNetworkId',
        'state' => 'getState',
        'seat_count' => 'getSeatCount',
        'total_duration_in_days' => 'getTotalDurationInDays',
        'duration_in_days' => 'getDurationInDays',
        'permanently_queued_licenses' => 'getPermanentlyQueuedLicenses',
        'claim_date' => 'getClaimDate',
        'activation_date' => 'getActivationDate',
        'expiration_date' => 'getExpirationDate',
        'head_license_id' => 'getHeadLicenseId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_ACTIVE = 'active';
    public const STATE_EXPIRED = 'expired';
    public const STATE_EXPIRING = 'expiring';
    public const STATE_RECENTLY_QUEUED = 'recentlyQueued';
    public const STATE_UNUSED = 'unused';
    public const STATE_UNUSED_ACTIVE = 'unusedActive';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_EXPIRED,
            self::STATE_EXPIRING,
            self::STATE_RECENTLY_QUEUED,
            self::STATE_UNUSED,
            self::STATE_UNUSED_ACTIVE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('license_type', $data ?? [], null);
        $this->setIfExists('license_key', $data ?? [], null);
        $this->setIfExists('order_number', $data ?? [], null);
        $this->setIfExists('device_serial', $data ?? [], null);
        $this->setIfExists('network_id', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('seat_count', $data ?? [], null);
        $this->setIfExists('total_duration_in_days', $data ?? [], null);
        $this->setIfExists('duration_in_days', $data ?? [], null);
        $this->setIfExists('permanently_queued_licenses', $data ?? [], null);
        $this->setIfExists('claim_date', $data ?? [], null);
        $this->setIfExists('activation_date', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('head_license_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id License ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets license_type
     *
     * @return string|null
     */
    public function getLicenseType()
    {
        return $this->container['license_type'];
    }

    /**
     * Sets license_type
     *
     * @param string|null $license_type License type
     *
     * @return self
     */
    public function setLicenseType($license_type)
    {
        if (is_null($license_type)) {
            throw new \InvalidArgumentException('non-nullable license_type cannot be null');
        }
        $this->container['license_type'] = $license_type;

        return $this;
    }

    /**
     * Gets license_key
     *
     * @return string|null
     */
    public function getLicenseKey()
    {
        return $this->container['license_key'];
    }

    /**
     * Sets license_key
     *
     * @param string|null $license_key License key
     *
     * @return self
     */
    public function setLicenseKey($license_key)
    {
        if (is_null($license_key)) {
            throw new \InvalidArgumentException('non-nullable license_key cannot be null');
        }
        $this->container['license_key'] = $license_key;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string|null
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string|null $order_number Order number
     *
     * @return self
     */
    public function setOrderNumber($order_number)
    {
        if (is_null($order_number)) {
            throw new \InvalidArgumentException('non-nullable order_number cannot be null');
        }
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets device_serial
     *
     * @return string|null
     */
    public function getDeviceSerial()
    {
        return $this->container['device_serial'];
    }

    /**
     * Sets device_serial
     *
     * @param string|null $device_serial Serial number of the device the license is assigned to
     *
     * @return self
     */
    public function setDeviceSerial($device_serial)
    {
        if (is_null($device_serial)) {
            throw new \InvalidArgumentException('non-nullable device_serial cannot be null');
        }
        $this->container['device_serial'] = $device_serial;

        return $this;
    }

    /**
     * Gets network_id
     *
     * @return string|null
     */
    public function getNetworkId()
    {
        return $this->container['network_id'];
    }

    /**
     * Sets network_id
     *
     * @param string|null $network_id ID of the network the license is assigned to
     *
     * @return self
     */
    public function setNetworkId($network_id)
    {
        if (is_null($network_id)) {
            throw new \InvalidArgumentException('non-nullable network_id cannot be null');
        }
        $this->container['network_id'] = $network_id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state The state of the license. All queued licenses have a status of `recentlyQueued`.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets seat_count
     *
     * @return int|null
     */
    public function getSeatCount()
    {
        return $this->container['seat_count'];
    }

    /**
     * Sets seat_count
     *
     * @param int|null $seat_count The number of seats of the license. Only applicable to SM licenses.
     *
     * @return self
     */
    public function setSeatCount($seat_count)
    {
        if (is_null($seat_count)) {
            throw new \InvalidArgumentException('non-nullable seat_count cannot be null');
        }
        $this->container['seat_count'] = $seat_count;

        return $this;
    }

    /**
     * Gets total_duration_in_days
     *
     * @return int|null
     */
    public function getTotalDurationInDays()
    {
        return $this->container['total_duration_in_days'];
    }

    /**
     * Sets total_duration_in_days
     *
     * @param int|null $total_duration_in_days The duration of the license plus all permanently queued licenses associated with it
     *
     * @return self
     */
    public function setTotalDurationInDays($total_duration_in_days)
    {
        if (is_null($total_duration_in_days)) {
            throw new \InvalidArgumentException('non-nullable total_duration_in_days cannot be null');
        }
        $this->container['total_duration_in_days'] = $total_duration_in_days;

        return $this;
    }

    /**
     * Gets duration_in_days
     *
     * @return int|null
     */
    public function getDurationInDays()
    {
        return $this->container['duration_in_days'];
    }

    /**
     * Sets duration_in_days
     *
     * @param int|null $duration_in_days The duration of the individual license
     *
     * @return self
     */
    public function setDurationInDays($duration_in_days)
    {
        if (is_null($duration_in_days)) {
            throw new \InvalidArgumentException('non-nullable duration_in_days cannot be null');
        }
        $this->container['duration_in_days'] = $duration_in_days;

        return $this;
    }

    /**
     * Gets permanently_queued_licenses
     *
     * @return \Meraki\Model\GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner[]|null
     */
    public function getPermanentlyQueuedLicenses()
    {
        return $this->container['permanently_queued_licenses'];
    }

    /**
     * Sets permanently_queued_licenses
     *
     * @param \Meraki\Model\GetOrganizationLicenses200ResponseInnerPermanentlyQueuedLicensesInner[]|null $permanently_queued_licenses DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
     *
     * @return self
     */
    public function setPermanentlyQueuedLicenses($permanently_queued_licenses)
    {
        if (is_null($permanently_queued_licenses)) {
            throw new \InvalidArgumentException('non-nullable permanently_queued_licenses cannot be null');
        }
        $this->container['permanently_queued_licenses'] = $permanently_queued_licenses;

        return $this;
    }

    /**
     * Gets claim_date
     *
     * @return string|null
     */
    public function getClaimDate()
    {
        return $this->container['claim_date'];
    }

    /**
     * Sets claim_date
     *
     * @param string|null $claim_date The date the license was claimed into the organization
     *
     * @return self
     */
    public function setClaimDate($claim_date)
    {
        if (is_null($claim_date)) {
            throw new \InvalidArgumentException('non-nullable claim_date cannot be null');
        }
        $this->container['claim_date'] = $claim_date;

        return $this;
    }

    /**
     * Gets activation_date
     *
     * @return string|null
     */
    public function getActivationDate()
    {
        return $this->container['activation_date'];
    }

    /**
     * Sets activation_date
     *
     * @param string|null $activation_date The date the license started burning
     *
     * @return self
     */
    public function setActivationDate($activation_date)
    {
        if (is_null($activation_date)) {
            throw new \InvalidArgumentException('non-nullable activation_date cannot be null');
        }
        $this->container['activation_date'] = $activation_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string|null $expiration_date The date the license will expire
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets head_license_id
     *
     * @return string|null
     */
    public function getHeadLicenseId()
    {
        return $this->container['head_license_id'];
    }

    /**
     * Sets head_license_id
     *
     * @param string|null $head_license_id The id of the head license this license is queued behind. If there is no head license, it returns nil.
     *
     * @return self
     */
    public function setHeadLicenseId($head_license_id)
    {
        if (is_null($head_license_id)) {
            throw new \InvalidArgumentException('non-nullable head_license_id cannot be null');
        }
        $this->container['head_license_id'] = $head_license_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


